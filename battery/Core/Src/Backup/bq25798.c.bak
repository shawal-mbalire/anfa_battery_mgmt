/*
 * bq25798.c
 *
 *  Created on: Aug 21, 2025
 *      Author: shawal
 */
#include "bq25798.h"

uint8_t  BQ25798_init(BQ25798 *device, I2C_HandleTypeDef *i2cHandle){

	// set struct params
	device -> i2cHandle   = i2cHandle;

	uint8_t errorsNumber = 0;
	HAL_StatusTypeDef status;

	// check device part number
	uint8_t registerData;
	status = BQ25798_ReadRegister(device, BQ25798_PART_INFO_REG_VALUE, &registerData);
	errorsNumber += (status != HAL_OK);
	if (registerData != BQ25798_PART_INFO_REG_VALUE) return 255;

	registerData = 0xD1; // cells 4s, Reacharge voltage deglitch 256ms, recharge voltage 100mV below VREG
	BQ25798_WriteRegister(device,BQ25798_REG_RECHARGE_CTRL, &registerData);
	registerData = 0x10; // disable watchdog, enable host mode, i2c wathdog reset on
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGER_CTRL_1, &registerData);

    // TODO: set limits
    // TODO: configure ADCs and enable other things


	return errorsNumber;
}

// Read input voltage and current
HAL_StatusTypeDef readBusVoltage(BQ25798 *device){
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_VBUS_ADC, registerData, 2); // bit resolution 1mV
	uint16_t voltageRaw = (registerData[0] << 8) | registerData[1];
	device->voltageBus = voltageRaw; // in mV
	return status;
}
HAL_StatusTypeDef readBusCurrent(BQ25798 *device){
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_IBUS_ADC, registerData, 2); // bit resolution 1mV
	uint16_t currentRaw = (registerData[0] << 8) | registerData[1];
	device->currentBus = currentRaw; // in mA
	return status;
}
// Read output/ battery voltage and current

HAL_StatusTypeDef readBatterryVoltage(BQ25798 *device){
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_VBAT_ADC, registerData, 2); // bit resolution 1mV
	uint16_t voltageRaw = (registerData[0] << 8) | registerData[1];
	device->voltageBattery = voltageRaw; // in mV
	return status;
}
HAL_StatusTypeDef readBatterryCurrent(BQ25798 *device){
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_IBAT_ADC, registerData, 2); // bit resolution 1mA
	uint16_t currentRaw = (registerData[0] << 8) | registerData[1];
	device->currentBattery = currentRaw; // in mA
	return status;
}

// LOW LEVEL FUNCTIONS

HAL_StatusTypeDef BQ25798_ReadRegister(BQ25798 *device, uint8_t reg, uint8_t *data){
	return HAL_I2C_Mem_Read(
			device -> i2cHandle,
			BQ25798_I2C_ADDRESS,
			reg,
			I2C_MEMADD_SIZE_8BIT,
			data,
			1,
			HAL_MAX_DELAY
	);
}

HAL_StatusTypeDef BQ25798_ReadRegisters(BQ25798 *device, uint8_t reg, uint8_t *data, uint8_t length){
	return HAL_I2C_Mem_Read(
			device -> i2cHandle,
			BQ25798_I2C_ADDRESS,
			reg,
			I2C_MEMADD_SIZE_8BIT,
			data,
			length,
			HAL_MAX_DELAY
	);

}
HAL_StatusTypeDef BQ25798_WriteRegister(BQ25798 *device, uint8_t reg, uint8_t *data){
	return HAL_I2C_Mem_Write(
			device -> i2cHandle,
			BQ25798_I2C_ADDRESS,
			reg,
			I2C_MEMADD_SIZE_8BIT,
			data,
			1,
			HAL_MAX_DELAY
	);

}
