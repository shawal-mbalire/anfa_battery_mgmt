
battery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003670  08003670  00004670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b0  080036b0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080036b0  080036b0  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080036b0  080036b0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b0  080036b0  000046b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036b4  080036b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080036c4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080036c4  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b17b  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f06  00000000  00000000  000101af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  000120b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000874  00000000  00000000  00012be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b201  00000000  00000000  0001345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddeb  00000000  00000000  0002e65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abb37  00000000  00000000  0003c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7f7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  000e7fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ea6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003658 	.word	0x08003658

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003658 	.word	0x08003658

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <BQ25798_init>:
 *  Created on: Aug 21, 2025
 *      Author: shawal
 */
#include "bq25798.h"

uint8_t  BQ25798_init(BQ25798 *device, I2C_HandleTypeDef *i2cHandle){
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]

	// set struct params
	device -> i2cHandle   = i2cHandle;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	601a      	str	r2, [r3, #0]

	uint8_t errorsNumber = 0;
 800022c:	251f      	movs	r5, #31
 800022e:	197b      	adds	r3, r7, r5
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	// check device part number
	uint8_t registerData;
	status = BQ25798_ReadRegister(device, BQ25798_PART_INFO_REG_VALUE, &registerData);
 8000234:	261e      	movs	r6, #30
 8000236:	19bc      	adds	r4, r7, r6
 8000238:	231d      	movs	r3, #29
 800023a:	18fa      	adds	r2, r7, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2131      	movs	r1, #49	@ 0x31
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fb24 	bl	800088e <BQ25798_ReadRegister>
 8000246:	0003      	movs	r3, r0
 8000248:	7023      	strb	r3, [r4, #0]
	errorsNumber += (status != HAL_OK);
 800024a:	19bb      	adds	r3, r7, r6
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	1e5a      	subs	r2, r3, #1
 8000250:	4193      	sbcs	r3, r2
 8000252:	b2db      	uxtb	r3, r3
 8000254:	0019      	movs	r1, r3
 8000256:	197b      	adds	r3, r7, r5
 8000258:	197a      	adds	r2, r7, r5
 800025a:	7812      	ldrb	r2, [r2, #0]
 800025c:	188a      	adds	r2, r1, r2
 800025e:	701a      	strb	r2, [r3, #0]
	if (registerData != BQ25798_PART_INFO_REG_VALUE) return 255;
 8000260:	231d      	movs	r3, #29
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b31      	cmp	r3, #49	@ 0x31
 8000268:	d001      	beq.n	800026e <BQ25798_init+0x52>
 800026a:	23ff      	movs	r3, #255	@ 0xff
 800026c:	e063      	b.n	8000336 <BQ25798_init+0x11a>

	registerData = 0xD1; // cells 4s, Reacharge voltage deglitch 256ms, recharge voltage 100mV below VREG
 800026e:	241d      	movs	r4, #29
 8000270:	193b      	adds	r3, r7, r4
 8000272:	22d1      	movs	r2, #209	@ 0xd1
 8000274:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device,BQ25798_REG_RECHARGE_CTRL, &registerData);
 8000276:	193a      	adds	r2, r7, r4
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	210a      	movs	r1, #10
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fb4b 	bl	8000918 <BQ25798_WriteRegister>
	registerData = 0x10; // disable watchdog, enable host mode, i2c wathdog reset on
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2210      	movs	r2, #16
 8000286:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGER_CTRL_1, &registerData);
 8000288:	193a      	adds	r2, r7, r4
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2110      	movs	r1, #16
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fb42 	bl	8000918 <BQ25798_WriteRegister>

    // set limits Implemented at POR power on reset
	BQ25798_WriteRegister(device, BQ25798_REG_MIN_SYS_VOLTAGE, (uint8_t[]){0x70}); // 14500mV
 8000294:	211c      	movs	r1, #28
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2270      	movs	r2, #112	@ 0x70
 800029a:	701a      	strb	r2, [r3, #0]
 800029c:	187a      	adds	r2, r7, r1
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fb38 	bl	8000918 <BQ25798_WriteRegister>
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGE_VOLTAGE_LIMIT, (uint8_t[]){0x05B4}); // 14600mV
 80002a8:	2118      	movs	r1, #24
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	22b4      	movs	r2, #180	@ 0xb4
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	187a      	adds	r2, r7, r1
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fb2e 	bl	8000918 <BQ25798_WriteRegister>
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGE_CURRENT_LIMIT, (uint8_t[]){0x03F4}); // 3650mA
 80002bc:	2114      	movs	r1, #20
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	22f4      	movs	r2, #244	@ 0xf4
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	187a      	adds	r2, r7, r1
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2103      	movs	r1, #3
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fb24 	bl	8000918 <BQ25798_WriteRegister>
	BQ25798_WriteRegister(device, BQ25798_REG_INPUT_VOLTAGE_LIMIT, (uint8_t[]){0x24}); // 3600mV
 80002d0:	2110      	movs	r1, #16
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2224      	movs	r2, #36	@ 0x24
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	187a      	adds	r2, r7, r1
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2105      	movs	r1, #5
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fb1a 	bl	8000918 <BQ25798_WriteRegister>
	BQ25798_WriteRegister(device, BQ25798_REG_INPUT_CURRENT_LIMIT, (uint8_t[]){0x14A}); //3300mA
 80002e4:	210c      	movs	r1, #12
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	224a      	movs	r2, #74	@ 0x4a
 80002ea:	701a      	strb	r2, [r3, #0]
 80002ec:	187a      	adds	r2, r7, r1
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2106      	movs	r1, #6
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fb10 	bl	8000918 <BQ25798_WriteRegister>

    // TODO: configure ADCs and enable other things
	// all ADCs on by default
	// precharge current 120mA
	BQ25798_WriteRegister(device, BQ25798_REG_PRECHARGE_CTRL, (uint8_t[]){0x03});
 80002f8:	2108      	movs	r1, #8
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2203      	movs	r2, #3
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	187a      	adds	r2, r7, r1
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2108      	movs	r1, #8
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fb06 	bl	8000918 <BQ25798_WriteRegister>
	// charger control 0 ICO and HiZ on
	registerData = 0x8C; // enable charger, HIZ off, IIN
 800030c:	193b      	adds	r3, r7, r4
 800030e:	228c      	movs	r2, #140	@ 0x8c
 8000310:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGER_CTRL_0, &registerData);
 8000312:	193a      	adds	r2, r7, r4
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	210f      	movs	r1, #15
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fafd 	bl	8000918 <BQ25798_WriteRegister>
	// ADC control
	registerData = 0x80; // all ADCs on
 800031e:	193b      	adds	r3, r7, r4
 8000320:	2280      	movs	r2, #128	@ 0x80
 8000322:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_ADC_CTRL, &registerData);
 8000324:	193a      	adds	r2, r7, r4
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	212e      	movs	r1, #46	@ 0x2e
 800032a:	0018      	movs	r0, r3
 800032c:	f000 faf4 	bl	8000918 <BQ25798_WriteRegister>


	return errorsNumber;
 8000330:	231f      	movs	r3, #31
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	781b      	ldrb	r3, [r3, #0]
}
 8000336:	0018      	movs	r0, r3
 8000338:	46bd      	mov	sp, r7
 800033a:	b009      	add	sp, #36	@ 0x24
 800033c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800033e <readChargerStatus0>:

// Read and interpret REG1B_Charger_Status_0
HAL_StatusTypeDef readChargerStatus0(BQ25798 *device, uint8_t *status){
 800033e:	b5b0      	push	{r4, r5, r7, lr}
 8000340:	b084      	sub	sp, #16
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_0, status);
 8000348:	250f      	movs	r5, #15
 800034a:	197c      	adds	r4, r7, r5
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	211b      	movs	r1, #27
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fa9b 	bl	800088e <BQ25798_ReadRegister>
 8000358:	0003      	movs	r3, r0
 800035a:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 800035c:	197b      	adds	r3, r7, r5
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d139      	bne.n	80003d8 <readChargerStatus0+0x9a>
        device->chargerStatus0.iindpm_stat       = (*status >> 7) & 0x01;
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	09db      	lsrs	r3, r3, #7
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	731a      	strb	r2, [r3, #12]
        device->chargerStatus0.vindpm_stat       = (*status >> 6) & 0x01;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	099b      	lsrs	r3, r3, #6
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2201      	movs	r2, #1
 800037a:	4013      	ands	r3, r2
 800037c:	b2da      	uxtb	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	735a      	strb	r2, [r3, #13]
        device->chargerStatus0.wd_stat           = (*status >> 5) & 0x01;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	095b      	lsrs	r3, r3, #5
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2201      	movs	r2, #1
 800038c:	4013      	ands	r3, r2
 800038e:	b2da      	uxtb	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	739a      	strb	r2, [r3, #14]
        device->chargerStatus0.pg_stat           = (*status >> 3) & 0x01;
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	08db      	lsrs	r3, r3, #3
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2201      	movs	r2, #1
 800039e:	4013      	ands	r3, r2
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	73da      	strb	r2, [r3, #15]
        device->chargerStatus0.ac2_present_stat  = (*status >> 2) & 0x01;
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	089b      	lsrs	r3, r3, #2
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	2201      	movs	r2, #1
 80003b0:	4013      	ands	r3, r2
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	741a      	strb	r2, [r3, #16]
        device->chargerStatus0.ac1_present_stat  = (*status >> 1) & 0x01;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	085b      	lsrs	r3, r3, #1
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	2201      	movs	r2, #1
 80003c2:	4013      	ands	r3, r2
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	745a      	strb	r2, [r3, #17]
        device->chargerStatus0.vbus_present_stat = (*status >> 0) & 0x01;
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2201      	movs	r2, #1
 80003d0:	4013      	ands	r3, r2
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	749a      	strb	r2, [r3, #18]
    }
    return ret_val;
 80003d8:	230f      	movs	r3, #15
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	781b      	ldrb	r3, [r3, #0]
}
 80003de:	0018      	movs	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b004      	add	sp, #16
 80003e4:	bdb0      	pop	{r4, r5, r7, pc}

080003e6 <readChargerStatus1>:

// Read and interpret REG1C_Charger_Status_1
HAL_StatusTypeDef readChargerStatus1(BQ25798 *device, uint8_t *status){
 80003e6:	b5b0      	push	{r4, r5, r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_1, status);
 80003f0:	250f      	movs	r5, #15
 80003f2:	197c      	adds	r4, r7, r5
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	211c      	movs	r1, #28
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fa47 	bl	800088e <BQ25798_ReadRegister>
 8000400:	0003      	movs	r3, r0
 8000402:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000404:	197b      	adds	r3, r7, r5
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d115      	bne.n	8000438 <readChargerStatus1+0x52>
        device->chargerStatus1.chg_stat        = (*status >> 5) & 0x07;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	095b      	lsrs	r3, r3, #5
 8000412:	b2da      	uxtb	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	74da      	strb	r2, [r3, #19]
        device->chargerStatus1.vbus_stat       = (*status >> 1) & 0x0F;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	085b      	lsrs	r3, r3, #1
 800041e:	b2db      	uxtb	r3, r3
 8000420:	220f      	movs	r2, #15
 8000422:	4013      	ands	r3, r2
 8000424:	b2da      	uxtb	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	751a      	strb	r2, [r3, #20]
        device->chargerStatus1.bc12_done_stat  = (*status >> 0) & 0x01;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2201      	movs	r2, #1
 8000430:	4013      	ands	r3, r2
 8000432:	b2da      	uxtb	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	755a      	strb	r2, [r3, #21]
    }
    return ret_val;
 8000438:	230f      	movs	r3, #15
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	781b      	ldrb	r3, [r3, #0]
}
 800043e:	0018      	movs	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	b004      	add	sp, #16
 8000444:	bdb0      	pop	{r4, r5, r7, pc}

08000446 <readChargerStatus2>:

// Read and interpret REG1D_Charger_Status_2
HAL_StatusTypeDef readChargerStatus2(BQ25798 *device, uint8_t *status){
 8000446:	b5b0      	push	{r4, r5, r7, lr}
 8000448:	b084      	sub	sp, #16
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_2, status);
 8000450:	250f      	movs	r5, #15
 8000452:	197c      	adds	r4, r7, r5
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	211d      	movs	r1, #29
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fa17 	bl	800088e <BQ25798_ReadRegister>
 8000460:	0003      	movs	r3, r0
 8000462:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000464:	197b      	adds	r3, r7, r5
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d11e      	bne.n	80004aa <readChargerStatus2+0x64>
        device->chargerStatus2.ico_stat          = (*status >> 6) & 0x03;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	099b      	lsrs	r3, r3, #6
 8000472:	b2da      	uxtb	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	759a      	strb	r2, [r3, #22]
        device->chargerStatus2.treg_stat         = (*status >> 2) & 0x01;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	089b      	lsrs	r3, r3, #2
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2201      	movs	r2, #1
 8000482:	4013      	ands	r3, r2
 8000484:	b2da      	uxtb	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	75da      	strb	r2, [r3, #23]
        device->chargerStatus2.dpdm_stat         = (*status >> 1) & 0x01;
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	085b      	lsrs	r3, r3, #1
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2201      	movs	r2, #1
 8000494:	4013      	ands	r3, r2
 8000496:	b2da      	uxtb	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	761a      	strb	r2, [r3, #24]
        device->chargerStatus2.vbat_present_stat = (*status >> 0) & 0x01;
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2201      	movs	r2, #1
 80004a2:	4013      	ands	r3, r2
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	765a      	strb	r2, [r3, #25]
    }
    return ret_val;
 80004aa:	230f      	movs	r3, #15
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	781b      	ldrb	r3, [r3, #0]
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bdb0      	pop	{r4, r5, r7, pc}

080004b8 <readChargerStatus3>:

// Read and interpret REG1E_Charger_Status_3
HAL_StatusTypeDef readChargerStatus3(BQ25798 *device, uint8_t *status){
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_3, status);
 80004c2:	250f      	movs	r5, #15
 80004c4:	197c      	adds	r4, r7, r5
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	211e      	movs	r1, #30
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 f9de 	bl	800088e <BQ25798_ReadRegister>
 80004d2:	0003      	movs	r3, r0
 80004d4:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 80004d6:	197b      	adds	r3, r7, r5
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d13c      	bne.n	8000558 <readChargerStatus3+0xa0>
        device->chargerStatus3.acrb2_stat      = (*status >> 7) & 0x01;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	09db      	lsrs	r3, r3, #7
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	769a      	strb	r2, [r3, #26]
        device->chargerStatus3.acrb1_stat      = (*status >> 6) & 0x01;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	099b      	lsrs	r3, r3, #6
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2201      	movs	r2, #1
 80004f4:	4013      	ands	r3, r2
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	76da      	strb	r2, [r3, #27]
        device->chargerStatus3.adc_done_stat   = (*status >> 5) & 0x01;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	095b      	lsrs	r3, r3, #5
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2201      	movs	r2, #1
 8000506:	4013      	ands	r3, r2
 8000508:	b2da      	uxtb	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	771a      	strb	r2, [r3, #28]
        device->chargerStatus3.vsys_stat       = (*status >> 4) & 0x01;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	091b      	lsrs	r3, r3, #4
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	775a      	strb	r2, [r3, #29]
        device->chargerStatus3.chg_tmr_stat    = (*status >> 3) & 0x01;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	08db      	lsrs	r3, r3, #3
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2201      	movs	r2, #1
 800052a:	4013      	ands	r3, r2
 800052c:	b2da      	uxtb	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	779a      	strb	r2, [r3, #30]
        device->chargerStatus3.trichg_tmr_stat = (*status >> 2) & 0x01;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	089b      	lsrs	r3, r3, #2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	b2da      	uxtb	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	77da      	strb	r2, [r3, #31]
        device->chargerStatus3.prechg_tmr_stat = (*status >> 1) & 0x01;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	085b      	lsrs	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2201      	movs	r2, #1
 800054e:	4013      	ands	r3, r2
 8000550:	b2d9      	uxtb	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2220      	movs	r2, #32
 8000556:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 8000558:	230f      	movs	r3, #15
 800055a:	18fb      	adds	r3, r7, r3
 800055c:	781b      	ldrb	r3, [r3, #0]
}
 800055e:	0018      	movs	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	b004      	add	sp, #16
 8000564:	bdb0      	pop	{r4, r5, r7, pc}

08000566 <readChargerStatus4>:

// Read and interpret REG1F_Charger_Status_4
HAL_StatusTypeDef readChargerStatus4(BQ25798 *device, uint8_t *status){
 8000566:	b5b0      	push	{r4, r5, r7, lr}
 8000568:	b084      	sub	sp, #16
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_4, status);
 8000570:	250f      	movs	r5, #15
 8000572:	197c      	adds	r4, r7, r5
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	211f      	movs	r1, #31
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f987 	bl	800088e <BQ25798_ReadRegister>
 8000580:	0003      	movs	r3, r0
 8000582:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000584:	197b      	adds	r3, r7, r5
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d12f      	bne.n	80005ec <readChargerStatus4+0x86>
        device->chargerStatus4.vbatotg_low_stat = (*status >> 4) & 0x01;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	091b      	lsrs	r3, r3, #4
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2201      	movs	r2, #1
 8000596:	4013      	ands	r3, r2
 8000598:	b2d9      	uxtb	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2221      	movs	r2, #33	@ 0x21
 800059e:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_cold_stat     = (*status >> 3) & 0x01;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	08db      	lsrs	r3, r3, #3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2201      	movs	r2, #1
 80005aa:	4013      	ands	r3, r2
 80005ac:	b2d9      	uxtb	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2222      	movs	r2, #34	@ 0x22
 80005b2:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_cool_stat     = (*status >> 2) & 0x01;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	089b      	lsrs	r3, r3, #2
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2201      	movs	r2, #1
 80005be:	4013      	ands	r3, r2
 80005c0:	b2d9      	uxtb	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2223      	movs	r2, #35	@ 0x23
 80005c6:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_warm_stat     = (*status >> 1) & 0x01;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	085b      	lsrs	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2201      	movs	r2, #1
 80005d2:	4013      	ands	r3, r2
 80005d4:	b2d9      	uxtb	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2224      	movs	r2, #36	@ 0x24
 80005da:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_hot_stat      = (*status >> 0) & 0x01;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4013      	ands	r3, r2
 80005e4:	b2d9      	uxtb	r1, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2225      	movs	r2, #37	@ 0x25
 80005ea:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 80005ec:	230f      	movs	r3, #15
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	781b      	ldrb	r3, [r3, #0]
}
 80005f2:	0018      	movs	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b004      	add	sp, #16
 80005f8:	bdb0      	pop	{r4, r5, r7, pc}

080005fa <readFaultStatus0>:

// Read and interpret REG20_FAULT_Status_0
HAL_StatusTypeDef readFaultStatus0(BQ25798 *device, uint8_t *status){
 80005fa:	b5b0      	push	{r4, r5, r7, lr}
 80005fc:	b084      	sub	sp, #16
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_FAULT_STATUS_0, status);
 8000604:	250f      	movs	r5, #15
 8000606:	197c      	adds	r4, r7, r5
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2120      	movs	r1, #32
 800060e:	0018      	movs	r0, r3
 8000610:	f000 f93d 	bl	800088e <BQ25798_ReadRegister>
 8000614:	0003      	movs	r3, r0
 8000616:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000618:	197b      	adds	r3, r7, r5
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d14a      	bne.n	80006b6 <readFaultStatus0+0xbc>
        device->faultStatus0.ibat_reg_stat  = (*status >> 7) & 0x01;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	09db      	lsrs	r3, r3, #7
 8000626:	b2d9      	uxtb	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2226      	movs	r2, #38	@ 0x26
 800062c:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vbus_ovp_stat  = (*status >> 6) & 0x01;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	099b      	lsrs	r3, r3, #6
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	b2d9      	uxtb	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2227      	movs	r2, #39	@ 0x27
 8000640:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vbat_ovp_stat  = (*status >> 5) & 0x01;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2201      	movs	r2, #1
 800064c:	4013      	ands	r3, r2
 800064e:	b2d9      	uxtb	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2228      	movs	r2, #40	@ 0x28
 8000654:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.ibus_ocp_stat  = (*status >> 4) & 0x01;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	091b      	lsrs	r3, r3, #4
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2201      	movs	r2, #1
 8000660:	4013      	ands	r3, r2
 8000662:	b2d9      	uxtb	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2229      	movs	r2, #41	@ 0x29
 8000668:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.ibat_ocp_stat  = (*status >> 3) & 0x01;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	b2d9      	uxtb	r1, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	222a      	movs	r2, #42	@ 0x2a
 800067c:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.conv_ocp_stat  = (*status >> 2) & 0x01;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	b2d9      	uxtb	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	222b      	movs	r2, #43	@ 0x2b
 8000690:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vac2_ovp_stat  = (*status >> 1) & 0x01;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	085b      	lsrs	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	b2d9      	uxtb	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	222c      	movs	r2, #44	@ 0x2c
 80006a4:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vac1_ovp_stat  = (*status >> 0) & 0x01;
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	b2d9      	uxtb	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	222d      	movs	r2, #45	@ 0x2d
 80006b4:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 80006b6:	230f      	movs	r3, #15
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	781b      	ldrb	r3, [r3, #0]
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	b004      	add	sp, #16
 80006c2:	bdb0      	pop	{r4, r5, r7, pc}

080006c4 <readFaultStatus1>:

// Read and interpret REG21_FAULT_Status_1
HAL_StatusTypeDef readFaultStatus1(BQ25798 *device, uint8_t *status){
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_FAULT_STATUS_1, status);
 80006ce:	250f      	movs	r5, #15
 80006d0:	197c      	adds	r4, r7, r5
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2121      	movs	r1, #33	@ 0x21
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 f8d8 	bl	800088e <BQ25798_ReadRegister>
 80006de:	0003      	movs	r3, r0
 80006e0:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 80006e2:	197b      	adds	r3, r7, r5
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d12e      	bne.n	8000748 <readFaultStatus1+0x84>
        device->faultStatus1.vsys_short_stat = (*status >> 7) & 0x01;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	09db      	lsrs	r3, r3, #7
 80006f0:	b2d9      	uxtb	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	222e      	movs	r2, #46	@ 0x2e
 80006f6:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.vsys_ovp_stat   = (*status >> 6) & 0x01;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	099b      	lsrs	r3, r3, #6
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2201      	movs	r2, #1
 8000702:	4013      	ands	r3, r2
 8000704:	b2d9      	uxtb	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	222f      	movs	r2, #47	@ 0x2f
 800070a:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.otg_ovp_stat    = (*status >> 5) & 0x01;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	095b      	lsrs	r3, r3, #5
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2201      	movs	r2, #1
 8000716:	4013      	ands	r3, r2
 8000718:	b2d9      	uxtb	r1, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2230      	movs	r2, #48	@ 0x30
 800071e:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.otg_uvp_stat    = (*status >> 4) & 0x01;
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	091b      	lsrs	r3, r3, #4
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2201      	movs	r2, #1
 800072a:	4013      	ands	r3, r2
 800072c:	b2d9      	uxtb	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2231      	movs	r2, #49	@ 0x31
 8000732:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.tshut_stat      = (*status >> 2) & 0x01;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	089b      	lsrs	r3, r3, #2
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2201      	movs	r2, #1
 800073e:	4013      	ands	r3, r2
 8000740:	b2d9      	uxtb	r1, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2232      	movs	r2, #50	@ 0x32
 8000746:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 8000748:	230f      	movs	r3, #15
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	781b      	ldrb	r3, [r3, #0]
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bdb0      	pop	{r4, r5, r7, pc}

08000756 <BQ25798_readBusVoltage>:

// Read input voltage and current
HAL_StatusTypeDef BQ25798_readBusVoltage(BQ25798 *device){
 8000756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000758:	b085      	sub	sp, #20
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_VBUS_ADC, registerData, 2); // bit resolution 1mV
 800075e:	260f      	movs	r6, #15
 8000760:	19bc      	adds	r4, r7, r6
 8000762:	2508      	movs	r5, #8
 8000764:	197a      	adds	r2, r7, r5
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	2302      	movs	r3, #2
 800076a:	2135      	movs	r1, #53	@ 0x35
 800076c:	f000 f8ad 	bl	80008ca <BQ25798_ReadRegisters>
 8000770:	0003      	movs	r3, r0
 8000772:	7023      	strb	r3, [r4, #0]
	uint16_t voltageRaw = (registerData[0] << 8) | registerData[1];
 8000774:	0029      	movs	r1, r5
 8000776:	187b      	adds	r3, r7, r1
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b21b      	sxth	r3, r3
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b21a      	sxth	r2, r3
 8000780:	187b      	adds	r3, r7, r1
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	b21b      	sxth	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b21a      	sxth	r2, r3
 800078a:	210c      	movs	r1, #12
 800078c:	187b      	adds	r3, r7, r1
 800078e:	801a      	strh	r2, [r3, #0]
	device->voltageBus = voltageRaw; // in mV
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	187a      	adds	r2, r7, r1
 8000794:	8812      	ldrh	r2, [r2, #0]
 8000796:	809a      	strh	r2, [r3, #4]
	return status;
 8000798:	19bb      	adds	r3, r7, r6
 800079a:	781b      	ldrb	r3, [r3, #0]
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b005      	add	sp, #20
 80007a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007a4 <BQ25798_readBusCurrent>:
HAL_StatusTypeDef BQ25798_readBusCurrent(BQ25798 *device){
 80007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_IBUS_ADC, registerData, 2); // bit resolution 1mV
 80007ac:	260f      	movs	r6, #15
 80007ae:	19bc      	adds	r4, r7, r6
 80007b0:	2508      	movs	r5, #8
 80007b2:	197a      	adds	r2, r7, r5
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	2302      	movs	r3, #2
 80007b8:	2131      	movs	r1, #49	@ 0x31
 80007ba:	f000 f886 	bl	80008ca <BQ25798_ReadRegisters>
 80007be:	0003      	movs	r3, r0
 80007c0:	7023      	strb	r3, [r4, #0]
	uint16_t currentRaw = (registerData[0] << 8) | registerData[1];
 80007c2:	0029      	movs	r1, r5
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	210c      	movs	r1, #12
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	801a      	strh	r2, [r3, #0]
	device->currentBus = currentRaw; // in mA
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	187a      	adds	r2, r7, r1
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	80da      	strh	r2, [r3, #6]
	return status;
 80007e6:	19bb      	adds	r3, r7, r6
 80007e8:	781b      	ldrb	r3, [r3, #0]
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b005      	add	sp, #20
 80007f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007f2 <BQ25798_readBatteryVoltage>:
// Read output/ battery voltage and current

HAL_StatusTypeDef BQ25798_readBatteryVoltage(BQ25798 *device){
 80007f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f4:	b085      	sub	sp, #20
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_VBAT_ADC, registerData, 2); // bit resolution 1mV
 80007fa:	260f      	movs	r6, #15
 80007fc:	19bc      	adds	r4, r7, r6
 80007fe:	2508      	movs	r5, #8
 8000800:	197a      	adds	r2, r7, r5
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	2302      	movs	r3, #2
 8000806:	213b      	movs	r1, #59	@ 0x3b
 8000808:	f000 f85f 	bl	80008ca <BQ25798_ReadRegisters>
 800080c:	0003      	movs	r3, r0
 800080e:	7023      	strb	r3, [r4, #0]
	uint16_t voltageRaw = (registerData[0] << 8) | registerData[1];
 8000810:	0029      	movs	r1, r5
 8000812:	187b      	adds	r3, r7, r1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21b      	sxth	r3, r3
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	187b      	adds	r3, r7, r1
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21a      	sxth	r2, r3
 8000826:	210c      	movs	r1, #12
 8000828:	187b      	adds	r3, r7, r1
 800082a:	801a      	strh	r2, [r3, #0]
	device->voltageBattery = voltageRaw; // in mV
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	187a      	adds	r2, r7, r1
 8000830:	8812      	ldrh	r2, [r2, #0]
 8000832:	811a      	strh	r2, [r3, #8]
	return status;
 8000834:	19bb      	adds	r3, r7, r6
 8000836:	781b      	ldrb	r3, [r3, #0]
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b005      	add	sp, #20
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000840 <BQ25798_readBatteryCurrent>:
HAL_StatusTypeDef BQ25798_readBatteryCurrent(BQ25798 *device){
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_IBAT_ADC, registerData, 2); // bit resolution 1mA
 8000848:	260f      	movs	r6, #15
 800084a:	19bc      	adds	r4, r7, r6
 800084c:	2508      	movs	r5, #8
 800084e:	197a      	adds	r2, r7, r5
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	2302      	movs	r3, #2
 8000854:	2133      	movs	r1, #51	@ 0x33
 8000856:	f000 f838 	bl	80008ca <BQ25798_ReadRegisters>
 800085a:	0003      	movs	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
	uint16_t currentRaw = (registerData[0] << 8) | registerData[1];
 800085e:	0029      	movs	r1, r5
 8000860:	187b      	adds	r3, r7, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b21b      	sxth	r3, r3
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b21a      	sxth	r2, r3
 800086a:	187b      	adds	r3, r7, r1
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21a      	sxth	r2, r3
 8000874:	210c      	movs	r1, #12
 8000876:	187b      	adds	r3, r7, r1
 8000878:	801a      	strh	r2, [r3, #0]
	device->currentBattery = currentRaw; // in mA
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	187a      	adds	r2, r7, r1
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	815a      	strh	r2, [r3, #10]
	return status;
 8000882:	19bb      	adds	r3, r7, r6
 8000884:	781b      	ldrb	r3, [r3, #0]
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b005      	add	sp, #20
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800088e <BQ25798_ReadRegister>:

// LOW LEVEL FUNCTIONS

HAL_StatusTypeDef BQ25798_ReadRegister(BQ25798 *device, uint8_t reg, uint8_t *data){
 800088e:	b590      	push	{r4, r7, lr}
 8000890:	b089      	sub	sp, #36	@ 0x24
 8000892:	af04      	add	r7, sp, #16
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	240b      	movs	r4, #11
 800089a:	193b      	adds	r3, r7, r4
 800089c:	1c0a      	adds	r2, r1, #0
 800089e:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	6818      	ldr	r0, [r3, #0]
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	2301      	movs	r3, #1
 80008ac:	425b      	negs	r3, r3
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	21d6      	movs	r1, #214	@ 0xd6
 80008bc:	f001 fa72 	bl	8001da4 <HAL_I2C_Mem_Read>
 80008c0:	0003      	movs	r3, r0
			I2C_MEMADD_SIZE_8BIT,
			data,
			1,
			HAL_MAX_DELAY
	);
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b005      	add	sp, #20
 80008c8:	bd90      	pop	{r4, r7, pc}

080008ca <BQ25798_ReadRegisters>:

HAL_StatusTypeDef BQ25798_ReadRegisters(BQ25798 *device, uint8_t reg, uint8_t *data, uint8_t length){
 80008ca:	b5b0      	push	{r4, r5, r7, lr}
 80008cc:	b088      	sub	sp, #32
 80008ce:	af04      	add	r7, sp, #16
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	0008      	movs	r0, r1
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	0019      	movs	r1, r3
 80008d8:	240b      	movs	r4, #11
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	1c02      	adds	r2, r0, #0
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	250a      	movs	r5, #10
 80008e2:	197b      	adds	r3, r7, r5
 80008e4:	1c0a      	adds	r2, r1, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b299      	uxth	r1, r3
 80008f2:	197b      	adds	r3, r7, r5
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	2201      	movs	r2, #1
 80008fa:	4252      	negs	r2, r2
 80008fc:	9202      	str	r2, [sp, #8]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	000a      	movs	r2, r1
 8000908:	21d6      	movs	r1, #214	@ 0xd6
 800090a:	f001 fa4b 	bl	8001da4 <HAL_I2C_Mem_Read>
 800090e:	0003      	movs	r3, r0
			data,
			length,
			HAL_MAX_DELAY
	);

}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b004      	add	sp, #16
 8000916:	bdb0      	pop	{r4, r5, r7, pc}

08000918 <BQ25798_WriteRegister>:
HAL_StatusTypeDef BQ25798_WriteRegister(BQ25798 *device, uint8_t reg, uint8_t *data){
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b089      	sub	sp, #36	@ 0x24
 800091c:	af04      	add	r7, sp, #16
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	240b      	movs	r4, #11
 8000924:	193b      	adds	r3, r7, r4
 8000926:	1c0a      	adds	r2, r1, #0
 8000928:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	193b      	adds	r3, r7, r4
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b29a      	uxth	r2, r3
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	9302      	str	r3, [sp, #8]
 800093a:	2301      	movs	r3, #1
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	21d6      	movs	r1, #214	@ 0xd6
 8000946:	f001 f8ff 	bl	8001b48 <HAL_I2C_Mem_Write>
 800094a:	0003      	movs	r3, r0
			data,
			1,
			HAL_MAX_DELAY
	);

}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b005      	add	sp, #20
 8000952:	bd90      	pop	{r4, r7, pc}

08000954 <u16_be>:
 * Each placeholder remains tagged in the header with TODO_VERIFY until confirmed.
 */
#include "bq76907.h"

/* -------- Internal Helper: Combine two bytes (MSB first) -------- */
static inline uint16_t u16_be(uint8_t hi, uint8_t lo){ return ((uint16_t)hi << 8) | lo; }
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	0002      	movs	r2, r0
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	701a      	strb	r2, [r3, #0]
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	1c0a      	adds	r2, r1, #0
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b21b      	sxth	r3, r3
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	b21a      	sxth	r2, r3
 8000970:	1dbb      	adds	r3, r7, #6
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}

08000984 <BQ76907_init>:
 * @brief Initialise BQ76907 driver context.
 * Performs a minimal communication test by reading the DEVICE_ID register.
 * NOTE: No configuration (protections / thresholds) is applied here yet.
 * @return 0 on success, non-zero error code (1 = I2C read failure).
 */
uint8_t BQ76907_init(BQ76907 *dev, I2C_HandleTypeDef *hi2c){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
    dev->i2cHandle = hi2c;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	601a      	str	r2, [r3, #0]

    // Basic: read device ID (placeholder register) for sanity
    uint8_t id = 0; // TODO: Replace with verified DEVICE_ID register address usage
 8000994:	210f      	movs	r1, #15
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
    if (BQ76907_ReadRegister(dev, BQ76907_REG_DEVICE_ID, &id) != HAL_OK){
 800099c:	187a      	adds	r2, r7, r1
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	210c      	movs	r1, #12
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f952 	bl	8000c4c <BQ76907_ReadRegister>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <BQ76907_init+0x2c>
        return 1; // comm error
 80009ac:	2301      	movs	r3, #1
 80009ae:	e000      	b.n	80009b2 <BQ76907_init+0x2e>

    // Enable ADC / measurements (placeholder control sequence)
    // TODO: Write verified ADC enable bits
    // BQ76907_WriteRegister(dev, BQ76907_REG_ADC_CONTROL, 0x01); // hypothetical

    return 0; // success
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}

080009ba <BQ76907_readSystemStatus>:

/**
 * @brief Read system status register and decode fault / ready bits.
 * Updates dev->status structure with parsed flags.
 */
HAL_StatusTypeDef BQ76907_readSystemStatus(BQ76907 *dev){
 80009ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
    uint8_t regVal;
    HAL_StatusTypeDef st = BQ76907_ReadRegister(dev, BQ76907_REG_SYS_STAT, &regVal);
 80009c2:	260f      	movs	r6, #15
 80009c4:	19bc      	adds	r4, r7, r6
 80009c6:	250e      	movs	r5, #14
 80009c8:	197a      	adds	r2, r7, r5
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2100      	movs	r1, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f93c 	bl	8000c4c <BQ76907_ReadRegister>
 80009d4:	0003      	movs	r3, r0
 80009d6:	7023      	strb	r3, [r4, #0]
    if (st == HAL_OK){
 80009d8:	19bb      	adds	r3, r7, r6
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d13c      	bne.n	8000a5a <BQ76907_readSystemStatus+0xa0>
        dev->status.cc_ready  = (regVal & BQ76907_SYS_STAT_CC_READY) ? 1:0;
 80009e0:	0029      	movs	r1, r5
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	09db      	lsrs	r3, r3, #7
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	749a      	strb	r2, [r3, #18]
        dev->status.dev_ready = (regVal & BQ76907_SYS_STAT_DEVICE_XREADY) ? 1:0;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	099b      	lsrs	r3, r3, #6
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	74da      	strb	r2, [r3, #19]
        dev->status.ov_fault  = (regVal & BQ76907_SYS_STAT_OV_FLAG) ? 1:0;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	095b      	lsrs	r3, r3, #5
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	751a      	strb	r2, [r3, #20]
        dev->status.uv_fault  = (regVal & BQ76907_SYS_STAT_UV_FLAG) ? 1:0;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	091b      	lsrs	r3, r3, #4
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	755a      	strb	r2, [r3, #21]
        dev->status.scd_fault = (regVal & BQ76907_SYS_STAT_SCD_FLAG)? 1:0;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	08db      	lsrs	r3, r3, #3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	759a      	strb	r2, [r3, #22]
        dev->status.ocd_fault = (regVal & BQ76907_SYS_STAT_OCD_FLAG)? 1:0;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	75da      	strb	r2, [r3, #23]
        dev->status.ot_fault  = (regVal & BQ76907_SYS_STAT_OVERTEMP_FLAG)?1:0;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	085b      	lsrs	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2201      	movs	r2, #1
 8000a52:	4013      	ands	r3, r2
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	761a      	strb	r2, [r3, #24]
    }
    return st;
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	18fb      	adds	r3, r7, r3
 8000a5e:	781b      	ldrb	r3, [r3, #0]
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b005      	add	sp, #20
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a68 <BQ76907_readCellVoltages>:

/**
 * @brief Read all configured cell voltage registers (assumes 5 cells placeholder).
 * Adjust loop bounds and base address arithmetic if variant differs.
 */
HAL_StatusTypeDef BQ76907_readCellVoltages(BQ76907 *dev){
 8000a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
    // Assumes sequential VCELLx registers in big-endian pairs.
    // TODO: Adjust count & base addresses after validation.
    for (uint8_t cell = 0; cell < 5; ++cell){
 8000a70:	230f      	movs	r3, #15
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e054      	b.n	8000b24 <BQ76907_readCellVoltages+0xbc>
        uint8_t hi, lo;
        uint8_t baseHigh = BQ76907_REG_VCELL1_H + (cell * 2);
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3307      	adds	r3, #7
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	210e      	movs	r1, #14
 8000a86:	187a      	adds	r2, r7, r1
 8000a88:	18db      	adds	r3, r3, r3
 8000a8a:	7013      	strb	r3, [r2, #0]
        HAL_StatusTypeDef st = BQ76907_ReadRegister(dev, baseHigh, &hi);
 8000a8c:	250d      	movs	r5, #13
 8000a8e:	197c      	adds	r4, r7, r5
 8000a90:	2309      	movs	r3, #9
 8000a92:	18fa      	adds	r2, r7, r3
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	7819      	ldrb	r1, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f8d6 	bl	8000c4c <BQ76907_ReadRegister>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	7023      	strb	r3, [r4, #0]
        if (st != HAL_OK) return st;
 8000aa4:	197b      	adds	r3, r7, r5
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <BQ76907_readCellVoltages+0x4a>
 8000aac:	197b      	adds	r3, r7, r5
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	e03e      	b.n	8000b30 <BQ76907_readCellVoltages+0xc8>
        st = BQ76907_ReadRegister(dev, baseHigh + 1, &lo);
 8000ab2:	230e      	movs	r3, #14
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2d9      	uxtb	r1, r3
 8000abc:	250d      	movs	r5, #13
 8000abe:	197c      	adds	r4, r7, r5
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	18fa      	adds	r2, r7, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 f8c0 	bl	8000c4c <BQ76907_ReadRegister>
 8000acc:	0003      	movs	r3, r0
 8000ace:	7023      	strb	r3, [r4, #0]
        if (st != HAL_OK) return st;
 8000ad0:	197b      	adds	r3, r7, r5
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <BQ76907_readCellVoltages+0x76>
 8000ad8:	197b      	adds	r3, r7, r5
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	e028      	b.n	8000b30 <BQ76907_readCellVoltages+0xc8>
        uint16_t raw = u16_be(hi, lo);
 8000ade:	2309      	movs	r3, #9
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	260a      	movs	r6, #10
 8000aec:	19bc      	adds	r4, r7, r6
 8000aee:	0019      	movs	r1, r3
 8000af0:	0010      	movs	r0, r2
 8000af2:	f7ff ff2f 	bl	8000954 <u16_be>
 8000af6:	0003      	movs	r3, r0
 8000af8:	8023      	strh	r3, [r4, #0]
        dev->cellVoltage_mV[cell] = BQ76907_scaleCellVoltage(raw);
 8000afa:	250f      	movs	r5, #15
 8000afc:	197b      	adds	r3, r7, r5
 8000afe:	781c      	ldrb	r4, [r3, #0]
 8000b00:	19bb      	adds	r3, r7, r6
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f8bf 	bl	8000c88 <BQ76907_scaleCellVoltage>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	0063      	lsls	r3, r4, #1
 8000b12:	18d3      	adds	r3, r2, r3
 8000b14:	3306      	adds	r3, #6
 8000b16:	1c0a      	adds	r2, r1, #0
 8000b18:	801a      	strh	r2, [r3, #0]
    for (uint8_t cell = 0; cell < 5; ++cell){
 8000b1a:	197b      	adds	r3, r7, r5
 8000b1c:	197a      	adds	r2, r7, r5
 8000b1e:	7812      	ldrb	r2, [r2, #0]
 8000b20:	3201      	adds	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	230f      	movs	r3, #15
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d9a5      	bls.n	8000a7a <BQ76907_readCellVoltages+0x12>
    }
    return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b005      	add	sp, #20
 8000b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b38 <BQ76907_readPackVoltage>:

/**
 * @brief Read pack voltage (two-byte) and scale to millivolts.
 */
HAL_StatusTypeDef BQ76907_readPackVoltage(BQ76907 *dev){
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    uint8_t hi, lo;
    HAL_StatusTypeDef st = BQ76907_ReadRegister(dev, BQ76907_REG_PACK_V_H, &hi);
 8000b40:	250f      	movs	r5, #15
 8000b42:	197c      	adds	r4, r7, r5
 8000b44:	230b      	movs	r3, #11
 8000b46:	18fa      	adds	r2, r7, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	212a      	movs	r1, #42	@ 0x2a
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 f87d 	bl	8000c4c <BQ76907_ReadRegister>
 8000b52:	0003      	movs	r3, r0
 8000b54:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 8000b56:	197b      	adds	r3, r7, r5
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <BQ76907_readPackVoltage+0x2c>
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	e029      	b.n	8000bb8 <BQ76907_readPackVoltage+0x80>
    st = BQ76907_ReadRegister(dev, BQ76907_REG_PACK_V_L, &lo);
 8000b64:	250f      	movs	r5, #15
 8000b66:	197c      	adds	r4, r7, r5
 8000b68:	230a      	movs	r3, #10
 8000b6a:	18fa      	adds	r2, r7, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	212b      	movs	r1, #43	@ 0x2b
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 f86b 	bl	8000c4c <BQ76907_ReadRegister>
 8000b76:	0003      	movs	r3, r0
 8000b78:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 8000b7a:	197b      	adds	r3, r7, r5
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <BQ76907_readPackVoltage+0x50>
 8000b82:	197b      	adds	r3, r7, r5
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	e017      	b.n	8000bb8 <BQ76907_readPackVoltage+0x80>
    uint16_t raw = u16_be(hi, lo);
 8000b88:	230b      	movs	r3, #11
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	230a      	movs	r3, #10
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	250c      	movs	r5, #12
 8000b96:	197c      	adds	r4, r7, r5
 8000b98:	0019      	movs	r1, r3
 8000b9a:	0010      	movs	r0, r2
 8000b9c:	f7ff feda 	bl	8000954 <u16_be>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	8023      	strh	r3, [r4, #0]
    dev->packVoltage_mV = BQ76907_scalePackVoltage(raw);
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 f879 	bl	8000ca0 <BQ76907_scalePackVoltage>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	809a      	strh	r2, [r3, #4]
    return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b004      	add	sp, #16
 8000bbe:	bdb0      	pop	{r4, r5, r7, pc}

08000bc0 <BQ76907_readTemperature1>:

/**
 * @brief Read temperature sensor 1 raw value and convert to 0.1 degC units.
 */
HAL_StatusTypeDef BQ76907_readTemperature1(BQ76907 *dev){
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    uint8_t hi, lo;
    HAL_StatusTypeDef st = BQ76907_ReadRegister(dev, BQ76907_REG_TS1_H, &hi);
 8000bc8:	250f      	movs	r5, #15
 8000bca:	197c      	adds	r4, r7, r5
 8000bcc:	230b      	movs	r3, #11
 8000bce:	18fa      	adds	r2, r7, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	212c      	movs	r1, #44	@ 0x2c
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 f839 	bl	8000c4c <BQ76907_ReadRegister>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 8000bde:	197b      	adds	r3, r7, r5
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <BQ76907_readTemperature1+0x2c>
 8000be6:	197b      	adds	r3, r7, r5
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	e02b      	b.n	8000c44 <BQ76907_readTemperature1+0x84>
    st = BQ76907_ReadRegister(dev, BQ76907_REG_TS1_L, &lo);
 8000bec:	250f      	movs	r5, #15
 8000bee:	197c      	adds	r4, r7, r5
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	18fa      	adds	r2, r7, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	212d      	movs	r1, #45	@ 0x2d
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 f827 	bl	8000c4c <BQ76907_ReadRegister>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 8000c02:	197b      	adds	r3, r7, r5
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <BQ76907_readTemperature1+0x50>
 8000c0a:	197b      	adds	r3, r7, r5
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	e019      	b.n	8000c44 <BQ76907_readTemperature1+0x84>
    int16_t raw = (int16_t)u16_be(hi, lo);
 8000c10:	230b      	movs	r3, #11
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	230a      	movs	r3, #10
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	0010      	movs	r0, r2
 8000c20:	f7ff fe98 	bl	8000954 <u16_be>
 8000c24:	0003      	movs	r3, r0
 8000c26:	001a      	movs	r2, r3
 8000c28:	210c      	movs	r1, #12
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	801a      	strh	r2, [r3, #0]
    dev->ts1_degC_x10 = BQ76907_scaleTemperature(raw);
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	5e9b      	ldrsh	r3, [r3, r2]
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f83f 	bl	8000cb8 <BQ76907_scaleTemperature>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	821a      	strh	r2, [r3, #16]
    return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b004      	add	sp, #16
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}

08000c4c <BQ76907_ReadRegister>:

/* Low level I2C wrappers */
/**
 * @brief Low-level single register read helper.
 */
HAL_StatusTypeDef BQ76907_ReadRegister(BQ76907 *dev, uint8_t reg, uint8_t *data){
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	240b      	movs	r4, #11
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	1c0a      	adds	r2, r1, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
    return HAL_I2C_Mem_Read(dev->i2cHandle, BQ76907_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	2110      	movs	r1, #16
 8000c7a:	f001 f893 	bl	8001da4 <HAL_I2C_Mem_Read>
 8000c7e:	0003      	movs	r3, r0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b005      	add	sp, #20
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <BQ76907_scaleCellVoltage>:
/* Scaling helpers (placeholder implementations) */
/**
 * @brief Convert raw cell voltage reading to millivolts.
 * Placeholder: assumes 1 LSB = 1 mV.
 */
uint16_t BQ76907_scaleCellVoltage(uint16_t raw){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	1dbb      	adds	r3, r7, #6
 8000c92:	801a      	strh	r2, [r3, #0]
    // Datasheet will define LSB (e.g., 1 mV / 0.5 mV). Assume 1 mV for now.
    return raw; // TODO_VERIFY
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	881b      	ldrh	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <BQ76907_scalePackVoltage>:
/**
 * @brief Convert raw pack voltage reading to millivolts.
 * Placeholder scaling identical to cell until verified.
 */
uint16_t BQ76907_scalePackVoltage(uint16_t raw){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	1dbb      	adds	r3, r7, #6
 8000caa:	801a      	strh	r2, [r3, #0]
    return raw; // TODO_VERIFY
 8000cac:	1dbb      	adds	r3, r7, #6
 8000cae:	881b      	ldrh	r3, [r3, #0]
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <BQ76907_scaleTemperature>:
/**
 * @brief Convert raw temperature to 0.1 degC units.
 * Placeholder: identity mapping until thermistor conversion is defined.
 */
int16_t BQ76907_scaleTemperature(int16_t raw){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	1dbb      	adds	r3, r7, #6
 8000cc2:	801a      	strh	r2, [r3, #0]
    // Example: raw * 0.1C per LSB -> store *10. Adjust once known.
    return raw; // TODO_VERIFY
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_GPIO_Init+0x28>)
 8000cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <MX_GPIO_Init+0x28>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <MX_GPIO_Init+0x28>)
 8000ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cea:	2201      	movs	r2, #1
 8000cec:	4013      	ands	r3, r2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	40021000 	.word	0x40021000

08000d00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d06:	4a1c      	ldr	r2, [pc, #112]	@ (8000d78 <MX_I2C1_Init+0x78>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <MX_I2C1_Init+0x7c>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 fe5d 	bl	80019fc <HAL_I2C_Init>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d46:	f000 fac1 	bl	80012cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f001 fc58 	bl	8002604 <HAL_I2CEx_ConfigAnalogFilter>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d001      	beq.n	8000d5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d58:	f000 fab8 	bl	80012cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <MX_I2C1_Init+0x74>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 fc9b 	bl	800269c <HAL_I2CEx_ConfigDigitalFilter>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 faaf 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000028 	.word	0x20000028
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	00503d58 	.word	0x00503d58

08000d80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b09d      	sub	sp, #116	@ 0x74
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	235c      	movs	r3, #92	@ 0x5c
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	2314      	movs	r3, #20
 8000d90:	001a      	movs	r2, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	f002 fc34 	bl	8003600 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	2410      	movs	r4, #16
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	234c      	movs	r3, #76	@ 0x4c
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f002 fc2c 	bl	8003600 <memset>
  if(i2cHandle->Instance==I2C1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a23      	ldr	r2, [pc, #140]	@ (8000e3c <HAL_I2C_MspInit+0xbc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d13f      	bne.n	8000e32 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2220      	movs	r2, #32
 8000db6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f002 f9e1 	bl	8003188 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	1e03      	subs	r3, r0, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dca:	f000 fa7f 	bl	80012cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <HAL_I2C_MspInit+0xc0>)
 8000dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <HAL_I2C_MspInit+0xc0>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <HAL_I2C_MspInit+0xc0>)
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dde:	2201      	movs	r2, #1
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000de6:	215c      	movs	r1, #92	@ 0x5c
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	22c0      	movs	r2, #192	@ 0xc0
 8000dec:	00d2      	lsls	r2, r2, #3
 8000dee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2212      	movs	r2, #18
 8000df4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2206      	movs	r2, #6
 8000e06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	187a      	adds	r2, r7, r1
 8000e0a:	23a0      	movs	r3, #160	@ 0xa0
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	0011      	movs	r1, r2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 fc4f 	bl	80016b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_I2C_MspInit+0xc0>)
 8000e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_I2C_MspInit+0xc0>)
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0389      	lsls	r1, r1, #14
 8000e20:	430a      	orrs	r2, r1
 8000e22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_I2C_MspInit+0xc0>)
 8000e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	039b      	lsls	r3, r3, #14
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b01d      	add	sp, #116	@ 0x74
 8000e38:	bd90      	pop	{r4, r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	40021000 	.word	0x40021000

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4a:	f000 fabf 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4e:	f000 f881 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e52:	f7ff ff3f 	bl	8000cd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e56:	f7ff ff53 	bl	8000d00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the BQ25798 charger
  if (BQ25798_init(&bq25798_charger, &hi2c1) != 0) {
 8000e5a:	4a35      	ldr	r2, [pc, #212]	@ (8000f30 <main+0xec>)
 8000e5c:	4b35      	ldr	r3, [pc, #212]	@ (8000f34 <main+0xf0>)
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff f9db 	bl	800021c <BQ25798_init>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <main+0x2a>
    Error_Handler();
 8000e6a:	f000 fa2f 	bl	80012cc <Error_Handler>
  }
  // Initialize the BQ76907 monitor (placeholder init – returns 0 on success)
  if (BQ76907_init(&bq76907_monitor, &hi2c1) != 0) {
 8000e6e:	4a30      	ldr	r2, [pc, #192]	@ (8000f30 <main+0xec>)
 8000e70:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <main+0xf4>)
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff fd85 	bl	8000984 <BQ76907_init>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <main+0x3e>
    // If monitor init fails we continue charger operation but could flag a warning
    // For now treat as critical
    Error_Handler();
 8000e7e:	f000 fa25 	bl	80012cc <Error_Handler>
  }

  // Initialize timers for immediate first update
  uint32_t now = HAL_GetTick();
 8000e82:	f000 fb1f 	bl	80014c4 <HAL_GetTick>
 8000e86:	0003      	movs	r3, r0
 8000e88:	607b      	str	r3, [r7, #4]
  last_bq_update_tick       = now;
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <main+0xf8>)
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	601a      	str	r2, [r3, #0]
  last_bq76907_update_tick  = now;
 8000e90:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <main+0xfc>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
  last_balance_eval_tick    = now;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <main+0x100>)
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t tick = HAL_GetTick();
 8000e9c:	f000 fb12 	bl	80014c4 <HAL_GetTick>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	603b      	str	r3, [r7, #0]
    if ((tick - last_bq_update_tick) >= BQ_UPDATE_INTERVAL_MS) {
 8000ea4:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <main+0xf8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	1ad2      	subs	r2, r2, r3
 8000eac:	23fa      	movs	r3, #250	@ 0xfa
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d304      	bcc.n	8000ebe <main+0x7a>
      last_bq_update_tick = tick;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <main+0xf8>)
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	601a      	str	r2, [r3, #0]
      UpdateCharger();
 8000eba:	f000 f893 	bl	8000fe4 <UpdateCharger>
    }
    if ((tick - last_bq76907_update_tick) >= BQ76907_UPDATE_INTERVAL_MS) {
 8000ebe:	4b20      	ldr	r3, [pc, #128]	@ (8000f40 <main+0xfc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <main+0x104>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d904      	bls.n	8000ed6 <main+0x92>
      last_bq76907_update_tick = tick;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <main+0xfc>)
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	601a      	str	r2, [r3, #0]
      UpdateMonitor();
 8000ed2:	f000 f8e3 	bl	800109c <UpdateMonitor>
    }
    if ((tick - last_balance_eval_tick) >= BALANCE_INTERVAL_MS) {
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <main+0x100>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	4a1b      	ldr	r2, [pc, #108]	@ (8000f4c <main+0x108>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d904      	bls.n	8000eee <main+0xaa>
      last_balance_eval_tick = tick;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <main+0x100>)
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	601a      	str	r2, [r3, #0]
      EvaluateBalancing();
 8000eea:	f000 f961 	bl	80011b0 <EvaluateBalancing>
    }

      // --- Non-blocking Error LED (Orange LED) handling ---
      // This is for demonstration, assuming GPIO_PIN_5 (orange LED) is for a general fault indicator.
      // You would typically turn this on or blink it in your Error_Handler or if a specific fault is detected.
      if (bq25798_charger.faultStatus1.tshut_stat == 1) {
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <main+0xf0>)
 8000ef0:	2232      	movs	r2, #50	@ 0x32
 8000ef2:	5c9b      	ldrb	r3, [r3, r2]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d113      	bne.n	8000f20 <main+0xdc>
          if ((HAL_GetTick() - last_error_led_toggle_tick) >= ERROR_LED_BLINK_RATE_MS) {
 8000ef8:	f000 fae4 	bl	80014c4 <HAL_GetTick>
 8000efc:	0002      	movs	r2, r0
 8000efe:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <main+0x10c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f06:	d9c9      	bls.n	8000e9c <main+0x58>
              last_error_led_toggle_tick = HAL_GetTick();
 8000f08:	f000 fadc 	bl	80014c4 <HAL_GetTick>
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <main+0x10c>)
 8000f10:	601a      	str	r2, [r3, #0]
              HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle Orange LED
 8000f12:	23a0      	movs	r3, #160	@ 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	2120      	movs	r1, #32
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 fd54 	bl	80019c6 <HAL_GPIO_TogglePin>
 8000f1e:	e7bd      	b.n	8000e9c <main+0x58>
          }
      } else {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Keep Orange LED OFF (assuming active low)
 8000f20:	23a0      	movs	r3, #160	@ 0xa0
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	2201      	movs	r2, #1
 8000f26:	2120      	movs	r1, #32
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fd2f 	bl	800198c <HAL_GPIO_WritePin>
  {
 8000f2e:	e7b5      	b.n	8000e9c <main+0x58>
 8000f30:	20000028 	.word	0x20000028
 8000f34:	2000007c 	.word	0x2000007c
 8000f38:	200000b0 	.word	0x200000b0
 8000f3c:	200000e8 	.word	0x200000e8
 8000f40:	200000ec 	.word	0x200000ec
 8000f44:	200000f0 	.word	0x200000f0
 8000f48:	000002ed 	.word	0x000002ed
 8000f4c:	00001387 	.word	0x00001387
 8000f50:	200000f4 	.word	0x200000f4

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b095      	sub	sp, #84	@ 0x54
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	2414      	movs	r4, #20
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	0018      	movs	r0, r3
 8000f60:	233c      	movs	r3, #60	@ 0x3c
 8000f62:	001a      	movs	r2, r3
 8000f64:	2100      	movs	r1, #0
 8000f66:	f002 fb4b 	bl	8003600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	2310      	movs	r3, #16
 8000f70:	001a      	movs	r2, r3
 8000f72:	2100      	movs	r1, #0
 8000f74:	f002 fb44 	bl	8003600 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 fbd9 	bl	8002734 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2202      	movs	r2, #2
 8000f86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2280      	movs	r2, #128	@ 0x80
 8000f8c:	0052      	lsls	r2, r2, #1
 8000f8e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2240      	movs	r2, #64	@ 0x40
 8000f9a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f001 fc05 	bl	80027b4 <HAL_RCC_OscConfig>
 8000faa:	1e03      	subs	r3, r0, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000fae:	f000 f98d 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2100      	movs	r1, #0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f001 ff50 	bl	8002e74 <HAL_RCC_ClockConfig>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000fd8:	f000 f978 	bl	80012cc <Error_Handler>
  }
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b015      	add	sp, #84	@ 0x54
 8000fe2:	bd90      	pop	{r4, r7, pc}

08000fe4 <UpdateCharger>:

/* USER CODE BEGIN 4 */

// ---------------- Internal helper implementations ----------------

static void UpdateCharger(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  uint8_t b=0;
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  readChargerStatus0(&bq25798_charger, &b);
 8000ff0:	1dfa      	adds	r2, r7, #7
 8000ff2:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <UpdateCharger+0xb0>)
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff f9a1 	bl	800033e <readChargerStatus0>
  readChargerStatus1(&bq25798_charger, &b);
 8000ffc:	1dfa      	adds	r2, r7, #7
 8000ffe:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <UpdateCharger+0xb0>)
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff f9ef 	bl	80003e6 <readChargerStatus1>
  readChargerStatus2(&bq25798_charger, &b);
 8001008:	1dfa      	adds	r2, r7, #7
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <UpdateCharger+0xb0>)
 800100c:	0011      	movs	r1, r2
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff fa19 	bl	8000446 <readChargerStatus2>
  readChargerStatus3(&bq25798_charger, &b);
 8001014:	1dfa      	adds	r2, r7, #7
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <UpdateCharger+0xb0>)
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff fa4c 	bl	80004b8 <readChargerStatus3>
  readChargerStatus4(&bq25798_charger, &b);
 8001020:	1dfa      	adds	r2, r7, #7
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <UpdateCharger+0xb0>)
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff fa9d 	bl	8000566 <readChargerStatus4>
  readFaultStatus0(&bq25798_charger, &b);
 800102c:	1dfa      	adds	r2, r7, #7
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <UpdateCharger+0xb0>)
 8001030:	0011      	movs	r1, r2
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff fae1 	bl	80005fa <readFaultStatus0>
  readFaultStatus1(&bq25798_charger, &b);
 8001038:	1dfa      	adds	r2, r7, #7
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <UpdateCharger+0xb0>)
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f7ff fb40 	bl	80006c4 <readFaultStatus1>
  BQ25798_readBusVoltage(&bq25798_charger);
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <UpdateCharger+0xb0>)
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fb85 	bl	8000756 <BQ25798_readBusVoltage>
  BQ25798_readBusCurrent(&bq25798_charger);
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <UpdateCharger+0xb0>)
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff fba8 	bl	80007a4 <BQ25798_readBusCurrent>
  BQ25798_readBatteryVoltage(&bq25798_charger);
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <UpdateCharger+0xb0>)
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff fbcb 	bl	80007f2 <BQ25798_readBatteryVoltage>
  BQ25798_readBatteryCurrent(&bq25798_charger);
 800105c:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <UpdateCharger+0xb0>)
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff fbee 	bl	8000840 <BQ25798_readBatteryCurrent>

  if (bq25798_charger.chargerStatus2.vbat_present_stat == 1) {
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <UpdateCharger+0xb0>)
 8001066:	7e5b      	ldrb	r3, [r3, #25]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d107      	bne.n	800107c <UpdateCharger+0x98>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	019b      	lsls	r3, r3, #6
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <UpdateCharger+0xb4>)
 8001072:	2200      	movs	r2, #0
 8001074:	0019      	movs	r1, r3
 8001076:	f000 fc89 	bl	800198c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
  }
}
 800107a:	e006      	b.n	800108a <UpdateCharger+0xa6>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	019b      	lsls	r3, r3, #6
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <UpdateCharger+0xb4>)
 8001082:	2201      	movs	r2, #1
 8001084:	0019      	movs	r1, r3
 8001086:	f000 fc81 	bl	800198c <HAL_GPIO_WritePin>
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	2000007c 	.word	0x2000007c
 8001098:	50000800 	.word	0x50000800

0800109c <UpdateMonitor>:

static void UpdateMonitor(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  // Read system status & cell voltages
  BQ76907_readSystemStatus(&bq76907_monitor);
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <UpdateMonitor+0x2c>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff fc89 	bl	80009ba <BQ76907_readSystemStatus>
  BQ76907_readCellVoltages(&bq76907_monitor);
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <UpdateMonitor+0x2c>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff fcdc 	bl	8000a68 <BQ76907_readCellVoltages>
  BQ76907_readPackVoltage(&bq76907_monitor);
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <UpdateMonitor+0x2c>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff fd40 	bl	8000b38 <BQ76907_readPackVoltage>
  BQ76907_readTemperature1(&bq76907_monitor);
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <UpdateMonitor+0x2c>)
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff fd80 	bl	8000bc0 <BQ76907_readTemperature1>
  // Future: add fault LED logic based on monitor faults
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	200000b0 	.word	0x200000b0

080010cc <findMaxCell>:

static uint16_t findMaxCell(uint16_t *vals, uint8_t count) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	000a      	movs	r2, r1
 80010d6:	1cfb      	adds	r3, r7, #3
 80010d8:	701a      	strb	r2, [r3, #0]
  uint16_t m = 0; for (uint8_t i=0;i<count;i++) if (vals[i] > m) m = vals[i]; return m;
 80010da:	230e      	movs	r3, #14
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	230d      	movs	r3, #13
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e019      	b.n	8001120 <findMaxCell+0x54>
 80010ec:	210d      	movs	r1, #13
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	18d3      	adds	r3, r2, r3
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	200e      	movs	r0, #14
 80010fc:	183a      	adds	r2, r7, r0
 80010fe:	8812      	ldrh	r2, [r2, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <findMaxCell+0x48>
 8001104:	187b      	adds	r3, r7, r1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	18d2      	adds	r2, r2, r3
 800110e:	183b      	adds	r3, r7, r0
 8001110:	8812      	ldrh	r2, [r2, #0]
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	210d      	movs	r1, #13
 8001116:	187b      	adds	r3, r7, r1
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	187b      	adds	r3, r7, r1
 800111c:	3201      	adds	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	230d      	movs	r3, #13
 8001122:	18fa      	adds	r2, r7, r3
 8001124:	1cfb      	adds	r3, r7, #3
 8001126:	7812      	ldrb	r2, [r2, #0]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3de      	bcc.n	80010ec <findMaxCell+0x20>
 800112e:	230e      	movs	r3, #14
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	881b      	ldrh	r3, [r3, #0]
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}

0800113c <findMinCell>:
static uint16_t findMinCell(uint16_t *vals, uint8_t count) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	000a      	movs	r2, r1
 8001146:	1cfb      	adds	r3, r7, #3
 8001148:	701a      	strb	r2, [r3, #0]
  uint16_t m = 0xFFFF; for (uint8_t i=0;i<count;i++) if (vals[i] < m) m = vals[i]; return m;
 800114a:	230e      	movs	r3, #14
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2201      	movs	r2, #1
 8001150:	4252      	negs	r2, r2
 8001152:	801a      	strh	r2, [r3, #0]
 8001154:	230d      	movs	r3, #13
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e019      	b.n	8001192 <findMinCell+0x56>
 800115e:	210d      	movs	r1, #13
 8001160:	187b      	adds	r3, r7, r1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	200e      	movs	r0, #14
 800116e:	183a      	adds	r2, r7, r0
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d907      	bls.n	8001186 <findMinCell+0x4a>
 8001176:	187b      	adds	r3, r7, r1
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	18d2      	adds	r2, r2, r3
 8001180:	183b      	adds	r3, r7, r0
 8001182:	8812      	ldrh	r2, [r2, #0]
 8001184:	801a      	strh	r2, [r3, #0]
 8001186:	210d      	movs	r1, #13
 8001188:	187b      	adds	r3, r7, r1
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	187b      	adds	r3, r7, r1
 800118e:	3201      	adds	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	230d      	movs	r3, #13
 8001194:	18fa      	adds	r2, r7, r3
 8001196:	1cfb      	adds	r3, r7, #3
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3de      	bcc.n	800115e <findMinCell+0x22>
 80011a0:	230e      	movs	r3, #14
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	881b      	ldrh	r3, [r3, #0]
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b004      	add	sp, #16
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <EvaluateBalancing>:

static void EvaluateBalancing(void) {
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
  // Placeholder simple balancing: compute delta and decide a mask
  uint8_t cellCount = 5; // placeholder variant
 80011b6:	250d      	movs	r5, #13
 80011b8:	197b      	adds	r3, r7, r5
 80011ba:	2205      	movs	r2, #5
 80011bc:	701a      	strb	r2, [r3, #0]
  uint16_t vmax = findMaxCell(bq76907_monitor.cellVoltage_mV, cellCount);
 80011be:	230a      	movs	r3, #10
 80011c0:	18fc      	adds	r4, r7, r3
 80011c2:	197b      	adds	r3, r7, r5
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <EvaluateBalancing+0xfc>)
 80011c8:	0011      	movs	r1, r2
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff ff7e 	bl	80010cc <findMaxCell>
 80011d0:	0003      	movs	r3, r0
 80011d2:	8023      	strh	r3, [r4, #0]
  uint16_t vmin = findMinCell(bq76907_monitor.cellVoltage_mV, cellCount);
 80011d4:	2608      	movs	r6, #8
 80011d6:	19bc      	adds	r4, r7, r6
 80011d8:	197b      	adds	r3, r7, r5
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <EvaluateBalancing+0xfc>)
 80011de:	0011      	movs	r1, r2
 80011e0:	0018      	movs	r0, r3
 80011e2:	f7ff ffab 	bl	800113c <findMinCell>
 80011e6:	0003      	movs	r3, r0
 80011e8:	8023      	strh	r3, [r4, #0]
  uint16_t delta = vmax - vmin;
 80011ea:	1dbb      	adds	r3, r7, #6
 80011ec:	220a      	movs	r2, #10
 80011ee:	18b9      	adds	r1, r7, r2
 80011f0:	0030      	movs	r0, r6
 80011f2:	183a      	adds	r2, r7, r0
 80011f4:	8809      	ldrh	r1, [r1, #0]
 80011f6:	8812      	ldrh	r2, [r2, #0]
 80011f8:	1a8a      	subs	r2, r1, r2
 80011fa:	801a      	strh	r2, [r3, #0]
  static uint8_t balancingActive = 0;

  if (!balancingActive) {
 80011fc:	4b2c      	ldr	r3, [pc, #176]	@ (80012b0 <EvaluateBalancing+0x100>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d145      	bne.n	8001290 <EvaluateBalancing+0xe0>
    if (delta > BALANCE_THRESHOLD_MV) {
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b19      	cmp	r3, #25
 800120a:	d94b      	bls.n	80012a4 <EvaluateBalancing+0xf4>
      // Select all cells above (vmin + (delta/2)) as a naive approach
      uint16_t cutoff = vmin + (delta/2);
 800120c:	1dbb      	adds	r3, r7, #6
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	085b      	lsrs	r3, r3, #1
 8001212:	b299      	uxth	r1, r3
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	183a      	adds	r2, r7, r0
 8001218:	8812      	ldrh	r2, [r2, #0]
 800121a:	188a      	adds	r2, r1, r2
 800121c:	801a      	strh	r2, [r3, #0]
      uint8_t mask = 0;
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
      for (uint8_t i=0;i<cellCount;i++) {
 8001226:	230e      	movs	r3, #14
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
 800122e:	e01d      	b.n	800126c <EvaluateBalancing+0xbc>
        if (bq76907_monitor.cellVoltage_mV[i] > cutoff) mask |= (1u << i);
 8001230:	210e      	movs	r1, #14
 8001232:	187b      	adds	r3, r7, r1
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4a1f      	ldr	r2, [pc, #124]	@ (80012b4 <EvaluateBalancing+0x104>)
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	3306      	adds	r3, #6
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	1d3a      	adds	r2, r7, #4
 8001242:	8812      	ldrh	r2, [r2, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d20b      	bcs.n	8001260 <EvaluateBalancing+0xb0>
 8001248:	187b      	adds	r3, r7, r1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2201      	movs	r2, #1
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	b2d9      	uxtb	r1, r3
 8001254:	220f      	movs	r2, #15
 8001256:	18bb      	adds	r3, r7, r2
 8001258:	18ba      	adds	r2, r7, r2
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	701a      	strb	r2, [r3, #0]
      for (uint8_t i=0;i<cellCount;i++) {
 8001260:	210e      	movs	r1, #14
 8001262:	187b      	adds	r3, r7, r1
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	187b      	adds	r3, r7, r1
 8001268:	3201      	adds	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	230e      	movs	r3, #14
 800126e:	18fa      	adds	r2, r7, r3
 8001270:	230d      	movs	r3, #13
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	7812      	ldrb	r2, [r2, #0]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3d9      	bcc.n	8001230 <EvaluateBalancing+0x80>
      }
      applyCellBalancingMask(mask);
 800127c:	230f      	movs	r3, #15
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	0018      	movs	r0, r3
 8001284:	f000 f818 	bl	80012b8 <applyCellBalancingMask>
      balancingActive = 1;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <EvaluateBalancing+0x100>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
    if (delta < BALANCE_HYSTERESIS_MV) {
      applyCellBalancingMask(0); // turn off
      balancingActive = 0;
    }
  }
}
 800128e:	e009      	b.n	80012a4 <EvaluateBalancing+0xf4>
    if (delta < BALANCE_HYSTERESIS_MV) {
 8001290:	1dbb      	adds	r3, r7, #6
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	2b09      	cmp	r3, #9
 8001296:	d805      	bhi.n	80012a4 <EvaluateBalancing+0xf4>
      applyCellBalancingMask(0); // turn off
 8001298:	2000      	movs	r0, #0
 800129a:	f000 f80d 	bl	80012b8 <applyCellBalancingMask>
      balancingActive = 0;
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <EvaluateBalancing+0x100>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b005      	add	sp, #20
 80012aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ac:	200000b6 	.word	0x200000b6
 80012b0:	200000f8 	.word	0x200000f8
 80012b4:	200000b0 	.word	0x200000b0

080012b8 <applyCellBalancingMask>:

static void applyCellBalancingMask(uint8_t mask) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	0002      	movs	r2, r0
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	701a      	strb	r2, [r3, #0]
  // Placeholder: would write mask bits into CELLBAL1/2 registers after verification.
  // Splitting across two registers if needed (e.g., lower 3 bits in CELLBAL1, next in CELLBAL2).
  (void)mask; // suppress unused warning until implemented
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	46c0      	nop			@ (mov r8, r8)

  // Assuming an LED (e.g., on GPIOA, PIN_5) is available for error indication
  // Make sure this pin is initialized in MX_GPIO_Init()
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle an LED to indicate error
 80012d4:	23a0      	movs	r3, #160	@ 0xa0
 80012d6:	05db      	lsls	r3, r3, #23
 80012d8:	2120      	movs	r1, #32
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 fb73 	bl	80019c6 <HAL_GPIO_TogglePin>
      HAL_Delay(100); // Small delay for visible blinking
 80012e0:	2064      	movs	r0, #100	@ 0x64
 80012e2:	f000 f8f9 	bl	80014d8 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle an LED to indicate error
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	e7f4      	b.n	80012d4 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_MspInit+0x4c>)
 80012f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <HAL_MspInit+0x4c>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	430a      	orrs	r2, r1
 80012fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	2201      	movs	r2, #1
 8001304:	4013      	ands	r3, r2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <HAL_MspInit+0x4c>)
 800130c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_MspInit+0x4c>)
 8001310:	2180      	movs	r1, #128	@ 0x80
 8001312:	0549      	lsls	r1, r1, #21
 8001314:	430a      	orrs	r2, r1
 8001316:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <HAL_MspInit+0x4c>)
 800131a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	055b      	lsls	r3, r3, #21
 8001320:	4013      	ands	r3, r2
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001326:	23c0      	movs	r3, #192	@ 0xc0
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	0018      	movs	r0, r3
 800132c:	f000 f8f8 	bl	8001520 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	46c0      	nop			@ (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000

0800133c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	e7fd      	b.n	8001340 <NMI_Handler+0x4>

08001344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001348:	46c0      	nop			@ (mov r8, r8)
 800134a:	e7fd      	b.n	8001348 <HardFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f89c 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	46c0      	nop			@ (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001378:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f7ff fff7 	bl	800136e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	@ (80013b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <LoopForever+0xe>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	@ (80013c4 <LoopForever+0x16>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013a6:	f002 f933 	bl	8003610 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013aa:	f7ff fd4b 	bl	8000e44 <main>

080013ae <LoopForever>:

LoopForever:
  b LoopForever
 80013ae:	e7fe      	b.n	80013ae <LoopForever>
  ldr   r0, =_estack
 80013b0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013bc:	080036b8 	.word	0x080036b8
  ldr r2, =_sbss
 80013c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013c4:	20000100 	.word	0x20000100

080013c8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_COMP_IRQHandler>
	...

080013cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <HAL_Init+0x3c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_Init+0x3c>)
 80013de:	2180      	movs	r1, #128	@ 0x80
 80013e0:	0049      	lsls	r1, r1, #1
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	2003      	movs	r0, #3
 80013e8:	f000 f810 	bl	800140c <HAL_InitTick>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e001      	b.n	80013fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff ff78 	bl	80012ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	781b      	ldrb	r3, [r3, #0]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40022000 	.word	0x40022000

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001414:	230f      	movs	r3, #15
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <HAL_InitTick+0x88>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d02b      	beq.n	800147c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <HAL_InitTick+0x8c>)
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <HAL_InitTick+0x88>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	0019      	movs	r1, r3
 800142e:	23fa      	movs	r3, #250	@ 0xfa
 8001430:	0098      	lsls	r0, r3, #2
 8001432:	f7fe fe67 	bl	8000104 <__udivsi3>
 8001436:	0003      	movs	r3, r0
 8001438:	0019      	movs	r1, r3
 800143a:	0020      	movs	r0, r4
 800143c:	f7fe fe62 	bl	8000104 <__udivsi3>
 8001440:	0003      	movs	r3, r0
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f929 	bl	800169a <HAL_SYSTICK_Config>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d112      	bne.n	8001472 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b03      	cmp	r3, #3
 8001450:	d80a      	bhi.n	8001468 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	2301      	movs	r3, #1
 8001456:	425b      	negs	r3, r3
 8001458:	2200      	movs	r2, #0
 800145a:	0018      	movs	r0, r3
 800145c:	f000 f908 	bl	8001670 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001460:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <HAL_InitTick+0x90>)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	e00d      	b.n	8001484 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001468:	230f      	movs	r3, #15
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e008      	b.n	8001484 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001472:	230f      	movs	r3, #15
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	e003      	b.n	8001484 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	781b      	ldrb	r3, [r3, #0]
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b005      	add	sp, #20
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	20000008 	.word	0x20000008
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_IncTick+0x1c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	001a      	movs	r2, r3
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_IncTick+0x20>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	18d2      	adds	r2, r2, r3
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <HAL_IncTick+0x20>)
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	46c0      	nop			@ (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	20000008 	.word	0x20000008
 80014c0:	200000fc 	.word	0x200000fc

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b02      	ldr	r3, [pc, #8]	@ (80014d4 <HAL_GetTick+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	200000fc 	.word	0x200000fc

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff fff0 	bl	80014c4 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	001a      	movs	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	189b      	adds	r3, r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	f7ff ffe0 	bl	80014c4 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	46c0      	nop			@ (mov r8, r8)
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	20000008 	.word	0x20000008

08001520 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a06      	ldr	r2, [pc, #24]	@ (8001548 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800152e:	4013      	ands	r3, r2
 8001530:	0019      	movs	r1, r3
 8001532:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	40010000 	.word	0x40010000
 8001548:	fffff9ff 	.word	0xfffff9ff

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	0002      	movs	r2, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001560:	d828      	bhi.n	80015b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001562:	4a2f      	ldr	r2, [pc, #188]	@ (8001620 <__NVIC_SetPriority+0xd4>)
 8001564:	1dfb      	adds	r3, r7, #7
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	33c0      	adds	r3, #192	@ 0xc0
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	589b      	ldr	r3, [r3, r2]
 8001572:	1dfa      	adds	r2, r7, #7
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	0011      	movs	r1, r2
 8001578:	2203      	movs	r2, #3
 800157a:	400a      	ands	r2, r1
 800157c:	00d2      	lsls	r2, r2, #3
 800157e:	21ff      	movs	r1, #255	@ 0xff
 8001580:	4091      	lsls	r1, r2
 8001582:	000a      	movs	r2, r1
 8001584:	43d2      	mvns	r2, r2
 8001586:	401a      	ands	r2, r3
 8001588:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	019b      	lsls	r3, r3, #6
 800158e:	22ff      	movs	r2, #255	@ 0xff
 8001590:	401a      	ands	r2, r3
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	0018      	movs	r0, r3
 8001598:	2303      	movs	r3, #3
 800159a:	4003      	ands	r3, r0
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a0:	481f      	ldr	r0, [pc, #124]	@ (8001620 <__NVIC_SetPriority+0xd4>)
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	430a      	orrs	r2, r1
 80015ac:	33c0      	adds	r3, #192	@ 0xc0
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015b2:	e031      	b.n	8001618 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <__NVIC_SetPriority+0xd8>)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	0019      	movs	r1, r3
 80015bc:	230f      	movs	r3, #15
 80015be:	400b      	ands	r3, r1
 80015c0:	3b08      	subs	r3, #8
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3306      	adds	r3, #6
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	3304      	adds	r3, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1dfa      	adds	r2, r7, #7
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	0011      	movs	r1, r2
 80015d4:	2203      	movs	r2, #3
 80015d6:	400a      	ands	r2, r1
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	21ff      	movs	r1, #255	@ 0xff
 80015dc:	4091      	lsls	r1, r2
 80015de:	000a      	movs	r2, r1
 80015e0:	43d2      	mvns	r2, r2
 80015e2:	401a      	ands	r2, r3
 80015e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	22ff      	movs	r2, #255	@ 0xff
 80015ec:	401a      	ands	r2, r3
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	0018      	movs	r0, r3
 80015f4:	2303      	movs	r3, #3
 80015f6:	4003      	ands	r3, r0
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <__NVIC_SetPriority+0xd8>)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	001c      	movs	r4, r3
 8001604:	230f      	movs	r3, #15
 8001606:	4023      	ands	r3, r4
 8001608:	3b08      	subs	r3, #8
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	430a      	orrs	r2, r1
 800160e:	3306      	adds	r3, #6
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	18c3      	adds	r3, r0, r3
 8001614:	3304      	adds	r3, #4
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	46c0      	nop			@ (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b003      	add	sp, #12
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	1e5a      	subs	r2, r3, #1
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	045b      	lsls	r3, r3, #17
 8001638:	429a      	cmp	r2, r3
 800163a:	d301      	bcc.n	8001640 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163c:	2301      	movs	r3, #1
 800163e:	e010      	b.n	8001662 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <SysTick_Config+0x44>)
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	3a01      	subs	r2, #1
 8001646:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001648:	2301      	movs	r3, #1
 800164a:	425b      	negs	r3, r3
 800164c:	2103      	movs	r1, #3
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff ff7c 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SysTick_Config+0x44>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <SysTick_Config+0x44>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	210f      	movs	r1, #15
 800167c:	187b      	adds	r3, r7, r1
 800167e:	1c02      	adds	r2, r0, #0
 8001680:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	187b      	adds	r3, r7, r1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff ff5d 	bl	800154c <__NVIC_SetPriority>
}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b004      	add	sp, #16
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff ffbf 	bl	8001628 <SysTick_Config>
 80016aa:	0003      	movs	r3, r0
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b002      	add	sp, #8
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e14d      	b.n	8001960 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4091      	lsls	r1, r2
 80016ce:	000a      	movs	r2, r1
 80016d0:	4013      	ands	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d100      	bne.n	80016dc <HAL_GPIO_Init+0x28>
 80016da:	e13e      	b.n	800195a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d130      	bne.n	8001756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	409a      	lsls	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	43da      	mvns	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172a:	2201      	movs	r2, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	2201      	movs	r2, #1
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	2b03      	cmp	r3, #3
 8001760:	d017      	beq.n	8001792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	4013      	ands	r3, r2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d123      	bne.n	80017e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	58d3      	ldr	r3, [r2, r3]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2207      	movs	r2, #7
 80017b0:	4013      	ands	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2107      	movs	r1, #7
 80017ca:	400b      	ands	r3, r1
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	6939      	ldr	r1, [r7, #16]
 80017e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	401a      	ands	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	23c0      	movs	r3, #192	@ 0xc0
 8001820:	029b      	lsls	r3, r3, #10
 8001822:	4013      	ands	r3, r2
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0x174>
 8001826:	e098      	b.n	800195a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001828:	4a53      	ldr	r2, [pc, #332]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3318      	adds	r3, #24
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	589b      	ldr	r3, [r3, r2]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2203      	movs	r2, #3
 800183a:	4013      	ands	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	220f      	movs	r2, #15
 8001840:	409a      	lsls	r2, r3
 8001842:	0013      	movs	r3, r2
 8001844:	43da      	mvns	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	23a0      	movs	r3, #160	@ 0xa0
 8001850:	05db      	lsls	r3, r3, #23
 8001852:	429a      	cmp	r2, r3
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x1d6>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a48      	ldr	r2, [pc, #288]	@ (800197c <HAL_GPIO_Init+0x2c8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x1d2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a47      	ldr	r2, [pc, #284]	@ (8001980 <HAL_GPIO_Init+0x2cc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x1ce>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a46      	ldr	r2, [pc, #280]	@ (8001984 <HAL_GPIO_Init+0x2d0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x1ca>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a45      	ldr	r2, [pc, #276]	@ (8001988 <HAL_GPIO_Init+0x2d4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x1c6>
 8001876:	2304      	movs	r3, #4
 8001878:	e008      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 800187a:	2305      	movs	r3, #5
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 800187e:	2303      	movs	r3, #3
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 8001882:	2302      	movs	r3, #2
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 800188a:	2300      	movs	r3, #0
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	2103      	movs	r1, #3
 8001890:	400a      	ands	r2, r1
 8001892:	00d2      	lsls	r2, r2, #3
 8001894:	4093      	lsls	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800189c:	4936      	ldr	r1, [pc, #216]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3318      	adds	r3, #24
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018aa:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43da      	mvns	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	2380      	movs	r3, #128	@ 0x80
 80018c0:	035b      	lsls	r3, r3, #13
 80018c2:	4013      	ands	r3, r2
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018d4:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	039b      	lsls	r3, r3, #14
 80018ec:	4013      	ands	r3, r2
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 8001900:	2384      	movs	r3, #132	@ 0x84
 8001902:	58d3      	ldr	r3, [r2, r3]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43da      	mvns	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	4013      	ands	r3, r2
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001924:	4914      	ldr	r1, [pc, #80]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 8001926:	2284      	movs	r2, #132	@ 0x84
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800192c:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	58d3      	ldr	r3, [r2, r3]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43da      	mvns	r2, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	025b      	lsls	r3, r3, #9
 8001946:	4013      	ands	r3, r2
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001952:	4909      	ldr	r1, [pc, #36]	@ (8001978 <HAL_GPIO_Init+0x2c4>)
 8001954:	2280      	movs	r2, #128	@ 0x80
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	40da      	lsrs	r2, r3
 8001968:	1e13      	subs	r3, r2, #0
 800196a:	d000      	beq.n	800196e <HAL_GPIO_Init+0x2ba>
 800196c:	e6aa      	b.n	80016c4 <HAL_GPIO_Init+0x10>
  }
}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	46c0      	nop			@ (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	b006      	add	sp, #24
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021800 	.word	0x40021800
 800197c:	50000400 	.word	0x50000400
 8001980:	50000800 	.word	0x50000800
 8001984:	50000c00 	.word	0x50000c00
 8001988:	50001000 	.word	0x50001000

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	0008      	movs	r0, r1
 8001996:	0011      	movs	r1, r2
 8001998:	1cbb      	adds	r3, r7, #2
 800199a:	1c02      	adds	r2, r0, #0
 800199c:	801a      	strh	r2, [r3, #0]
 800199e:	1c7b      	adds	r3, r7, #1
 80019a0:	1c0a      	adds	r2, r1, #0
 80019a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a4:	1c7b      	adds	r3, r7, #1
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ac:	1cbb      	adds	r3, r7, #2
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b6:	1cbb      	adds	r3, r7, #2
 80019b8:	881a      	ldrh	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	000a      	movs	r2, r1
 80019d0:	1cbb      	adds	r3, r7, #2
 80019d2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019da:	1cbb      	adds	r3, r7, #2
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	041a      	lsls	r2, r3, #16
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	1cb9      	adds	r1, r7, #2
 80019ea:	8809      	ldrh	r1, [r1, #0]
 80019ec:	400b      	ands	r3, r1
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	619a      	str	r2, [r3, #24]
}
 80019f4:	46c0      	nop			@ (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e08f      	b.n	8001b2e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2241      	movs	r2, #65	@ 0x41
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d107      	bne.n	8001a2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2240      	movs	r2, #64	@ 0x40
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff f9ab 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2241      	movs	r2, #65	@ 0x41
 8001a2e:	2124      	movs	r1, #36	@ 0x24
 8001a30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	438a      	bics	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	493b      	ldr	r1, [pc, #236]	@ (8001b38 <HAL_I2C_Init+0x13c>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4938      	ldr	r1, [pc, #224]	@ (8001b3c <HAL_I2C_Init+0x140>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2180      	movs	r1, #128	@ 0x80
 8001a72:	0209      	lsls	r1, r1, #8
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e007      	b.n	8001a8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2184      	movs	r1, #132	@ 0x84
 8001a84:	0209      	lsls	r1, r1, #8
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d109      	bne.n	8001aa6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2180      	movs	r1, #128	@ 0x80
 8001a9e:	0109      	lsls	r1, r1, #4
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	e007      	b.n	8001ab6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4923      	ldr	r1, [pc, #140]	@ (8001b40 <HAL_I2C_Init+0x144>)
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4920      	ldr	r1, [pc, #128]	@ (8001b44 <HAL_I2C_Init+0x148>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	491a      	ldr	r1, [pc, #104]	@ (8001b3c <HAL_I2C_Init+0x140>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69d9      	ldr	r1, [r3, #28]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2241      	movs	r2, #65	@ 0x41
 8001b1a:	2120      	movs	r1, #32
 8001b1c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2242      	movs	r2, #66	@ 0x42
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	f0ffffff 	.word	0xf0ffffff
 8001b3c:	ffff7fff 	.word	0xffff7fff
 8001b40:	fffff7ff 	.word	0xfffff7ff
 8001b44:	02008000 	.word	0x02008000

08001b48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	000c      	movs	r4, r1
 8001b52:	0010      	movs	r0, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	230a      	movs	r3, #10
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	1c22      	adds	r2, r4, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	2308      	movs	r3, #8
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	1c02      	adds	r2, r0, #0
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	1dbb      	adds	r3, r7, #6
 8001b68:	1c0a      	adds	r2, r1, #0
 8001b6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2241      	movs	r2, #65	@ 0x41
 8001b70:	5c9b      	ldrb	r3, [r3, r2]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d000      	beq.n	8001b7a <HAL_I2C_Mem_Write+0x32>
 8001b78:	e10c      	b.n	8001d94 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_I2C_Mem_Write+0x42>
 8001b80:	232c      	movs	r3, #44	@ 0x2c
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0ff      	b.n	8001d96 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2240      	movs	r2, #64	@ 0x40
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_I2C_Mem_Write+0x5c>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e0f8      	b.n	8001d96 <HAL_I2C_Mem_Write+0x24e>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2240      	movs	r2, #64	@ 0x40
 8001ba8:	2101      	movs	r1, #1
 8001baa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bac:	f7ff fc8a 	bl	80014c4 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	0219      	lsls	r1, r3, #8
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2319      	movs	r3, #25
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f000 fb0b 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0e3      	b.n	8001d96 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2241      	movs	r2, #65	@ 0x41
 8001bd2:	2121      	movs	r1, #33	@ 0x21
 8001bd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2242      	movs	r2, #66	@ 0x42
 8001bda:	2140      	movs	r1, #64	@ 0x40
 8001bdc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	222c      	movs	r2, #44	@ 0x2c
 8001bee:	18ba      	adds	r2, r7, r2
 8001bf0:	8812      	ldrh	r2, [r2, #0]
 8001bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bfa:	1dbb      	adds	r3, r7, #6
 8001bfc:	881c      	ldrh	r4, [r3, #0]
 8001bfe:	2308      	movs	r3, #8
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	881a      	ldrh	r2, [r3, #0]
 8001c04:	230a      	movs	r3, #10
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	8819      	ldrh	r1, [r3, #0]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	0023      	movs	r3, r4
 8001c16:	f000 f9f9 	bl	800200c <I2C_RequestMemoryWrite>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2240      	movs	r2, #64	@ 0x40
 8001c22:	2100      	movs	r1, #0
 8001c24:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0b5      	b.n	8001d96 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2bff      	cmp	r3, #255	@ 0xff
 8001c32:	d911      	bls.n	8001c58 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	22ff      	movs	r2, #255	@ 0xff
 8001c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	045c      	lsls	r4, r3, #17
 8001c44:	230a      	movs	r3, #10
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	8819      	ldrh	r1, [r3, #0]
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	0023      	movs	r3, r4
 8001c52:	f000 fc9d 	bl	8002590 <I2C_TransferConfig>
 8001c56:	e012      	b.n	8001c7e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	049c      	lsls	r4, r3, #18
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	8819      	ldrh	r1, [r3, #0]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	0023      	movs	r3, r4
 8001c7a:	f000 fc89 	bl	8002590 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 fb01 	bl	800228c <I2C_WaitOnTXISFlagUntilTimeout>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e081      	b.n	8001d96 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d03a      	beq.n	8001d42 <HAL_I2C_Mem_Write+0x1fa>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d136      	bne.n	8001d42 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	0013      	movs	r3, r2
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2180      	movs	r1, #128	@ 0x80
 8001ce2:	f000 fa7b 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e053      	b.n	8001d96 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2bff      	cmp	r3, #255	@ 0xff
 8001cf6:	d911      	bls.n	8001d1c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	22ff      	movs	r2, #255	@ 0xff
 8001cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	045c      	lsls	r4, r3, #17
 8001d08:	230a      	movs	r3, #10
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	8819      	ldrh	r1, [r3, #0]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	2300      	movs	r3, #0
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	0023      	movs	r3, r4
 8001d16:	f000 fc3b 	bl	8002590 <I2C_TransferConfig>
 8001d1a:	e012      	b.n	8001d42 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	049c      	lsls	r4, r3, #18
 8001d30:	230a      	movs	r3, #10
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	8819      	ldrh	r1, [r3, #0]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	0023      	movs	r3, r4
 8001d3e:	f000 fc27 	bl	8002590 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d198      	bne.n	8001c7e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 fae0 	bl	8002318 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d58:	1e03      	subs	r3, r0, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e01a      	b.n	8001d96 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2220      	movs	r2, #32
 8001d66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	490b      	ldr	r1, [pc, #44]	@ (8001da0 <HAL_I2C_Mem_Write+0x258>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2241      	movs	r2, #65	@ 0x41
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2242      	movs	r2, #66	@ 0x42
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2240      	movs	r2, #64	@ 0x40
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e000      	b.n	8001d96 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
  }
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b007      	add	sp, #28
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	fe00e800 	.word	0xfe00e800

08001da4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	000c      	movs	r4, r1
 8001dae:	0010      	movs	r0, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	230a      	movs	r3, #10
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	1c22      	adds	r2, r4, #0
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	2308      	movs	r3, #8
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	1c02      	adds	r2, r0, #0
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	1dbb      	adds	r3, r7, #6
 8001dc4:	1c0a      	adds	r2, r1, #0
 8001dc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2241      	movs	r2, #65	@ 0x41
 8001dcc:	5c9b      	ldrb	r3, [r3, r2]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d000      	beq.n	8001dd6 <HAL_I2C_Mem_Read+0x32>
 8001dd4:	e110      	b.n	8001ff8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <HAL_I2C_Mem_Read+0x42>
 8001ddc:	232c      	movs	r3, #44	@ 0x2c
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e103      	b.n	8001ffa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2240      	movs	r2, #64	@ 0x40
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_I2C_Mem_Read+0x5c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0fc      	b.n	8001ffa <HAL_I2C_Mem_Read+0x256>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	2101      	movs	r1, #1
 8001e06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e08:	f7ff fb5c 	bl	80014c4 <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	0219      	lsls	r1, r3, #8
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2319      	movs	r3, #25
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f000 f9dd 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0e7      	b.n	8001ffa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2241      	movs	r2, #65	@ 0x41
 8001e2e:	2122      	movs	r1, #34	@ 0x22
 8001e30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2242      	movs	r2, #66	@ 0x42
 8001e36:	2140      	movs	r1, #64	@ 0x40
 8001e38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	222c      	movs	r2, #44	@ 0x2c
 8001e4a:	18ba      	adds	r2, r7, r2
 8001e4c:	8812      	ldrh	r2, [r2, #0]
 8001e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e56:	1dbb      	adds	r3, r7, #6
 8001e58:	881c      	ldrh	r4, [r3, #0]
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	230a      	movs	r3, #10
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	8819      	ldrh	r1, [r3, #0]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	0023      	movs	r3, r4
 8001e72:	f000 f92f 	bl	80020d4 <I2C_RequestMemoryRead>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2240      	movs	r2, #64	@ 0x40
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e0b9      	b.n	8001ffa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2bff      	cmp	r3, #255	@ 0xff
 8001e8e:	d911      	bls.n	8001eb4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	22ff      	movs	r2, #255	@ 0xff
 8001e94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	045c      	lsls	r4, r3, #17
 8001ea0:	230a      	movs	r3, #10
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	8819      	ldrh	r1, [r3, #0]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	4b56      	ldr	r3, [pc, #344]	@ (8002004 <HAL_I2C_Mem_Read+0x260>)
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	0023      	movs	r3, r4
 8001eae:	f000 fb6f 	bl	8002590 <I2C_TransferConfig>
 8001eb2:	e012      	b.n	8001eda <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	049c      	lsls	r4, r3, #18
 8001ec8:	230a      	movs	r3, #10
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	8819      	ldrh	r1, [r3, #0]
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8002004 <HAL_I2C_Mem_Read+0x260>)
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	0023      	movs	r3, r4
 8001ed6:	f000 fb5b 	bl	8002590 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	0013      	movs	r3, r2
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	f000 f978 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e082      	b.n	8001ffa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d03a      	beq.n	8001fa6 <HAL_I2C_Mem_Read+0x202>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d136      	bne.n	8001fa6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	0013      	movs	r3, r2
 8001f42:	2200      	movs	r2, #0
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	f000 f949 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e053      	b.n	8001ffa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2bff      	cmp	r3, #255	@ 0xff
 8001f5a:	d911      	bls.n	8001f80 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	22ff      	movs	r2, #255	@ 0xff
 8001f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	045c      	lsls	r4, r3, #17
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	8819      	ldrh	r1, [r3, #0]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	2300      	movs	r3, #0
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	0023      	movs	r3, r4
 8001f7a:	f000 fb09 	bl	8002590 <I2C_TransferConfig>
 8001f7e:	e012      	b.n	8001fa6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	049c      	lsls	r4, r3, #18
 8001f94:	230a      	movs	r3, #10
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	8819      	ldrh	r1, [r3, #0]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	0023      	movs	r3, r4
 8001fa2:	f000 faf5 	bl	8002590 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d194      	bne.n	8001eda <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 f9ae 	bl	8002318 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fbc:	1e03      	subs	r3, r0, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e01a      	b.n	8001ffa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	490c      	ldr	r1, [pc, #48]	@ (8002008 <HAL_I2C_Mem_Read+0x264>)
 8001fd8:	400a      	ands	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2241      	movs	r2, #65	@ 0x41
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2242      	movs	r2, #66	@ 0x42
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2240      	movs	r2, #64	@ 0x40
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e000      	b.n	8001ffa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001ff8:	2302      	movs	r3, #2
  }
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b007      	add	sp, #28
 8002000:	bd90      	pop	{r4, r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	80002400 	.word	0x80002400
 8002008:	fe00e800 	.word	0xfe00e800

0800200c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	000c      	movs	r4, r1
 8002016:	0010      	movs	r0, r2
 8002018:	0019      	movs	r1, r3
 800201a:	250a      	movs	r5, #10
 800201c:	197b      	adds	r3, r7, r5
 800201e:	1c22      	adds	r2, r4, #0
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	2308      	movs	r3, #8
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	1c02      	adds	r2, r0, #0
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	1dbb      	adds	r3, r7, #6
 800202c:	1c0a      	adds	r2, r1, #0
 800202e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002030:	1dbb      	adds	r3, r7, #6
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	045c      	lsls	r4, r3, #17
 800203a:	197b      	adds	r3, r7, r5
 800203c:	8819      	ldrh	r1, [r3, #0]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <I2C_RequestMemoryWrite+0xc4>)
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	0023      	movs	r3, r4
 8002046:	f000 faa3 	bl	8002590 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800204a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204c:	6a39      	ldr	r1, [r7, #32]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 f91b 	bl	800228c <I2C_WaitOnTXISFlagUntilTimeout>
 8002056:	1e03      	subs	r3, r0, #0
 8002058:	d001      	beq.n	800205e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e033      	b.n	80020c6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800205e:	1dbb      	adds	r3, r7, #6
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002066:	2308      	movs	r3, #8
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	629a      	str	r2, [r3, #40]	@ 0x28
 8002074:	e019      	b.n	80020aa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002076:	2308      	movs	r3, #8
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	b29b      	uxth	r3, r3
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800208a:	6a39      	ldr	r1, [r7, #32]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f8fc 	bl	800228c <I2C_WaitOnTXISFlagUntilTimeout>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d001      	beq.n	800209c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e014      	b.n	80020c6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800209c:	2308      	movs	r3, #8
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020aa:	6a3a      	ldr	r2, [r7, #32]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	0013      	movs	r3, r2
 80020b4:	2200      	movs	r2, #0
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	f000 f890 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d001      	beq.n	80020c4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bdb0      	pop	{r4, r5, r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	80002000 	.word	0x80002000

080020d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80020d4:	b5b0      	push	{r4, r5, r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	000c      	movs	r4, r1
 80020de:	0010      	movs	r0, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	250a      	movs	r5, #10
 80020e4:	197b      	adds	r3, r7, r5
 80020e6:	1c22      	adds	r2, r4, #0
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	2308      	movs	r3, #8
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	1c02      	adds	r2, r0, #0
 80020f0:	801a      	strh	r2, [r3, #0]
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	1c0a      	adds	r2, r1, #0
 80020f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020f8:	1dbb      	adds	r3, r7, #6
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	197b      	adds	r3, r7, r5
 8002100:	8819      	ldrh	r1, [r3, #0]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <I2C_RequestMemoryRead+0xc0>)
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2300      	movs	r3, #0
 800210a:	f000 fa41 	bl	8002590 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800210e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002110:	6a39      	ldr	r1, [r7, #32]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f8b9 	bl	800228c <I2C_WaitOnTXISFlagUntilTimeout>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e033      	b.n	800218a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002122:	1dbb      	adds	r3, r7, #6
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800212a:	2308      	movs	r3, #8
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
 8002138:	e019      	b.n	800216e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800213a:	2308      	movs	r3, #8
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b29b      	uxth	r3, r3
 8002144:	b2da      	uxtb	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214e:	6a39      	ldr	r1, [r7, #32]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	0018      	movs	r0, r3
 8002154:	f000 f89a 	bl	800228c <I2C_WaitOnTXISFlagUntilTimeout>
 8002158:	1e03      	subs	r3, r0, #0
 800215a:	d001      	beq.n	8002160 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e014      	b.n	800218a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002160:	2308      	movs	r3, #8
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800216e:	6a3a      	ldr	r2, [r7, #32]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	0013      	movs	r3, r2
 8002178:	2200      	movs	r2, #0
 800217a:	2140      	movs	r1, #64	@ 0x40
 800217c:	f000 f82e 	bl	80021dc <I2C_WaitOnFlagUntilTimeout>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d001      	beq.n	8002188 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b004      	add	sp, #16
 8002190:	bdb0      	pop	{r4, r5, r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	80002000 	.word	0x80002000

08002198 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2202      	movs	r2, #2
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d103      	bne.n	80021b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2201      	movs	r2, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d007      	beq.n	80021d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2101      	movs	r1, #1
 80021d0:	430a      	orrs	r2, r1
 80021d2:	619a      	str	r2, [r3, #24]
  }
}
 80021d4:	46c0      	nop			@ (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ec:	e03a      	b.n	8002264 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	6839      	ldr	r1, [r7, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f8d3 	bl	80023a0 <I2C_IsErrorOccurred>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d001      	beq.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e040      	b.n	8002284 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	d02d      	beq.n	8002264 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002208:	f7ff f95c 	bl	80014c4 <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d302      	bcc.n	800221e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d122      	bne.n	8002264 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	4013      	ands	r3, r2
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	425a      	negs	r2, r3
 800222e:	4153      	adcs	r3, r2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	001a      	movs	r2, r3
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d113      	bne.n	8002264 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	2220      	movs	r2, #32
 8002242:	431a      	orrs	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2241      	movs	r2, #65	@ 0x41
 800224c:	2120      	movs	r1, #32
 800224e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2242      	movs	r2, #66	@ 0x42
 8002254:	2100      	movs	r1, #0
 8002256:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2240      	movs	r2, #64	@ 0x40
 800225c:	2100      	movs	r1, #0
 800225e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e00f      	b.n	8002284 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	425a      	negs	r2, r3
 8002274:	4153      	adcs	r3, r2
 8002276:	b2db      	uxtb	r3, r3
 8002278:	001a      	movs	r2, r3
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d0b5      	beq.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b004      	add	sp, #16
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002298:	e032      	b.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f87d 	bl	80023a0 <I2C_IsErrorOccurred>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d001      	beq.n	80022ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e030      	b.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3301      	adds	r3, #1
 80022b2:	d025      	beq.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b4:	f7ff f906 	bl	80014c4 <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d302      	bcc.n	80022ca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11a      	bne.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2202      	movs	r2, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d013      	beq.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022dc:	2220      	movs	r2, #32
 80022de:	431a      	orrs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2241      	movs	r2, #65	@ 0x41
 80022e8:	2120      	movs	r1, #32
 80022ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2242      	movs	r2, #66	@ 0x42
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	@ 0x40
 80022f8:	2100      	movs	r1, #0
 80022fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e007      	b.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2202      	movs	r2, #2
 8002308:	4013      	ands	r3, r2
 800230a:	2b02      	cmp	r3, #2
 800230c:	d1c5      	bne.n	800229a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bd80      	pop	{r7, pc}

08002318 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002324:	e02f      	b.n	8002386 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0018      	movs	r0, r3
 800232e:	f000 f837 	bl	80023a0 <I2C_IsErrorOccurred>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d001      	beq.n	800233a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e02d      	b.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7ff f8c3 	bl	80014c4 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d11a      	bne.n	8002386 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2220      	movs	r2, #32
 8002358:	4013      	ands	r3, r2
 800235a:	2b20      	cmp	r3, #32
 800235c:	d013      	beq.n	8002386 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	2220      	movs	r2, #32
 8002364:	431a      	orrs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2241      	movs	r2, #65	@ 0x41
 800236e:	2120      	movs	r1, #32
 8002370:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2242      	movs	r2, #66	@ 0x42
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2240      	movs	r2, #64	@ 0x40
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e007      	b.n	8002396 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2220      	movs	r2, #32
 800238e:	4013      	ands	r3, r2
 8002390:	2b20      	cmp	r3, #32
 8002392:	d1c8      	bne.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2327      	movs	r3, #39	@ 0x27
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2210      	movs	r2, #16
 80023c8:	4013      	ands	r3, r2
 80023ca:	d100      	bne.n	80023ce <I2C_IsErrorOccurred+0x2e>
 80023cc:	e079      	b.n	80024c2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2210      	movs	r2, #16
 80023d4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d6:	e057      	b.n	8002488 <I2C_IsErrorOccurred+0xe8>
 80023d8:	2227      	movs	r2, #39	@ 0x27
 80023da:	18bb      	adds	r3, r7, r2
 80023dc:	18ba      	adds	r2, r7, r2
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3301      	adds	r3, #1
 80023e6:	d04f      	beq.n	8002488 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7ff f86c 	bl	80014c4 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d302      	bcc.n	80023fe <I2C_IsErrorOccurred+0x5e>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d144      	bne.n	8002488 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	01db      	lsls	r3, r3, #7
 8002408:	4013      	ands	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800240c:	2013      	movs	r0, #19
 800240e:	183b      	adds	r3, r7, r0
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	2142      	movs	r1, #66	@ 0x42
 8002414:	5c52      	ldrb	r2, [r2, r1]
 8002416:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	401a      	ands	r2, r3
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	429a      	cmp	r2, r3
 800242a:	d126      	bne.n	800247a <I2C_IsErrorOccurred+0xda>
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	429a      	cmp	r2, r3
 8002434:	d021      	beq.n	800247a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002436:	183b      	adds	r3, r7, r0
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b20      	cmp	r3, #32
 800243c:	d01d      	beq.n	800247a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2180      	movs	r1, #128	@ 0x80
 800244a:	01c9      	lsls	r1, r1, #7
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002450:	f7ff f838 	bl	80014c4 <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002458:	e00f      	b.n	800247a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800245a:	f7ff f833 	bl	80014c4 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b19      	cmp	r3, #25
 8002466:	d908      	bls.n	800247a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2220      	movs	r2, #32
 800246c:	4313      	orrs	r3, r2
 800246e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002470:	2327      	movs	r3, #39	@ 0x27
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]

              break;
 8002478:	e006      	b.n	8002488 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2220      	movs	r2, #32
 8002482:	4013      	ands	r3, r2
 8002484:	2b20      	cmp	r3, #32
 8002486:	d1e8      	bne.n	800245a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2220      	movs	r2, #32
 8002490:	4013      	ands	r3, r2
 8002492:	2b20      	cmp	r3, #32
 8002494:	d004      	beq.n	80024a0 <I2C_IsErrorOccurred+0x100>
 8002496:	2327      	movs	r3, #39	@ 0x27
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d09b      	beq.n	80023d8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024a0:	2327      	movs	r3, #39	@ 0x27
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2220      	movs	r2, #32
 80024b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	2204      	movs	r2, #4
 80024b6:	4313      	orrs	r3, r2
 80024b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024ba:	2327      	movs	r3, #39	@ 0x27
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	d00c      	beq.n	80024ee <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4313      	orrs	r3, r2
 80024da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	0052      	lsls	r2, r2, #1
 80024e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024e6:	2327      	movs	r3, #39	@ 0x27
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4013      	ands	r3, r2
 80024f6:	d00c      	beq.n	8002512 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2208      	movs	r2, #8
 80024fc:	4313      	orrs	r3, r2
 80024fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2280      	movs	r2, #128	@ 0x80
 8002506:	00d2      	lsls	r2, r2, #3
 8002508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250a:	2327      	movs	r3, #39	@ 0x27
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	2380      	movs	r3, #128	@ 0x80
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4013      	ands	r3, r2
 800251a:	d00c      	beq.n	8002536 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	2202      	movs	r2, #2
 8002520:	4313      	orrs	r3, r2
 8002522:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	0092      	lsls	r2, r2, #2
 800252c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800252e:	2327      	movs	r3, #39	@ 0x27
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002536:	2327      	movs	r3, #39	@ 0x27
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01d      	beq.n	800257c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff fe28 	bl	8002198 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	490e      	ldr	r1, [pc, #56]	@ (800258c <I2C_IsErrorOccurred+0x1ec>)
 8002554:	400a      	ands	r2, r1
 8002556:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	431a      	orrs	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2241      	movs	r2, #65	@ 0x41
 8002568:	2120      	movs	r1, #32
 800256a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2242      	movs	r2, #66	@ 0x42
 8002570:	2100      	movs	r1, #0
 8002572:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2240      	movs	r2, #64	@ 0x40
 8002578:	2100      	movs	r1, #0
 800257a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800257c:	2327      	movs	r3, #39	@ 0x27
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b00a      	add	sp, #40	@ 0x28
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	fe00e800 	.word	0xfe00e800

08002590 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	0008      	movs	r0, r1
 800259a:	0011      	movs	r1, r2
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	240a      	movs	r4, #10
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	1c02      	adds	r2, r0, #0
 80025a4:	801a      	strh	r2, [r3, #0]
 80025a6:	2009      	movs	r0, #9
 80025a8:	183b      	adds	r3, r7, r0
 80025aa:	1c0a      	adds	r2, r1, #0
 80025ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	059b      	lsls	r3, r3, #22
 80025b4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	0419      	lsls	r1, r3, #16
 80025bc:	23ff      	movs	r3, #255	@ 0xff
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ca:	4313      	orrs	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025da:	0d51      	lsrs	r1, r2, #21
 80025dc:	2280      	movs	r2, #128	@ 0x80
 80025de:	00d2      	lsls	r2, r2, #3
 80025e0:	400a      	ands	r2, r1
 80025e2:	4907      	ldr	r1, [pc, #28]	@ (8002600 <I2C_TransferConfig+0x70>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	43d2      	mvns	r2, r2
 80025e8:	401a      	ands	r2, r3
 80025ea:	0011      	movs	r1, r2
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b007      	add	sp, #28
 80025fc:	bd90      	pop	{r4, r7, pc}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	03ff63ff 	.word	0x03ff63ff

08002604 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2241      	movs	r2, #65	@ 0x41
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b20      	cmp	r3, #32
 8002618:	d138      	bne.n	800268c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2240      	movs	r2, #64	@ 0x40
 800261e:	5c9b      	ldrb	r3, [r3, r2]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002624:	2302      	movs	r3, #2
 8002626:	e032      	b.n	800268e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2240      	movs	r2, #64	@ 0x40
 800262c:	2101      	movs	r1, #1
 800262e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2241      	movs	r2, #65	@ 0x41
 8002634:	2124      	movs	r1, #36	@ 0x24
 8002636:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	438a      	bics	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4911      	ldr	r1, [pc, #68]	@ (8002698 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002654:	400a      	ands	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2241      	movs	r2, #65	@ 0x41
 800267c:	2120      	movs	r1, #32
 800267e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2240      	movs	r2, #64	@ 0x40
 8002684:	2100      	movs	r1, #0
 8002686:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e000      	b.n	800268e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800268c:	2302      	movs	r3, #2
  }
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b002      	add	sp, #8
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	ffffefff 	.word	0xffffefff

0800269c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2241      	movs	r2, #65	@ 0x41
 80026aa:	5c9b      	ldrb	r3, [r3, r2]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d139      	bne.n	8002726 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2240      	movs	r2, #64	@ 0x40
 80026b6:	5c9b      	ldrb	r3, [r3, r2]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026bc:	2302      	movs	r3, #2
 80026be:	e033      	b.n	8002728 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	2101      	movs	r1, #1
 80026c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2241      	movs	r2, #65	@ 0x41
 80026cc:	2124      	movs	r1, #36	@ 0x24
 80026ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2101      	movs	r1, #1
 80026dc:	438a      	bics	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2241      	movs	r2, #65	@ 0x41
 8002716:	2120      	movs	r1, #32
 8002718:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2240      	movs	r2, #64	@ 0x40
 800271e:	2100      	movs	r1, #0
 8002720:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}
 8002730:	fffff0ff 	.word	0xfffff0ff

08002734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800273c:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	@ (80027a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	4b17      	ldr	r3, [pc, #92]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d11f      	bne.n	8002798 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	0013      	movs	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	189b      	adds	r3, r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4912      	ldr	r1, [pc, #72]	@ (80027b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002766:	0018      	movs	r0, r3
 8002768:	f7fd fccc 	bl	8000104 <__udivsi3>
 800276c:	0003      	movs	r3, r0
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002772:	e008      	b.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3b01      	subs	r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e001      	b.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e009      	b.n	800279a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	401a      	ands	r2, r3
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	429a      	cmp	r2, r3
 8002796:	d0ed      	beq.n	8002774 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b004      	add	sp, #16
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	40007000 	.word	0x40007000
 80027a8:	fffff9ff 	.word	0xfffff9ff
 80027ac:	20000000 	.word	0x20000000
 80027b0:	000f4240 	.word	0x000f4240

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f000 fb50 	bl	8002e68 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	d100      	bne.n	80027d4 <HAL_RCC_OscConfig+0x20>
 80027d2:	e07c      	b.n	80028ce <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d4:	4bc3      	ldr	r3, [pc, #780]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2238      	movs	r2, #56	@ 0x38
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027de:	4bc1      	ldr	r3, [pc, #772]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2203      	movs	r2, #3
 80027e4:	4013      	ands	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d102      	bne.n	80027f4 <HAL_RCC_OscConfig+0x40>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d002      	beq.n	80027fa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d10b      	bne.n	8002812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fa:	4bba      	ldr	r3, [pc, #744]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	029b      	lsls	r3, r3, #10
 8002802:	4013      	ands	r3, r2
 8002804:	d062      	beq.n	80028cc <HAL_RCC_OscConfig+0x118>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d15e      	bne.n	80028cc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e32a      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	025b      	lsls	r3, r3, #9
 800281a:	429a      	cmp	r2, r3
 800281c:	d107      	bne.n	800282e <HAL_RCC_OscConfig+0x7a>
 800281e:	4bb1      	ldr	r3, [pc, #708]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4bb0      	ldr	r3, [pc, #704]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002824:	2180      	movs	r1, #128	@ 0x80
 8002826:	0249      	lsls	r1, r1, #9
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e020      	b.n	8002870 <HAL_RCC_OscConfig+0xbc>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	23a0      	movs	r3, #160	@ 0xa0
 8002834:	02db      	lsls	r3, r3, #11
 8002836:	429a      	cmp	r2, r3
 8002838:	d10e      	bne.n	8002858 <HAL_RCC_OscConfig+0xa4>
 800283a:	4baa      	ldr	r3, [pc, #680]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4ba9      	ldr	r3, [pc, #676]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002840:	2180      	movs	r1, #128	@ 0x80
 8002842:	02c9      	lsls	r1, r1, #11
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	4ba6      	ldr	r3, [pc, #664]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4ba5      	ldr	r3, [pc, #660]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800284e:	2180      	movs	r1, #128	@ 0x80
 8002850:	0249      	lsls	r1, r1, #9
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xbc>
 8002858:	4ba2      	ldr	r3, [pc, #648]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4ba1      	ldr	r3, [pc, #644]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800285e:	49a2      	ldr	r1, [pc, #648]	@ (8002ae8 <HAL_RCC_OscConfig+0x334>)
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b9f      	ldr	r3, [pc, #636]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b9e      	ldr	r3, [pc, #632]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800286a:	49a0      	ldr	r1, [pc, #640]	@ (8002aec <HAL_RCC_OscConfig+0x338>)
 800286c:	400a      	ands	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fe24 	bl	80014c4 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002882:	f7fe fe1f 	bl	80014c4 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	@ 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e2e9      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002894:	4b93      	ldr	r3, [pc, #588]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0xce>
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fe0f 	bl	80014c4 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe fe0a 	bl	80014c4 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	@ 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e2d4      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	4b89      	ldr	r3, [pc, #548]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0xf8>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_RCC_OscConfig+0x126>
 80028d8:	e099      	b.n	8002a0e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028da:	4b82      	ldr	r3, [pc, #520]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2238      	movs	r2, #56	@ 0x38
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2203      	movs	r2, #3
 80028ea:	4013      	ands	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_OscConfig+0x146>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d002      	beq.n	8002900 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d135      	bne.n	800296c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002900:	4b78      	ldr	r3, [pc, #480]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4013      	ands	r3, r2
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x164>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e2a7      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b72      	ldr	r3, [pc, #456]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a74      	ldr	r2, [pc, #464]	@ (8002af0 <HAL_RCC_OscConfig+0x33c>)
 800291e:	4013      	ands	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	021a      	lsls	r2, r3, #8
 8002928:	4b6e      	ldr	r3, [pc, #440]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d112      	bne.n	800295a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002934:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a6e      	ldr	r2, [pc, #440]	@ (8002af4 <HAL_RCC_OscConfig+0x340>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	4b68      	ldr	r3, [pc, #416]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002948:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0adb      	lsrs	r3, r3, #11
 800294e:	2207      	movs	r2, #7
 8002950:	4013      	ands	r3, r2
 8002952:	4a69      	ldr	r2, [pc, #420]	@ (8002af8 <HAL_RCC_OscConfig+0x344>)
 8002954:	40da      	lsrs	r2, r3
 8002956:	4b69      	ldr	r3, [pc, #420]	@ (8002afc <HAL_RCC_OscConfig+0x348>)
 8002958:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800295a:	4b69      	ldr	r3, [pc, #420]	@ (8002b00 <HAL_RCC_OscConfig+0x34c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0018      	movs	r0, r3
 8002960:	f7fe fd54 	bl	800140c <HAL_InitTick>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d051      	beq.n	8002a0c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e27d      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d030      	beq.n	80029d6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002974:	4b5b      	ldr	r3, [pc, #364]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5e      	ldr	r2, [pc, #376]	@ (8002af4 <HAL_RCC_OscConfig+0x340>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	4b58      	ldr	r3, [pc, #352]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002988:	4b56      	ldr	r3, [pc, #344]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b55      	ldr	r3, [pc, #340]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800298e:	2180      	movs	r1, #128	@ 0x80
 8002990:	0049      	lsls	r1, r1, #1
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fd95 	bl	80014c4 <HAL_GetTick>
 800299a:	0003      	movs	r3, r0
 800299c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a0:	f7fe fd90 	bl	80014c4 <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e25a      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4013      	ands	r3, r2
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b49      	ldr	r3, [pc, #292]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a4b      	ldr	r2, [pc, #300]	@ (8002af0 <HAL_RCC_OscConfig+0x33c>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	4b45      	ldr	r3, [pc, #276]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	e01b      	b.n	8002a0e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b43      	ldr	r3, [pc, #268]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b42      	ldr	r3, [pc, #264]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029dc:	4949      	ldr	r1, [pc, #292]	@ (8002b04 <HAL_RCC_OscConfig+0x350>)
 80029de:	400a      	ands	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fd6f 	bl	80014c4 <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe fd6a 	bl	80014c4 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e234      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fe:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	@ 0x80
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4013      	ands	r3, r2
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x238>
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	4013      	ands	r3, r2
 8002a16:	d047      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a18:	4b32      	ldr	r3, [pc, #200]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2238      	movs	r2, #56	@ 0x38
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b18      	cmp	r3, #24
 8002a22:	d10a      	bne.n	8002a3a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a24:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a28:	2202      	movs	r2, #2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d03c      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2f4>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d138      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e216      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d019      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a42:	4b28      	ldr	r3, [pc, #160]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a46:	4b27      	ldr	r3, [pc, #156]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fd39 	bl	80014c4 <HAL_GetTick>
 8002a52:	0003      	movs	r3, r0
 8002a54:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fd34 	bl	80014c4 <HAL_GetTick>
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1fe      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d0f1      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2a4>
 8002a74:	e018      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002a76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	438a      	bics	r2, r1
 8002a80:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fd1f 	bl	80014c4 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fd1a 	bl	80014c4 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1e4      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d1f1      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2204      	movs	r2, #4
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d100      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x300>
 8002ab2:	e0c7      	b.n	8002c44 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab4:	231f      	movs	r3, #31
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002abc:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2238      	movs	r2, #56	@ 0x38
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d11f      	bne.n	8002b08 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d100      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x320>
 8002ad2:	e0b7      	b.n	8002c44 <HAL_RCC_OscConfig+0x490>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d000      	beq.n	8002ade <HAL_RCC_OscConfig+0x32a>
 8002adc:	e0b2      	b.n	8002c44 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1c2      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	fffeffff 	.word	0xfffeffff
 8002aec:	fffbffff 	.word	0xfffbffff
 8002af0:	ffff80ff 	.word	0xffff80ff
 8002af4:	ffffc7ff 	.word	0xffffc7ff
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004
 8002b04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b08:	4bb5      	ldr	r3, [pc, #724]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	055b      	lsls	r3, r3, #21
 8002b10:	4013      	ands	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_OscConfig+0x364>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x366>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d011      	beq.n	8002b42 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	4bb0      	ldr	r3, [pc, #704]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b22:	4baf      	ldr	r3, [pc, #700]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b24:	2180      	movs	r1, #128	@ 0x80
 8002b26:	0549      	lsls	r1, r1, #21
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b2c:	4bac      	ldr	r3, [pc, #688]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	055b      	lsls	r3, r3, #21
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b3a:	231f      	movs	r3, #31
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	4ba8      	ldr	r3, [pc, #672]	@ (8002de4 <HAL_RCC_OscConfig+0x630>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d11a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b4e:	4ba5      	ldr	r3, [pc, #660]	@ (8002de4 <HAL_RCC_OscConfig+0x630>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4ba4      	ldr	r3, [pc, #656]	@ (8002de4 <HAL_RCC_OscConfig+0x630>)
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	0049      	lsls	r1, r1, #1
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fcb2 	bl	80014c4 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b66:	f7fe fcad 	bl	80014c4 <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e177      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b78:	4b9a      	ldr	r3, [pc, #616]	@ (8002de4 <HAL_RCC_OscConfig+0x630>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3e6>
 8002b8c:	4b94      	ldr	r3, [pc, #592]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b90:	4b93      	ldr	r3, [pc, #588]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b92:	2101      	movs	r1, #1
 8002b94:	430a      	orrs	r2, r1
 8002b96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b98:	e01c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x420>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x408>
 8002ba2:	4b8f      	ldr	r3, [pc, #572]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002ba4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ba6:	4b8e      	ldr	r3, [pc, #568]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002ba8:	2104      	movs	r1, #4
 8002baa:	430a      	orrs	r2, r1
 8002bac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bae:	4b8c      	ldr	r3, [pc, #560]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x420>
 8002bbc:	4b88      	ldr	r3, [pc, #544]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bc0:	4b87      	ldr	r3, [pc, #540]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bc8:	4b85      	ldr	r3, [pc, #532]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bcc:	4b84      	ldr	r3, [pc, #528]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bce:	2104      	movs	r1, #4
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d014      	beq.n	8002c06 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fc72 	bl	80014c4 <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be4:	e009      	b.n	8002bfa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fc6d 	bl	80014c4 <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	4a7d      	ldr	r2, [pc, #500]	@ (8002de8 <HAL_RCC_OscConfig+0x634>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e136      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	4b79      	ldr	r3, [pc, #484]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	2202      	movs	r2, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x432>
 8002c04:	e013      	b.n	8002c2e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fc5d 	bl	80014c4 <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fc58 	bl	80014c4 <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	4a73      	ldr	r2, [pc, #460]	@ (8002de8 <HAL_RCC_OscConfig+0x634>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e121      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c24:	4b6e      	ldr	r3, [pc, #440]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c2e:	231f      	movs	r3, #31
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c38:	4b69      	ldr	r3, [pc, #420]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c3c:	4b68      	ldr	r3, [pc, #416]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c3e:	496b      	ldr	r1, [pc, #428]	@ (8002dec <HAL_RCC_OscConfig+0x638>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d039      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c56:	4b62      	ldr	r3, [pc, #392]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b61      	ldr	r3, [pc, #388]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c5c:	2180      	movs	r1, #128	@ 0x80
 8002c5e:	03c9      	lsls	r1, r1, #15
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fc2e 	bl	80014c4 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c6e:	f7fe fc29 	bl	80014c4 <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0f3      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c80:	4b57      	ldr	r3, [pc, #348]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	@ 0x80
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4ba>
 8002c8c:	e019      	b.n	8002cc2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c8e:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b53      	ldr	r3, [pc, #332]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c94:	4956      	ldr	r1, [pc, #344]	@ (8002df0 <HAL_RCC_OscConfig+0x63c>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fc13 	bl	80014c4 <HAL_GetTick>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca4:	f7fe fc0e 	bl	80014c4 <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0d8      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d100      	bne.n	8002ccc <HAL_RCC_OscConfig+0x518>
 8002cca:	e0cc      	b.n	8002e66 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ccc:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2238      	movs	r2, #56	@ 0x38
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d100      	bne.n	8002cda <HAL_RCC_OscConfig+0x526>
 8002cd8:	e07b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d156      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002ce8:	4942      	ldr	r1, [pc, #264]	@ (8002df4 <HAL_RCC_OscConfig+0x640>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fbe9 	bl	80014c4 <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fbe4 	bl	80014c4 <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0ae      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0a:	4b35      	ldr	r3, [pc, #212]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	049b      	lsls	r3, r3, #18
 8002d12:	4013      	ands	r3, r2
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d16:	4b32      	ldr	r3, [pc, #200]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a37      	ldr	r2, [pc, #220]	@ (8002df8 <HAL_RCC_OscConfig+0x644>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d42:	431a      	orrs	r2, r3
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d46:	430a      	orrs	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4a:	4b25      	ldr	r3, [pc, #148]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b24      	ldr	r3, [pc, #144]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d50:	2180      	movs	r1, #128	@ 0x80
 8002d52:	0449      	lsls	r1, r1, #17
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d5e:	2180      	movs	r1, #128	@ 0x80
 8002d60:	0549      	lsls	r1, r1, #21
 8002d62:	430a      	orrs	r2, r1
 8002d64:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fbad 	bl	80014c4 <HAL_GetTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fba8 	bl	80014c4 <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e072      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	4b17      	ldr	r3, [pc, #92]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	@ 0x80
 8002d88:	049b      	lsls	r3, r3, #18
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x5bc>
 8002d8e:	e06a      	b.n	8002e66 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d96:	4917      	ldr	r1, [pc, #92]	@ (8002df4 <HAL_RCC_OscConfig+0x640>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fb92 	bl	80014c4 <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fb8d 	bl	80014c4 <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e057      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db8:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	049b      	lsls	r3, r3, #18
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002dca:	490c      	ldr	r1, [pc, #48]	@ (8002dfc <HAL_RCC_OscConfig+0x648>)
 8002dcc:	400a      	ands	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	e049      	b.n	8002e66 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d112      	bne.n	8002e00 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e044      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
 8002de8:	00001388 	.word	0x00001388
 8002dec:	efffffff 	.word	0xefffffff
 8002df0:	ffbfffff 	.word	0xffbfffff
 8002df4:	feffffff 	.word	0xfeffffff
 8002df8:	11c1808c 	.word	0x11c1808c
 8002dfc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <HAL_RCC_OscConfig+0x6bc>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d126      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2270      	movs	r2, #112	@ 0x70
 8002e18:	401a      	ands	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d11f      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	23fe      	movs	r3, #254	@ 0xfe
 8002e26:	01db      	lsls	r3, r3, #7
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d116      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	23f8      	movs	r3, #248	@ 0xf8
 8002e38:	039b      	lsls	r3, r3, #14
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10e      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	23e0      	movs	r3, #224	@ 0xe0
 8002e48:	051b      	lsls	r3, r3, #20
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	0f5b      	lsrs	r3, r3, #29
 8002e58:	075a      	lsls	r2, r3, #29
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b008      	add	sp, #32
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0e9      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b76      	ldr	r3, [pc, #472]	@ (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	4013      	ands	r3, r2
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d91e      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b73      	ldr	r3, [pc, #460]	@ (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	4b70      	ldr	r3, [pc, #448]	@ (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fb0c 	bl	80014c4 <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eb0:	e009      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb2:	f7fe fb07 	bl	80014c4 <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	4a6a      	ldr	r2, [pc, #424]	@ (8003068 <HAL_RCC_ClockConfig+0x1f4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0ca      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ec6:	4b67      	ldr	r3, [pc, #412]	@ (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2207      	movs	r2, #7
 8002ecc:	4013      	ands	r3, r2
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1ee      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d015      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d006      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ee8:	4b60      	ldr	r3, [pc, #384]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	4b5f      	ldr	r3, [pc, #380]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002eee:	21e0      	movs	r1, #224	@ 0xe0
 8002ef0:	01c9      	lsls	r1, r1, #7
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4a5d      	ldr	r2, [pc, #372]	@ (8003070 <HAL_RCC_ClockConfig+0x1fc>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	0019      	movs	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b59      	ldr	r3, [pc, #356]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4013      	ands	r3, r2
 8002f12:	d057      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f1c:	4b53      	ldr	r3, [pc, #332]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	4013      	ands	r3, r2
 8002f26:	d12b      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e097      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f34:	4b4d      	ldr	r3, [pc, #308]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	049b      	lsls	r3, r3, #18
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d11f      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e08b      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4c:	4b47      	ldr	r3, [pc, #284]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4013      	ands	r3, r2
 8002f56:	d113      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e07f      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f64:	4b41      	ldr	r3, [pc, #260]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d108      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e074      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f72:	4b3e      	ldr	r3, [pc, #248]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e06d      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f80:	4b3a      	ldr	r3, [pc, #232]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2207      	movs	r2, #7
 8002f86:	4393      	bics	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4b37      	ldr	r3, [pc, #220]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fe fa96 	bl	80014c4 <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9c:	e009      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9e:	f7fe fa91 	bl	80014c4 <HAL_GetTick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003068 <HAL_RCC_ClockConfig+0x1f4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e054      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2238      	movs	r2, #56	@ 0x38
 8002fb8:	401a      	ands	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d1ec      	bne.n	8002f9e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b27      	ldr	r3, [pc, #156]	@ (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2207      	movs	r2, #7
 8002fca:	4013      	ands	r3, r2
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d21e      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b24      	ldr	r3, [pc, #144]	@ (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4393      	bics	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	4b21      	ldr	r3, [pc, #132]	@ (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fa6e 	bl	80014c4 <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fec:	e009      	b.n	8003002 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fee:	f7fe fa69 	bl	80014c4 <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <HAL_RCC_ClockConfig+0x1f4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e02c      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003002:	4b18      	ldr	r3, [pc, #96]	@ (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2207      	movs	r2, #7
 8003008:	4013      	ands	r3, r2
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d1ee      	bne.n	8002fee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2204      	movs	r2, #4
 8003016:	4013      	ands	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800301a:	4b14      	ldr	r3, [pc, #80]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4a15      	ldr	r2, [pc, #84]	@ (8003074 <HAL_RCC_ClockConfig+0x200>)
 8003020:	4013      	ands	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	4b10      	ldr	r3, [pc, #64]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800302e:	f000 f829 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003032:	0001      	movs	r1, r0
 8003034:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	220f      	movs	r2, #15
 800303c:	401a      	ands	r2, r3
 800303e:	4b0e      	ldr	r3, [pc, #56]	@ (8003078 <HAL_RCC_ClockConfig+0x204>)
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	58d3      	ldr	r3, [r2, r3]
 8003044:	221f      	movs	r2, #31
 8003046:	4013      	ands	r3, r2
 8003048:	000a      	movs	r2, r1
 800304a:	40da      	lsrs	r2, r3
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_RCC_ClockConfig+0x208>)
 800304e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCC_ClockConfig+0x20c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0018      	movs	r0, r3
 8003056:	f7fe f9d9 	bl	800140c <HAL_InitTick>
 800305a:	0003      	movs	r3, r0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000
 8003068:	00001388 	.word	0x00001388
 800306c:	40021000 	.word	0x40021000
 8003070:	fffff0ff 	.word	0xfffff0ff
 8003074:	ffff8fff 	.word	0xffff8fff
 8003078:	08003670 	.word	0x08003670
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308a:	4b3c      	ldr	r3, [pc, #240]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2238      	movs	r2, #56	@ 0x38
 8003090:	4013      	ands	r3, r2
 8003092:	d10f      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003094:	4b39      	ldr	r3, [pc, #228]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0adb      	lsrs	r3, r3, #11
 800309a:	2207      	movs	r2, #7
 800309c:	4013      	ands	r3, r2
 800309e:	2201      	movs	r2, #1
 80030a0:	409a      	lsls	r2, r3
 80030a2:	0013      	movs	r3, r2
 80030a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030a6:	6839      	ldr	r1, [r7, #0]
 80030a8:	4835      	ldr	r0, [pc, #212]	@ (8003180 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030aa:	f7fd f82b 	bl	8000104 <__udivsi3>
 80030ae:	0003      	movs	r3, r0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e05d      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b4:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2238      	movs	r2, #56	@ 0x38
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d102      	bne.n	80030c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c0:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x100>)
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e054      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c6:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2238      	movs	r2, #56	@ 0x38
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d138      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030d2:	4b2a      	ldr	r3, [pc, #168]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2203      	movs	r2, #3
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	2207      	movs	r2, #7
 80030e4:	4013      	ands	r3, r2
 80030e6:	3301      	adds	r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d10d      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	4824      	ldr	r0, [pc, #144]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x100>)
 80030f4:	f7fd f806 	bl	8000104 <__udivsi3>
 80030f8:	0003      	movs	r3, r0
 80030fa:	0019      	movs	r1, r3
 80030fc:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	227f      	movs	r2, #127	@ 0x7f
 8003104:	4013      	ands	r3, r2
 8003106:	434b      	muls	r3, r1
 8003108:	617b      	str	r3, [r7, #20]
        break;
 800310a:	e00d      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	481c      	ldr	r0, [pc, #112]	@ (8003180 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003110:	f7fc fff8 	bl	8000104 <__udivsi3>
 8003114:	0003      	movs	r3, r0
 8003116:	0019      	movs	r1, r3
 8003118:	4b18      	ldr	r3, [pc, #96]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	227f      	movs	r2, #127	@ 0x7f
 8003120:	4013      	ands	r3, r2
 8003122:	434b      	muls	r3, r1
 8003124:	617b      	str	r3, [r7, #20]
        break;
 8003126:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003128:	4b14      	ldr	r3, [pc, #80]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0f5b      	lsrs	r3, r3, #29
 800312e:	2207      	movs	r2, #7
 8003130:	4013      	ands	r3, r2
 8003132:	3301      	adds	r3, #1
 8003134:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	6978      	ldr	r0, [r7, #20]
 800313a:	f7fc ffe3 	bl	8000104 <__udivsi3>
 800313e:	0003      	movs	r3, r0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e015      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003144:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2238      	movs	r2, #56	@ 0x38
 800314a:	4013      	ands	r3, r2
 800314c:	2b20      	cmp	r3, #32
 800314e:	d103      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e00b      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003158:	4b08      	ldr	r3, [pc, #32]	@ (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2238      	movs	r2, #56	@ 0x38
 800315e:	4013      	ands	r3, r2
 8003160:	2b18      	cmp	r3, #24
 8003162:	d103      	bne.n	800316c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003164:	23fa      	movs	r3, #250	@ 0xfa
 8003166:	01db      	lsls	r3, r3, #7
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e001      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003170:	693b      	ldr	r3, [r7, #16]
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b006      	add	sp, #24
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	40021000 	.word	0x40021000
 8003180:	00f42400 	.word	0x00f42400
 8003184:	007a1200 	.word	0x007a1200

08003188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003190:	2313      	movs	r3, #19
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003198:	2312      	movs	r3, #18
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	@ 0x80
 80031a6:	029b      	lsls	r3, r3, #10
 80031a8:	4013      	ands	r3, r2
 80031aa:	d100      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031ac:	e0ad      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ae:	2011      	movs	r0, #17
 80031b0:	183b      	adds	r3, r7, r0
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b47      	ldr	r3, [pc, #284]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	055b      	lsls	r3, r3, #21
 80031be:	4013      	ands	r3, r2
 80031c0:	d110      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b44      	ldr	r3, [pc, #272]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031c6:	4b43      	ldr	r3, [pc, #268]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031c8:	2180      	movs	r1, #128	@ 0x80
 80031ca:	0549      	lsls	r1, r1, #21
 80031cc:	430a      	orrs	r2, r1
 80031ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031d0:	4b40      	ldr	r3, [pc, #256]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	055b      	lsls	r3, r3, #21
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	183b      	adds	r3, r7, r0
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e4:	4b3c      	ldr	r3, [pc, #240]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b3b      	ldr	r3, [pc, #236]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80031ea:	2180      	movs	r1, #128	@ 0x80
 80031ec:	0049      	lsls	r1, r1, #1
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f2:	f7fe f967 	bl	80014c4 <HAL_GetTick>
 80031f6:	0003      	movs	r3, r0
 80031f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031fa:	e00b      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fc:	f7fe f962 	bl	80014c4 <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d904      	bls.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800320a:	2313      	movs	r3, #19
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2203      	movs	r2, #3
 8003210:	701a      	strb	r2, [r3, #0]
        break;
 8003212:	e005      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003214:	4b30      	ldr	r3, [pc, #192]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d0ed      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003220:	2313      	movs	r3, #19
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d15e      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800322a:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800322c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800322e:	23c0      	movs	r3, #192	@ 0xc0
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4013      	ands	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d019      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	429a      	cmp	r2, r3
 8003244:	d014      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003246:	4b23      	ldr	r3, [pc, #140]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324a:	4a24      	ldr	r2, [pc, #144]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800324c:	4013      	ands	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003250:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003252:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003254:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003256:	2180      	movs	r1, #128	@ 0x80
 8003258:	0249      	lsls	r1, r1, #9
 800325a:	430a      	orrs	r2, r1
 800325c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800325e:	4b1d      	ldr	r3, [pc, #116]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003260:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003262:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003264:	491e      	ldr	r1, [pc, #120]	@ (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003266:	400a      	ands	r2, r1
 8003268:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800326a:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d016      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe f924 	bl	80014c4 <HAL_GetTick>
 800327c:	0003      	movs	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003280:	e00c      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe f91f 	bl	80014c4 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	4a15      	ldr	r2, [pc, #84]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d904      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003292:	2313      	movs	r3, #19
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2203      	movs	r2, #3
 8003298:	701a      	strb	r2, [r3, #0]
            break;
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329c:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d0ed      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80032a6:	2313      	movs	r3, #19
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b4:	4a09      	ldr	r2, [pc, #36]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	0019      	movs	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032be:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032c0:	430a      	orrs	r2, r1
 80032c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032c4:	e016      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032c6:	2312      	movs	r3, #18
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2213      	movs	r2, #19
 80032cc:	18ba      	adds	r2, r7, r2
 80032ce:	7812      	ldrb	r2, [r2, #0]
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e00f      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
 80032dc:	fffffcff 	.word	0xfffffcff
 80032e0:	fffeffff 	.word	0xfffeffff
 80032e4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	2312      	movs	r3, #18
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	2213      	movs	r2, #19
 80032ee:	18ba      	adds	r2, r7, r2
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032f4:	2311      	movs	r3, #17
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4bb6      	ldr	r3, [pc, #728]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003302:	4bb5      	ldr	r3, [pc, #724]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003304:	49b5      	ldr	r1, [pc, #724]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003306:	400a      	ands	r2, r1
 8003308:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2201      	movs	r2, #1
 8003310:	4013      	ands	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003314:	4bb0      	ldr	r3, [pc, #704]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	2203      	movs	r2, #3
 800331a:	4393      	bics	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	4bad      	ldr	r3, [pc, #692]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003324:	430a      	orrs	r2, r1
 8003326:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2202      	movs	r2, #2
 800332e:	4013      	ands	r3, r2
 8003330:	d009      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003332:	4ba9      	ldr	r3, [pc, #676]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003336:	220c      	movs	r2, #12
 8003338:	4393      	bics	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4ba5      	ldr	r3, [pc, #660]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003342:	430a      	orrs	r2, r1
 8003344:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2204      	movs	r2, #4
 800334c:	4013      	ands	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003350:	4ba1      	ldr	r3, [pc, #644]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003354:	2230      	movs	r2, #48	@ 0x30
 8003356:	4393      	bics	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	4b9e      	ldr	r3, [pc, #632]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003360:	430a      	orrs	r2, r1
 8003362:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2210      	movs	r2, #16
 800336a:	4013      	ands	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800336e:	4b9a      	ldr	r3, [pc, #616]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003372:	4a9b      	ldr	r2, [pc, #620]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003374:	4013      	ands	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	4b96      	ldr	r3, [pc, #600]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800337e:	430a      	orrs	r2, r1
 8003380:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	015b      	lsls	r3, r3, #5
 800338a:	4013      	ands	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800338e:	4b92      	ldr	r3, [pc, #584]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	4a94      	ldr	r2, [pc, #592]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	4b8e      	ldr	r3, [pc, #568]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4013      	ands	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ae:	4b8a      	ldr	r3, [pc, #552]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b2:	4a8d      	ldr	r2, [pc, #564]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033bc:	4b86      	ldr	r3, [pc, #536]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033be:	430a      	orrs	r2, r1
 80033c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	2380      	movs	r3, #128	@ 0x80
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4013      	ands	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ce:	4b82      	ldr	r3, [pc, #520]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d2:	4a86      	ldr	r2, [pc, #536]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033dc:	4b7e      	ldr	r3, [pc, #504]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2220      	movs	r2, #32
 80033e8:	4013      	ands	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ec:	4b7a      	ldr	r3, [pc, #488]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	4a7f      	ldr	r2, [pc, #508]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	4b77      	ldr	r3, [pc, #476]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033fc:	430a      	orrs	r2, r1
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2240      	movs	r2, #64	@ 0x40
 8003406:	4013      	ands	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800340a:	4b73      	ldr	r3, [pc, #460]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	4a79      	ldr	r2, [pc, #484]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	4b6f      	ldr	r3, [pc, #444]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800341a:	430a      	orrs	r2, r1
 800341c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	01db      	lsls	r3, r3, #7
 8003426:	4013      	ands	r3, r2
 8003428:	d015      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800342a:	4b6b      	ldr	r3, [pc, #428]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	0899      	lsrs	r1, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003436:	4b68      	ldr	r3, [pc, #416]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003438:	430a      	orrs	r2, r1
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	05db      	lsls	r3, r3, #23
 8003444:	429a      	cmp	r2, r3
 8003446:	d106      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003448:	4b63      	ldr	r3, [pc, #396]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4b62      	ldr	r3, [pc, #392]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800344e:	2180      	movs	r1, #128	@ 0x80
 8003450:	0249      	lsls	r1, r1, #9
 8003452:	430a      	orrs	r2, r1
 8003454:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	031b      	lsls	r3, r3, #12
 800345e:	4013      	ands	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003462:	4b5d      	ldr	r3, [pc, #372]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003466:	2240      	movs	r2, #64	@ 0x40
 8003468:	4393      	bics	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003470:	4b59      	ldr	r3, [pc, #356]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003472:	430a      	orrs	r2, r1
 8003474:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	039b      	lsls	r3, r3, #14
 800347e:	4013      	ands	r3, r2
 8003480:	d016      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003482:	4b55      	ldr	r3, [pc, #340]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003486:	4a5c      	ldr	r2, [pc, #368]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003488:	4013      	ands	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003490:	4b51      	ldr	r3, [pc, #324]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003492:	430a      	orrs	r2, r1
 8003494:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800349a:	2380      	movs	r3, #128	@ 0x80
 800349c:	03db      	lsls	r3, r3, #15
 800349e:	429a      	cmp	r2, r3
 80034a0:	d106      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80034a2:	4b4d      	ldr	r3, [pc, #308]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	4b4c      	ldr	r3, [pc, #304]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034a8:	2180      	movs	r1, #128	@ 0x80
 80034aa:	0449      	lsls	r1, r1, #17
 80034ac:	430a      	orrs	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	2380      	movs	r3, #128	@ 0x80
 80034b6:	03db      	lsls	r3, r3, #15
 80034b8:	4013      	ands	r3, r2
 80034ba:	d016      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034bc:	4b46      	ldr	r3, [pc, #280]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	4a4e      	ldr	r2, [pc, #312]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034ca:	4b43      	ldr	r3, [pc, #268]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034cc:	430a      	orrs	r2, r1
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	045b      	lsls	r3, r3, #17
 80034d8:	429a      	cmp	r2, r3
 80034da:	d106      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80034dc:	4b3e      	ldr	r3, [pc, #248]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	4b3d      	ldr	r3, [pc, #244]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034e2:	2180      	movs	r1, #128	@ 0x80
 80034e4:	0449      	lsls	r1, r1, #17
 80034e6:	430a      	orrs	r2, r1
 80034e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	@ 0x80
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4013      	ands	r3, r2
 80034f4:	d014      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80034f6:	4b38      	ldr	r3, [pc, #224]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fa:	2203      	movs	r2, #3
 80034fc:	4393      	bics	r3, r2
 80034fe:	0019      	movs	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003506:	430a      	orrs	r2, r1
 8003508:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d106      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003512:	4b31      	ldr	r3, [pc, #196]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	4b30      	ldr	r3, [pc, #192]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003518:	2180      	movs	r1, #128	@ 0x80
 800351a:	0249      	lsls	r1, r1, #9
 800351c:	430a      	orrs	r2, r1
 800351e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2380      	movs	r3, #128	@ 0x80
 8003526:	019b      	lsls	r3, r3, #6
 8003528:	4013      	ands	r3, r2
 800352a:	d014      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800352c:	4b2a      	ldr	r3, [pc, #168]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	220c      	movs	r2, #12
 8003532:	4393      	bics	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800353a:	4b27      	ldr	r3, [pc, #156]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800353c:	430a      	orrs	r2, r1
 800353e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	2b04      	cmp	r3, #4
 8003546:	d106      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003548:	4b23      	ldr	r3, [pc, #140]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	4b22      	ldr	r3, [pc, #136]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800354e:	2180      	movs	r1, #128	@ 0x80
 8003550:	0249      	lsls	r1, r1, #9
 8003552:	430a      	orrs	r2, r1
 8003554:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	045b      	lsls	r3, r3, #17
 800355e:	4013      	ands	r3, r2
 8003560:	d016      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003562:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	4a22      	ldr	r2, [pc, #136]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003568:	4013      	ands	r3, r2
 800356a:	0019      	movs	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003570:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003572:	430a      	orrs	r2, r1
 8003574:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	019b      	lsls	r3, r3, #6
 800357e:	429a      	cmp	r2, r3
 8003580:	d106      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003582:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003588:	2180      	movs	r1, #128	@ 0x80
 800358a:	0449      	lsls	r1, r1, #17
 800358c:	430a      	orrs	r2, r1
 800358e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	049b      	lsls	r3, r3, #18
 8003598:	4013      	ands	r3, r2
 800359a:	d016      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800359c:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	4a10      	ldr	r2, [pc, #64]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035aa:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035ac:	430a      	orrs	r2, r1
 80035ae:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d106      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c2:	2180      	movs	r1, #128	@ 0x80
 80035c4:	0449      	lsls	r1, r1, #17
 80035c6:	430a      	orrs	r2, r1
 80035c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80035ca:	2312      	movs	r3, #18
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	781b      	ldrb	r3, [r3, #0]
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b006      	add	sp, #24
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	efffffff 	.word	0xefffffff
 80035e0:	fffff3ff 	.word	0xfffff3ff
 80035e4:	fffffcff 	.word	0xfffffcff
 80035e8:	fff3ffff 	.word	0xfff3ffff
 80035ec:	ffcfffff 	.word	0xffcfffff
 80035f0:	ffffcfff 	.word	0xffffcfff
 80035f4:	ffff3fff 	.word	0xffff3fff
 80035f8:	ffbfffff 	.word	0xffbfffff
 80035fc:	feffffff 	.word	0xfeffffff

08003600 <memset>:
 8003600:	0003      	movs	r3, r0
 8003602:	1882      	adds	r2, r0, r2
 8003604:	4293      	cmp	r3, r2
 8003606:	d100      	bne.n	800360a <memset+0xa>
 8003608:	4770      	bx	lr
 800360a:	7019      	strb	r1, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	e7f9      	b.n	8003604 <memset+0x4>

08003610 <__libc_init_array>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	2600      	movs	r6, #0
 8003614:	4c0c      	ldr	r4, [pc, #48]	@ (8003648 <__libc_init_array+0x38>)
 8003616:	4d0d      	ldr	r5, [pc, #52]	@ (800364c <__libc_init_array+0x3c>)
 8003618:	1b64      	subs	r4, r4, r5
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	42a6      	cmp	r6, r4
 800361e:	d109      	bne.n	8003634 <__libc_init_array+0x24>
 8003620:	2600      	movs	r6, #0
 8003622:	f000 f819 	bl	8003658 <_init>
 8003626:	4c0a      	ldr	r4, [pc, #40]	@ (8003650 <__libc_init_array+0x40>)
 8003628:	4d0a      	ldr	r5, [pc, #40]	@ (8003654 <__libc_init_array+0x44>)
 800362a:	1b64      	subs	r4, r4, r5
 800362c:	10a4      	asrs	r4, r4, #2
 800362e:	42a6      	cmp	r6, r4
 8003630:	d105      	bne.n	800363e <__libc_init_array+0x2e>
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	00b3      	lsls	r3, r6, #2
 8003636:	58eb      	ldr	r3, [r5, r3]
 8003638:	4798      	blx	r3
 800363a:	3601      	adds	r6, #1
 800363c:	e7ee      	b.n	800361c <__libc_init_array+0xc>
 800363e:	00b3      	lsls	r3, r6, #2
 8003640:	58eb      	ldr	r3, [r5, r3]
 8003642:	4798      	blx	r3
 8003644:	3601      	adds	r6, #1
 8003646:	e7f2      	b.n	800362e <__libc_init_array+0x1e>
 8003648:	080036b0 	.word	0x080036b0
 800364c:	080036b0 	.word	0x080036b0
 8003650:	080036b4 	.word	0x080036b4
 8003654:	080036b0 	.word	0x080036b0

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
