
battery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b58  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  08005c14  08005c14  00006c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c0  080064c0  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080064c0  080064c0  0000806c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080064c0  080064c0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c0  080064c0  000074c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064c4  080064c4  000074c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080064c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  2000006c  08006534  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08006534  0000843c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c977  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236a  00000000  00000000  00014a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00016d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cb  00000000  00000000  00017a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbef  00000000  00000000  00018433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f74c  00000000  00000000  00035022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1ec7  00000000  00000000  0004476e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d8  00000000  00000000  000f6678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f9c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005bfc 	.word	0x08005bfc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08005bfc 	.word	0x08005bfc

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <BQ25798_encodeChargeVoltage_mV>:
 *  REG06 (Input Current Limit): 0x014A -> 3300mA => 10mA/LSB.
 *  REG08 (Precharge Control current portion): codes 0x03,0x04,0x05 => 120,160,200mA => 40mA * code.
 */

/* Charge voltage: 10 mV per LSB */
static inline uint16_t BQ25798_encodeChargeVoltage_mV(uint16_t mV){ return (uint16_t)(mV / 10u); }
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	0002      	movs	r2, r0
 800040c:	1dbb      	adds	r3, r7, #6
 800040e:	801a      	strh	r2, [r3, #0]
 8000410:	1dbb      	adds	r3, r7, #6
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	210a      	movs	r1, #10
 8000416:	0018      	movs	r0, r3
 8000418:	f7ff fe7e 	bl	8000118 <__udivsi3>
 800041c:	0003      	movs	r3, r0
 800041e:	b29b      	uxth	r3, r3
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}

08000428 <BQ25798_encodeChargeCurrent_mA>:
static inline uint16_t BQ25798_decodeChargeVoltage_raw(uint16_t raw){ return (uint16_t)(raw * 10u); }

/* Charge current: 10 mA per LSB */
static inline uint16_t BQ25798_encodeChargeCurrent_mA(uint16_t mA){ return (uint16_t)(mA / 10u); }
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	0002      	movs	r2, r0
 8000430:	1dbb      	adds	r3, r7, #6
 8000432:	801a      	strh	r2, [r3, #0]
 8000434:	1dbb      	adds	r3, r7, #6
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	210a      	movs	r1, #10
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff fe6c 	bl	8000118 <__udivsi3>
 8000440:	0003      	movs	r3, r0
 8000442:	b29b      	uxth	r3, r3
 8000444:	0018      	movs	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bd80      	pop	{r7, pc}

0800044c <BQ25798_encodeInputCurrent_mA>:
static inline uint16_t BQ25798_decodeChargeCurrent_raw(uint16_t raw){ return (uint16_t)(raw * 10u); }

/* Input current: 10 mA per LSB */
static inline uint16_t BQ25798_encodeInputCurrent_mA(uint16_t mA){ return (uint16_t)(mA / 10u); }
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	0002      	movs	r2, r0
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	801a      	strh	r2, [r3, #0]
 8000458:	1dbb      	adds	r3, r7, #6
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	210a      	movs	r1, #10
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff fe5a 	bl	8000118 <__udivsi3>
 8000464:	0003      	movs	r3, r0
 8000466:	b29b      	uxth	r3, r3
 8000468:	0018      	movs	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	b002      	add	sp, #8
 800046e:	bd80      	pop	{r7, pc}

08000470 <BQ25798_encodeInputVoltageLimit_mV>:
static inline uint16_t BQ25798_decodeInputCurrent_raw(uint16_t raw){ return (uint16_t)(raw * 10u); }

/* Input voltage limit (VINDPM): 100 mV per LSB */
static inline uint8_t  BQ25798_encodeInputVoltageLimit_mV(uint16_t mV){ return (uint8_t)(mV / 100u); }
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	0002      	movs	r2, r0
 8000478:	1dbb      	adds	r3, r7, #6
 800047a:	801a      	strh	r2, [r3, #0]
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	2164      	movs	r1, #100	@ 0x64
 8000482:	0018      	movs	r0, r3
 8000484:	f7ff fe48 	bl	8000118 <__udivsi3>
 8000488:	0003      	movs	r3, r0
 800048a:	b29b      	uxth	r3, r3
 800048c:	b2db      	uxtb	r3, r3
 800048e:	0018      	movs	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <BQ25798_init>:
 */
#include "bq25798.h"
#include "stm32g0xx_hal.h" /* Ensure HAL declarations visible here */
#include <stdint.h>

uint8_t  BQ25798_init(BQ25798 *device, I2C_HandleTypeDef *i2cHandle){
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	b087      	sub	sp, #28
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
	device->i2cHandle = i2cHandle;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	683a      	ldr	r2, [r7, #0]
 80004a6:	601a      	str	r2, [r3, #0]

	BQ25798_PartInfo idInfo;
	BQ25798_Result idRes = BQ25798_confirmPart(device, &idInfo);
 80004a8:	2517      	movs	r5, #23
 80004aa:	197c      	adds	r4, r7, r5
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fa      	adds	r2, r7, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f8b4 	bl	8000622 <BQ25798_confirmPart>
 80004ba:	0003      	movs	r3, r0
 80004bc:	7023      	strb	r3, [r4, #0]
	if (idRes != BQ25798_OK) {
 80004be:	197b      	adds	r3, r7, r5
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b25b      	sxtb	r3, r3
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <BQ25798_init+0x34>
		return 255; /* legacy error code path; consider replacing with enum everywhere */
 80004c8:	23ff      	movs	r3, #255	@ 0xff
 80004ca:	e076      	b.n	80005ba <BQ25798_init+0x122>
	}

	/* Configuration writes (placeholders; TODO: replace magic values with masks) */
	uint8_t reg;
	reg = 0xD1; /* Recharge control: 4S, 256ms deglitch, 100mV below VREG (verify decomposition) */
 80004cc:	250b      	movs	r5, #11
 80004ce:	197b      	adds	r3, r7, r5
 80004d0:	22d1      	movs	r2, #209	@ 0xd1
 80004d2:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_RECHARGE_CTRL, &reg);
 80004d4:	197a      	adds	r2, r7, r5
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	210a      	movs	r1, #10
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fcf0 	bl	8000ec0 <BQ25798_WriteRegister>
	reg = 0x10; /* Charger Ctrl 1: disable watchdog, host mode, I2C watchdog reset (verify bits) */
 80004e0:	197b      	adds	r3, r7, r5
 80004e2:	2210      	movs	r2, #16
 80004e4:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGER_CTRL_1, &reg);
 80004e6:	197a      	adds	r2, r7, r5
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2110      	movs	r1, #16
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fce7 	bl	8000ec0 <BQ25798_WriteRegister>

	/* Voltage / current limit setters using scaling helpers */
	/* VSYSMIN left as previously set (complex mapping TBD). Keep existing raw 0x70 placeholder. */
	uint8_t vsys_min = 0x70; /* TODO_VERIFY: derive proper encode for VSYSMIN */
 80004f2:	210a      	movs	r1, #10
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2270      	movs	r2, #112	@ 0x70
 80004f8:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_MIN_SYS_VOLTAGE, &vsys_min);
 80004fa:	187a      	adds	r2, r7, r1
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2100      	movs	r1, #0
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fcdd 	bl	8000ec0 <BQ25798_WriteRegister>

	/* Charge voltage: 14600 mV -> raw 1460 (0x05B4) */
	uint16_t vreg_raw = BQ25798_encodeChargeVoltage_mV(14600);
 8000506:	2614      	movs	r6, #20
 8000508:	19bc      	adds	r4, r7, r6
 800050a:	4b2e      	ldr	r3, [pc, #184]	@ (80005c4 <BQ25798_init+0x12c>)
 800050c:	0018      	movs	r0, r3
 800050e:	f7ff ff79 	bl	8000404 <BQ25798_encodeChargeVoltage_mV>
 8000512:	0003      	movs	r3, r0
 8000514:	8023      	strh	r3, [r4, #0]
	BQ25798_Write16(device, BQ25798_REG_CHARGE_VOLTAGE_LIMIT, vreg_raw);
 8000516:	19bb      	adds	r3, r7, r6
 8000518:	881a      	ldrh	r2, [r3, #0]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2101      	movs	r1, #1
 800051e:	0018      	movs	r0, r3
 8000520:	f000 f8d9 	bl	80006d6 <BQ25798_Write16>

	/* Charge current: choose 5000 mA (raw 500 = 0x01F4); correcting earlier probable typo 0x03F4 */
	uint16_t ichg_raw = BQ25798_encodeChargeCurrent_mA(5000);
 8000524:	2612      	movs	r6, #18
 8000526:	19bc      	adds	r4, r7, r6
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <BQ25798_init+0x130>)
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ff7c 	bl	8000428 <BQ25798_encodeChargeCurrent_mA>
 8000530:	0003      	movs	r3, r0
 8000532:	8023      	strh	r3, [r4, #0]
	BQ25798_Write16(device, BQ25798_REG_CHARGE_CURRENT_LIMIT, ichg_raw);
 8000534:	19bb      	adds	r3, r7, r6
 8000536:	881a      	ldrh	r2, [r3, #0]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2103      	movs	r1, #3
 800053c:	0018      	movs	r0, r3
 800053e:	f000 f8ca 	bl	80006d6 <BQ25798_Write16>

	/* Input voltage limit: 3600 mV -> 0x24 */
	uint8_t vindpm = BQ25798_encodeInputVoltageLimit_mV(3600);
 8000542:	23e1      	movs	r3, #225	@ 0xe1
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff ff92 	bl	8000470 <BQ25798_encodeInputVoltageLimit_mV>
 800054c:	0003      	movs	r3, r0
 800054e:	001a      	movs	r2, r3
 8000550:	2109      	movs	r1, #9
 8000552:	187b      	adds	r3, r7, r1
 8000554:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_INPUT_VOLTAGE_LIMIT, &vindpm);
 8000556:	187a      	adds	r2, r7, r1
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2105      	movs	r1, #5
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fcaf 	bl	8000ec0 <BQ25798_WriteRegister>

	/* Input current limit: 3300 mA -> raw 330 (0x014A) */
	uint16_t iin_raw = BQ25798_encodeInputCurrent_mA(3300);
 8000562:	2610      	movs	r6, #16
 8000564:	19bc      	adds	r4, r7, r6
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <BQ25798_init+0x134>)
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff6f 	bl	800044c <BQ25798_encodeInputCurrent_mA>
 800056e:	0003      	movs	r3, r0
 8000570:	8023      	strh	r3, [r4, #0]
	BQ25798_Write16(device, BQ25798_REG_INPUT_CURRENT_LIMIT, iin_raw);
 8000572:	19bb      	adds	r3, r7, r6
 8000574:	881a      	ldrh	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2106      	movs	r1, #6
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f8ab 	bl	80006d6 <BQ25798_Write16>

	uint8_t prechg = 0x03; /* precharge current config placeholder */
 8000580:	2108      	movs	r1, #8
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2203      	movs	r2, #3
 8000586:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_PRECHARGE_CTRL, &prechg);
 8000588:	187a      	adds	r2, r7, r1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2108      	movs	r1, #8
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fc96 	bl	8000ec0 <BQ25798_WriteRegister>

	reg = 0x8C; /* Charger Ctrl 0: enable charger etc. */
 8000594:	197b      	adds	r3, r7, r5
 8000596:	228c      	movs	r2, #140	@ 0x8c
 8000598:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGER_CTRL_0, &reg);
 800059a:	197a      	adds	r2, r7, r5
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	210f      	movs	r1, #15
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fc8d 	bl	8000ec0 <BQ25798_WriteRegister>
	reg = 0x80; /* ADC control: all ADCs on */
 80005a6:	197b      	adds	r3, r7, r5
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_ADC_CTRL, &reg);
 80005ac:	197a      	adds	r2, r7, r5
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	212e      	movs	r1, #46	@ 0x2e
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fc84 	bl	8000ec0 <BQ25798_WriteRegister>
	return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	b007      	add	sp, #28
 80005c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	00003908 	.word	0x00003908
 80005c8:	00001388 	.word	0x00001388
 80005cc:	00000ce4 	.word	0x00000ce4

080005d0 <BQ25798_decodePartInfo>:

/* ================= Part Info & Helpers ================= */
void BQ25798_decodePartInfo(uint8_t raw, BQ25798_PartInfo *out){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	0002      	movs	r2, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	701a      	strb	r2, [r3, #0]
	if (!out) return;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d01a      	beq.n	800061a <BQ25798_decodePartInfo+0x4a>
	out->raw      = raw;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	1dfa      	adds	r2, r7, #7
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
	out->part3bit = (raw & BQ25798_PART_INFO_PART_MASK)  >> BQ25798_PART_INFO_PART_SHIFT; /* legacy 3-bit */
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	10db      	asrs	r3, r3, #3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2207      	movs	r2, #7
 80005f6:	4013      	ands	r3, r2
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	705a      	strb	r2, [r3, #1]
	out->part5bit = (raw & BQ25798_PART_INFO_PART5_MASK) >> BQ25798_PART_INFO_PART5_SHIFT; /* proposed full */
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	08db      	lsrs	r3, r3, #3
 8000604:	b2da      	uxtb	r2, r3
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	709a      	strb	r2, [r3, #2]
	out->rev      = (raw & BQ25798_PART_INFO_REV_MASK);
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2207      	movs	r2, #7
 8000610:	4013      	ands	r3, r2
 8000612:	b2da      	uxtb	r2, r3
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	70da      	strb	r2, [r3, #3]
 8000618:	e000      	b.n	800061c <BQ25798_decodePartInfo+0x4c>
	if (!out) return;
 800061a:	46c0      	nop			@ (mov r8, r8)
}
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}

08000622 <BQ25798_confirmPart>:

BQ25798_Result BQ25798_confirmPart(BQ25798 *device, BQ25798_PartInfo *infoOut){
 8000622:	b590      	push	{r4, r7, lr}
 8000624:	b087      	sub	sp, #28
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
	uint8_t v;
	if (BQ25798_ReadRegister(device, BQ25798_REG_PART_INFO, &v) != HAL_OK) return BQ25798_ERR_I2C;
 800062c:	230f      	movs	r3, #15
 800062e:	18fa      	adds	r2, r7, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2148      	movs	r1, #72	@ 0x48
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fb24 	bl	8000c82 <BQ25798_ReadRegister>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d002      	beq.n	8000644 <BQ25798_confirmPart+0x22>
 800063e:	2301      	movs	r3, #1
 8000640:	425b      	negs	r3, r3
 8000642:	e044      	b.n	80006ce <BQ25798_confirmPart+0xac>
	BQ25798_PartInfo tmp; BQ25798_decodePartInfo(v, &tmp);
 8000644:	230f      	movs	r3, #15
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2408      	movs	r4, #8
 800064c:	193a      	adds	r2, r7, r4
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff ffbd 	bl	80005d0 <BQ25798_decodePartInfo>
	/* Validation strategy: accept if either legacy 3-bit matches AND rev matches, OR 5-bit matches (once verified). */
	int legacy_ok = (tmp.part3bit == BQ25798_PART_NUM_VAL) && (tmp.rev == BQ25798_DEV_REV_VAL);
 8000656:	0022      	movs	r2, r4
 8000658:	18bb      	adds	r3, r7, r2
 800065a:	785b      	ldrb	r3, [r3, #1]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d105      	bne.n	800066c <BQ25798_confirmPart+0x4a>
 8000660:	18bb      	adds	r3, r7, r2
 8000662:	78db      	ldrb	r3, [r3, #3]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d101      	bne.n	800066c <BQ25798_confirmPart+0x4a>
 8000668:	2301      	movs	r3, #1
 800066a:	e000      	b.n	800066e <BQ25798_confirmPart+0x4c>
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
	int full_ok   = (tmp.part5bit == BQ25798_EXPECTED_PARTNUM_5BIT) && (tmp.rev == BQ25798_EXPECTED_REVISION);
 8000670:	2208      	movs	r2, #8
 8000672:	18bb      	adds	r3, r7, r2
 8000674:	789b      	ldrb	r3, [r3, #2]
 8000676:	2b18      	cmp	r3, #24
 8000678:	d105      	bne.n	8000686 <BQ25798_confirmPart+0x64>
 800067a:	18bb      	adds	r3, r7, r2
 800067c:	78db      	ldrb	r3, [r3, #3]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d101      	bne.n	8000686 <BQ25798_confirmPart+0x64>
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <BQ25798_confirmPart+0x66>
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
	if (!(legacy_ok || full_ok)) {
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d111      	bne.n	80006b4 <BQ25798_confirmPart+0x92>
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d10e      	bne.n	80006b4 <BQ25798_confirmPart+0x92>
		if (infoOut) *infoOut = tmp; /* still return captured info for diagnostics */
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d008      	beq.n	80006ae <BQ25798_confirmPart+0x8c>
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	2308      	movs	r3, #8
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	0010      	movs	r0, r2
 80006a4:	0019      	movs	r1, r3
 80006a6:	2304      	movs	r3, #4
 80006a8:	001a      	movs	r2, r3
 80006aa:	f004 fd82 	bl	80051b2 <memcpy>
		return BQ25798_ERR_ID_MISMATCH;
 80006ae:	2302      	movs	r3, #2
 80006b0:	425b      	negs	r3, r3
 80006b2:	e00c      	b.n	80006ce <BQ25798_confirmPart+0xac>
	}
	if (infoOut) *infoOut = tmp;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d008      	beq.n	80006cc <BQ25798_confirmPart+0xaa>
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	2308      	movs	r3, #8
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	0010      	movs	r0, r2
 80006c2:	0019      	movs	r1, r3
 80006c4:	2304      	movs	r3, #4
 80006c6:	001a      	movs	r2, r3
 80006c8:	f004 fd73 	bl	80051b2 <memcpy>
	return BQ25798_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	0018      	movs	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b007      	add	sp, #28
 80006d4:	bd90      	pop	{r4, r7, pc}

080006d6 <BQ25798_Write16>:
	if (revNum)  *revNum  = info.rev;
	return r; /* relies on enum being compatible with previous int usage (negative on error) */
}

/* ================= 16-bit Access Helpers ================= */
HAL_StatusTypeDef BQ25798_Write16(BQ25798 *device, uint8_t msbReg, uint16_t value){
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b088      	sub	sp, #32
 80006da:	af04      	add	r7, sp, #16
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	0008      	movs	r0, r1
 80006e0:	0011      	movs	r1, r2
 80006e2:	1cfb      	adds	r3, r7, #3
 80006e4:	1c02      	adds	r2, r0, #0
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	003b      	movs	r3, r7
 80006ea:	1c0a      	adds	r2, r1, #0
 80006ec:	801a      	strh	r2, [r3, #0]
	uint8_t buf[2] = { (uint8_t)(value >> 8), (uint8_t)(value & 0xFF) };
 80006ee:	003b      	movs	r3, r7
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	210c      	movs	r1, #12
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	003b      	movs	r3, r7
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	705a      	strb	r2, [r3, #1]
	return HAL_I2C_Mem_Write(device->i2cHandle, BQ25798_I2C_ADDRESS, msbReg, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	1cfb      	adds	r3, r7, #3
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b29a      	uxth	r2, r3
 8000712:	2301      	movs	r3, #1
 8000714:	425b      	negs	r3, r3
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	2302      	movs	r3, #2
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	187b      	adds	r3, r7, r1
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2301      	movs	r3, #1
 8000722:	21d6      	movs	r1, #214	@ 0xd6
 8000724:	f002 fd46 	bl	80031b4 <HAL_I2C_Mem_Write>
 8000728:	0003      	movs	r3, r0
}
 800072a:	0018      	movs	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	b004      	add	sp, #16
 8000730:	bd80      	pop	{r7, pc}

08000732 <readChargerStatus0>:
	if (st == HAL_OK && value){ *value = (uint16_t)(buf[0] << 8 | buf[1]); }
	return st;
}

// Read and interpret REG1B_Charger_Status_0
HAL_StatusTypeDef readChargerStatus0(BQ25798 *device, uint8_t *status){
 8000732:	b5b0      	push	{r4, r5, r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_0, status);
 800073c:	250f      	movs	r5, #15
 800073e:	197c      	adds	r4, r7, r5
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	211b      	movs	r1, #27
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fa9b 	bl	8000c82 <BQ25798_ReadRegister>
 800074c:	0003      	movs	r3, r0
 800074e:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000750:	197b      	adds	r3, r7, r5
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d139      	bne.n	80007cc <readChargerStatus0+0x9a>
        device->chargerStatus0.iindpm_stat       = (*status >> 7) & 0x01;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	09db      	lsrs	r3, r3, #7
 800075e:	b2da      	uxtb	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	731a      	strb	r2, [r3, #12]
        device->chargerStatus0.vindpm_stat       = (*status >> 6) & 0x01;
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	099b      	lsrs	r3, r3, #6
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2201      	movs	r2, #1
 800076e:	4013      	ands	r3, r2
 8000770:	b2da      	uxtb	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	735a      	strb	r2, [r3, #13]
        device->chargerStatus0.wd_stat           = (*status >> 5) & 0x01;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	b2da      	uxtb	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	739a      	strb	r2, [r3, #14]
        device->chargerStatus0.pg_stat           = (*status >> 3) & 0x01;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2201      	movs	r2, #1
 8000792:	4013      	ands	r3, r2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	73da      	strb	r2, [r3, #15]
        device->chargerStatus0.ac2_present_stat  = (*status >> 2) & 0x01;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	089b      	lsrs	r3, r3, #2
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2201      	movs	r2, #1
 80007a4:	4013      	ands	r3, r2
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	741a      	strb	r2, [r3, #16]
        device->chargerStatus0.ac1_present_stat  = (*status >> 1) & 0x01;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2201      	movs	r2, #1
 80007b6:	4013      	ands	r3, r2
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	745a      	strb	r2, [r3, #17]
        device->chargerStatus0.vbus_present_stat = (*status >> 0) & 0x01;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2201      	movs	r2, #1
 80007c4:	4013      	ands	r3, r2
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	749a      	strb	r2, [r3, #18]
    }
    return ret_val;
 80007cc:	230f      	movs	r3, #15
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	781b      	ldrb	r3, [r3, #0]
}
 80007d2:	0018      	movs	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bdb0      	pop	{r4, r5, r7, pc}

080007da <readChargerStatus1>:

// Read and interpret REG1C_Charger_Status_1
HAL_StatusTypeDef readChargerStatus1(BQ25798 *device, uint8_t *status){
 80007da:	b5b0      	push	{r4, r5, r7, lr}
 80007dc:	b084      	sub	sp, #16
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_1, status);
 80007e4:	250f      	movs	r5, #15
 80007e6:	197c      	adds	r4, r7, r5
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	211c      	movs	r1, #28
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fa47 	bl	8000c82 <BQ25798_ReadRegister>
 80007f4:	0003      	movs	r3, r0
 80007f6:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 80007f8:	197b      	adds	r3, r7, r5
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d115      	bne.n	800082c <readChargerStatus1+0x52>
        device->chargerStatus1.chg_stat        = (*status >> 5) & 0x07;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	095b      	lsrs	r3, r3, #5
 8000806:	b2da      	uxtb	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	74da      	strb	r2, [r3, #19]
        device->chargerStatus1.vbus_stat       = (*status >> 1) & 0x0F;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	220f      	movs	r2, #15
 8000816:	4013      	ands	r3, r2
 8000818:	b2da      	uxtb	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	751a      	strb	r2, [r3, #20]
        device->chargerStatus1.bc12_done_stat  = (*status >> 0) & 0x01;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	b2da      	uxtb	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	755a      	strb	r2, [r3, #21]
    }
    return ret_val;
 800082c:	230f      	movs	r3, #15
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781b      	ldrb	r3, [r3, #0]
}
 8000832:	0018      	movs	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	b004      	add	sp, #16
 8000838:	bdb0      	pop	{r4, r5, r7, pc}

0800083a <readChargerStatus2>:

// Read and interpret REG1D_Charger_Status_2
HAL_StatusTypeDef readChargerStatus2(BQ25798 *device, uint8_t *status){
 800083a:	b5b0      	push	{r4, r5, r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_2, status);
 8000844:	250f      	movs	r5, #15
 8000846:	197c      	adds	r4, r7, r5
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	211d      	movs	r1, #29
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fa17 	bl	8000c82 <BQ25798_ReadRegister>
 8000854:	0003      	movs	r3, r0
 8000856:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000858:	197b      	adds	r3, r7, r5
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d11e      	bne.n	800089e <readChargerStatus2+0x64>
        device->chargerStatus2.ico_stat          = (*status >> 6) & 0x03;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	099b      	lsrs	r3, r3, #6
 8000866:	b2da      	uxtb	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	759a      	strb	r2, [r3, #22]
        device->chargerStatus2.treg_stat         = (*status >> 2) & 0x01;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	089b      	lsrs	r3, r3, #2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2201      	movs	r2, #1
 8000876:	4013      	ands	r3, r2
 8000878:	b2da      	uxtb	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	75da      	strb	r2, [r3, #23]
        device->chargerStatus2.dpdm_stat         = (*status >> 1) & 0x01;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	085b      	lsrs	r3, r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2201      	movs	r2, #1
 8000888:	4013      	ands	r3, r2
 800088a:	b2da      	uxtb	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	761a      	strb	r2, [r3, #24]
        device->chargerStatus2.vbat_present_stat = (*status >> 0) & 0x01;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2201      	movs	r2, #1
 8000896:	4013      	ands	r3, r2
 8000898:	b2da      	uxtb	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	765a      	strb	r2, [r3, #25]
    }
    return ret_val;
 800089e:	230f      	movs	r3, #15
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	781b      	ldrb	r3, [r3, #0]
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b004      	add	sp, #16
 80008aa:	bdb0      	pop	{r4, r5, r7, pc}

080008ac <readChargerStatus3>:

// Read and interpret REG1E_Charger_Status_3
HAL_StatusTypeDef readChargerStatus3(BQ25798 *device, uint8_t *status){
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_3, status);
 80008b6:	250f      	movs	r5, #15
 80008b8:	197c      	adds	r4, r7, r5
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	211e      	movs	r1, #30
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 f9de 	bl	8000c82 <BQ25798_ReadRegister>
 80008c6:	0003      	movs	r3, r0
 80008c8:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 80008ca:	197b      	adds	r3, r7, r5
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d13c      	bne.n	800094c <readChargerStatus3+0xa0>
        device->chargerStatus3.acrb2_stat      = (*status >> 7) & 0x01;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	09db      	lsrs	r3, r3, #7
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	769a      	strb	r2, [r3, #26]
        device->chargerStatus3.acrb1_stat      = (*status >> 6) & 0x01;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	099b      	lsrs	r3, r3, #6
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	76da      	strb	r2, [r3, #27]
        device->chargerStatus3.adc_done_stat   = (*status >> 5) & 0x01;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	095b      	lsrs	r3, r3, #5
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2201      	movs	r2, #1
 80008fa:	4013      	ands	r3, r2
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	771a      	strb	r2, [r3, #28]
        device->chargerStatus3.vsys_stat       = (*status >> 4) & 0x01;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	091b      	lsrs	r3, r3, #4
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2201      	movs	r2, #1
 800090c:	4013      	ands	r3, r2
 800090e:	b2da      	uxtb	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	775a      	strb	r2, [r3, #29]
        device->chargerStatus3.chg_tmr_stat    = (*status >> 3) & 0x01;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2201      	movs	r2, #1
 800091e:	4013      	ands	r3, r2
 8000920:	b2da      	uxtb	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	779a      	strb	r2, [r3, #30]
        device->chargerStatus3.trichg_tmr_stat = (*status >> 2) & 0x01;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2201      	movs	r2, #1
 8000930:	4013      	ands	r3, r2
 8000932:	b2da      	uxtb	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	77da      	strb	r2, [r3, #31]
        device->chargerStatus3.prechg_tmr_stat = (*status >> 1) & 0x01;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2201      	movs	r2, #1
 8000942:	4013      	ands	r3, r2
 8000944:	b2d9      	uxtb	r1, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2220      	movs	r2, #32
 800094a:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 800094c:	230f      	movs	r3, #15
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	781b      	ldrb	r3, [r3, #0]
}
 8000952:	0018      	movs	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bdb0      	pop	{r4, r5, r7, pc}

0800095a <readChargerStatus4>:

// Read and interpret REG1F_Charger_Status_4
HAL_StatusTypeDef readChargerStatus4(BQ25798 *device, uint8_t *status){
 800095a:	b5b0      	push	{r4, r5, r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_4, status);
 8000964:	250f      	movs	r5, #15
 8000966:	197c      	adds	r4, r7, r5
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	211f      	movs	r1, #31
 800096e:	0018      	movs	r0, r3
 8000970:	f000 f987 	bl	8000c82 <BQ25798_ReadRegister>
 8000974:	0003      	movs	r3, r0
 8000976:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000978:	197b      	adds	r3, r7, r5
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d12f      	bne.n	80009e0 <readChargerStatus4+0x86>
        device->chargerStatus4.vbatotg_low_stat = (*status >> 4) & 0x01;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	091b      	lsrs	r3, r3, #4
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2201      	movs	r2, #1
 800098a:	4013      	ands	r3, r2
 800098c:	b2d9      	uxtb	r1, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2221      	movs	r2, #33	@ 0x21
 8000992:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_cold_stat     = (*status >> 3) & 0x01;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	08db      	lsrs	r3, r3, #3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2201      	movs	r2, #1
 800099e:	4013      	ands	r3, r2
 80009a0:	b2d9      	uxtb	r1, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2222      	movs	r2, #34	@ 0x22
 80009a6:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_cool_stat     = (*status >> 2) & 0x01;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2201      	movs	r2, #1
 80009b2:	4013      	ands	r3, r2
 80009b4:	b2d9      	uxtb	r1, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2223      	movs	r2, #35	@ 0x23
 80009ba:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_warm_stat     = (*status >> 1) & 0x01;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2201      	movs	r2, #1
 80009c6:	4013      	ands	r3, r2
 80009c8:	b2d9      	uxtb	r1, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2224      	movs	r2, #36	@ 0x24
 80009ce:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_hot_stat      = (*status >> 0) & 0x01;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2201      	movs	r2, #1
 80009d6:	4013      	ands	r3, r2
 80009d8:	b2d9      	uxtb	r1, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2225      	movs	r2, #37	@ 0x25
 80009de:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 80009e0:	230f      	movs	r3, #15
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	781b      	ldrb	r3, [r3, #0]
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b004      	add	sp, #16
 80009ec:	bdb0      	pop	{r4, r5, r7, pc}

080009ee <readFaultStatus0>:

// Read and interpret REG20_FAULT_Status_0
HAL_StatusTypeDef readFaultStatus0(BQ25798 *device, uint8_t *status){
 80009ee:	b5b0      	push	{r4, r5, r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_FAULT_STATUS_0, status);
 80009f8:	250f      	movs	r5, #15
 80009fa:	197c      	adds	r4, r7, r5
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2120      	movs	r1, #32
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 f93d 	bl	8000c82 <BQ25798_ReadRegister>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000a0c:	197b      	adds	r3, r7, r5
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d14a      	bne.n	8000aaa <readFaultStatus0+0xbc>
        device->faultStatus0.ibat_reg_stat  = (*status >> 7) & 0x01;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	09db      	lsrs	r3, r3, #7
 8000a1a:	b2d9      	uxtb	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2226      	movs	r2, #38	@ 0x26
 8000a20:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vbus_ovp_stat  = (*status >> 6) & 0x01;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	099b      	lsrs	r3, r3, #6
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	b2d9      	uxtb	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2227      	movs	r2, #39	@ 0x27
 8000a34:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vbat_ovp_stat  = (*status >> 5) & 0x01;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	b2d9      	uxtb	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2228      	movs	r2, #40	@ 0x28
 8000a48:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.ibus_ocp_stat  = (*status >> 4) & 0x01;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2201      	movs	r2, #1
 8000a54:	4013      	ands	r3, r2
 8000a56:	b2d9      	uxtb	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2229      	movs	r2, #41	@ 0x29
 8000a5c:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.ibat_ocp_stat  = (*status >> 3) & 0x01;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2201      	movs	r2, #1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	b2d9      	uxtb	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	222a      	movs	r2, #42	@ 0x2a
 8000a70:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.conv_ocp_stat  = (*status >> 2) & 0x01;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	b2d9      	uxtb	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	222b      	movs	r2, #43	@ 0x2b
 8000a84:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vac2_ovp_stat  = (*status >> 1) & 0x01;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	085b      	lsrs	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4013      	ands	r3, r2
 8000a92:	b2d9      	uxtb	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	222c      	movs	r2, #44	@ 0x2c
 8000a98:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vac1_ovp_stat  = (*status >> 0) & 0x01;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	b2d9      	uxtb	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	222d      	movs	r2, #45	@ 0x2d
 8000aa8:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	781b      	ldrb	r3, [r3, #0]
}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b004      	add	sp, #16
 8000ab6:	bdb0      	pop	{r4, r5, r7, pc}

08000ab8 <readFaultStatus1>:

// Read and interpret REG21_FAULT_Status_1
HAL_StatusTypeDef readFaultStatus1(BQ25798 *device, uint8_t *status){
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_FAULT_STATUS_1, status);
 8000ac2:	250f      	movs	r5, #15
 8000ac4:	197c      	adds	r4, r7, r5
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2121      	movs	r1, #33	@ 0x21
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 f8d8 	bl	8000c82 <BQ25798_ReadRegister>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000ad6:	197b      	adds	r3, r7, r5
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d12e      	bne.n	8000b3c <readFaultStatus1+0x84>
        device->faultStatus1.vsys_short_stat = (*status >> 7) & 0x01;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	09db      	lsrs	r3, r3, #7
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	222e      	movs	r2, #46	@ 0x2e
 8000aea:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.vsys_ovp_stat   = (*status >> 6) & 0x01;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	099b      	lsrs	r3, r3, #6
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2201      	movs	r2, #1
 8000af6:	4013      	ands	r3, r2
 8000af8:	b2d9      	uxtb	r1, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	222f      	movs	r2, #47	@ 0x2f
 8000afe:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.otg_ovp_stat    = (*status >> 5) & 0x01;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	095b      	lsrs	r3, r3, #5
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	b2d9      	uxtb	r1, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2230      	movs	r2, #48	@ 0x30
 8000b12:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.otg_uvp_stat    = (*status >> 4) & 0x01;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	091b      	lsrs	r3, r3, #4
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4013      	ands	r3, r2
 8000b20:	b2d9      	uxtb	r1, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2231      	movs	r2, #49	@ 0x31
 8000b26:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.tshut_stat      = (*status >> 2) & 0x01;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2201      	movs	r2, #1
 8000b32:	4013      	ands	r3, r2
 8000b34:	b2d9      	uxtb	r1, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2232      	movs	r2, #50	@ 0x32
 8000b3a:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bdb0      	pop	{r4, r5, r7, pc}

08000b4a <BQ25798_readBusVoltage>:

// Read input voltage and current
HAL_StatusTypeDef BQ25798_readBusVoltage(BQ25798 *device){
 8000b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_VBUS_ADC, registerData, 2); // bit resolution 1mV
 8000b52:	260f      	movs	r6, #15
 8000b54:	19bc      	adds	r4, r7, r6
 8000b56:	2508      	movs	r5, #8
 8000b58:	197a      	adds	r2, r7, r5
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	2135      	movs	r1, #53	@ 0x35
 8000b60:	f000 f91a 	bl	8000d98 <BQ25798_ReadRegisters>
 8000b64:	0003      	movs	r3, r0
 8000b66:	7023      	strb	r3, [r4, #0]
	uint16_t voltageRaw = (registerData[0] << 8) | registerData[1];
 8000b68:	0029      	movs	r1, r5
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	210c      	movs	r1, #12
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	801a      	strh	r2, [r3, #0]
	device->voltageBus = voltageRaw; // in mV
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	187a      	adds	r2, r7, r1
 8000b88:	8812      	ldrh	r2, [r2, #0]
 8000b8a:	809a      	strh	r2, [r3, #4]
	return status;
 8000b8c:	19bb      	adds	r3, r7, r6
 8000b8e:	781b      	ldrb	r3, [r3, #0]
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b005      	add	sp, #20
 8000b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b98 <BQ25798_readBusCurrent>:
HAL_StatusTypeDef BQ25798_readBusCurrent(BQ25798 *device){
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_IBUS_ADC, registerData, 2); // bit resolution 1mV
 8000ba0:	260f      	movs	r6, #15
 8000ba2:	19bc      	adds	r4, r7, r6
 8000ba4:	2508      	movs	r5, #8
 8000ba6:	197a      	adds	r2, r7, r5
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	2302      	movs	r3, #2
 8000bac:	2131      	movs	r1, #49	@ 0x31
 8000bae:	f000 f8f3 	bl	8000d98 <BQ25798_ReadRegisters>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	7023      	strb	r3, [r4, #0]
	uint16_t currentRaw = (registerData[0] << 8) | registerData[1];
 8000bb6:	0029      	movs	r1, r5
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	210c      	movs	r1, #12
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	801a      	strh	r2, [r3, #0]
	device->currentBus = currentRaw; // in mA
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	187a      	adds	r2, r7, r1
 8000bd6:	8812      	ldrh	r2, [r2, #0]
 8000bd8:	80da      	strh	r2, [r3, #6]
	return status;
 8000bda:	19bb      	adds	r3, r7, r6
 8000bdc:	781b      	ldrb	r3, [r3, #0]
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b005      	add	sp, #20
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000be6 <BQ25798_readBatteryVoltage>:
// Read output/ battery voltage and current

HAL_StatusTypeDef BQ25798_readBatteryVoltage(BQ25798 *device){
 8000be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_VBAT_ADC, registerData, 2); // bit resolution 1mV
 8000bee:	260f      	movs	r6, #15
 8000bf0:	19bc      	adds	r4, r7, r6
 8000bf2:	2508      	movs	r5, #8
 8000bf4:	197a      	adds	r2, r7, r5
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	213b      	movs	r1, #59	@ 0x3b
 8000bfc:	f000 f8cc 	bl	8000d98 <BQ25798_ReadRegisters>
 8000c00:	0003      	movs	r3, r0
 8000c02:	7023      	strb	r3, [r4, #0]
	uint16_t voltageRaw = (registerData[0] << 8) | registerData[1];
 8000c04:	0029      	movs	r1, r5
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	210c      	movs	r1, #12
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	801a      	strh	r2, [r3, #0]
	device->voltageBattery = voltageRaw; // in mV
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	187a      	adds	r2, r7, r1
 8000c24:	8812      	ldrh	r2, [r2, #0]
 8000c26:	811a      	strh	r2, [r3, #8]
	return status;
 8000c28:	19bb      	adds	r3, r7, r6
 8000c2a:	781b      	ldrb	r3, [r3, #0]
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b005      	add	sp, #20
 8000c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c34 <BQ25798_readBatteryCurrent>:
HAL_StatusTypeDef BQ25798_readBatteryCurrent(BQ25798 *device){
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_IBAT_ADC, registerData, 2); // bit resolution 1mA
 8000c3c:	260f      	movs	r6, #15
 8000c3e:	19bc      	adds	r4, r7, r6
 8000c40:	2508      	movs	r5, #8
 8000c42:	197a      	adds	r2, r7, r5
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	2302      	movs	r3, #2
 8000c48:	2133      	movs	r1, #51	@ 0x33
 8000c4a:	f000 f8a5 	bl	8000d98 <BQ25798_ReadRegisters>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	7023      	strb	r3, [r4, #0]
	uint16_t currentRaw = (registerData[0] << 8) | registerData[1];
 8000c52:	0029      	movs	r1, r5
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	210c      	movs	r1, #12
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	801a      	strh	r2, [r3, #0]
	device->currentBattery = currentRaw; // in mA
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	187a      	adds	r2, r7, r1
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	815a      	strh	r2, [r3, #10]
	return status;
 8000c76:	19bb      	adds	r3, r7, r6
 8000c78:	781b      	ldrb	r3, [r3, #0]
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b005      	add	sp, #20
 8000c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c82 <BQ25798_ReadRegister>:

// LOW LEVEL FUNCTIONS

HAL_StatusTypeDef BQ25798_ReadRegister(BQ25798 *device, uint8_t reg, uint8_t *data){
 8000c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c84:	b08b      	sub	sp, #44	@ 0x2c
 8000c86:	af04      	add	r7, sp, #16
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	260b      	movs	r6, #11
 8000c8e:	19bb      	adds	r3, r7, r6
 8000c90:	1c0a      	adds	r2, r1, #0
 8000c92:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(device->i2cHandle, BQ25798_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	19bb      	adds	r3, r7, r6
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	2517      	movs	r5, #23
 8000ca0:	197c      	adds	r4, r7, r5
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	21d6      	movs	r1, #214	@ 0xd6
 8000cb4:	f002 fbac 	bl	8003410 <HAL_I2C_Mem_Read>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	7023      	strb	r3, [r4, #0]
	if (st != HAL_OK){
 8000cbc:	197b      	adds	r3, r7, r5
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d062      	beq.n	8000d8a <BQ25798_ReadRegister+0x108>
		BM_PUSH_ERROR(device, BM_SRC_BQ25798, BM_ERR_I2C, (uint8_t)st, reg, 0);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d05f      	beq.n	8000d8a <BQ25798_ReadRegister+0x108>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	22f4      	movs	r2, #244	@ 0xf4
 8000cce:	5c9a      	ldrb	r2, [r3, r2]
 8000cd0:	2516      	movs	r5, #22
 8000cd2:	197b      	adds	r3, r7, r5
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	197b      	adds	r3, r7, r5
 8000cdc:	781c      	ldrb	r4, [r3, #0]
 8000cde:	f001 ff27 	bl	8002b30 <HAL_GetTick>
 8000ce2:	0001      	movs	r1, r0
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	0023      	movs	r3, r4
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	191b      	adds	r3, r3, r4
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	18d3      	adds	r3, r2, r3
 8000cf0:	3334      	adds	r3, #52	@ 0x34
 8000cf2:	6019      	str	r1, [r3, #0]
 8000cf4:	002c      	movs	r4, r5
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	68f9      	ldr	r1, [r7, #12]
 8000cfc:	2038      	movs	r0, #56	@ 0x38
 8000cfe:	0013      	movs	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	189b      	adds	r3, r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	18cb      	adds	r3, r1, r3
 8000d08:	181b      	adds	r3, r3, r0
 8000d0a:	22ff      	movs	r2, #255	@ 0xff
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	2039      	movs	r0, #57	@ 0x39
 8000d16:	0013      	movs	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	18cb      	adds	r3, r1, r3
 8000d20:	181b      	adds	r3, r3, r0
 8000d22:	2517      	movs	r5, #23
 8000d24:	197a      	adds	r2, r7, r5
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	68f9      	ldr	r1, [r7, #12]
 8000d30:	203a      	movs	r0, #58	@ 0x3a
 8000d32:	0013      	movs	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	189b      	adds	r3, r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	18cb      	adds	r3, r1, r3
 8000d3c:	181b      	adds	r3, r3, r0
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	68f9      	ldr	r1, [r7, #12]
 8000d48:	203b      	movs	r0, #59	@ 0x3b
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	18cb      	adds	r3, r1, r3
 8000d54:	181b      	adds	r3, r3, r0
 8000d56:	19ba      	adds	r2, r7, r6
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	781a      	ldrb	r2, [r3, #0]
 8000d60:	68f9      	ldr	r1, [r7, #12]
 8000d62:	0013      	movs	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	189b      	adds	r3, r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	18cb      	adds	r3, r1, r3
 8000d6c:	333c      	adds	r3, #60	@ 0x3c
 8000d6e:	2200      	movs	r2, #0
 8000d70:	801a      	strh	r2, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	22f4      	movs	r2, #244	@ 0xf4
 8000d76:	5c9b      	ldrb	r3, [r3, r2]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2d9      	uxtb	r1, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	22f4      	movs	r2, #244	@ 0xf4
 8000d80:	5499      	strb	r1, [r3, r2]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	22f5      	movs	r2, #245	@ 0xf5
 8000d86:	21ff      	movs	r1, #255	@ 0xff
 8000d88:	5499      	strb	r1, [r3, r2]
	}
	return st;
 8000d8a:	2317      	movs	r3, #23
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	781b      	ldrb	r3, [r3, #0]
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b007      	add	sp, #28
 8000d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d98 <BQ25798_ReadRegisters>:

HAL_StatusTypeDef BQ25798_ReadRegisters(BQ25798 *device, uint8_t reg, uint8_t *data, uint8_t length){
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	b08b      	sub	sp, #44	@ 0x2c
 8000d9c:	af04      	add	r7, sp, #16
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	0008      	movs	r0, r1
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	0019      	movs	r1, r3
 8000da6:	260b      	movs	r6, #11
 8000da8:	19bb      	adds	r3, r7, r6
 8000daa:	1c02      	adds	r2, r0, #0
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	240a      	movs	r4, #10
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	1c0a      	adds	r2, r1, #0
 8000db4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(device->i2cHandle, BQ25798_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	19bb      	adds	r3, r7, r6
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	2517      	movs	r5, #23
 8000dc8:	197c      	adds	r4, r7, r5
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4252      	negs	r2, r2
 8000dce:	9202      	str	r2, [sp, #8]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	000a      	movs	r2, r1
 8000dda:	21d6      	movs	r1, #214	@ 0xd6
 8000ddc:	f002 fb18 	bl	8003410 <HAL_I2C_Mem_Read>
 8000de0:	0003      	movs	r3, r0
 8000de2:	7023      	strb	r3, [r4, #0]
	if (st != HAL_OK){
 8000de4:	197b      	adds	r3, r7, r5
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d062      	beq.n	8000eb2 <BQ25798_ReadRegisters+0x11a>
		BM_PUSH_ERROR(device, BM_SRC_BQ25798, BM_ERR_I2C, (uint8_t)st, reg, 0);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d05f      	beq.n	8000eb2 <BQ25798_ReadRegisters+0x11a>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	22f4      	movs	r2, #244	@ 0xf4
 8000df6:	5c9a      	ldrb	r2, [r3, r2]
 8000df8:	2516      	movs	r5, #22
 8000dfa:	197b      	adds	r3, r7, r5
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	400a      	ands	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	197b      	adds	r3, r7, r5
 8000e04:	781c      	ldrb	r4, [r3, #0]
 8000e06:	f001 fe93 	bl	8002b30 <HAL_GetTick>
 8000e0a:	0001      	movs	r1, r0
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	0023      	movs	r3, r4
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	191b      	adds	r3, r3, r4
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	18d3      	adds	r3, r2, r3
 8000e18:	3334      	adds	r3, #52	@ 0x34
 8000e1a:	6019      	str	r1, [r3, #0]
 8000e1c:	002c      	movs	r4, r5
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	68f9      	ldr	r1, [r7, #12]
 8000e24:	2038      	movs	r0, #56	@ 0x38
 8000e26:	0013      	movs	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	189b      	adds	r3, r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	18cb      	adds	r3, r1, r3
 8000e30:	181b      	adds	r3, r3, r0
 8000e32:	22ff      	movs	r2, #255	@ 0xff
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	193b      	adds	r3, r7, r4
 8000e38:	781a      	ldrb	r2, [r3, #0]
 8000e3a:	68f9      	ldr	r1, [r7, #12]
 8000e3c:	2039      	movs	r0, #57	@ 0x39
 8000e3e:	0013      	movs	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	189b      	adds	r3, r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	18cb      	adds	r3, r1, r3
 8000e48:	181b      	adds	r3, r3, r0
 8000e4a:	2517      	movs	r5, #23
 8000e4c:	197a      	adds	r2, r7, r5
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	701a      	strb	r2, [r3, #0]
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	68f9      	ldr	r1, [r7, #12]
 8000e58:	203a      	movs	r0, #58	@ 0x3a
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	189b      	adds	r3, r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	18cb      	adds	r3, r1, r3
 8000e64:	181b      	adds	r3, r3, r0
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	68f9      	ldr	r1, [r7, #12]
 8000e70:	203b      	movs	r0, #59	@ 0x3b
 8000e72:	0013      	movs	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	189b      	adds	r3, r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	18cb      	adds	r3, r1, r3
 8000e7c:	181b      	adds	r3, r3, r0
 8000e7e:	19ba      	adds	r2, r7, r6
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	68f9      	ldr	r1, [r7, #12]
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	189b      	adds	r3, r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	18cb      	adds	r3, r1, r3
 8000e94:	333c      	adds	r3, #60	@ 0x3c
 8000e96:	2200      	movs	r2, #0
 8000e98:	801a      	strh	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	22f4      	movs	r2, #244	@ 0xf4
 8000e9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b2d9      	uxtb	r1, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	22f4      	movs	r2, #244	@ 0xf4
 8000ea8:	5499      	strb	r1, [r3, r2]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	22f5      	movs	r2, #245	@ 0xf5
 8000eae:	21ff      	movs	r1, #255	@ 0xff
 8000eb0:	5499      	strb	r1, [r3, r2]
	}
	return st;
 8000eb2:	2317      	movs	r3, #23
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	781b      	ldrb	r3, [r3, #0]

}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b007      	add	sp, #28
 8000ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ec0 <BQ25798_WriteRegister>:
HAL_StatusTypeDef BQ25798_WriteRegister(BQ25798 *device, uint8_t reg, uint8_t *data){
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	b08b      	sub	sp, #44	@ 0x2c
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	260b      	movs	r6, #11
 8000ecc:	19bb      	adds	r3, r7, r6
 8000ece:	1c0a      	adds	r2, r1, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef st = HAL_I2C_Mem_Write(device->i2cHandle, BQ25798_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	19bb      	adds	r3, r7, r6
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	2517      	movs	r5, #23
 8000ede:	197c      	adds	r4, r7, r5
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	21d6      	movs	r1, #214	@ 0xd6
 8000ef2:	f002 f95f 	bl	80031b4 <HAL_I2C_Mem_Write>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	7023      	strb	r3, [r4, #0]
	if (st != HAL_OK){
 8000efa:	197b      	adds	r3, r7, r5
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d065      	beq.n	8000fce <BQ25798_WriteRegister+0x10e>
		BM_PUSH_ERROR(device, BM_SRC_BQ25798, BM_ERR_I2C, (uint8_t)st, reg, *data);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d062      	beq.n	8000fce <BQ25798_WriteRegister+0x10e>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	22f4      	movs	r2, #244	@ 0xf4
 8000f0c:	5c9a      	ldrb	r2, [r3, r2]
 8000f0e:	2516      	movs	r5, #22
 8000f10:	197b      	adds	r3, r7, r5
 8000f12:	210f      	movs	r1, #15
 8000f14:	400a      	ands	r2, r1
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	197b      	adds	r3, r7, r5
 8000f1a:	781c      	ldrb	r4, [r3, #0]
 8000f1c:	f001 fe08 	bl	8002b30 <HAL_GetTick>
 8000f20:	0001      	movs	r1, r0
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	0023      	movs	r3, r4
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	191b      	adds	r3, r3, r4
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	18d3      	adds	r3, r2, r3
 8000f2e:	3334      	adds	r3, #52	@ 0x34
 8000f30:	6019      	str	r1, [r3, #0]
 8000f32:	002c      	movs	r4, r5
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	2038      	movs	r0, #56	@ 0x38
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	18cb      	adds	r3, r1, r3
 8000f46:	181b      	adds	r3, r3, r0
 8000f48:	22ff      	movs	r2, #255	@ 0xff
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	68f9      	ldr	r1, [r7, #12]
 8000f52:	2039      	movs	r0, #57	@ 0x39
 8000f54:	0013      	movs	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	189b      	adds	r3, r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	18cb      	adds	r3, r1, r3
 8000f5e:	181b      	adds	r3, r3, r0
 8000f60:	2517      	movs	r5, #23
 8000f62:	197a      	adds	r2, r7, r5
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	203a      	movs	r0, #58	@ 0x3a
 8000f70:	0013      	movs	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	189b      	adds	r3, r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	18cb      	adds	r3, r1, r3
 8000f7a:	181b      	adds	r3, r3, r0
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	68f9      	ldr	r1, [r7, #12]
 8000f86:	203b      	movs	r0, #59	@ 0x3b
 8000f88:	0013      	movs	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	189b      	adds	r3, r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	18cb      	adds	r3, r1, r3
 8000f92:	181b      	adds	r3, r3, r0
 8000f94:	19ba      	adds	r2, r7, r6
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7819      	ldrb	r1, [r3, #0]
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	0008      	movs	r0, r1
 8000fa4:	68f9      	ldr	r1, [r7, #12]
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	189b      	adds	r3, r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	18cb      	adds	r3, r1, r3
 8000fb0:	333c      	adds	r3, #60	@ 0x3c
 8000fb2:	1c02      	adds	r2, r0, #0
 8000fb4:	801a      	strh	r2, [r3, #0]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	22f4      	movs	r2, #244	@ 0xf4
 8000fba:	5c9b      	ldrb	r3, [r3, r2]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b2d9      	uxtb	r1, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	22f4      	movs	r2, #244	@ 0xf4
 8000fc4:	5499      	strb	r1, [r3, r2]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	22f5      	movs	r2, #245	@ 0xf5
 8000fca:	21ff      	movs	r1, #255	@ 0xff
 8000fcc:	5499      	strb	r1, [r3, r2]
	}
	return st;
 8000fce:	2317      	movs	r3, #23
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	781b      	ldrb	r3, [r3, #0]

}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b007      	add	sp, #28
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fdc <BQ25798_logStatus>:
	    dev->faultStatus0.vac2_ovp_stat,
	    dev->faultStatus0.vac1_ovp_stat);
}

/* ================= Periodic Status Logger ================= */
void BQ25798_logStatus(const BQ25798 *dev){
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fde:	46de      	mov	lr, fp
 8000fe0:	4657      	mov	r7, sl
 8000fe2:	464e      	mov	r6, r9
 8000fe4:	4645      	mov	r5, r8
 8000fe6:	b5e0      	push	{r5, r6, r7, lr}
 8000fe8:	b099      	sub	sp, #100	@ 0x64
 8000fea:	af0e      	add	r7, sp, #56	@ 0x38
 8000fec:	6178      	str	r0, [r7, #20]
	if (!dev) { BQ_LOG("(null dev)"); return; }
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d104      	bne.n	8000ffe <BQ25798_logStatus+0x22>
 8000ff4:	4b55      	ldr	r3, [pc, #340]	@ (800114c <BQ25798_logStatus+0x170>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f003 ff62 	bl	8004ec0 <puts>
 8000ffc:	e09e      	b.n	800113c <BQ25798_logStatus+0x160>
	/* Simple throttle: only print every 500ms (relies on HAL tick). */
	static uint32_t lastTick = 0;
	uint32_t now = HAL_GetTick();
 8000ffe:	f001 fd97 	bl	8002b30 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61fb      	str	r3, [r7, #28]
	if ((now - lastTick) < 500u) return; /* skip */
 8001006:	4b52      	ldr	r3, [pc, #328]	@ (8001150 <BQ25798_logStatus+0x174>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	1ad2      	subs	r2, r2, r3
 800100e:	23fa      	movs	r3, #250	@ 0xfa
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	429a      	cmp	r2, r3
 8001014:	d200      	bcs.n	8001018 <BQ25798_logStatus+0x3c>
 8001016:	e090      	b.n	800113a <BQ25798_logStatus+0x15e>
	lastTick = now;
 8001018:	4b4d      	ldr	r3, [pc, #308]	@ (8001150 <BQ25798_logStatus+0x174>)
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	601a      	str	r2, [r3, #0]

	/* Derive human-readable charge state (chargerStatus1.chg_stat). Placeholder mapping per datasheet typical patterns. */
	const char *chgState;
	switch (dev->chargerStatus1.chg_stat & 0x7){
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	7cdb      	ldrb	r3, [r3, #19]
 8001022:	001a      	movs	r2, r3
 8001024:	2307      	movs	r3, #7
 8001026:	4013      	ands	r3, r2
 8001028:	2b07      	cmp	r3, #7
 800102a:	d81c      	bhi.n	8001066 <BQ25798_logStatus+0x8a>
 800102c:	009a      	lsls	r2, r3, #2
 800102e:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <BQ25798_logStatus+0x178>)
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	469f      	mov	pc, r3
		case 0: chgState = "Idle"; break;
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <BQ25798_logStatus+0x17c>)
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
 800103a:	e017      	b.n	800106c <BQ25798_logStatus+0x90>
		case 1: chgState = "Trickle"; break;
 800103c:	4b47      	ldr	r3, [pc, #284]	@ (800115c <BQ25798_logStatus+0x180>)
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001040:	e014      	b.n	800106c <BQ25798_logStatus+0x90>
		case 2: chgState = "PreCharge"; break;
 8001042:	4b47      	ldr	r3, [pc, #284]	@ (8001160 <BQ25798_logStatus+0x184>)
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
 8001046:	e011      	b.n	800106c <BQ25798_logStatus+0x90>
		case 3: chgState = "Fast"; break;
 8001048:	4b46      	ldr	r3, [pc, #280]	@ (8001164 <BQ25798_logStatus+0x188>)
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
 800104c:	e00e      	b.n	800106c <BQ25798_logStatus+0x90>
		case 4: chgState = "Taper"; break;
 800104e:	4b46      	ldr	r3, [pc, #280]	@ (8001168 <BQ25798_logStatus+0x18c>)
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
 8001052:	e00b      	b.n	800106c <BQ25798_logStatus+0x90>
		case 5: chgState = "Reserved5"; break;
 8001054:	4b45      	ldr	r3, [pc, #276]	@ (800116c <BQ25798_logStatus+0x190>)
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
 8001058:	e008      	b.n	800106c <BQ25798_logStatus+0x90>
		case 6: chgState = "Reserved6"; break;
 800105a:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <BQ25798_logStatus+0x194>)
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
 800105e:	e005      	b.n	800106c <BQ25798_logStatus+0x90>
		case 7: chgState = "Complete"; break;
 8001060:	4b44      	ldr	r3, [pc, #272]	@ (8001174 <BQ25798_logStatus+0x198>)
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
 8001064:	e002      	b.n	800106c <BQ25798_logStatus+0x90>
		default: chgState = "?"; break;
 8001066:	4b44      	ldr	r3, [pc, #272]	@ (8001178 <BQ25798_logStatus+0x19c>)
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
 800106a:	46c0      	nop			@ (mov r8, r8)
	}
	const char *vbusSrc;
	switch (dev->chargerStatus1.vbus_stat & 0xF){
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	7d1b      	ldrb	r3, [r3, #20]
 8001070:	001a      	movs	r2, r3
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d813      	bhi.n	80010a2 <BQ25798_logStatus+0xc6>
 800107a:	009a      	lsls	r2, r3, #2
 800107c:	4b3f      	ldr	r3, [pc, #252]	@ (800117c <BQ25798_logStatus+0x1a0>)
 800107e:	18d3      	adds	r3, r2, r3
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	469f      	mov	pc, r3
		case 0: vbusSrc = "None"; break;
 8001084:	4b3e      	ldr	r3, [pc, #248]	@ (8001180 <BQ25798_logStatus+0x1a4>)
 8001086:	623b      	str	r3, [r7, #32]
 8001088:	e00e      	b.n	80010a8 <BQ25798_logStatus+0xcc>
		case 1: vbusSrc = "USB_SDP"; break; /* example mapping */
 800108a:	4b3e      	ldr	r3, [pc, #248]	@ (8001184 <BQ25798_logStatus+0x1a8>)
 800108c:	623b      	str	r3, [r7, #32]
 800108e:	e00b      	b.n	80010a8 <BQ25798_logStatus+0xcc>
		case 2: vbusSrc = "USB_CDP"; break;
 8001090:	4b3d      	ldr	r3, [pc, #244]	@ (8001188 <BQ25798_logStatus+0x1ac>)
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	e008      	b.n	80010a8 <BQ25798_logStatus+0xcc>
		case 3: vbusSrc = "USB_DCP"; break;
 8001096:	4b3d      	ldr	r3, [pc, #244]	@ (800118c <BQ25798_logStatus+0x1b0>)
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	e005      	b.n	80010a8 <BQ25798_logStatus+0xcc>
		case 4: vbusSrc = "Adapter"; break;
 800109c:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <BQ25798_logStatus+0x1b4>)
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	e002      	b.n	80010a8 <BQ25798_logStatus+0xcc>
		default: vbusSrc = "Other"; break;
 80010a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <BQ25798_logStatus+0x1b8>)
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	46c0      	nop			@ (mov r8, r8)
	}
	BQ_LOG("STAT t=%lu VBAT=%umV IBAT=%umA VBUS=%umV IBUS=%umA CHG=%s VBUS_SRC=%s PG=%u VBAT_PRES=%u TREG=%u FAULTv=%u%u%u%u%u%u",
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	891b      	ldrh	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	895b      	ldrh	r3, [r3, #10]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	889b      	ldrh	r3, [r3, #4]
 80010b8:	001d      	movs	r5, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	88db      	ldrh	r3, [r3, #6]
 80010be:	001e      	movs	r6, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	7bdb      	ldrb	r3, [r3, #15]
 80010c4:	469c      	mov	ip, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	7e5b      	ldrb	r3, [r3, #25]
 80010ca:	4698      	mov	r8, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	7ddb      	ldrb	r3, [r3, #23]
 80010d0:	4699      	mov	r9, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2227      	movs	r2, #39	@ 0x27
 80010d6:	5c9b      	ldrb	r3, [r3, r2]
 80010d8:	469a      	mov	sl, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2228      	movs	r2, #40	@ 0x28
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	469b      	mov	fp, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2229      	movs	r2, #41	@ 0x29
 80010e6:	5c9b      	ldrb	r3, [r3, r2]
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	222a      	movs	r2, #42	@ 0x2a
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	222b      	movs	r2, #43	@ 0x2b
 80010f6:	5c9b      	ldrb	r3, [r3, r2]
 80010f8:	001c      	movs	r4, r3
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	2326      	movs	r3, #38	@ 0x26
 80010fe:	5cd3      	ldrb	r3, [r2, r3]
 8001100:	69f9      	ldr	r1, [r7, #28]
 8001102:	4825      	ldr	r0, [pc, #148]	@ (8001198 <BQ25798_logStatus+0x1bc>)
 8001104:	930c      	str	r3, [sp, #48]	@ 0x30
 8001106:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001108:	687c      	ldr	r4, [r7, #4]
 800110a:	940a      	str	r4, [sp, #40]	@ 0x28
 800110c:	68bc      	ldr	r4, [r7, #8]
 800110e:	9409      	str	r4, [sp, #36]	@ 0x24
 8001110:	465c      	mov	r4, fp
 8001112:	9408      	str	r4, [sp, #32]
 8001114:	4654      	mov	r4, sl
 8001116:	9407      	str	r4, [sp, #28]
 8001118:	464c      	mov	r4, r9
 800111a:	9406      	str	r4, [sp, #24]
 800111c:	4644      	mov	r4, r8
 800111e:	9405      	str	r4, [sp, #20]
 8001120:	4664      	mov	r4, ip
 8001122:	9404      	str	r4, [sp, #16]
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	9601      	str	r6, [sp, #4]
 800112e:	9500      	str	r5, [sp, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	f003 fe5e 	bl	8004df4 <iprintf>
 8001138:	e000      	b.n	800113c <BQ25798_logStatus+0x160>
	if ((now - lastTick) < 500u) return; /* skip */
 800113a:	46c0      	nop			@ (mov r8, r8)
		   dev->faultStatus0.vbat_ovp_stat,
		   dev->faultStatus0.ibus_ocp_stat,
		   dev->faultStatus0.ibat_ocp_stat,
		   dev->faultStatus0.conv_ocp_stat,
		   dev->faultStatus0.ibat_reg_stat);
}
 800113c:	46bd      	mov	sp, r7
 800113e:	b00b      	add	sp, #44	@ 0x2c
 8001140:	bcf0      	pop	{r4, r5, r6, r7}
 8001142:	46bb      	mov	fp, r7
 8001144:	46b2      	mov	sl, r6
 8001146:	46a9      	mov	r9, r5
 8001148:	46a0      	mov	r8, r4
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114c:	08005d94 	.word	0x08005d94
 8001150:	20000088 	.word	0x20000088
 8001154:	08006418 	.word	0x08006418
 8001158:	08005da4 	.word	0x08005da4
 800115c:	08005dac 	.word	0x08005dac
 8001160:	08005db4 	.word	0x08005db4
 8001164:	08005dc0 	.word	0x08005dc0
 8001168:	08005dc8 	.word	0x08005dc8
 800116c:	08005dd0 	.word	0x08005dd0
 8001170:	08005ddc 	.word	0x08005ddc
 8001174:	08005de8 	.word	0x08005de8
 8001178:	08005df4 	.word	0x08005df4
 800117c:	08006438 	.word	0x08006438
 8001180:	08005df8 	.word	0x08005df8
 8001184:	08005e00 	.word	0x08005e00
 8001188:	08005e08 	.word	0x08005e08
 800118c:	08005e10 	.word	0x08005e10
 8001190:	08005e18 	.word	0x08005e18
 8001194:	08005e20 	.word	0x08005e20
 8001198:	08005e28 	.word	0x08005e28

0800119c <u16_be>:
 * Each placeholder remains tagged in the header with TODO_VERIFY until confirmed.
 */
#include "bq76907.h"

/* -------- Internal Helper: Combine two bytes (MSB first) -------- */
static inline uint16_t u16_be(uint8_t hi, uint8_t lo){ return ((uint16_t)hi << 8) | lo; }
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	0002      	movs	r2, r0
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	1dbb      	adds	r3, r7, #6
 80011aa:	1c0a      	adds	r2, r1, #0
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	1dbb      	adds	r3, r7, #6
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	0018      	movs	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}

080011cc <BQ76907_init>:
 * @brief Initialise BQ76907 driver context.
 * Performs a minimal communication test by reading the DEVICE_ID register.
 * NOTE: No configuration (protections / thresholds) is applied here yet.
 * @return 0 on success, non-zero error code (1 = I2C read failure).
 */
uint8_t BQ76907_init(BQ76907 *dev, I2C_HandleTypeDef *hi2c){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    dev->i2cHandle = hi2c;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	601a      	str	r2, [r3, #0]

    // Basic: read device ID (placeholder register) for sanity
    uint8_t id = 0; // TODO: Replace with verified DEVICE_ID register address usage
 80011dc:	210f      	movs	r1, #15
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
    if (BQ76907_ReadRegister(dev, BQ76907_REG_DEVICE_ID, &id) != HAL_OK){
 80011e4:	187a      	adds	r2, r7, r1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	210c      	movs	r1, #12
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f952 	bl	8001494 <BQ76907_ReadRegister>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <BQ76907_init+0x2c>
        return 1; // comm error
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <BQ76907_init+0x2e>

    // Enable ADC / measurements (placeholder control sequence)
    // TODO: Write verified ADC enable bits
    // BQ76907_WriteRegister(dev, BQ76907_REG_ADC_CONTROL, 0x01); // hypothetical

    return 0; // success
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}

08001202 <BQ76907_readSystemStatus>:

/**
 * @brief Read system status register and decode fault / ready bits.
 * Updates dev->status structure with parsed flags.
 */
HAL_StatusTypeDef BQ76907_readSystemStatus(BQ76907 *dev){
 8001202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
    uint8_t regVal;
    HAL_StatusTypeDef st = BQ76907_ReadRegister(dev, BQ76907_REG_SYS_STAT, &regVal);
 800120a:	260f      	movs	r6, #15
 800120c:	19bc      	adds	r4, r7, r6
 800120e:	250e      	movs	r5, #14
 8001210:	197a      	adds	r2, r7, r5
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2100      	movs	r1, #0
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f93c 	bl	8001494 <BQ76907_ReadRegister>
 800121c:	0003      	movs	r3, r0
 800121e:	7023      	strb	r3, [r4, #0]
    if (st == HAL_OK){
 8001220:	19bb      	adds	r3, r7, r6
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d13c      	bne.n	80012a2 <BQ76907_readSystemStatus+0xa0>
        dev->status.cc_ready  = (regVal & BQ76907_SYS_STAT_CC_READY) ? 1:0;
 8001228:	0029      	movs	r1, r5
 800122a:	187b      	adds	r3, r7, r1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	09db      	lsrs	r3, r3, #7
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	741a      	strb	r2, [r3, #16]
        dev->status.dev_ready = (regVal & BQ76907_SYS_STAT_DEVICE_XREADY) ? 1:0;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	099b      	lsrs	r3, r3, #6
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2201      	movs	r2, #1
 8001240:	4013      	ands	r3, r2
 8001242:	b2da      	uxtb	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	745a      	strb	r2, [r3, #17]
        dev->status.ov_fault  = (regVal & BQ76907_SYS_STAT_OV_FLAG) ? 1:0;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	095b      	lsrs	r3, r3, #5
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	b2da      	uxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	749a      	strb	r2, [r3, #18]
        dev->status.uv_fault  = (regVal & BQ76907_SYS_STAT_UV_FLAG) ? 1:0;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2201      	movs	r2, #1
 8001264:	4013      	ands	r3, r2
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	74da      	strb	r2, [r3, #19]
        dev->status.scd_fault = (regVal & BQ76907_SYS_STAT_SCD_FLAG)? 1:0;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2201      	movs	r2, #1
 8001276:	4013      	ands	r3, r2
 8001278:	b2da      	uxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	751a      	strb	r2, [r3, #20]
        dev->status.ocd_fault = (regVal & BQ76907_SYS_STAT_OCD_FLAG)? 1:0;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2201      	movs	r2, #1
 8001288:	4013      	ands	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	755a      	strb	r2, [r3, #21]
        dev->status.ot_fault  = (regVal & BQ76907_SYS_STAT_OVERTEMP_FLAG)?1:0;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	085b      	lsrs	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	b2da      	uxtb	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	759a      	strb	r2, [r3, #22]
    }
    return st;
 80012a2:	230f      	movs	r3, #15
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	781b      	ldrb	r3, [r3, #0]
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b005      	add	sp, #20
 80012ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012b0 <BQ76907_readCellVoltages>:

/**
 * @brief Read all configured cell voltage registers (4s pack per requirements).
 * Adjust base address arithmetic once actual register map confirmed.
 */
HAL_StatusTypeDef BQ76907_readCellVoltages(BQ76907 *dev){
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    for (uint8_t cell = 0; cell < 4; ++cell){
 80012b8:	230f      	movs	r3, #15
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e054      	b.n	800136c <BQ76907_readCellVoltages+0xbc>
        uint8_t hi, lo;
        uint8_t baseHigh = BQ76907_REG_VCELL1_H + (cell * 2);
 80012c2:	230f      	movs	r3, #15
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3307      	adds	r3, #7
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	210e      	movs	r1, #14
 80012ce:	187a      	adds	r2, r7, r1
 80012d0:	18db      	adds	r3, r3, r3
 80012d2:	7013      	strb	r3, [r2, #0]
        HAL_StatusTypeDef st = BQ76907_ReadRegister(dev, baseHigh, &hi);
 80012d4:	250d      	movs	r5, #13
 80012d6:	197c      	adds	r4, r7, r5
 80012d8:	2309      	movs	r3, #9
 80012da:	18fa      	adds	r2, r7, r3
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	7819      	ldrb	r1, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f8d6 	bl	8001494 <BQ76907_ReadRegister>
 80012e8:	0003      	movs	r3, r0
 80012ea:	7023      	strb	r3, [r4, #0]
        if (st != HAL_OK) return st;
 80012ec:	197b      	adds	r3, r7, r5
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <BQ76907_readCellVoltages+0x4a>
 80012f4:	197b      	adds	r3, r7, r5
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	e03e      	b.n	8001378 <BQ76907_readCellVoltages+0xc8>
        st = BQ76907_ReadRegister(dev, baseHigh + 1, &lo);
 80012fa:	230e      	movs	r3, #14
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	b2d9      	uxtb	r1, r3
 8001304:	250d      	movs	r5, #13
 8001306:	197c      	adds	r4, r7, r5
 8001308:	2308      	movs	r3, #8
 800130a:	18fa      	adds	r2, r7, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	0018      	movs	r0, r3
 8001310:	f000 f8c0 	bl	8001494 <BQ76907_ReadRegister>
 8001314:	0003      	movs	r3, r0
 8001316:	7023      	strb	r3, [r4, #0]
        if (st != HAL_OK) return st;
 8001318:	197b      	adds	r3, r7, r5
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <BQ76907_readCellVoltages+0x76>
 8001320:	197b      	adds	r3, r7, r5
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	e028      	b.n	8001378 <BQ76907_readCellVoltages+0xc8>
        uint16_t raw = u16_be(hi, lo);
 8001326:	2309      	movs	r3, #9
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	2308      	movs	r3, #8
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	260a      	movs	r6, #10
 8001334:	19bc      	adds	r4, r7, r6
 8001336:	0019      	movs	r1, r3
 8001338:	0010      	movs	r0, r2
 800133a:	f7ff ff2f 	bl	800119c <u16_be>
 800133e:	0003      	movs	r3, r0
 8001340:	8023      	strh	r3, [r4, #0]
        dev->cellVoltage_mV[cell] = BQ76907_scaleCellVoltage(raw);
 8001342:	250f      	movs	r5, #15
 8001344:	197b      	adds	r3, r7, r5
 8001346:	781c      	ldrb	r4, [r3, #0]
 8001348:	19bb      	adds	r3, r7, r6
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	0018      	movs	r0, r3
 800134e:	f000 f9bc 	bl	80016ca <BQ76907_scaleCellVoltage>
 8001352:	0003      	movs	r3, r0
 8001354:	0019      	movs	r1, r3
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	0063      	lsls	r3, r4, #1
 800135a:	18d3      	adds	r3, r2, r3
 800135c:	3306      	adds	r3, #6
 800135e:	1c0a      	adds	r2, r1, #0
 8001360:	801a      	strh	r2, [r3, #0]
    for (uint8_t cell = 0; cell < 4; ++cell){
 8001362:	197b      	adds	r3, r7, r5
 8001364:	197a      	adds	r2, r7, r5
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	3201      	adds	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	230f      	movs	r3, #15
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d9a5      	bls.n	80012c2 <BQ76907_readCellVoltages+0x12>
    }
    return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b005      	add	sp, #20
 800137e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001380 <BQ76907_readPackVoltage>:

/**
 * @brief Read pack voltage (two-byte) and scale to millivolts.
 */
HAL_StatusTypeDef BQ76907_readPackVoltage(BQ76907 *dev){
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    uint8_t hi, lo;
    HAL_StatusTypeDef st = BQ76907_ReadRegister(dev, BQ76907_REG_PACK_V_H, &hi);
 8001388:	250f      	movs	r5, #15
 800138a:	197c      	adds	r4, r7, r5
 800138c:	230b      	movs	r3, #11
 800138e:	18fa      	adds	r2, r7, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	212a      	movs	r1, #42	@ 0x2a
 8001394:	0018      	movs	r0, r3
 8001396:	f000 f87d 	bl	8001494 <BQ76907_ReadRegister>
 800139a:	0003      	movs	r3, r0
 800139c:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 800139e:	197b      	adds	r3, r7, r5
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <BQ76907_readPackVoltage+0x2c>
 80013a6:	197b      	adds	r3, r7, r5
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	e029      	b.n	8001400 <BQ76907_readPackVoltage+0x80>
    st = BQ76907_ReadRegister(dev, BQ76907_REG_PACK_V_L, &lo);
 80013ac:	250f      	movs	r5, #15
 80013ae:	197c      	adds	r4, r7, r5
 80013b0:	230a      	movs	r3, #10
 80013b2:	18fa      	adds	r2, r7, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	212b      	movs	r1, #43	@ 0x2b
 80013b8:	0018      	movs	r0, r3
 80013ba:	f000 f86b 	bl	8001494 <BQ76907_ReadRegister>
 80013be:	0003      	movs	r3, r0
 80013c0:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 80013c2:	197b      	adds	r3, r7, r5
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <BQ76907_readPackVoltage+0x50>
 80013ca:	197b      	adds	r3, r7, r5
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	e017      	b.n	8001400 <BQ76907_readPackVoltage+0x80>
    uint16_t raw = u16_be(hi, lo);
 80013d0:	230b      	movs	r3, #11
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	230a      	movs	r3, #10
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	250c      	movs	r5, #12
 80013de:	197c      	adds	r4, r7, r5
 80013e0:	0019      	movs	r1, r3
 80013e2:	0010      	movs	r0, r2
 80013e4:	f7ff feda 	bl	800119c <u16_be>
 80013e8:	0003      	movs	r3, r0
 80013ea:	8023      	strh	r3, [r4, #0]
    dev->packVoltage_mV = BQ76907_scalePackVoltage(raw);
 80013ec:	197b      	adds	r3, r7, r5
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f000 f976 	bl	80016e2 <BQ76907_scalePackVoltage>
 80013f6:	0003      	movs	r3, r0
 80013f8:	001a      	movs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	809a      	strh	r2, [r3, #4]
    return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b004      	add	sp, #16
 8001406:	bdb0      	pop	{r4, r5, r7, pc}

08001408 <BQ76907_readTemperature1>:

/**
 * @brief Read temperature sensor 1 raw value and convert to 0.1 degC units.
 */
HAL_StatusTypeDef BQ76907_readTemperature1(BQ76907 *dev){
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    uint8_t hi, lo;
    HAL_StatusTypeDef st = BQ76907_ReadRegister(dev, BQ76907_REG_TS1_H, &hi);
 8001410:	250f      	movs	r5, #15
 8001412:	197c      	adds	r4, r7, r5
 8001414:	230b      	movs	r3, #11
 8001416:	18fa      	adds	r2, r7, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	212c      	movs	r1, #44	@ 0x2c
 800141c:	0018      	movs	r0, r3
 800141e:	f000 f839 	bl	8001494 <BQ76907_ReadRegister>
 8001422:	0003      	movs	r3, r0
 8001424:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 8001426:	197b      	adds	r3, r7, r5
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <BQ76907_readTemperature1+0x2c>
 800142e:	197b      	adds	r3, r7, r5
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	e02b      	b.n	800148c <BQ76907_readTemperature1+0x84>
    st = BQ76907_ReadRegister(dev, BQ76907_REG_TS1_L, &lo);
 8001434:	250f      	movs	r5, #15
 8001436:	197c      	adds	r4, r7, r5
 8001438:	230a      	movs	r3, #10
 800143a:	18fa      	adds	r2, r7, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	212d      	movs	r1, #45	@ 0x2d
 8001440:	0018      	movs	r0, r3
 8001442:	f000 f827 	bl	8001494 <BQ76907_ReadRegister>
 8001446:	0003      	movs	r3, r0
 8001448:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK) return st;
 800144a:	197b      	adds	r3, r7, r5
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <BQ76907_readTemperature1+0x50>
 8001452:	197b      	adds	r3, r7, r5
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	e019      	b.n	800148c <BQ76907_readTemperature1+0x84>
    int16_t raw = (int16_t)u16_be(hi, lo);
 8001458:	230b      	movs	r3, #11
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	230a      	movs	r3, #10
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	0019      	movs	r1, r3
 8001466:	0010      	movs	r0, r2
 8001468:	f7ff fe98 	bl	800119c <u16_be>
 800146c:	0003      	movs	r3, r0
 800146e:	001a      	movs	r2, r3
 8001470:	210c      	movs	r1, #12
 8001472:	187b      	adds	r3, r7, r1
 8001474:	801a      	strh	r2, [r3, #0]
    dev->ts1_degC_x10 = BQ76907_scaleTemperature(raw);
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	5e9b      	ldrsh	r3, [r3, r2]
 800147c:	0018      	movs	r0, r3
 800147e:	f000 f93c 	bl	80016fa <BQ76907_scaleTemperature>
 8001482:	0003      	movs	r3, r0
 8001484:	001a      	movs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	81da      	strh	r2, [r3, #14]
    return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bdb0      	pop	{r4, r5, r7, pc}

08001494 <BQ76907_ReadRegister>:

/* Low level I2C wrappers */
/**
 * @brief Low-level single register read helper.
 */
HAL_StatusTypeDef BQ76907_ReadRegister(BQ76907 *dev, uint8_t reg, uint8_t *data){
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b08b      	sub	sp, #44	@ 0x2c
 8001498:	af04      	add	r7, sp, #16
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	260b      	movs	r6, #11
 80014a0:	19bb      	adds	r3, r7, r6
 80014a2:	1c0a      	adds	r2, r1, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef st = HAL_I2C_Mem_Read(dev->i2cHandle, BQ76907_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	19bb      	adds	r3, r7, r6
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	2517      	movs	r5, #23
 80014b2:	197c      	adds	r4, r7, r5
 80014b4:	2301      	movs	r3, #1
 80014b6:	425b      	negs	r3, r3
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2301      	movs	r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	2110      	movs	r1, #16
 80014c6:	f001 ffa3 	bl	8003410 <HAL_I2C_Mem_Read>
 80014ca:	0003      	movs	r3, r0
 80014cc:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK){
 80014ce:	197b      	adds	r3, r7, r5
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d062      	beq.n	800159c <BQ76907_ReadRegister+0x108>
        BM_PUSH_ERROR(dev, BM_SRC_BQ76907, BM_ERR_I2C, (uint8_t)st, reg, 0);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d05f      	beq.n	800159c <BQ76907_ReadRegister+0x108>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	22f4      	movs	r2, #244	@ 0xf4
 80014e0:	5c9a      	ldrb	r2, [r3, r2]
 80014e2:	2516      	movs	r5, #22
 80014e4:	197b      	adds	r3, r7, r5
 80014e6:	210f      	movs	r1, #15
 80014e8:	400a      	ands	r2, r1
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	197b      	adds	r3, r7, r5
 80014ee:	781c      	ldrb	r4, [r3, #0]
 80014f0:	f001 fb1e 	bl	8002b30 <HAL_GetTick>
 80014f4:	0001      	movs	r1, r0
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	0023      	movs	r3, r4
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	191b      	adds	r3, r3, r4
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	3334      	adds	r3, #52	@ 0x34
 8001504:	6019      	str	r1, [r3, #0]
 8001506:	002c      	movs	r4, r5
 8001508:	193b      	adds	r3, r7, r4
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	2038      	movs	r0, #56	@ 0x38
 8001510:	0013      	movs	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	189b      	adds	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	18cb      	adds	r3, r1, r3
 800151a:	181b      	adds	r3, r3, r0
 800151c:	22ff      	movs	r2, #255	@ 0xff
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	193b      	adds	r3, r7, r4
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	68f9      	ldr	r1, [r7, #12]
 8001526:	2039      	movs	r0, #57	@ 0x39
 8001528:	0013      	movs	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	189b      	adds	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	18cb      	adds	r3, r1, r3
 8001532:	181b      	adds	r3, r3, r0
 8001534:	2517      	movs	r5, #23
 8001536:	197a      	adds	r2, r7, r5
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	193b      	adds	r3, r7, r4
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	68f9      	ldr	r1, [r7, #12]
 8001542:	203a      	movs	r0, #58	@ 0x3a
 8001544:	0013      	movs	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	189b      	adds	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	18cb      	adds	r3, r1, r3
 800154e:	181b      	adds	r3, r3, r0
 8001550:	2202      	movs	r2, #2
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	193b      	adds	r3, r7, r4
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	203b      	movs	r0, #59	@ 0x3b
 800155c:	0013      	movs	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	189b      	adds	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	18cb      	adds	r3, r1, r3
 8001566:	181b      	adds	r3, r3, r0
 8001568:	19ba      	adds	r2, r7, r6
 800156a:	7812      	ldrb	r2, [r2, #0]
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	193b      	adds	r3, r7, r4
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	0013      	movs	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	189b      	adds	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	18cb      	adds	r3, r1, r3
 800157e:	333c      	adds	r3, #60	@ 0x3c
 8001580:	2200      	movs	r2, #0
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	22f4      	movs	r2, #244	@ 0xf4
 8001588:	5c9b      	ldrb	r3, [r3, r2]
 800158a:	3301      	adds	r3, #1
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	22f4      	movs	r2, #244	@ 0xf4
 8001592:	5499      	strb	r1, [r3, r2]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	22f5      	movs	r2, #245	@ 0xf5
 8001598:	21ff      	movs	r1, #255	@ 0xff
 800159a:	5499      	strb	r1, [r3, r2]
    }
    return st;
 800159c:	2317      	movs	r3, #23
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	781b      	ldrb	r3, [r3, #0]
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b007      	add	sp, #28
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015aa <BQ76907_WriteRegister>:
}

/**
 * @brief Low-level single register write helper.
 */
HAL_StatusTypeDef BQ76907_WriteRegister(BQ76907 *dev, uint8_t reg, uint8_t data){
 80015aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ac:	b089      	sub	sp, #36	@ 0x24
 80015ae:	af04      	add	r7, sp, #16
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	0008      	movs	r0, r1
 80015b4:	0011      	movs	r1, r2
 80015b6:	1cfb      	adds	r3, r7, #3
 80015b8:	1c02      	adds	r2, r0, #0
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	1cbb      	adds	r3, r7, #2
 80015be:	1c0a      	adds	r2, r1, #0
 80015c0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef st = HAL_I2C_Mem_Write(dev->i2cHandle, BQ76907_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	1cfb      	adds	r3, r7, #3
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	260f      	movs	r6, #15
 80015ce:	19bc      	adds	r4, r7, r6
 80015d0:	2301      	movs	r3, #1
 80015d2:	425b      	negs	r3, r3
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	1cbb      	adds	r3, r7, #2
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	2110      	movs	r1, #16
 80015e2:	f001 fde7 	bl	80031b4 <HAL_I2C_Mem_Write>
 80015e6:	0003      	movs	r3, r0
 80015e8:	7023      	strb	r3, [r4, #0]
    if (st != HAL_OK){
 80015ea:	19bb      	adds	r3, r7, r6
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d064      	beq.n	80016bc <BQ76907_WriteRegister+0x112>
        BM_PUSH_ERROR(dev, BM_SRC_BQ76907, BM_ERR_I2C, (uint8_t)st, reg, data);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d061      	beq.n	80016bc <BQ76907_WriteRegister+0x112>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	22f4      	movs	r2, #244	@ 0xf4
 80015fc:	5c9a      	ldrb	r2, [r3, r2]
 80015fe:	250e      	movs	r5, #14
 8001600:	197b      	adds	r3, r7, r5
 8001602:	210f      	movs	r1, #15
 8001604:	400a      	ands	r2, r1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	197b      	adds	r3, r7, r5
 800160a:	781c      	ldrb	r4, [r3, #0]
 800160c:	f001 fa90 	bl	8002b30 <HAL_GetTick>
 8001610:	0001      	movs	r1, r0
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	0023      	movs	r3, r4
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	191b      	adds	r3, r3, r4
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	3334      	adds	r3, #52	@ 0x34
 8001620:	6019      	str	r1, [r3, #0]
 8001622:	002c      	movs	r4, r5
 8001624:	193b      	adds	r3, r7, r4
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	2038      	movs	r0, #56	@ 0x38
 800162c:	0013      	movs	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	189b      	adds	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	18cb      	adds	r3, r1, r3
 8001636:	181b      	adds	r3, r3, r0
 8001638:	22ff      	movs	r2, #255	@ 0xff
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	193b      	adds	r3, r7, r4
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	2039      	movs	r0, #57	@ 0x39
 8001644:	0013      	movs	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	189b      	adds	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	18cb      	adds	r3, r1, r3
 800164e:	181b      	adds	r3, r3, r0
 8001650:	19ba      	adds	r2, r7, r6
 8001652:	7812      	ldrb	r2, [r2, #0]
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	193b      	adds	r3, r7, r4
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	203a      	movs	r0, #58	@ 0x3a
 800165e:	0013      	movs	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	189b      	adds	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	18cb      	adds	r3, r1, r3
 8001668:	181b      	adds	r3, r3, r0
 800166a:	2202      	movs	r2, #2
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	193b      	adds	r3, r7, r4
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	203b      	movs	r0, #59	@ 0x3b
 8001676:	0013      	movs	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	189b      	adds	r3, r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	18cb      	adds	r3, r1, r3
 8001680:	181b      	adds	r3, r3, r0
 8001682:	1cfa      	adds	r2, r7, #3
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	7819      	ldrb	r1, [r3, #0]
 800168c:	193b      	adds	r3, r7, r4
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	0008      	movs	r0, r1
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	0013      	movs	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	189b      	adds	r3, r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	18cb      	adds	r3, r1, r3
 800169e:	333c      	adds	r3, #60	@ 0x3c
 80016a0:	1c02      	adds	r2, r0, #0
 80016a2:	801a      	strh	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	22f4      	movs	r2, #244	@ 0xf4
 80016a8:	5c9b      	ldrb	r3, [r3, r2]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2d9      	uxtb	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	22f4      	movs	r2, #244	@ 0xf4
 80016b2:	5499      	strb	r1, [r3, r2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	22f5      	movs	r2, #245	@ 0xf5
 80016b8:	21ff      	movs	r1, #255	@ 0xff
 80016ba:	5499      	strb	r1, [r3, r2]
    }
    return st;
 80016bc:	230f      	movs	r3, #15
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	781b      	ldrb	r3, [r3, #0]
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b005      	add	sp, #20
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ca <BQ76907_scaleCellVoltage>:
/* Scaling helpers (placeholder implementations) */
/**
 * @brief Convert raw cell voltage reading to millivolts.
 * Placeholder: assumes 1 LSB = 1 mV.
 */
uint16_t BQ76907_scaleCellVoltage(uint16_t raw){
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	0002      	movs	r2, r0
 80016d2:	1dbb      	adds	r3, r7, #6
 80016d4:	801a      	strh	r2, [r3, #0]
    // Datasheet will define LSB (e.g., 1 mV / 0.5 mV). Assume 1 mV for now.
    return raw; // TODO_VERIFY
 80016d6:	1dbb      	adds	r3, r7, #6
 80016d8:	881b      	ldrh	r3, [r3, #0]
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <BQ76907_scalePackVoltage>:
/**
 * @brief Convert raw pack voltage reading to millivolts.
 * Placeholder scaling identical to cell until verified.
 */
uint16_t BQ76907_scalePackVoltage(uint16_t raw){
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	0002      	movs	r2, r0
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	801a      	strh	r2, [r3, #0]
    return raw; // TODO_VERIFY
 80016ee:	1dbb      	adds	r3, r7, #6
 80016f0:	881b      	ldrh	r3, [r3, #0]
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}

080016fa <BQ76907_scaleTemperature>:
/**
 * @brief Convert raw temperature to 0.1 degC units.
 * Placeholder: identity mapping until thermistor conversion is defined.
 */
int16_t BQ76907_scaleTemperature(int16_t raw){
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	0002      	movs	r2, r0
 8001702:	1dbb      	adds	r3, r7, #6
 8001704:	801a      	strh	r2, [r3, #0]
    // Example: raw * 0.1C per LSB -> store *10. Adjust once known.
    return raw; // TODO_VERIFY
 8001706:	1dbb      	adds	r3, r7, #6
 8001708:	2200      	movs	r2, #0
 800170a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <BQ76907_enterConfigUpdate>:
    v |=  BQ76907_SYS_CTRL1_ADC_EN_BIT; /* enable ADC */
    return BQ76907_WriteRegister(dev, BQ76907_REG_SYS_CTRL1, v);
}

/* ================= Configuration & Control Stubs ================= */
HAL_StatusTypeDef BQ76907_enterConfigUpdate(BQ76907 *dev){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    /* Typically a sequence: write command / set bit; placeholder single write */
    return BQ76907_WriteRegister(dev, BQ76907_CMD_SET_CFGUPDATE, 0x01); /* TODO_VERIFY actual mechanism */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	2160      	movs	r1, #96	@ 0x60
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff ff41 	bl	80015aa <BQ76907_WriteRegister>
 8001728:	0003      	movs	r3, r0
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}

08001732 <BQ76907_exitConfigUpdate>:

HAL_StatusTypeDef BQ76907_exitConfigUpdate(BQ76907 *dev){
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
    return BQ76907_WriteRegister(dev, BQ76907_CMD_EXIT_CFGUPDATE, 0x01); /* TODO_VERIFY */
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	2161      	movs	r1, #97	@ 0x61
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff ff32 	bl	80015aa <BQ76907_WriteRegister>
 8001746:	0003      	movs	r3, r0
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}

08001750 <BQ76907_applyConfig>:

HAL_StatusTypeDef BQ76907_applyConfig(BQ76907 *dev, const BQ76907_Config *cfg){
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    /* High level sequence: enter config, write registers, exit config */
    HAL_StatusTypeDef st = BQ76907_enterConfigUpdate(dev); if (st!=HAL_OK) return st;
 800175a:	250f      	movs	r5, #15
 800175c:	197c      	adds	r4, r7, r5
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ffd7 	bl	8001714 <BQ76907_enterConfigUpdate>
 8001766:	0003      	movs	r3, r0
 8001768:	7023      	strb	r3, [r4, #0]
 800176a:	197b      	adds	r3, r7, r5
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <BQ76907_applyConfig+0x28>
 8001772:	197b      	adds	r3, r7, r5
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	e18b      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setPowerConfig(dev, cfg->powerConfig); if (st!=HAL_OK) return st;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	7eda      	ldrb	r2, [r3, #27]
 800177c:	250f      	movs	r5, #15
 800177e:	197c      	adds	r4, r7, r5
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	0011      	movs	r1, r2
 8001784:	0018      	movs	r0, r3
 8001786:	f000 f987 	bl	8001a98 <BQ76907_setPowerConfig>
 800178a:	0003      	movs	r3, r0
 800178c:	7023      	strb	r3, [r4, #0]
 800178e:	197b      	adds	r3, r7, r5
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <BQ76907_applyConfig+0x4c>
 8001796:	197b      	adds	r3, r7, r5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	e179      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setDAConfig(dev, cfg->daConfig); if (st!=HAL_OK) return st;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	7e5a      	ldrb	r2, [r3, #25]
 80017a0:	250f      	movs	r5, #15
 80017a2:	197c      	adds	r4, r7, r5
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	0011      	movs	r1, r2
 80017a8:	0018      	movs	r0, r3
 80017aa:	f000 f988 	bl	8001abe <BQ76907_setDAConfig>
 80017ae:	0003      	movs	r3, r0
 80017b0:	7023      	strb	r3, [r4, #0]
 80017b2:	197b      	adds	r3, r7, r5
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <BQ76907_applyConfig+0x70>
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	e167      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setRegoutConfig(dev, cfg->regoutConfig); if (st!=HAL_OK) return st;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	7e9a      	ldrb	r2, [r3, #26]
 80017c4:	250f      	movs	r5, #15
 80017c6:	197c      	adds	r4, r7, r5
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 f989 	bl	8001ae4 <BQ76907_setRegoutConfig>
 80017d2:	0003      	movs	r3, r0
 80017d4:	7023      	strb	r3, [r4, #0]
 80017d6:	197b      	adds	r3, r7, r5
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <BQ76907_applyConfig+0x94>
 80017de:	197b      	adds	r3, r7, r5
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	e155      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setVcellMode(dev, cfg->cellCount); if (st!=HAL_OK) return st;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	250f      	movs	r5, #15
 80017ea:	197c      	adds	r4, r7, r5
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	0011      	movs	r1, r2
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 f98a 	bl	8001b0a <BQ76907_setVcellMode>
 80017f6:	0003      	movs	r3, r0
 80017f8:	7023      	strb	r3, [r4, #0]
 80017fa:	197b      	adds	r3, r7, r5
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <BQ76907_applyConfig+0xb8>
 8001802:	197b      	adds	r3, r7, r5
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	e143      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setAlarmMaskDefault(dev, cfg->alarmMaskDefault); if (st!=HAL_OK) return st;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	7dda      	ldrb	r2, [r3, #23]
 800180c:	250f      	movs	r5, #15
 800180e:	197c      	adds	r4, r7, r5
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f000 f98b 	bl	8001b30 <BQ76907_setAlarmMaskDefault>
 800181a:	0003      	movs	r3, r0
 800181c:	7023      	strb	r3, [r4, #0]
 800181e:	197b      	adds	r3, r7, r5
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <BQ76907_applyConfig+0xdc>
 8001826:	197b      	adds	r3, r7, r5
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	e131      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setFETOptions(dev, cfg->fetOptions); if (st!=HAL_OK) return st;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	7c5a      	ldrb	r2, [r3, #17]
 8001830:	250f      	movs	r5, #15
 8001832:	197c      	adds	r4, r7, r5
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f000 f98c 	bl	8001b56 <BQ76907_setFETOptions>
 800183e:	0003      	movs	r3, r0
 8001840:	7023      	strb	r3, [r4, #0]
 8001842:	197b      	adds	r3, r7, r5
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <BQ76907_applyConfig+0x100>
 800184a:	197b      	adds	r3, r7, r5
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	e11f      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_enableProtectionsA(dev, cfg->protectionsA); if (st!=HAL_OK) return st;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7c9a      	ldrb	r2, [r3, #18]
 8001854:	250f      	movs	r5, #15
 8001856:	197c      	adds	r4, r7, r5
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f000 f98d 	bl	8001b7c <BQ76907_enableProtectionsA>
 8001862:	0003      	movs	r3, r0
 8001864:	7023      	strb	r3, [r4, #0]
 8001866:	197b      	adds	r3, r7, r5
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <BQ76907_applyConfig+0x124>
 800186e:	197b      	adds	r3, r7, r5
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	e10d      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_enableProtectionsB(dev, cfg->protectionsB); if (st!=HAL_OK) return st;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7cda      	ldrb	r2, [r3, #19]
 8001878:	250f      	movs	r5, #15
 800187a:	197c      	adds	r4, r7, r5
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f000 f98e 	bl	8001ba2 <BQ76907_enableProtectionsB>
 8001886:	0003      	movs	r3, r0
 8001888:	7023      	strb	r3, [r4, #0]
 800188a:	197b      	adds	r3, r7, r5
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <BQ76907_applyConfig+0x148>
 8001892:	197b      	adds	r3, r7, r5
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	e0fb      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setDSGFetProtectionsA(dev, cfg->dsgFetProtA); if (st!=HAL_OK) return st;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7d1a      	ldrb	r2, [r3, #20]
 800189c:	250f      	movs	r5, #15
 800189e:	197c      	adds	r4, r7, r5
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f000 f98f 	bl	8001bc8 <BQ76907_setDSGFetProtectionsA>
 80018aa:	0003      	movs	r3, r0
 80018ac:	7023      	strb	r3, [r4, #0]
 80018ae:	197b      	adds	r3, r7, r5
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <BQ76907_applyConfig+0x16c>
 80018b6:	197b      	adds	r3, r7, r5
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	e0e9      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setCHGFetProtectionsA(dev, cfg->chgFetProtA); if (st!=HAL_OK) return st;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	7d5a      	ldrb	r2, [r3, #21]
 80018c0:	250f      	movs	r5, #15
 80018c2:	197c      	adds	r4, r7, r5
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	0011      	movs	r1, r2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f990 	bl	8001bee <BQ76907_setCHGFetProtectionsA>
 80018ce:	0003      	movs	r3, r0
 80018d0:	7023      	strb	r3, [r4, #0]
 80018d2:	197b      	adds	r3, r7, r5
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <BQ76907_applyConfig+0x190>
 80018da:	197b      	adds	r3, r7, r5
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	e0d7      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setLatchLimit(dev, cfg->latchLimit); if (st!=HAL_OK) return st;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	7d9a      	ldrb	r2, [r3, #22]
 80018e4:	250f      	movs	r5, #15
 80018e6:	197c      	adds	r4, r7, r5
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	0011      	movs	r1, r2
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 f991 	bl	8001c14 <BQ76907_setLatchLimit>
 80018f2:	0003      	movs	r3, r0
 80018f4:	7023      	strb	r3, [r4, #0]
 80018f6:	197b      	adds	r3, r7, r5
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <BQ76907_applyConfig+0x1b4>
 80018fe:	197b      	adds	r3, r7, r5
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	e0c5      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setMaxInternalTemp(dev, cfg->maxInternalTemp_C); if (st!=HAL_OK) return st;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	7b5a      	ldrb	r2, [r3, #13]
 8001908:	250f      	movs	r5, #15
 800190a:	197c      	adds	r4, r7, r5
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f000 f992 	bl	8001c3a <BQ76907_setMaxInternalTemp>
 8001916:	0003      	movs	r3, r0
 8001918:	7023      	strb	r3, [r4, #0]
 800191a:	197b      	adds	r3, r7, r5
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <BQ76907_applyConfig+0x1d8>
 8001922:	197b      	adds	r3, r7, r5
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	e0b3      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setCUVThreshold(dev, cfg->uvThreshold_mV); if (st!=HAL_OK) return st;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	885a      	ldrh	r2, [r3, #2]
 800192c:	250f      	movs	r5, #15
 800192e:	197c      	adds	r4, r7, r5
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	0011      	movs	r1, r2
 8001934:	0018      	movs	r0, r3
 8001936:	f000 f993 	bl	8001c60 <BQ76907_setCUVThreshold>
 800193a:	0003      	movs	r3, r0
 800193c:	7023      	strb	r3, [r4, #0]
 800193e:	197b      	adds	r3, r7, r5
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <BQ76907_applyConfig+0x1fc>
 8001946:	197b      	adds	r3, r7, r5
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	e0a1      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setCOVThreshold(dev, cfg->ovThreshold_mV); if (st!=HAL_OK) return st;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	889a      	ldrh	r2, [r3, #4]
 8001950:	250f      	movs	r5, #15
 8001952:	197c      	adds	r4, r7, r5
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0011      	movs	r1, r2
 8001958:	0018      	movs	r0, r3
 800195a:	f000 f99b 	bl	8001c94 <BQ76907_setCOVThreshold>
 800195e:	0003      	movs	r3, r0
 8001960:	7023      	strb	r3, [r4, #0]
 8001962:	197b      	adds	r3, r7, r5
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <BQ76907_applyConfig+0x220>
 800196a:	197b      	adds	r3, r7, r5
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	e08f      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setOCChargeThreshold(dev, cfg->ocCharge_mA); if (st!=HAL_OK) return st;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	88da      	ldrh	r2, [r3, #6]
 8001974:	250f      	movs	r5, #15
 8001976:	197c      	adds	r4, r7, r5
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0011      	movs	r1, r2
 800197c:	0018      	movs	r0, r3
 800197e:	f000 f9a3 	bl	8001cc8 <BQ76907_setOCChargeThreshold>
 8001982:	0003      	movs	r3, r0
 8001984:	7023      	strb	r3, [r4, #0]
 8001986:	197b      	adds	r3, r7, r5
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <BQ76907_applyConfig+0x244>
 800198e:	197b      	adds	r3, r7, r5
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	e07d      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setOCDischarge1Threshold(dev, cfg->ocDischarge1_mA); if (st!=HAL_OK) return st;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	891a      	ldrh	r2, [r3, #8]
 8001998:	250f      	movs	r5, #15
 800199a:	197c      	adds	r4, r7, r5
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	0011      	movs	r1, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	f000 f9ab 	bl	8001cfc <BQ76907_setOCDischarge1Threshold>
 80019a6:	0003      	movs	r3, r0
 80019a8:	7023      	strb	r3, [r4, #0]
 80019aa:	197b      	adds	r3, r7, r5
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <BQ76907_applyConfig+0x268>
 80019b2:	197b      	adds	r3, r7, r5
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	e06b      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setOCDischarge2Threshold(dev, cfg->ocDischarge2_mA); if (st!=HAL_OK) return st;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	895a      	ldrh	r2, [r3, #10]
 80019bc:	250f      	movs	r5, #15
 80019be:	197c      	adds	r4, r7, r5
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f9b3 	bl	8001d30 <BQ76907_setOCDischarge2Threshold>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]
 80019ce:	197b      	adds	r3, r7, r5
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <BQ76907_applyConfig+0x28c>
 80019d6:	197b      	adds	r3, r7, r5
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	e059      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setInternalOTThreshold(dev, cfg->internalOT_C); if (st!=HAL_OK) return st;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7b1a      	ldrb	r2, [r3, #12]
 80019e0:	250f      	movs	r5, #15
 80019e2:	197c      	adds	r4, r7, r5
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 f9bb 	bl	8001d64 <BQ76907_setInternalOTThreshold>
 80019ee:	0003      	movs	r3, r0
 80019f0:	7023      	strb	r3, [r4, #0]
 80019f2:	197b      	adds	r3, r7, r5
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <BQ76907_applyConfig+0x2b0>
 80019fa:	197b      	adds	r3, r7, r5
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	e047      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setVoltageTime(dev, cfg->voltageTimeUnits); if (st!=HAL_OK) return st;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	7c1a      	ldrb	r2, [r3, #16]
 8001a04:	250f      	movs	r5, #15
 8001a06:	197c      	adds	r4, r7, r5
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f000 f9bc 	bl	8001d8a <BQ76907_setVoltageTime>
 8001a12:	0003      	movs	r3, r0
 8001a14:	7023      	strb	r3, [r4, #0]
 8001a16:	197b      	adds	r3, r7, r5
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <BQ76907_applyConfig+0x2d4>
 8001a1e:	197b      	adds	r3, r7, r5
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	e035      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    st = BQ76907_setAlarmEnable(dev, cfg->alarmEnableMask); if (st!=HAL_OK) return st;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	7e1a      	ldrb	r2, [r3, #24]
 8001a28:	250f      	movs	r5, #15
 8001a2a:	197c      	adds	r4, r7, r5
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0011      	movs	r1, r2
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 f9bd 	bl	8001db0 <BQ76907_setAlarmEnable>
 8001a36:	0003      	movs	r3, r0
 8001a38:	7023      	strb	r3, [r4, #0]
 8001a3a:	197b      	adds	r3, r7, r5
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <BQ76907_applyConfig+0x2f8>
 8001a42:	197b      	adds	r3, r7, r5
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	e023      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    /* Additional host-side scheduling for balanceInterval_ms not written here */
    HAL_StatusTypeDef st2 = BQ76907_exitConfigUpdate(dev);
 8001a48:	250e      	movs	r5, #14
 8001a4a:	197c      	adds	r4, r7, r5
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff fe6f 	bl	8001732 <BQ76907_exitConfigUpdate>
 8001a54:	0003      	movs	r3, r0
 8001a56:	7023      	strb	r3, [r4, #0]
    if (st2 == HAL_OK) {
 8001a58:	197b      	adds	r3, r7, r5
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10b      	bne.n	8001a78 <BQ76907_applyConfig+0x328>
        dev->activeConfig = *cfg; /* snapshot */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	3318      	adds	r3, #24
 8001a66:	0011      	movs	r1, r2
 8001a68:	221c      	movs	r2, #28
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f003 fba1 	bl	80051b2 <memcpy>
        return st;
 8001a70:	230f      	movs	r3, #15
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	e00b      	b.n	8001a90 <BQ76907_applyConfig+0x340>
    }
    return (st==HAL_OK)? st2 : st; /* return first failure or exit failure */
 8001a78:	230f      	movs	r3, #15
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <BQ76907_applyConfig+0x33a>
 8001a82:	230e      	movs	r3, #14
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	e002      	b.n	8001a90 <BQ76907_applyConfig+0x340>
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	781b      	ldrb	r3, [r3, #0]
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bdb0      	pop	{r4, r5, r7, pc}

08001a98 <BQ76907_setPowerConfig>:

/* Individual register writers (placeholder conversions) */
#define WRITE_RAW(dev, reg, val) BQ76907_WriteRegister(dev, reg, (uint8_t)(val))

HAL_StatusTypeDef BQ76907_setPowerConfig(BQ76907 *dev, uint8_t v){ return WRITE_RAW(dev, BQ76907_REG_POWER_CONFIG, v); }
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	1cfb      	adds	r3, r7, #3
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	1cfb      	adds	r3, r7, #3
 8001aa8:	781a      	ldrb	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2130      	movs	r1, #48	@ 0x30
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff fd7b 	bl	80015aa <BQ76907_WriteRegister>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b002      	add	sp, #8
 8001abc:	bd80      	pop	{r7, pc}

08001abe <BQ76907_setDAConfig>:
HAL_StatusTypeDef BQ76907_setDAConfig(BQ76907 *dev, uint8_t v){ return WRITE_RAW(dev, BQ76907_REG_DA_CONFIG, v); }
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	000a      	movs	r2, r1
 8001ac8:	1cfb      	adds	r3, r7, #3
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	1cfb      	adds	r3, r7, #3
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2131      	movs	r1, #49	@ 0x31
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fd68 	bl	80015aa <BQ76907_WriteRegister>
 8001ada:	0003      	movs	r3, r0
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <BQ76907_setRegoutConfig>:
HAL_StatusTypeDef BQ76907_setRegoutConfig(BQ76907 *dev, uint8_t v){ return WRITE_RAW(dev, BQ76907_REG_REGOUT_CONFIG, v); }
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	000a      	movs	r2, r1
 8001aee:	1cfb      	adds	r3, r7, #3
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	1cfb      	adds	r3, r7, #3
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2132      	movs	r1, #50	@ 0x32
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff fd55 	bl	80015aa <BQ76907_WriteRegister>
 8001b00:	0003      	movs	r3, r0
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <BQ76907_setVcellMode>:
HAL_StatusTypeDef BQ76907_setVcellMode(BQ76907 *dev, uint8_t cellCount){ return WRITE_RAW(dev, BQ76907_REG_VCELL_MODE, cellCount); }
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	000a      	movs	r2, r1
 8001b14:	1cfb      	adds	r3, r7, #3
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	1cfb      	adds	r3, r7, #3
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2133      	movs	r1, #51	@ 0x33
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff fd42 	bl	80015aa <BQ76907_WriteRegister>
 8001b26:	0003      	movs	r3, r0
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b002      	add	sp, #8
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <BQ76907_setAlarmMaskDefault>:
HAL_StatusTypeDef BQ76907_setAlarmMaskDefault(BQ76907 *dev, uint8_t mask){ return WRITE_RAW(dev, BQ76907_REG_ALARM_MASK_DEFAULT, mask); }
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	000a      	movs	r2, r1
 8001b3a:	1cfb      	adds	r3, r7, #3
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	1cfb      	adds	r3, r7, #3
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2134      	movs	r1, #52	@ 0x34
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff fd2f 	bl	80015aa <BQ76907_WriteRegister>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <BQ76907_setFETOptions>:
HAL_StatusTypeDef BQ76907_setFETOptions(BQ76907 *dev, uint8_t opts){ return WRITE_RAW(dev, BQ76907_REG_FET_OPTIONS, opts); }
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	000a      	movs	r2, r1
 8001b60:	1cfb      	adds	r3, r7, #3
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	1cfb      	adds	r3, r7, #3
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2135      	movs	r1, #53	@ 0x35
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff fd1c 	bl	80015aa <BQ76907_WriteRegister>
 8001b72:	0003      	movs	r3, r0
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <BQ76907_enableProtectionsA>:
HAL_StatusTypeDef BQ76907_enableProtectionsA(BQ76907 *dev, uint8_t mask){ return WRITE_RAW(dev, BQ76907_REG_ENABLED_PROTECTIONS_A, mask); }
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	000a      	movs	r2, r1
 8001b86:	1cfb      	adds	r3, r7, #3
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	1cfb      	adds	r3, r7, #3
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2136      	movs	r1, #54	@ 0x36
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff fd09 	bl	80015aa <BQ76907_WriteRegister>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b002      	add	sp, #8
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <BQ76907_enableProtectionsB>:
HAL_StatusTypeDef BQ76907_enableProtectionsB(BQ76907 *dev, uint8_t mask){ return WRITE_RAW(dev, BQ76907_REG_ENABLED_PROTECTIONS_B, mask); }
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	000a      	movs	r2, r1
 8001bac:	1cfb      	adds	r3, r7, #3
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	1cfb      	adds	r3, r7, #3
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2137      	movs	r1, #55	@ 0x37
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff fcf6 	bl	80015aa <BQ76907_WriteRegister>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <BQ76907_setDSGFetProtectionsA>:
HAL_StatusTypeDef BQ76907_setDSGFetProtectionsA(BQ76907 *dev, uint8_t mask){ return WRITE_RAW(dev, BQ76907_REG_DSG_FET_PROTECTIONS_A, mask); }
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	000a      	movs	r2, r1
 8001bd2:	1cfb      	adds	r3, r7, #3
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	1cfb      	adds	r3, r7, #3
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2138      	movs	r1, #56	@ 0x38
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7ff fce3 	bl	80015aa <BQ76907_WriteRegister>
 8001be4:	0003      	movs	r3, r0
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}

08001bee <BQ76907_setCHGFetProtectionsA>:
HAL_StatusTypeDef BQ76907_setCHGFetProtectionsA(BQ76907 *dev, uint8_t mask){ return WRITE_RAW(dev, BQ76907_REG_CHG_FET_PROTECTIONS_A, mask); }
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	000a      	movs	r2, r1
 8001bf8:	1cfb      	adds	r3, r7, #3
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	1cfb      	adds	r3, r7, #3
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2139      	movs	r1, #57	@ 0x39
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7ff fcd0 	bl	80015aa <BQ76907_WriteRegister>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <BQ76907_setLatchLimit>:
HAL_StatusTypeDef BQ76907_setLatchLimit(BQ76907 *dev, uint8_t v){ return WRITE_RAW(dev, BQ76907_REG_LATCH_LIMIT, v); }
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	1cfb      	adds	r3, r7, #3
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	1cfb      	adds	r3, r7, #3
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	213a      	movs	r1, #58	@ 0x3a
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff fcbd 	bl	80015aa <BQ76907_WriteRegister>
 8001c30:	0003      	movs	r3, r0
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <BQ76907_setMaxInternalTemp>:
HAL_StatusTypeDef BQ76907_setMaxInternalTemp(BQ76907 *dev, uint8_t degC){ return WRITE_RAW(dev, BQ76907_REG_MAX_INTERNAL_TEMP, degC); }
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	000a      	movs	r2, r1
 8001c44:	1cfb      	adds	r3, r7, #3
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	1cfb      	adds	r3, r7, #3
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	213b      	movs	r1, #59	@ 0x3b
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fcaa 	bl	80015aa <BQ76907_WriteRegister>
 8001c56:	0003      	movs	r3, r0
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <BQ76907_setCUVThreshold>:
HAL_StatusTypeDef BQ76907_setCUVThreshold(BQ76907 *dev, uint16_t mV){ /* scale to raw TODO */ return WRITE_RAW(dev, BQ76907_REG_CUV_THRESHOLD, (mV/10)); }
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	000a      	movs	r2, r1
 8001c6a:	1cbb      	adds	r3, r7, #2
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	1cbb      	adds	r3, r7, #2
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	210a      	movs	r1, #10
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7fe fa4f 	bl	8000118 <__udivsi3>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	213c      	movs	r1, #60	@ 0x3c
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff fc90 	bl	80015aa <BQ76907_WriteRegister>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <BQ76907_setCOVThreshold>:
HAL_StatusTypeDef BQ76907_setCOVThreshold(BQ76907 *dev, uint16_t mV){ return WRITE_RAW(dev, BQ76907_REG_COV_THRESHOLD, (mV/10)); }
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	000a      	movs	r2, r1
 8001c9e:	1cbb      	adds	r3, r7, #2
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	1cbb      	adds	r3, r7, #2
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	210a      	movs	r1, #10
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7fe fa35 	bl	8000118 <__udivsi3>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	213d      	movs	r1, #61	@ 0x3d
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fc76 	bl	80015aa <BQ76907_WriteRegister>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <BQ76907_setOCChargeThreshold>:
HAL_StatusTypeDef BQ76907_setOCChargeThreshold(BQ76907 *dev, uint16_t mA){ return WRITE_RAW(dev, BQ76907_REG_OCD_CHG_THRESHOLD, (mA/10)); }
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	1cbb      	adds	r3, r7, #2
 8001cd4:	801a      	strh	r2, [r3, #0]
 8001cd6:	1cbb      	adds	r3, r7, #2
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	210a      	movs	r1, #10
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7fe fa1b 	bl	8000118 <__udivsi3>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	213e      	movs	r1, #62	@ 0x3e
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff fc5c 	bl	80015aa <BQ76907_WriteRegister>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <BQ76907_setOCDischarge1Threshold>:
HAL_StatusTypeDef BQ76907_setOCDischarge1Threshold(BQ76907 *dev, uint16_t mA){ return WRITE_RAW(dev, BQ76907_REG_OCD_DISCH1_THRESHOLD, (mA/10)); }
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	000a      	movs	r2, r1
 8001d06:	1cbb      	adds	r3, r7, #2
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	1cbb      	adds	r3, r7, #2
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	210a      	movs	r1, #10
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7fe fa01 	bl	8000118 <__udivsi3>
 8001d16:	0003      	movs	r3, r0
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	213f      	movs	r1, #63	@ 0x3f
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff fc42 	bl	80015aa <BQ76907_WriteRegister>
 8001d26:	0003      	movs	r3, r0
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <BQ76907_setOCDischarge2Threshold>:
HAL_StatusTypeDef BQ76907_setOCDischarge2Threshold(BQ76907 *dev, uint16_t mA){ return WRITE_RAW(dev, BQ76907_REG_OCD_DISCH2_THRESHOLD, (mA/10)); }
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	000a      	movs	r2, r1
 8001d3a:	1cbb      	adds	r3, r7, #2
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	1cbb      	adds	r3, r7, #2
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	210a      	movs	r1, #10
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7fe f9e7 	bl	8000118 <__udivsi3>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2140      	movs	r1, #64	@ 0x40
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7ff fc28 	bl	80015aa <BQ76907_WriteRegister>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <BQ76907_setInternalOTThreshold>:
HAL_StatusTypeDef BQ76907_setInternalOTThreshold(BQ76907 *dev, uint8_t degC){ return WRITE_RAW(dev, BQ76907_REG_INT_OT_THRESHOLD, degC); }
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	1cfb      	adds	r3, r7, #3
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	1cfb      	adds	r3, r7, #3
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2141      	movs	r1, #65	@ 0x41
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff fc15 	bl	80015aa <BQ76907_WriteRegister>
 8001d80:	0003      	movs	r3, r0
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <BQ76907_setVoltageTime>:
HAL_StatusTypeDef BQ76907_setVoltageTime(BQ76907 *dev, uint8_t raw){ return WRITE_RAW(dev, BQ76907_REG_VOLTAGE_TIME, raw); }
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	000a      	movs	r2, r1
 8001d94:	1cfb      	adds	r3, r7, #3
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	1cfb      	adds	r3, r7, #3
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2142      	movs	r1, #66	@ 0x42
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fc02 	bl	80015aa <BQ76907_WriteRegister>
 8001da6:	0003      	movs	r3, r0
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <BQ76907_setAlarmEnable>:
HAL_StatusTypeDef BQ76907_setAlarmEnable(BQ76907 *dev, uint8_t mask){ return WRITE_RAW(dev, BQ76907_REG_ALARM_ENABLE, mask); }
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	000a      	movs	r2, r1
 8001dba:	1cfb      	adds	r3, r7, #3
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	1cfb      	adds	r3, r7, #3
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2143      	movs	r1, #67	@ 0x43
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff fbef 	bl	80015aa <BQ76907_WriteRegister>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <BQ76907_logStatus>:
           dev->status.cc_ready,
           dev->status.dev_ready);
}

/* ================= Periodic Status Logger ================= */
void BQ76907_logStatus(BQ76907 *dev){
 8001dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dda:	46de      	mov	lr, fp
 8001ddc:	4657      	mov	r7, sl
 8001dde:	464e      	mov	r6, r9
 8001de0:	4645      	mov	r5, r8
 8001de2:	b5e0      	push	{r5, r6, r7, lr}
 8001de4:	b093      	sub	sp, #76	@ 0x4c
 8001de6:	af0c      	add	r7, sp, #48	@ 0x30
 8001de8:	60f8      	str	r0, [r7, #12]
    if (!dev) return;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d06c      	beq.n	8001eca <BQ76907_logStatus+0xf2>
    /* Throttle: only every 2000 ms */
    static uint32_t lastTick = 0;
    uint32_t now = HAL_GetTick();
 8001df0:	f000 fe9e 	bl	8002b30 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	617b      	str	r3, [r7, #20]
    if ((now - lastTick) < 2000u) return;
 8001df8:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <BQ76907_logStatus+0x108>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	1ad2      	subs	r2, r2, r3
 8001e00:	23fa      	movs	r3, #250	@ 0xfa
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d362      	bcc.n	8001ece <BQ76907_logStatus+0xf6>
    lastTick = now;
 8001e08:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <BQ76907_logStatus+0x108>)
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	601a      	str	r2, [r3, #0]

    /* Ensure latest measurements (non-fatal if any fail; flags may be stale) */
    (void)BQ76907_readSystemStatus(dev);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff f9f6 	bl	8001202 <BQ76907_readSystemStatus>
    (void)BQ76907_readPackVoltage(dev);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff fab1 	bl	8001380 <BQ76907_readPackVoltage>
    (void)BQ76907_readCellVoltages(dev);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff fa45 	bl	80012b0 <BQ76907_readCellVoltages>
    (void)BQ76907_readTemperature1(dev);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff faed 	bl	8001408 <BQ76907_readTemperature1>

    BQ_LOG("76907 STAT Pack=%umV Cells=%u,%u,%u,%u mV T=%d.%uC F:OV=%u UV=%u OCD=%u SCD=%u OT=%u CC=%u DEV=%u",
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	889b      	ldrh	r3, [r3, #4]
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	88db      	ldrh	r3, [r3, #6]
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	891b      	ldrh	r3, [r3, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	895b      	ldrh	r3, [r3, #10]
 8001e44:	001c      	movs	r4, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	899b      	ldrh	r3, [r3, #12]
 8001e4a:	001d      	movs	r5, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	200e      	movs	r0, #14
 8001e50:	5e1b      	ldrsh	r3, [r3, r0]
 8001e52:	210a      	movs	r1, #10
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7fe f9e9 	bl	800022c <__divsi3>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	001e      	movs	r6, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	200e      	movs	r0, #14
 8001e64:	5e1b      	ldrsh	r3, [r3, r0]
 8001e66:	210a      	movs	r1, #10
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7fe fac5 	bl	80003f8 <__aeabi_idivmod>
 8001e6e:	000b      	movs	r3, r1
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	0019      	movs	r1, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	7c9b      	ldrb	r3, [r3, #18]
 8001e78:	469c      	mov	ip, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	7cdb      	ldrb	r3, [r3, #19]
 8001e7e:	4698      	mov	r8, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	7d5b      	ldrb	r3, [r3, #21]
 8001e84:	4699      	mov	r9, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	7d1b      	ldrb	r3, [r3, #20]
 8001e8a:	469a      	mov	sl, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	7d9b      	ldrb	r3, [r3, #22]
 8001e90:	469b      	mov	fp, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	7c1b      	ldrb	r3, [r3, #16]
 8001e96:	001a      	movs	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	7c5b      	ldrb	r3, [r3, #17]
 8001e9c:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <BQ76907_logStatus+0x10c>)
 8001e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8001ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ea2:	465a      	mov	r2, fp
 8001ea4:	9208      	str	r2, [sp, #32]
 8001ea6:	4652      	mov	r2, sl
 8001ea8:	9207      	str	r2, [sp, #28]
 8001eaa:	464a      	mov	r2, r9
 8001eac:	9206      	str	r2, [sp, #24]
 8001eae:	4642      	mov	r2, r8
 8001eb0:	9205      	str	r2, [sp, #20]
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	9204      	str	r2, [sp, #16]
 8001eb6:	9103      	str	r1, [sp, #12]
 8001eb8:	9602      	str	r6, [sp, #8]
 8001eba:	9501      	str	r5, [sp, #4]
 8001ebc:	9400      	str	r4, [sp, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	f002 ff96 	bl	8004df4 <iprintf>
 8001ec8:	e002      	b.n	8001ed0 <BQ76907_logStatus+0xf8>
    if (!dev) return;
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	e000      	b.n	8001ed0 <BQ76907_logStatus+0xf8>
    if ((now - lastTick) < 2000u) return;
 8001ece:	46c0      	nop			@ (mov r8, r8)
        dev->status.ocd_fault,
        dev->status.scd_fault,
        dev->status.ot_fault,
        dev->status.cc_ready,
        dev->status.dev_ready);
}
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b007      	add	sp, #28
 8001ed4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ed6:	46bb      	mov	fp, r7
 8001ed8:	46b2      	mov	sl, r6
 8001eda:	46a9      	mov	r9, r5
 8001edc:	46a0      	mov	r8, r4
 8001ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee0:	2000008c 	.word	0x2000008c
 8001ee4:	08005fbc 	.word	0x08005fbc

08001ee8 <BQ76907_logConfig>:

/* ================= Config Logger ================= */
void BQ76907_logConfig(const BQ76907 *dev){
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	46de      	mov	lr, fp
 8001eec:	4657      	mov	r7, sl
 8001eee:	464e      	mov	r6, r9
 8001ef0:	4645      	mov	r5, r8
 8001ef2:	b5e0      	push	{r5, r6, r7, lr}
 8001ef4:	b08d      	sub	sp, #52	@ 0x34
 8001ef6:	af08      	add	r7, sp, #32
 8001ef8:	6078      	str	r0, [r7, #4]
    if (!dev){ BQ_LOG("76907 CFG: (null)"); return; }
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <BQ76907_logConfig+0x22>
 8001f00:	4b35      	ldr	r3, [pc, #212]	@ (8001fd8 <BQ76907_logConfig+0xf0>)
 8001f02:	0018      	movs	r0, r3
 8001f04:	f002 ffdc 	bl	8004ec0 <puts>
 8001f08:	e05d      	b.n	8001fc6 <BQ76907_logConfig+0xde>
    const BQ76907_Config *c = &dev->activeConfig;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	60fb      	str	r3, [r7, #12]
    BQ_LOG("76907 CFG cellCount=%u UV=%umV OV=%umV OCchg=%umA OCd1=%umA OCd2=%umA OT=%uC MaxInt=%uC balInt=%ums voltTimeRaw=0x%02X",
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4698      	mov	r8, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	885b      	ldrh	r3, [r3, #2]
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	469a      	mov	sl, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	88db      	ldrh	r3, [r3, #6]
 8001f26:	001a      	movs	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	891b      	ldrh	r3, [r3, #8]
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	895b      	ldrh	r3, [r3, #10]
 8001f32:	001c      	movs	r4, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	7b1b      	ldrb	r3, [r3, #12]
 8001f38:	001d      	movs	r5, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	7b5b      	ldrb	r3, [r3, #13]
 8001f3e:	001e      	movs	r6, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	89db      	ldrh	r3, [r3, #14]
 8001f44:	469c      	mov	ip, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	7c1b      	ldrb	r3, [r3, #16]
 8001f4a:	4824      	ldr	r0, [pc, #144]	@ (8001fdc <BQ76907_logConfig+0xf4>)
 8001f4c:	9306      	str	r3, [sp, #24]
 8001f4e:	4663      	mov	r3, ip
 8001f50:	9305      	str	r3, [sp, #20]
 8001f52:	9604      	str	r6, [sp, #16]
 8001f54:	9503      	str	r5, [sp, #12]
 8001f56:	9402      	str	r4, [sp, #8]
 8001f58:	9101      	str	r1, [sp, #4]
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	4653      	mov	r3, sl
 8001f5e:	464a      	mov	r2, r9
 8001f60:	4641      	mov	r1, r8
 8001f62:	f002 ff47 	bl	8004df4 <iprintf>
        c->cellCount, c->uvThreshold_mV, c->ovThreshold_mV, c->ocCharge_mA,
        c->ocDischarge1_mA, c->ocDischarge2_mA, c->internalOT_C, c->maxInternalTemp_C,
        c->balanceInterval_ms, c->voltageTimeUnits);
    BQ_LOG("76907 CFG fetOpt=0x%02X protA=0x%02X protB=0x%02X dsgA=0x%02X chgA=0x%02X latch=0x%02X alarmMaskDef=0x%02X alarmEn=0x%02X daCfg=0x%02X regout=0x%02X pwr=0x%02X",
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	7c5b      	ldrb	r3, [r3, #17]
 8001f6a:	4699      	mov	r9, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	7c9b      	ldrb	r3, [r3, #18]
 8001f70:	469a      	mov	sl, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	7cdb      	ldrb	r3, [r3, #19]
 8001f76:	469b      	mov	fp, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	7d1b      	ldrb	r3, [r3, #20]
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	7d5b      	ldrb	r3, [r3, #21]
 8001f82:	0019      	movs	r1, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	7d9b      	ldrb	r3, [r3, #22]
 8001f88:	001c      	movs	r4, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	7ddb      	ldrb	r3, [r3, #23]
 8001f8e:	001d      	movs	r5, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	7e1b      	ldrb	r3, [r3, #24]
 8001f94:	001e      	movs	r6, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	7e5b      	ldrb	r3, [r3, #25]
 8001f9a:	469c      	mov	ip, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	7e9b      	ldrb	r3, [r3, #26]
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	7edb      	ldrb	r3, [r3, #27]
 8001fa6:	480e      	ldr	r0, [pc, #56]	@ (8001fe0 <BQ76907_logConfig+0xf8>)
 8001fa8:	9307      	str	r3, [sp, #28]
 8001faa:	4643      	mov	r3, r8
 8001fac:	9306      	str	r3, [sp, #24]
 8001fae:	4663      	mov	r3, ip
 8001fb0:	9305      	str	r3, [sp, #20]
 8001fb2:	9604      	str	r6, [sp, #16]
 8001fb4:	9503      	str	r5, [sp, #12]
 8001fb6:	9402      	str	r4, [sp, #8]
 8001fb8:	9101      	str	r1, [sp, #4]
 8001fba:	9200      	str	r2, [sp, #0]
 8001fbc:	465b      	mov	r3, fp
 8001fbe:	4652      	mov	r2, sl
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	f002 ff17 	bl	8004df4 <iprintf>
        c->fetOptions, c->protectionsA, c->protectionsB, c->dsgFetProtA, c->chgFetProtA,
        c->latchLimit, c->alarmMaskDefault, c->alarmEnableMask, c->daConfig, c->regoutConfig, c->powerConfig);
}
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b005      	add	sp, #20
 8001fca:	bcf0      	pop	{r4, r5, r6, r7}
 8001fcc:	46bb      	mov	fp, r7
 8001fce:	46b2      	mov	sl, r6
 8001fd0:	46a9      	mov	r9, r5
 8001fd2:	46a0      	mov	r8, r4
 8001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	08006024 	.word	0x08006024
 8001fdc:	0800603c 	.word	0x0800603c
 8001fe0:	080060bc 	.word	0x080060bc

08001fe4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <MX_GPIO_Init+0x28>)
 8001fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fee:	4b07      	ldr	r3, [pc, #28]	@ (800200c <MX_GPIO_Init+0x28>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <MX_GPIO_Init+0x28>)
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]

}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	40021000 	.word	0x40021000

08002010 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002014:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <MX_I2C1_Init+0x74>)
 8002016:	4a1c      	ldr	r2, [pc, #112]	@ (8002088 <MX_I2C1_Init+0x78>)
 8002018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800201a:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <MX_I2C1_Init+0x74>)
 800201c:	4a1b      	ldr	r2, [pc, #108]	@ (800208c <MX_I2C1_Init+0x7c>)
 800201e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002020:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <MX_I2C1_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002026:	4b17      	ldr	r3, [pc, #92]	@ (8002084 <MX_I2C1_Init+0x74>)
 8002028:	2201      	movs	r2, #1
 800202a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800202c:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <MX_I2C1_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002032:	4b14      	ldr	r3, [pc, #80]	@ (8002084 <MX_I2C1_Init+0x74>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <MX_I2C1_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800203e:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <MX_I2C1_Init+0x74>)
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <MX_I2C1_Init+0x74>)
 8002046:	2200      	movs	r2, #0
 8002048:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <MX_I2C1_Init+0x74>)
 800204c:	0018      	movs	r0, r3
 800204e:	f001 f80b 	bl	8003068 <HAL_I2C_Init>
 8002052:	1e03      	subs	r3, r0, #0
 8002054:	d001      	beq.n	800205a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002056:	f000 fbd3 	bl	8002800 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800205a:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <MX_I2C1_Init+0x74>)
 800205c:	2100      	movs	r1, #0
 800205e:	0018      	movs	r0, r3
 8002060:	f001 fe06 	bl	8003c70 <HAL_I2CEx_ConfigAnalogFilter>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d001      	beq.n	800206c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002068:	f000 fbca 	bl	8002800 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <MX_I2C1_Init+0x74>)
 800206e:	2100      	movs	r1, #0
 8002070:	0018      	movs	r0, r3
 8002072:	f001 fe49 	bl	8003d08 <HAL_I2CEx_ConfigDigitalFilter>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d001      	beq.n	800207e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800207a:	f000 fbc1 	bl	8002800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000090 	.word	0x20000090
 8002088:	40005400 	.word	0x40005400
 800208c:	00503d58 	.word	0x00503d58

08002090 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b09d      	sub	sp, #116	@ 0x74
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	235c      	movs	r3, #92	@ 0x5c
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	0018      	movs	r0, r3
 800209e:	2314      	movs	r3, #20
 80020a0:	001a      	movs	r2, r3
 80020a2:	2100      	movs	r1, #0
 80020a4:	f003 f802 	bl	80050ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a8:	2410      	movs	r4, #16
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	0018      	movs	r0, r3
 80020ae:	234c      	movs	r3, #76	@ 0x4c
 80020b0:	001a      	movs	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	f002 fffa 	bl	80050ac <memset>
  if(i2cHandle->Instance==I2C1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a23      	ldr	r2, [pc, #140]	@ (800214c <HAL_I2C_MspInit+0xbc>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d13f      	bne.n	8002142 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020c2:	193b      	adds	r3, r7, r4
 80020c4:	2220      	movs	r2, #32
 80020c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020c8:	193b      	adds	r3, r7, r4
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	0018      	movs	r0, r3
 80020d2:	f002 fb8f 	bl	80047f4 <HAL_RCCEx_PeriphCLKConfig>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020da:	f000 fb91 	bl	8002800 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <HAL_I2C_MspInit+0xc0>)
 80020e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_I2C_MspInit+0xc0>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ea:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_I2C_MspInit+0xc0>)
 80020ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020f6:	215c      	movs	r1, #92	@ 0x5c
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	22c0      	movs	r2, #192	@ 0xc0
 80020fc:	00d2      	lsls	r2, r2, #3
 80020fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002100:	187b      	adds	r3, r7, r1
 8002102:	2212      	movs	r2, #18
 8002104:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	187b      	adds	r3, r7, r1
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	187b      	adds	r3, r7, r1
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002112:	187b      	adds	r3, r7, r1
 8002114:	2206      	movs	r2, #6
 8002116:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	187a      	adds	r2, r7, r1
 800211a:	23a0      	movs	r3, #160	@ 0xa0
 800211c:	05db      	lsls	r3, r3, #23
 800211e:	0011      	movs	r1, r2
 8002120:	0018      	movs	r0, r3
 8002122:	f000 fdfd 	bl	8002d20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002126:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <HAL_I2C_MspInit+0xc0>)
 8002128:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_I2C_MspInit+0xc0>)
 800212c:	2180      	movs	r1, #128	@ 0x80
 800212e:	0389      	lsls	r1, r1, #14
 8002130:	430a      	orrs	r2, r1
 8002132:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_I2C_MspInit+0xc0>)
 8002136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002138:	2380      	movs	r3, #128	@ 0x80
 800213a:	039b      	lsls	r3, r3, #14
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	b01d      	add	sp, #116	@ 0x74
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	40005400 	.word	0x40005400
 8002150:	40021000 	.word	0x40021000

08002154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b08b      	sub	sp, #44	@ 0x2c
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800215a:	f000 fc6d 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800215e:	f000 f8d5 	bl	800230c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002162:	f7ff ff3f 	bl	8001fe4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002166:	f7ff ff53 	bl	8002010 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  #ifdef USE_ITM_LOG
  ITM_Log_Init();
  #endif
  BQ_LOG("MAIN: Init start");
 800216a:	4b59      	ldr	r3, [pc, #356]	@ (80022d0 <main+0x17c>)
 800216c:	0018      	movs	r0, r3
 800216e:	f002 fea7 	bl	8004ec0 <puts>

  // Initialize the BQ25798 charger
  uint32_t t0 = HAL_GetTick();
 8002172:	f000 fcdd 	bl	8002b30 <HAL_GetTick>
 8002176:	0003      	movs	r3, r0
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
  if (BQ25798_init(&bq25798_charger, &hi2c1) != 0) {
 800217a:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <main+0x180>)
 800217c:	4b56      	ldr	r3, [pc, #344]	@ (80022d8 <main+0x184>)
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f7fe f989 	bl	8000498 <BQ25798_init>
 8002186:	1e03      	subs	r3, r0, #0
 8002188:	d001      	beq.n	800218e <main+0x3a>
    Error_Handler();
 800218a:	f000 fb39 	bl	8002800 <Error_Handler>
  }
  BQ_LOG("MAIN: Charger init done (+%lums)", (unsigned long)(HAL_GetTick()-t0));
 800218e:	f000 fccf 	bl	8002b30 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	1ad2      	subs	r2, r2, r3
 8002198:	4b50      	ldr	r3, [pc, #320]	@ (80022dc <main+0x188>)
 800219a:	0011      	movs	r1, r2
 800219c:	0018      	movs	r0, r3
 800219e:	f002 fe29 	bl	8004df4 <iprintf>
  // Initialize the BQ76907 monitor (placeholder init – returns 0 on success)
  t0 = HAL_GetTick();
 80021a2:	f000 fcc5 	bl	8002b30 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (BQ76907_init(&bq76907_monitor, &hi2c1) != 0) {
 80021aa:	4a4a      	ldr	r2, [pc, #296]	@ (80022d4 <main+0x180>)
 80021ac:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <main+0x18c>)
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7ff f80b 	bl	80011cc <BQ76907_init>
 80021b6:	1e03      	subs	r3, r0, #0
 80021b8:	d001      	beq.n	80021be <main+0x6a>
    // If monitor init fails we continue charger operation but could flag a warning
    // For now treat as critical
    Error_Handler();
 80021ba:	f000 fb21 	bl	8002800 <Error_Handler>
  }
  BQ_LOG("MAIN: Monitor init done (+%lums)", (unsigned long)(HAL_GetTick()-t0));
 80021be:	f000 fcb7 	bl	8002b30 <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	1ad2      	subs	r2, r2, r3
 80021c8:	4b46      	ldr	r3, [pc, #280]	@ (80022e4 <main+0x190>)
 80021ca:	0011      	movs	r1, r2
 80021cc:	0018      	movs	r0, r3
 80021ce:	f002 fe11 	bl	8004df4 <iprintf>

  // Apply a placeholder safe configuration snapshot (values TBD after datasheet validation)
  BQ76907_Config cfg = {
 80021d2:	003b      	movs	r3, r7
 80021d4:	4a44      	ldr	r2, [pc, #272]	@ (80022e8 <main+0x194>)
 80021d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021d8:	c313      	stmia	r3!, {r0, r1, r4}
 80021da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021dc:	c313      	stmia	r3!, {r0, r1, r4}
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	601a      	str	r2, [r3, #0]
      .dsgFetProtA = 0x00, .chgFetProtA = 0x00,
      .latchLimit = 0x00,
      .alarmMaskDefault = 0x00, .alarmEnableMask = 0x00,
      .daConfig = 0x00, .regoutConfig = 0x00, .powerConfig = 0x00
  };
  t0 = HAL_GetTick();
 80021e2:	f000 fca5 	bl	8002b30 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (BQ76907_applyConfig(&bq76907_monitor, &cfg) == HAL_OK){
 80021ea:	003a      	movs	r2, r7
 80021ec:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <main+0x18c>)
 80021ee:	0011      	movs	r1, r2
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff faad 	bl	8001750 <BQ76907_applyConfig>
 80021f6:	1e03      	subs	r3, r0, #0
 80021f8:	d10e      	bne.n	8002218 <main+0xc4>
      BQ76907_logConfig(&bq76907_monitor);
 80021fa:	4b39      	ldr	r3, [pc, #228]	@ (80022e0 <main+0x18c>)
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff fe73 	bl	8001ee8 <BQ76907_logConfig>
    BQ_LOG("MAIN: Monitor config applied (+%lums)", (unsigned long)(HAL_GetTick()-t0));
 8002202:	f000 fc95 	bl	8002b30 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	1ad2      	subs	r2, r2, r3
 800220c:	4b37      	ldr	r3, [pc, #220]	@ (80022ec <main+0x198>)
 800220e:	0011      	movs	r1, r2
 8002210:	0018      	movs	r0, r3
 8002212:	f002 fdef 	bl	8004df4 <iprintf>
 8002216:	e003      	b.n	8002220 <main+0xcc>
  } else {
      BQ_LOG("BQ76907 config apply failed");
 8002218:	4b35      	ldr	r3, [pc, #212]	@ (80022f0 <main+0x19c>)
 800221a:	0018      	movs	r0, r3
 800221c:	f002 fe50 	bl	8004ec0 <puts>
  }

  // Initialize timers for immediate first update
  uint32_t now = HAL_GetTick();
 8002220:	f000 fc86 	bl	8002b30 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	623b      	str	r3, [r7, #32]
  last_bq_update_tick       = now;
 8002228:	4b32      	ldr	r3, [pc, #200]	@ (80022f4 <main+0x1a0>)
 800222a:	6a3a      	ldr	r2, [r7, #32]
 800222c:	601a      	str	r2, [r3, #0]
  last_bq76907_update_tick  = now;
 800222e:	4b32      	ldr	r3, [pc, #200]	@ (80022f8 <main+0x1a4>)
 8002230:	6a3a      	ldr	r2, [r7, #32]
 8002232:	601a      	str	r2, [r3, #0]
  last_balance_eval_tick    = now;
 8002234:	4b31      	ldr	r3, [pc, #196]	@ (80022fc <main+0x1a8>)
 8002236:	6a3a      	ldr	r2, [r7, #32]
 8002238:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t tick = HAL_GetTick();
 800223a:	f000 fc79 	bl	8002b30 <HAL_GetTick>
 800223e:	0003      	movs	r3, r0
 8002240:	61fb      	str	r3, [r7, #28]
    if ((tick - last_bq_update_tick) >= BQ_UPDATE_INTERVAL_MS) {
 8002242:	4b2c      	ldr	r3, [pc, #176]	@ (80022f4 <main+0x1a0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	1ad2      	subs	r2, r2, r3
 800224a:	23fa      	movs	r3, #250	@ 0xfa
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	429a      	cmp	r2, r3
 8002250:	d304      	bcc.n	800225c <main+0x108>
      last_bq_update_tick = tick;
 8002252:	4b28      	ldr	r3, [pc, #160]	@ (80022f4 <main+0x1a0>)
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	601a      	str	r2, [r3, #0]
      UpdateCharger();
 8002258:	f000 f8a0 	bl	800239c <UpdateCharger>
    }
    if ((tick - last_bq76907_update_tick) >= BQ76907_UPDATE_INTERVAL_MS) {
 800225c:	4b26      	ldr	r3, [pc, #152]	@ (80022f8 <main+0x1a4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	4a26      	ldr	r2, [pc, #152]	@ (8002300 <main+0x1ac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d904      	bls.n	8002274 <main+0x120>
      last_bq76907_update_tick = tick;
 800226a:	4b23      	ldr	r3, [pc, #140]	@ (80022f8 <main+0x1a4>)
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	601a      	str	r2, [r3, #0]
      UpdateMonitor();
 8002270:	f000 f90a 	bl	8002488 <UpdateMonitor>
    }
    if ((tick - last_balance_eval_tick) >= BALANCE_INTERVAL_MS) {
 8002274:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <main+0x1a8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	4a21      	ldr	r2, [pc, #132]	@ (8002304 <main+0x1b0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d904      	bls.n	800228c <main+0x138>
      last_balance_eval_tick = tick;
 8002282:	4b1e      	ldr	r3, [pc, #120]	@ (80022fc <main+0x1a8>)
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	601a      	str	r2, [r3, #0]
      EvaluateBalancing();
 8002288:	f000 fa0a 	bl	80026a0 <EvaluateBalancing>
    }

      // --- Non-blocking Error LED (Orange LED) handling ---
      // This is for demonstration, assuming GPIO_PIN_5 (orange LED) is for a general fault indicator.
      // You would typically turn this on or blink it in your Error_Handler or if a specific fault is detected.
      if (bq25798_charger.faultStatus1.tshut_stat == 1) {
 800228c:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <main+0x184>)
 800228e:	2232      	movs	r2, #50	@ 0x32
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d113      	bne.n	80022be <main+0x16a>
          if ((HAL_GetTick() - last_error_led_toggle_tick) >= ERROR_LED_BLINK_RATE_MS) {
 8002296:	f000 fc4b 	bl	8002b30 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <main+0x1b4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80022a4:	d9c9      	bls.n	800223a <main+0xe6>
              last_error_led_toggle_tick = HAL_GetTick();
 80022a6:	f000 fc43 	bl	8002b30 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <main+0x1b4>)
 80022ae:	601a      	str	r2, [r3, #0]
              HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle Orange LED
 80022b0:	23a0      	movs	r3, #160	@ 0xa0
 80022b2:	05db      	lsls	r3, r3, #23
 80022b4:	2120      	movs	r1, #32
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 febb 	bl	8003032 <HAL_GPIO_TogglePin>
 80022bc:	e7bd      	b.n	800223a <main+0xe6>
          }
      } else {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Keep Orange LED OFF (assuming active low)
 80022be:	23a0      	movs	r3, #160	@ 0xa0
 80022c0:	05db      	lsls	r3, r3, #23
 80022c2:	2201      	movs	r2, #1
 80022c4:	2120      	movs	r1, #32
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 fe96 	bl	8002ff8 <HAL_GPIO_WritePin>
  {
 80022cc:	e7b5      	b.n	800223a <main+0xe6>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	080061e0 	.word	0x080061e0
 80022d4:	20000090 	.word	0x20000090
 80022d8:	200000e4 	.word	0x200000e4
 80022dc:	080061f8 	.word	0x080061f8
 80022e0:	200001dc 	.word	0x200001dc
 80022e4:	08006220 	.word	0x08006220
 80022e8:	08006298 	.word	0x08006298
 80022ec:	08006248 	.word	0x08006248
 80022f0:	08006274 	.word	0x08006274
 80022f4:	200002d4 	.word	0x200002d4
 80022f8:	200002d8 	.word	0x200002d8
 80022fc:	200002dc 	.word	0x200002dc
 8002300:	000002ed 	.word	0x000002ed
 8002304:	00001387 	.word	0x00001387
 8002308:	200002e0 	.word	0x200002e0

0800230c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b095      	sub	sp, #84	@ 0x54
 8002310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002312:	2414      	movs	r4, #20
 8002314:	193b      	adds	r3, r7, r4
 8002316:	0018      	movs	r0, r3
 8002318:	233c      	movs	r3, #60	@ 0x3c
 800231a:	001a      	movs	r2, r3
 800231c:	2100      	movs	r1, #0
 800231e:	f002 fec5 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	0018      	movs	r0, r3
 8002326:	2310      	movs	r3, #16
 8002328:	001a      	movs	r2, r3
 800232a:	2100      	movs	r1, #0
 800232c:	f002 febe 	bl	80050ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	0018      	movs	r0, r3
 8002336:	f001 fd33 	bl	8003da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800233a:	193b      	adds	r3, r7, r4
 800233c:	2202      	movs	r2, #2
 800233e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002340:	193b      	adds	r3, r7, r4
 8002342:	2280      	movs	r2, #128	@ 0x80
 8002344:	0052      	lsls	r2, r2, #1
 8002346:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002348:	193b      	adds	r3, r7, r4
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800234e:	193b      	adds	r3, r7, r4
 8002350:	2240      	movs	r2, #64	@ 0x40
 8002352:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002354:	193b      	adds	r3, r7, r4
 8002356:	2200      	movs	r2, #0
 8002358:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235a:	193b      	adds	r3, r7, r4
 800235c:	0018      	movs	r0, r3
 800235e:	f001 fd5f 	bl	8003e20 <HAL_RCC_OscConfig>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002366:	f000 fa4b 	bl	8002800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2100      	movs	r1, #0
 8002386:	0018      	movs	r0, r3
 8002388:	f002 f8aa 	bl	80044e0 <HAL_RCC_ClockConfig>
 800238c:	1e03      	subs	r3, r0, #0
 800238e:	d001      	beq.n	8002394 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002390:	f000 fa36 	bl	8002800 <Error_Handler>
  }
}
 8002394:	46c0      	nop			@ (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b015      	add	sp, #84	@ 0x54
 800239a:	bd90      	pop	{r4, r7, pc}

0800239c <UpdateCharger>:

/* USER CODE BEGIN 4 */

// ---------------- Internal helper implementations ----------------

static void UpdateCharger(void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  uint32_t tStart = HAL_GetTick();
 80023a2:	f000 fbc5 	bl	8002b30 <HAL_GetTick>
 80023a6:	0003      	movs	r3, r0
 80023a8:	607b      	str	r3, [r7, #4]
  BQ_LOG("PROC: UpdateCharger begin");
 80023aa:	4b33      	ldr	r3, [pc, #204]	@ (8002478 <UpdateCharger+0xdc>)
 80023ac:	0018      	movs	r0, r3
 80023ae:	f002 fd87 	bl	8004ec0 <puts>
  uint8_t b=0;
 80023b2:	1cfb      	adds	r3, r7, #3
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
  readChargerStatus0(&bq25798_charger, &b);
 80023b8:	1cfa      	adds	r2, r7, #3
 80023ba:	4b30      	ldr	r3, [pc, #192]	@ (800247c <UpdateCharger+0xe0>)
 80023bc:	0011      	movs	r1, r2
 80023be:	0018      	movs	r0, r3
 80023c0:	f7fe f9b7 	bl	8000732 <readChargerStatus0>
  readChargerStatus1(&bq25798_charger, &b);
 80023c4:	1cfa      	adds	r2, r7, #3
 80023c6:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <UpdateCharger+0xe0>)
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fe fa05 	bl	80007da <readChargerStatus1>
  readChargerStatus2(&bq25798_charger, &b);
 80023d0:	1cfa      	adds	r2, r7, #3
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <UpdateCharger+0xe0>)
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7fe fa2f 	bl	800083a <readChargerStatus2>
  readChargerStatus3(&bq25798_charger, &b);
 80023dc:	1cfa      	adds	r2, r7, #3
 80023de:	4b27      	ldr	r3, [pc, #156]	@ (800247c <UpdateCharger+0xe0>)
 80023e0:	0011      	movs	r1, r2
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7fe fa62 	bl	80008ac <readChargerStatus3>
  readChargerStatus4(&bq25798_charger, &b);
 80023e8:	1cfa      	adds	r2, r7, #3
 80023ea:	4b24      	ldr	r3, [pc, #144]	@ (800247c <UpdateCharger+0xe0>)
 80023ec:	0011      	movs	r1, r2
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7fe fab3 	bl	800095a <readChargerStatus4>
  readFaultStatus0(&bq25798_charger, &b);
 80023f4:	1cfa      	adds	r2, r7, #3
 80023f6:	4b21      	ldr	r3, [pc, #132]	@ (800247c <UpdateCharger+0xe0>)
 80023f8:	0011      	movs	r1, r2
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7fe faf7 	bl	80009ee <readFaultStatus0>
  readFaultStatus1(&bq25798_charger, &b);
 8002400:	1cfa      	adds	r2, r7, #3
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <UpdateCharger+0xe0>)
 8002404:	0011      	movs	r1, r2
 8002406:	0018      	movs	r0, r3
 8002408:	f7fe fb56 	bl	8000ab8 <readFaultStatus1>
  BQ25798_readBusVoltage(&bq25798_charger);
 800240c:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <UpdateCharger+0xe0>)
 800240e:	0018      	movs	r0, r3
 8002410:	f7fe fb9b 	bl	8000b4a <BQ25798_readBusVoltage>
  BQ25798_readBusCurrent(&bq25798_charger);
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <UpdateCharger+0xe0>)
 8002416:	0018      	movs	r0, r3
 8002418:	f7fe fbbe 	bl	8000b98 <BQ25798_readBusCurrent>
  BQ25798_readBatteryVoltage(&bq25798_charger);
 800241c:	4b17      	ldr	r3, [pc, #92]	@ (800247c <UpdateCharger+0xe0>)
 800241e:	0018      	movs	r0, r3
 8002420:	f7fe fbe1 	bl	8000be6 <BQ25798_readBatteryVoltage>
  BQ25798_readBatteryCurrent(&bq25798_charger);
 8002424:	4b15      	ldr	r3, [pc, #84]	@ (800247c <UpdateCharger+0xe0>)
 8002426:	0018      	movs	r0, r3
 8002428:	f7fe fc04 	bl	8000c34 <BQ25798_readBatteryCurrent>

  if (bq25798_charger.chargerStatus2.vbat_present_stat == 1) {
 800242c:	4b13      	ldr	r3, [pc, #76]	@ (800247c <UpdateCharger+0xe0>)
 800242e:	7e5b      	ldrb	r3, [r3, #25]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <UpdateCharger+0xa8>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	019b      	lsls	r3, r3, #6
 8002438:	4811      	ldr	r0, [pc, #68]	@ (8002480 <UpdateCharger+0xe4>)
 800243a:	2200      	movs	r2, #0
 800243c:	0019      	movs	r1, r3
 800243e:	f000 fddb 	bl	8002ff8 <HAL_GPIO_WritePin>
 8002442:	e006      	b.n	8002452 <UpdateCharger+0xb6>
  } else {
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	019b      	lsls	r3, r3, #6
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <UpdateCharger+0xe4>)
 800244a:	2201      	movs	r2, #1
 800244c:	0019      	movs	r1, r3
 800244e:	f000 fdd3 	bl	8002ff8 <HAL_GPIO_WritePin>
  }
  /* Emit a concise status line over SWO/semihost printf (throttled inside). */
  BQ25798_logStatus(&bq25798_charger);
 8002452:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <UpdateCharger+0xe0>)
 8002454:	0018      	movs	r0, r3
 8002456:	f7fe fdc1 	bl	8000fdc <BQ25798_logStatus>
  BQ_LOG("PROC: UpdateCharger end (%lums)", (unsigned long)(HAL_GetTick()-tStart));
 800245a:	f000 fb69 	bl	8002b30 <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	1ad2      	subs	r2, r2, r3
 8002464:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <UpdateCharger+0xe8>)
 8002466:	0011      	movs	r1, r2
 8002468:	0018      	movs	r0, r3
 800246a:	f002 fcc3 	bl	8004df4 <iprintf>
}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	080062b4 	.word	0x080062b4
 800247c:	200000e4 	.word	0x200000e4
 8002480:	50000800 	.word	0x50000800
 8002484:	080062d4 	.word	0x080062d4

08002488 <UpdateMonitor>:

static void UpdateMonitor(void) {
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af02      	add	r7, sp, #8
  uint32_t tStart = HAL_GetTick();
 800248e:	f000 fb4f 	bl	8002b30 <HAL_GetTick>
 8002492:	0003      	movs	r3, r0
 8002494:	607b      	str	r3, [r7, #4]
  BQ_LOG("PROC: UpdateMonitor begin");
 8002496:	4b42      	ldr	r3, [pc, #264]	@ (80025a0 <UpdateMonitor+0x118>)
 8002498:	0018      	movs	r0, r3
 800249a:	f002 fd11 	bl	8004ec0 <puts>
  // Read system status & cell voltages
  BQ76907_readSystemStatus(&bq76907_monitor);
 800249e:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7fe feae 	bl	8001202 <BQ76907_readSystemStatus>
  BQ76907_readCellVoltages(&bq76907_monitor);
 80024a6:	4b3f      	ldr	r3, [pc, #252]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7fe ff01 	bl	80012b0 <BQ76907_readCellVoltages>
  BQ76907_readPackVoltage(&bq76907_monitor);
 80024ae:	4b3d      	ldr	r3, [pc, #244]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fe ff65 	bl	8001380 <BQ76907_readPackVoltage>
  BQ76907_readTemperature1(&bq76907_monitor);
 80024b6:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe ffa5 	bl	8001408 <BQ76907_readTemperature1>
  BQ76907_logStatus(&bq76907_monitor);
 80024be:	4b39      	ldr	r3, [pc, #228]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff fc89 	bl	8001dd8 <BQ76907_logStatus>
  // Monitor fault indication (aggregate)
  uint8_t anyFault = bq76907_monitor.status.ov_fault || bq76907_monitor.status.uv_fault ||
 80024c6:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024c8:	7c9b      	ldrb	r3, [r3, #18]
           bq76907_monitor.status.ocd_fault || bq76907_monitor.status.scd_fault ||
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <UpdateMonitor+0x66>
  uint8_t anyFault = bq76907_monitor.status.ov_fault || bq76907_monitor.status.uv_fault ||
 80024ce:	4b35      	ldr	r3, [pc, #212]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024d0:	7cdb      	ldrb	r3, [r3, #19]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <UpdateMonitor+0x66>
           bq76907_monitor.status.ocd_fault || bq76907_monitor.status.scd_fault ||
 80024d6:	4b33      	ldr	r3, [pc, #204]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024d8:	7d5b      	ldrb	r3, [r3, #21]
  uint8_t anyFault = bq76907_monitor.status.ov_fault || bq76907_monitor.status.uv_fault ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <UpdateMonitor+0x66>
           bq76907_monitor.status.ocd_fault || bq76907_monitor.status.scd_fault ||
 80024de:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024e0:	7d1b      	ldrb	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <UpdateMonitor+0x66>
           bq76907_monitor.status.ot_fault;
 80024e6:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <UpdateMonitor+0x11c>)
 80024e8:	7d9b      	ldrb	r3, [r3, #22]
           bq76907_monitor.status.ocd_fault || bq76907_monitor.status.scd_fault ||
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <UpdateMonitor+0x6a>
 80024ee:	2201      	movs	r2, #1
 80024f0:	e000      	b.n	80024f4 <UpdateMonitor+0x6c>
 80024f2:	2200      	movs	r2, #0
  uint8_t anyFault = bq76907_monitor.status.ov_fault || bq76907_monitor.status.uv_fault ||
 80024f4:	1cfb      	adds	r3, r7, #3
 80024f6:	701a      	strb	r2, [r3, #0]
  static uint8_t lastFaultState = 0xFF; // ensure first print
  if (anyFault){
 80024f8:	1cfb      	adds	r3, r7, #3
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <UpdateMonitor+0x9e>
    // Flash LED rapidly to signal monitor-level fault (reuse PA5 / orange LED assumption)
    if ((HAL_GetTick() - last_error_led_toggle_tick) >= 150){
 8002500:	f000 fb16 	bl	8002b30 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	4b28      	ldr	r3, [pc, #160]	@ (80025a8 <UpdateMonitor+0x120>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b95      	cmp	r3, #149	@ 0x95
 800250e:	d90a      	bls.n	8002526 <UpdateMonitor+0x9e>
      last_error_led_toggle_tick = HAL_GetTick();
 8002510:	f000 fb0e 	bl	8002b30 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <UpdateMonitor+0x120>)
 8002518:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800251a:	23a0      	movs	r3, #160	@ 0xa0
 800251c:	05db      	lsls	r3, r3, #23
 800251e:	2120      	movs	r1, #32
 8002520:	0018      	movs	r0, r3
 8002522:	f000 fd86 	bl	8003032 <HAL_GPIO_TogglePin>
    }
  }
  if (lastFaultState != anyFault){
 8002526:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <UpdateMonitor+0x124>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	1cfa      	adds	r2, r7, #3
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d028      	beq.n	8002584 <UpdateMonitor+0xfc>
    lastFaultState = anyFault;
 8002532:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <UpdateMonitor+0x124>)
 8002534:	1cfa      	adds	r2, r7, #3
 8002536:	7812      	ldrb	r2, [r2, #0]
 8002538:	701a      	strb	r2, [r3, #0]
    if (anyFault){
 800253a:	1cfb      	adds	r3, r7, #3
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <UpdateMonitor+0xe6>
      BQ_LOG("MONITOR FAULT: OV=%u UV=%u OCD=%u SCD=%u OT=%u", bq76907_monitor.status.ov_fault,
 8002542:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <UpdateMonitor+0x11c>)
 8002544:	7c9b      	ldrb	r3, [r3, #18]
 8002546:	0019      	movs	r1, r3
 8002548:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <UpdateMonitor+0x11c>)
 800254a:	7cdb      	ldrb	r3, [r3, #19]
 800254c:	001c      	movs	r4, r3
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <UpdateMonitor+0x11c>)
 8002550:	7d5b      	ldrb	r3, [r3, #21]
 8002552:	001d      	movs	r5, r3
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <UpdateMonitor+0x11c>)
 8002556:	7d1b      	ldrb	r3, [r3, #20]
 8002558:	001a      	movs	r2, r3
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <UpdateMonitor+0x11c>)
 800255c:	7d9b      	ldrb	r3, [r3, #22]
 800255e:	4814      	ldr	r0, [pc, #80]	@ (80025b0 <UpdateMonitor+0x128>)
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	9200      	str	r2, [sp, #0]
 8002564:	002b      	movs	r3, r5
 8002566:	0022      	movs	r2, r4
 8002568:	f002 fc44 	bl	8004df4 <iprintf>
 800256c:	e00a      	b.n	8002584 <UpdateMonitor+0xfc>
         bq76907_monitor.status.uv_fault, bq76907_monitor.status.ocd_fault,
         bq76907_monitor.status.scd_fault, bq76907_monitor.status.ot_fault);
    } else {
      BQ_LOG("MONITOR FAULT CLEARED");
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <UpdateMonitor+0x12c>)
 8002570:	0018      	movs	r0, r3
 8002572:	f002 fca5 	bl	8004ec0 <puts>
      // Ensure LED off (inactive state high per earlier assumption)
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002576:	23a0      	movs	r3, #160	@ 0xa0
 8002578:	05db      	lsls	r3, r3, #23
 800257a:	2201      	movs	r2, #1
 800257c:	2120      	movs	r1, #32
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fd3a 	bl	8002ff8 <HAL_GPIO_WritePin>
    }
  }
  BQ_LOG("PROC: UpdateMonitor end (%lums)", (unsigned long)(HAL_GetTick()-tStart));
 8002584:	f000 fad4 	bl	8002b30 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	1ad2      	subs	r2, r2, r3
 800258e:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <UpdateMonitor+0x130>)
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f002 fc2e 	bl	8004df4 <iprintf>
}
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bdb0      	pop	{r4, r5, r7, pc}
 80025a0:	080062fc 	.word	0x080062fc
 80025a4:	200001dc 	.word	0x200001dc
 80025a8:	200002e0 	.word	0x200002e0
 80025ac:	20000000 	.word	0x20000000
 80025b0:	0800631c 	.word	0x0800631c
 80025b4:	08006354 	.word	0x08006354
 80025b8:	08006370 	.word	0x08006370

080025bc <findMaxCell>:

static uint16_t findMaxCell(uint16_t *vals, uint8_t count) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	000a      	movs	r2, r1
 80025c6:	1cfb      	adds	r3, r7, #3
 80025c8:	701a      	strb	r2, [r3, #0]
  uint16_t m = 0; for (uint8_t i=0;i<count;i++) if (vals[i] > m) m = vals[i]; return m;
 80025ca:	230e      	movs	r3, #14
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	2200      	movs	r2, #0
 80025d0:	801a      	strh	r2, [r3, #0]
 80025d2:	230d      	movs	r3, #13
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e019      	b.n	8002610 <findMaxCell+0x54>
 80025dc:	210d      	movs	r1, #13
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	200e      	movs	r0, #14
 80025ec:	183a      	adds	r2, r7, r0
 80025ee:	8812      	ldrh	r2, [r2, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <findMaxCell+0x48>
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	18d2      	adds	r2, r2, r3
 80025fe:	183b      	adds	r3, r7, r0
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	801a      	strh	r2, [r3, #0]
 8002604:	210d      	movs	r1, #13
 8002606:	187b      	adds	r3, r7, r1
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	187b      	adds	r3, r7, r1
 800260c:	3201      	adds	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	230d      	movs	r3, #13
 8002612:	18fa      	adds	r2, r7, r3
 8002614:	1cfb      	adds	r3, r7, #3
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d3de      	bcc.n	80025dc <findMaxCell+0x20>
 800261e:	230e      	movs	r3, #14
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	881b      	ldrh	r3, [r3, #0]
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b004      	add	sp, #16
 800262a:	bd80      	pop	{r7, pc}

0800262c <findMinCell>:
static uint16_t findMinCell(uint16_t *vals, uint8_t count) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	000a      	movs	r2, r1
 8002636:	1cfb      	adds	r3, r7, #3
 8002638:	701a      	strb	r2, [r3, #0]
  uint16_t m = 0xFFFF; for (uint8_t i=0;i<count;i++) if (vals[i] < m) m = vals[i]; return m;
 800263a:	230e      	movs	r3, #14
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2201      	movs	r2, #1
 8002640:	4252      	negs	r2, r2
 8002642:	801a      	strh	r2, [r3, #0]
 8002644:	230d      	movs	r3, #13
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e019      	b.n	8002682 <findMinCell+0x56>
 800264e:	210d      	movs	r1, #13
 8002650:	187b      	adds	r3, r7, r1
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	200e      	movs	r0, #14
 800265e:	183a      	adds	r2, r7, r0
 8002660:	8812      	ldrh	r2, [r2, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d907      	bls.n	8002676 <findMinCell+0x4a>
 8002666:	187b      	adds	r3, r7, r1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	18d2      	adds	r2, r2, r3
 8002670:	183b      	adds	r3, r7, r0
 8002672:	8812      	ldrh	r2, [r2, #0]
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	210d      	movs	r1, #13
 8002678:	187b      	adds	r3, r7, r1
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	187b      	adds	r3, r7, r1
 800267e:	3201      	adds	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	230d      	movs	r3, #13
 8002684:	18fa      	adds	r2, r7, r3
 8002686:	1cfb      	adds	r3, r7, #3
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d3de      	bcc.n	800264e <findMinCell+0x22>
 8002690:	230e      	movs	r3, #14
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	881b      	ldrh	r3, [r3, #0]
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <EvaluateBalancing>:

static void EvaluateBalancing(void) {
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
  uint32_t tStart = HAL_GetTick();
 80026a6:	f000 fa43 	bl	8002b30 <HAL_GetTick>
 80026aa:	0003      	movs	r3, r0
 80026ac:	613b      	str	r3, [r7, #16]
  BQ_LOG("PROC: EvaluateBalancing begin");
 80026ae:	4b45      	ldr	r3, [pc, #276]	@ (80027c4 <EvaluateBalancing+0x124>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f002 fc05 	bl	8004ec0 <puts>
  // Placeholder simple balancing: compute delta and decide a mask
  uint8_t cellCount = 5; // placeholder variant
 80026b6:	250f      	movs	r5, #15
 80026b8:	197b      	adds	r3, r7, r5
 80026ba:	2205      	movs	r2, #5
 80026bc:	701a      	strb	r2, [r3, #0]
  uint16_t vmax = findMaxCell(bq76907_monitor.cellVoltage_mV, cellCount);
 80026be:	230c      	movs	r3, #12
 80026c0:	18fc      	adds	r4, r7, r3
 80026c2:	197b      	adds	r3, r7, r5
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	4b40      	ldr	r3, [pc, #256]	@ (80027c8 <EvaluateBalancing+0x128>)
 80026c8:	0011      	movs	r1, r2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff ff76 	bl	80025bc <findMaxCell>
 80026d0:	0003      	movs	r3, r0
 80026d2:	8023      	strh	r3, [r4, #0]
  uint16_t vmin = findMinCell(bq76907_monitor.cellVoltage_mV, cellCount);
 80026d4:	260a      	movs	r6, #10
 80026d6:	19bc      	adds	r4, r7, r6
 80026d8:	197b      	adds	r3, r7, r5
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	4b3a      	ldr	r3, [pc, #232]	@ (80027c8 <EvaluateBalancing+0x128>)
 80026de:	0011      	movs	r1, r2
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ffa3 	bl	800262c <findMinCell>
 80026e6:	0003      	movs	r3, r0
 80026e8:	8023      	strh	r3, [r4, #0]
  uint16_t delta = vmax - vmin;
 80026ea:	2408      	movs	r4, #8
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	220c      	movs	r2, #12
 80026f0:	18b9      	adds	r1, r7, r2
 80026f2:	0030      	movs	r0, r6
 80026f4:	183a      	adds	r2, r7, r0
 80026f6:	8809      	ldrh	r1, [r1, #0]
 80026f8:	8812      	ldrh	r2, [r2, #0]
 80026fa:	1a8a      	subs	r2, r1, r2
 80026fc:	801a      	strh	r2, [r3, #0]
  static uint8_t balancingActive = 0;

  if (!balancingActive) {
 80026fe:	4b33      	ldr	r3, [pc, #204]	@ (80027cc <EvaluateBalancing+0x12c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d145      	bne.n	8002792 <EvaluateBalancing+0xf2>
    if (delta > BALANCE_THRESHOLD_MV) {
 8002706:	193b      	adds	r3, r7, r4
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	2b19      	cmp	r3, #25
 800270c:	d94c      	bls.n	80027a8 <EvaluateBalancing+0x108>
      // Select all cells above (vmin + (delta/2)) as a naive approach
      uint16_t cutoff = vmin + (delta/2);
 800270e:	193b      	adds	r3, r7, r4
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	b299      	uxth	r1, r3
 8002716:	1dbb      	adds	r3, r7, #6
 8002718:	183a      	adds	r2, r7, r0
 800271a:	8812      	ldrh	r2, [r2, #0]
 800271c:	188a      	adds	r2, r1, r2
 800271e:	801a      	strh	r2, [r3, #0]
      uint8_t mask = 0;
 8002720:	2317      	movs	r3, #23
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
      for (uint8_t i=0;i<cellCount;i++) {
 8002728:	2316      	movs	r3, #22
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e01d      	b.n	800276e <EvaluateBalancing+0xce>
        if (bq76907_monitor.cellVoltage_mV[i] > cutoff) mask |= (1u << i);
 8002732:	2116      	movs	r1, #22
 8002734:	187b      	adds	r3, r7, r1
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4a25      	ldr	r2, [pc, #148]	@ (80027d0 <EvaluateBalancing+0x130>)
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	18d3      	adds	r3, r2, r3
 800273e:	3306      	adds	r3, #6
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	1dba      	adds	r2, r7, #6
 8002744:	8812      	ldrh	r2, [r2, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20b      	bcs.n	8002762 <EvaluateBalancing+0xc2>
 800274a:	187b      	adds	r3, r7, r1
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	409a      	lsls	r2, r3
 8002752:	0013      	movs	r3, r2
 8002754:	b2d9      	uxtb	r1, r3
 8002756:	2217      	movs	r2, #23
 8002758:	18bb      	adds	r3, r7, r2
 800275a:	18ba      	adds	r2, r7, r2
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	701a      	strb	r2, [r3, #0]
      for (uint8_t i=0;i<cellCount;i++) {
 8002762:	2116      	movs	r1, #22
 8002764:	187b      	adds	r3, r7, r1
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	187b      	adds	r3, r7, r1
 800276a:	3201      	adds	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	2316      	movs	r3, #22
 8002770:	18fa      	adds	r2, r7, r3
 8002772:	230f      	movs	r3, #15
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d3d9      	bcc.n	8002732 <EvaluateBalancing+0x92>
      }
      applyCellBalancingMask(mask);
 800277e:	2317      	movs	r3, #23
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 f827 	bl	80027d8 <applyCellBalancingMask>
      balancingActive = 1;
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <EvaluateBalancing+0x12c>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e00a      	b.n	80027a8 <EvaluateBalancing+0x108>
    }
  } else {
    if (delta < BALANCE_HYSTERESIS_MV) {
 8002792:	2308      	movs	r3, #8
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	2b09      	cmp	r3, #9
 800279a:	d805      	bhi.n	80027a8 <EvaluateBalancing+0x108>
      applyCellBalancingMask(0); // turn off
 800279c:	2000      	movs	r0, #0
 800279e:	f000 f81b 	bl	80027d8 <applyCellBalancingMask>
      balancingActive = 0;
 80027a2:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <EvaluateBalancing+0x12c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
    }
  }
  BQ_LOG("PROC: EvaluateBalancing end (%lums)", (unsigned long)(HAL_GetTick()-tStart));
 80027a8:	f000 f9c2 	bl	8002b30 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad2      	subs	r2, r2, r3
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <EvaluateBalancing+0x134>)
 80027b4:	0011      	movs	r1, r2
 80027b6:	0018      	movs	r0, r3
 80027b8:	f002 fb1c 	bl	8004df4 <iprintf>
}
 80027bc:	46c0      	nop			@ (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b007      	add	sp, #28
 80027c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c4:	08006398 	.word	0x08006398
 80027c8:	200001e2 	.word	0x200001e2
 80027cc:	200002e4 	.word	0x200002e4
 80027d0:	200001dc 	.word	0x200001dc
 80027d4:	080063bc 	.word	0x080063bc

080027d8 <applyCellBalancingMask>:

static void applyCellBalancingMask(uint8_t mask) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	0002      	movs	r2, r0
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	701a      	strb	r2, [r3, #0]
  BQ_LOG("PROC: applyCellBalancingMask mask=0x%02X", mask);
 80027e4:	1dfb      	adds	r3, r7, #7
 80027e6:	781a      	ldrb	r2, [r3, #0]
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <applyCellBalancingMask+0x24>)
 80027ea:	0011      	movs	r1, r2
 80027ec:	0018      	movs	r0, r3
 80027ee:	f002 fb01 	bl	8004df4 <iprintf>
  // Placeholder: would write mask bits into CELLBAL1/2 registers after verification.
  // Splitting across two registers if needed (e.g., lower 3 bits in CELLBAL1, next in CELLBAL2).
  (void)mask; // suppress unused warning until implemented
}
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b002      	add	sp, #8
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	080063e8 	.word	0x080063e8

08002800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002804:	b672      	cpsid	i
}
 8002806:	46c0      	nop			@ (mov r8, r8)

  // Assuming an LED (e.g., on GPIOA, PIN_5) is available for error indication
  // Make sure this pin is initialized in MX_GPIO_Init()
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle an LED to indicate error
 8002808:	23a0      	movs	r3, #160	@ 0xa0
 800280a:	05db      	lsls	r3, r3, #23
 800280c:	2120      	movs	r1, #32
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fc0f 	bl	8003032 <HAL_GPIO_TogglePin>
      HAL_Delay(100); // Small delay for visible blinking
 8002814:	2064      	movs	r0, #100	@ 0x64
 8002816:	f000 f995 	bl	8002b44 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle an LED to indicate error
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	e7f4      	b.n	8002808 <Error_Handler+0x8>
	...

08002820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	4b11      	ldr	r3, [pc, #68]	@ (800286c <HAL_MspInit+0x4c>)
 8002828:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800282a:	4b10      	ldr	r3, [pc, #64]	@ (800286c <HAL_MspInit+0x4c>)
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
 8002832:	4b0e      	ldr	r3, [pc, #56]	@ (800286c <HAL_MspInit+0x4c>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_MspInit+0x4c>)
 8002840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002842:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <HAL_MspInit+0x4c>)
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	0549      	lsls	r1, r1, #21
 8002848:	430a      	orrs	r2, r1
 800284a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800284c:	4b07      	ldr	r3, [pc, #28]	@ (800286c <HAL_MspInit+0x4c>)
 800284e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	055b      	lsls	r3, r3, #21
 8002854:	4013      	ands	r3, r2
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800285a:	23c0      	movs	r3, #192	@ 0xc0
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	0018      	movs	r0, r3
 8002860:	f000 f994 	bl	8002b8c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b002      	add	sp, #8
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002874:	46c0      	nop			@ (mov r8, r8)
 8002876:	e7fd      	b.n	8002874 <NMI_Handler+0x4>

08002878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	e7fd      	b.n	800287c <HardFault_Handler+0x4>

08002880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002898:	f000 f938 	bl	8002b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800289c:	46c0      	nop			@ (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e00a      	b.n	80028ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b4:	e000      	b.n	80028b8 <_read+0x16>
 80028b6:	bf00      	nop
 80028b8:	0001      	movs	r1, r0
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	60ba      	str	r2, [r7, #8]
 80028c0:	b2ca      	uxtb	r2, r1
 80028c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3301      	adds	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	dbf0      	blt.n	80028b4 <_read+0x12>
  }

  return len;
 80028d2:	687b      	ldr	r3, [r7, #4]
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b006      	add	sp, #24
 80028da:	bd80      	pop	{r7, pc}

080028dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e009      	b.n	8002902 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	60ba      	str	r2, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	0018      	movs	r0, r3
 80028f8:	e000      	b.n	80028fc <_write+0x20>
 80028fa:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3301      	adds	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	dbf1      	blt.n	80028ee <_write+0x12>
  }
  return len;
 800290a:	687b      	ldr	r3, [r7, #4]
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b006      	add	sp, #24
 8002912:	bd80      	pop	{r7, pc}

08002914 <_close>:

int _close(int file)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800291c:	2301      	movs	r3, #1
 800291e:	425b      	negs	r3, r3
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2280      	movs	r2, #128	@ 0x80
 8002936:	0192      	lsls	r2, r2, #6
 8002938:	605a      	str	r2, [r3, #4]
  return 0;
 800293a:	2300      	movs	r3, #0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <_isatty>:

int _isatty(int file)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800294c:	2301      	movs	r3, #1
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}

08002956 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b004      	add	sp, #16
 800296a:	bd80      	pop	{r7, pc}

0800296c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002974:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <_sbrk+0x5c>)
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <_sbrk+0x60>)
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <_sbrk+0x64>)
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <_sbrk+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	18d3      	adds	r3, r2, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d207      	bcs.n	80029ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800299c:	f002 fbdc 	bl	8005158 <__errno>
 80029a0:	0003      	movs	r3, r0
 80029a2:	220c      	movs	r2, #12
 80029a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	425b      	negs	r3, r3
 80029aa:	e009      	b.n	80029c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ac:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	18d2      	adds	r2, r2, r3
 80029ba:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <_sbrk+0x64>)
 80029bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b006      	add	sp, #24
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20024000 	.word	0x20024000
 80029cc:	00000400 	.word	0x00000400
 80029d0:	200002e8 	.word	0x200002e8
 80029d4:	20000440 	.word	0x20000440

080029d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e4:	480d      	ldr	r0, [pc, #52]	@ (8002a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029e8:	f7ff fff6 	bl	80029d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029ec:	480c      	ldr	r0, [pc, #48]	@ (8002a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80029ee:	490d      	ldr	r1, [pc, #52]	@ (8002a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a28 <LoopForever+0xe>)
  movs r3, #0
 80029f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f4:	e002      	b.n	80029fc <LoopCopyDataInit>

080029f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fa:	3304      	adds	r3, #4

080029fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a00:	d3f9      	bcc.n	80029f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a04:	4c0a      	ldr	r4, [pc, #40]	@ (8002a30 <LoopForever+0x16>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a08:	e001      	b.n	8002a0e <LoopFillZerobss>

08002a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a0c:	3204      	adds	r2, #4

08002a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a10:	d3fb      	bcc.n	8002a0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a12:	f002 fba7 	bl	8005164 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002a16:	f7ff fb9d 	bl	8002154 <main>

08002a1a <LoopForever>:

LoopForever:
  b LoopForever
 8002a1a:	e7fe      	b.n	8002a1a <LoopForever>
  ldr   r0, =_estack
 8002a1c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002a28:	080064c8 	.word	0x080064c8
  ldr r2, =_sbss
 8002a2c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002a30:	2000043c 	.word	0x2000043c

08002a34 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC1_COMP_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3e:	1dfb      	adds	r3, r7, #7
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_Init+0x3c>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_Init+0x3c>)
 8002a4a:	2180      	movs	r1, #128	@ 0x80
 8002a4c:	0049      	lsls	r1, r1, #1
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a52:	2003      	movs	r0, #3
 8002a54:	f000 f810 	bl	8002a78 <HAL_InitTick>
 8002a58:	1e03      	subs	r3, r0, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a5c:	1dfb      	adds	r3, r7, #7
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e001      	b.n	8002a68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002a64:	f7ff fedc 	bl	8002820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40022000 	.word	0x40022000

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a80:	230f      	movs	r3, #15
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002a88:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <HAL_InitTick+0x88>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02b      	beq.n	8002ae8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a90:	4b1c      	ldr	r3, [pc, #112]	@ (8002b04 <HAL_InitTick+0x8c>)
 8002a92:	681c      	ldr	r4, [r3, #0]
 8002a94:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <HAL_InitTick+0x88>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	0019      	movs	r1, r3
 8002a9a:	23fa      	movs	r3, #250	@ 0xfa
 8002a9c:	0098      	lsls	r0, r3, #2
 8002a9e:	f7fd fb3b 	bl	8000118 <__udivsi3>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	0020      	movs	r0, r4
 8002aa8:	f7fd fb36 	bl	8000118 <__udivsi3>
 8002aac:	0003      	movs	r3, r0
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 f929 	bl	8002d06 <HAL_SYSTICK_Config>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d112      	bne.n	8002ade <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d80a      	bhi.n	8002ad4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	425b      	negs	r3, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 f908 	bl	8002cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002acc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <HAL_InitTick+0x90>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e00d      	b.n	8002af0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e008      	b.n	8002af0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ade:	230f      	movs	r3, #15
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e003      	b.n	8002af0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ae8:	230f      	movs	r3, #15
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002af0:	230f      	movs	r3, #15
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781b      	ldrb	r3, [r3, #0]
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b005      	add	sp, #20
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	20000004 	.word	0x20000004
 8002b08:	20000008 	.word	0x20000008

08002b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_IncTick+0x1c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	001a      	movs	r2, r3
 8002b16:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_IncTick+0x20>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	18d2      	adds	r2, r2, r3
 8002b1c:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <HAL_IncTick+0x20>)
 8002b1e:	601a      	str	r2, [r3, #0]
}
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	2000000c 	.word	0x2000000c
 8002b2c:	200002ec 	.word	0x200002ec

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b02      	ldr	r3, [pc, #8]	@ (8002b40 <HAL_GetTick+0x10>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	200002ec 	.word	0x200002ec

08002b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff fff0 	bl	8002b30 <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	d005      	beq.n	8002b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_Delay+0x44>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	001a      	movs	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	f7ff ffe0 	bl	8002b30 <HAL_GetTick>
 8002b70:	0002      	movs	r2, r0
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8f7      	bhi.n	8002b6c <HAL_Delay+0x28>
  {
  }
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	2000000c 	.word	0x2000000c

08002b8c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002b94:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a06      	ldr	r2, [pc, #24]	@ (8002bb4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	fffff9ff 	.word	0xfffff9ff

08002bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bcc:	d828      	bhi.n	8002c20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bce:	4a2f      	ldr	r2, [pc, #188]	@ (8002c8c <__NVIC_SetPriority+0xd4>)
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	33c0      	adds	r3, #192	@ 0xc0
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	589b      	ldr	r3, [r3, r2]
 8002bde:	1dfa      	adds	r2, r7, #7
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	0011      	movs	r1, r2
 8002be4:	2203      	movs	r2, #3
 8002be6:	400a      	ands	r2, r1
 8002be8:	00d2      	lsls	r2, r2, #3
 8002bea:	21ff      	movs	r1, #255	@ 0xff
 8002bec:	4091      	lsls	r1, r2
 8002bee:	000a      	movs	r2, r1
 8002bf0:	43d2      	mvns	r2, r2
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	22ff      	movs	r2, #255	@ 0xff
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	0018      	movs	r0, r3
 8002c04:	2303      	movs	r3, #3
 8002c06:	4003      	ands	r3, r0
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c0c:	481f      	ldr	r0, [pc, #124]	@ (8002c8c <__NVIC_SetPriority+0xd4>)
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	430a      	orrs	r2, r1
 8002c18:	33c0      	adds	r3, #192	@ 0xc0
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c1e:	e031      	b.n	8002c84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c20:	4a1b      	ldr	r2, [pc, #108]	@ (8002c90 <__NVIC_SetPriority+0xd8>)
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	0019      	movs	r1, r3
 8002c28:	230f      	movs	r3, #15
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	3b08      	subs	r3, #8
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3306      	adds	r3, #6
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	18d3      	adds	r3, r2, r3
 8002c36:	3304      	adds	r3, #4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1dfa      	adds	r2, r7, #7
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	0011      	movs	r1, r2
 8002c40:	2203      	movs	r2, #3
 8002c42:	400a      	ands	r2, r1
 8002c44:	00d2      	lsls	r2, r2, #3
 8002c46:	21ff      	movs	r1, #255	@ 0xff
 8002c48:	4091      	lsls	r1, r2
 8002c4a:	000a      	movs	r2, r1
 8002c4c:	43d2      	mvns	r2, r2
 8002c4e:	401a      	ands	r2, r3
 8002c50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	22ff      	movs	r2, #255	@ 0xff
 8002c58:	401a      	ands	r2, r3
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	2303      	movs	r3, #3
 8002c62:	4003      	ands	r3, r0
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c68:	4809      	ldr	r0, [pc, #36]	@ (8002c90 <__NVIC_SetPriority+0xd8>)
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	001c      	movs	r4, r3
 8002c70:	230f      	movs	r3, #15
 8002c72:	4023      	ands	r3, r4
 8002c74:	3b08      	subs	r3, #8
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	3306      	adds	r3, #6
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	18c3      	adds	r3, r0, r3
 8002c80:	3304      	adds	r3, #4
 8002c82:	601a      	str	r2, [r3, #0]
}
 8002c84:	46c0      	nop			@ (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b003      	add	sp, #12
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	e000e100 	.word	0xe000e100
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1e5a      	subs	r2, r3, #1
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	045b      	lsls	r3, r3, #17
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d301      	bcc.n	8002cac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e010      	b.n	8002cce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <SysTick_Config+0x44>)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	3a01      	subs	r2, #1
 8002cb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	425b      	negs	r3, r3
 8002cb8:	2103      	movs	r1, #3
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7ff ff7c 	bl	8002bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <SysTick_Config+0x44>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc6:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <SysTick_Config+0x44>)
 8002cc8:	2207      	movs	r2, #7
 8002cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	e000e010 	.word	0xe000e010

08002cdc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	1c02      	adds	r2, r0, #0
 8002cec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b25b      	sxtb	r3, r3
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff ff5d 	bl	8002bb8 <__NVIC_SetPriority>
}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b004      	add	sp, #16
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff ffbf 	bl	8002c94 <SysTick_Config>
 8002d16:	0003      	movs	r3, r0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	e14d      	b.n	8002fcc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4091      	lsls	r1, r2
 8002d3a:	000a      	movs	r2, r1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d100      	bne.n	8002d48 <HAL_GPIO_Init+0x28>
 8002d46:	e13e      	b.n	8002fc6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d005      	beq.n	8002d60 <HAL_GPIO_Init+0x40>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d130      	bne.n	8002dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	0013      	movs	r3, r2
 8002d70:	43da      	mvns	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	409a      	lsls	r2, r3
 8002d82:	0013      	movs	r3, r2
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d96:	2201      	movs	r2, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	0013      	movs	r3, r2
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	2201      	movs	r2, #1
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
 8002db4:	0013      	movs	r3, r2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d017      	beq.n	8002dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	0013      	movs	r3, r2
 8002dde:	43da      	mvns	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	409a      	lsls	r2, r3
 8002df0:	0013      	movs	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2203      	movs	r2, #3
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d123      	bne.n	8002e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	58d3      	ldr	r3, [r2, r3]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	409a      	lsls	r2, r3
 8002e24:	0013      	movs	r3, r2
 8002e26:	43da      	mvns	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2107      	movs	r1, #7
 8002e36:	400b      	ands	r3, r1
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	0013      	movs	r3, r2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	6939      	ldr	r1, [r7, #16]
 8002e50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	0013      	movs	r3, r2
 8002e62:	43da      	mvns	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	401a      	ands	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	0013      	movs	r3, r2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	23c0      	movs	r3, #192	@ 0xc0
 8002e8c:	029b      	lsls	r3, r3, #10
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d100      	bne.n	8002e94 <HAL_GPIO_Init+0x174>
 8002e92:	e098      	b.n	8002fc6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002e94:	4a53      	ldr	r2, [pc, #332]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	589b      	ldr	r3, [r3, r2]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	220f      	movs	r2, #15
 8002eac:	409a      	lsls	r2, r3
 8002eae:	0013      	movs	r3, r2
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	23a0      	movs	r3, #160	@ 0xa0
 8002ebc:	05db      	lsls	r3, r3, #23
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d019      	beq.n	8002ef6 <HAL_GPIO_Init+0x1d6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a48      	ldr	r2, [pc, #288]	@ (8002fe8 <HAL_GPIO_Init+0x2c8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x1d2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a47      	ldr	r2, [pc, #284]	@ (8002fec <HAL_GPIO_Init+0x2cc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x1ce>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a46      	ldr	r2, [pc, #280]	@ (8002ff0 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x1ca>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a45      	ldr	r2, [pc, #276]	@ (8002ff4 <HAL_GPIO_Init+0x2d4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x1c6>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	e008      	b.n	8002ef8 <HAL_GPIO_Init+0x1d8>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x1d8>
 8002eea:	2303      	movs	r3, #3
 8002eec:	e004      	b.n	8002ef8 <HAL_GPIO_Init+0x1d8>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_Init+0x1d8>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_GPIO_Init+0x1d8>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	2103      	movs	r1, #3
 8002efc:	400a      	ands	r2, r1
 8002efe:	00d2      	lsls	r2, r2, #3
 8002f00:	4093      	lsls	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002f08:	4936      	ldr	r1, [pc, #216]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3318      	adds	r3, #24
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f16:	4b33      	ldr	r3, [pc, #204]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	035b      	lsls	r3, r3, #13
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002f40:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	43da      	mvns	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	039b      	lsls	r3, r3, #14
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f64:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002f6c:	2384      	movs	r3, #132	@ 0x84
 8002f6e:	58d3      	ldr	r3, [r2, r3]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	029b      	lsls	r3, r3, #10
 8002f84:	4013      	ands	r3, r2
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f90:	4914      	ldr	r1, [pc, #80]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002f92:	2284      	movs	r2, #132	@ 0x84
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002f98:	4a12      	ldr	r2, [pc, #72]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	58d3      	ldr	r3, [r2, r3]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	025b      	lsls	r3, r3, #9
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fbe:	4909      	ldr	r1, [pc, #36]	@ (8002fe4 <HAL_GPIO_Init+0x2c4>)
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	40da      	lsrs	r2, r3
 8002fd4:	1e13      	subs	r3, r2, #0
 8002fd6:	d000      	beq.n	8002fda <HAL_GPIO_Init+0x2ba>
 8002fd8:	e6aa      	b.n	8002d30 <HAL_GPIO_Init+0x10>
  }
}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	46c0      	nop			@ (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b006      	add	sp, #24
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021800 	.word	0x40021800
 8002fe8:	50000400 	.word	0x50000400
 8002fec:	50000800 	.word	0x50000800
 8002ff0:	50000c00 	.word	0x50000c00
 8002ff4:	50001000 	.word	0x50001000

08002ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	0008      	movs	r0, r1
 8003002:	0011      	movs	r1, r2
 8003004:	1cbb      	adds	r3, r7, #2
 8003006:	1c02      	adds	r2, r0, #0
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	1c7b      	adds	r3, r7, #1
 800300c:	1c0a      	adds	r2, r1, #0
 800300e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003010:	1c7b      	adds	r3, r7, #1
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003018:	1cbb      	adds	r3, r7, #2
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003020:	e003      	b.n	800302a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003022:	1cbb      	adds	r3, r7, #2
 8003024:	881a      	ldrh	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	000a      	movs	r2, r1
 800303c:	1cbb      	adds	r3, r7, #2
 800303e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003046:	1cbb      	adds	r3, r7, #2
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	041a      	lsls	r2, r3, #16
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	43db      	mvns	r3, r3
 8003054:	1cb9      	adds	r1, r7, #2
 8003056:	8809      	ldrh	r1, [r1, #0]
 8003058:	400b      	ands	r3, r1
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	619a      	str	r2, [r3, #24]
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e08f      	b.n	800319a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2241      	movs	r2, #65	@ 0x41
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2240      	movs	r2, #64	@ 0x40
 800308a:	2100      	movs	r1, #0
 800308c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f7fe fffd 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2241      	movs	r2, #65	@ 0x41
 800309a:	2124      	movs	r1, #36	@ 0x24
 800309c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	438a      	bics	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	493b      	ldr	r1, [pc, #236]	@ (80031a4 <HAL_I2C_Init+0x13c>)
 80030b8:	400a      	ands	r2, r1
 80030ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4938      	ldr	r1, [pc, #224]	@ (80031a8 <HAL_I2C_Init+0x140>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d108      	bne.n	80030e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	@ 0x80
 80030de:	0209      	lsls	r1, r1, #8
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	e007      	b.n	80030f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2184      	movs	r1, #132	@ 0x84
 80030f0:	0209      	lsls	r1, r1, #8
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d109      	bne.n	8003112 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2180      	movs	r1, #128	@ 0x80
 800310a:	0109      	lsls	r1, r1, #4
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	e007      	b.n	8003122 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4923      	ldr	r1, [pc, #140]	@ (80031ac <HAL_I2C_Init+0x144>)
 800311e:	400a      	ands	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4920      	ldr	r1, [pc, #128]	@ (80031b0 <HAL_I2C_Init+0x148>)
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	491a      	ldr	r1, [pc, #104]	@ (80031a8 <HAL_I2C_Init+0x140>)
 800313e:	400a      	ands	r2, r1
 8003140:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	431a      	orrs	r2, r3
 800314c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69d9      	ldr	r1, [r3, #28]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1a      	ldr	r2, [r3, #32]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2241      	movs	r2, #65	@ 0x41
 8003186:	2120      	movs	r1, #32
 8003188:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2242      	movs	r2, #66	@ 0x42
 8003194:	2100      	movs	r1, #0
 8003196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b002      	add	sp, #8
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	f0ffffff 	.word	0xf0ffffff
 80031a8:	ffff7fff 	.word	0xffff7fff
 80031ac:	fffff7ff 	.word	0xfffff7ff
 80031b0:	02008000 	.word	0x02008000

080031b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b089      	sub	sp, #36	@ 0x24
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	000c      	movs	r4, r1
 80031be:	0010      	movs	r0, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	230a      	movs	r3, #10
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	1c22      	adds	r2, r4, #0
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	2308      	movs	r3, #8
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	1c02      	adds	r2, r0, #0
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	1dbb      	adds	r3, r7, #6
 80031d4:	1c0a      	adds	r2, r1, #0
 80031d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2241      	movs	r2, #65	@ 0x41
 80031dc:	5c9b      	ldrb	r3, [r3, r2]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d000      	beq.n	80031e6 <HAL_I2C_Mem_Write+0x32>
 80031e4:	e10c      	b.n	8003400 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_I2C_Mem_Write+0x42>
 80031ec:	232c      	movs	r3, #44	@ 0x2c
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2280      	movs	r2, #128	@ 0x80
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e0ff      	b.n	8003402 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2240      	movs	r2, #64	@ 0x40
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_I2C_Mem_Write+0x5c>
 800320c:	2302      	movs	r3, #2
 800320e:	e0f8      	b.n	8003402 <HAL_I2C_Mem_Write+0x24e>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2240      	movs	r2, #64	@ 0x40
 8003214:	2101      	movs	r1, #1
 8003216:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003218:	f7ff fc8a 	bl	8002b30 <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	0219      	lsls	r1, r3, #8
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2319      	movs	r3, #25
 800322c:	2201      	movs	r2, #1
 800322e:	f000 fb0b 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 8003232:	1e03      	subs	r3, r0, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0e3      	b.n	8003402 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2241      	movs	r2, #65	@ 0x41
 800323e:	2121      	movs	r1, #33	@ 0x21
 8003240:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2242      	movs	r2, #66	@ 0x42
 8003246:	2140      	movs	r1, #64	@ 0x40
 8003248:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003254:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	222c      	movs	r2, #44	@ 0x2c
 800325a:	18ba      	adds	r2, r7, r2
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	881c      	ldrh	r4, [r3, #0]
 800326a:	2308      	movs	r3, #8
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	230a      	movs	r3, #10
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	8819      	ldrh	r1, [r3, #0]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	0023      	movs	r3, r4
 8003282:	f000 f9f9 	bl	8003678 <I2C_RequestMemoryWrite>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d005      	beq.n	8003296 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2240      	movs	r2, #64	@ 0x40
 800328e:	2100      	movs	r1, #0
 8003290:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0b5      	b.n	8003402 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2bff      	cmp	r3, #255	@ 0xff
 800329e:	d911      	bls.n	80032c4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	22ff      	movs	r2, #255	@ 0xff
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	045c      	lsls	r4, r3, #17
 80032b0:	230a      	movs	r3, #10
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	8819      	ldrh	r1, [r3, #0]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	2300      	movs	r3, #0
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	0023      	movs	r3, r4
 80032be:	f000 fc9d 	bl	8003bfc <I2C_TransferConfig>
 80032c2:	e012      	b.n	80032ea <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	049c      	lsls	r4, r3, #18
 80032d8:	230a      	movs	r3, #10
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	8819      	ldrh	r1, [r3, #0]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	2300      	movs	r3, #0
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	0023      	movs	r3, r4
 80032e6:	f000 fc89 	bl	8003bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 fb01 	bl	80038f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e081      	b.n	8003402 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d03a      	beq.n	80033ae <HAL_I2C_Mem_Write+0x1fa>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d136      	bne.n	80033ae <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	0013      	movs	r3, r2
 800334a:	2200      	movs	r2, #0
 800334c:	2180      	movs	r1, #128	@ 0x80
 800334e:	f000 fa7b 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e053      	b.n	8003402 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	2bff      	cmp	r3, #255	@ 0xff
 8003362:	d911      	bls.n	8003388 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	22ff      	movs	r2, #255	@ 0xff
 8003368:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336e:	b2da      	uxtb	r2, r3
 8003370:	2380      	movs	r3, #128	@ 0x80
 8003372:	045c      	lsls	r4, r3, #17
 8003374:	230a      	movs	r3, #10
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	8819      	ldrh	r1, [r3, #0]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	0023      	movs	r3, r4
 8003382:	f000 fc3b 	bl	8003bfc <I2C_TransferConfig>
 8003386:	e012      	b.n	80033ae <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003396:	b2da      	uxtb	r2, r3
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	049c      	lsls	r4, r3, #18
 800339c:	230a      	movs	r3, #10
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	8819      	ldrh	r1, [r3, #0]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	2300      	movs	r3, #0
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	0023      	movs	r3, r4
 80033aa:	f000 fc27 	bl	8003bfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d198      	bne.n	80032ea <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 fae0 	bl	8003984 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c4:	1e03      	subs	r3, r0, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e01a      	b.n	8003402 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2220      	movs	r2, #32
 80033d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	490b      	ldr	r1, [pc, #44]	@ (800340c <HAL_I2C_Mem_Write+0x258>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2241      	movs	r2, #65	@ 0x41
 80033e8:	2120      	movs	r1, #32
 80033ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2242      	movs	r2, #66	@ 0x42
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2240      	movs	r2, #64	@ 0x40
 80033f8:	2100      	movs	r1, #0
 80033fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b007      	add	sp, #28
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	fe00e800 	.word	0xfe00e800

08003410 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b089      	sub	sp, #36	@ 0x24
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	000c      	movs	r4, r1
 800341a:	0010      	movs	r0, r2
 800341c:	0019      	movs	r1, r3
 800341e:	230a      	movs	r3, #10
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	1c22      	adds	r2, r4, #0
 8003424:	801a      	strh	r2, [r3, #0]
 8003426:	2308      	movs	r3, #8
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	1c02      	adds	r2, r0, #0
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	1dbb      	adds	r3, r7, #6
 8003430:	1c0a      	adds	r2, r1, #0
 8003432:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2241      	movs	r2, #65	@ 0x41
 8003438:	5c9b      	ldrb	r3, [r3, r2]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	d000      	beq.n	8003442 <HAL_I2C_Mem_Read+0x32>
 8003440:	e110      	b.n	8003664 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <HAL_I2C_Mem_Read+0x42>
 8003448:	232c      	movs	r3, #44	@ 0x2c
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2280      	movs	r2, #128	@ 0x80
 8003456:	0092      	lsls	r2, r2, #2
 8003458:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e103      	b.n	8003666 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2240      	movs	r2, #64	@ 0x40
 8003462:	5c9b      	ldrb	r3, [r3, r2]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Mem_Read+0x5c>
 8003468:	2302      	movs	r3, #2
 800346a:	e0fc      	b.n	8003666 <HAL_I2C_Mem_Read+0x256>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	@ 0x40
 8003470:	2101      	movs	r1, #1
 8003472:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003474:	f7ff fb5c 	bl	8002b30 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	0219      	lsls	r1, r3, #8
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2319      	movs	r3, #25
 8003488:	2201      	movs	r2, #1
 800348a:	f000 f9dd 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0e7      	b.n	8003666 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2241      	movs	r2, #65	@ 0x41
 800349a:	2122      	movs	r1, #34	@ 0x22
 800349c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2242      	movs	r2, #66	@ 0x42
 80034a2:	2140      	movs	r1, #64	@ 0x40
 80034a4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	222c      	movs	r2, #44	@ 0x2c
 80034b6:	18ba      	adds	r2, r7, r2
 80034b8:	8812      	ldrh	r2, [r2, #0]
 80034ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034c2:	1dbb      	adds	r3, r7, #6
 80034c4:	881c      	ldrh	r4, [r3, #0]
 80034c6:	2308      	movs	r3, #8
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	230a      	movs	r3, #10
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	8819      	ldrh	r1, [r3, #0]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	0023      	movs	r3, r4
 80034de:	f000 f92f 	bl	8003740 <I2C_RequestMemoryRead>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2240      	movs	r2, #64	@ 0x40
 80034ea:	2100      	movs	r1, #0
 80034ec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0b9      	b.n	8003666 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2bff      	cmp	r3, #255	@ 0xff
 80034fa:	d911      	bls.n	8003520 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	22ff      	movs	r2, #255	@ 0xff
 8003500:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003506:	b2da      	uxtb	r2, r3
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	045c      	lsls	r4, r3, #17
 800350c:	230a      	movs	r3, #10
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	8819      	ldrh	r1, [r3, #0]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	4b56      	ldr	r3, [pc, #344]	@ (8003670 <HAL_I2C_Mem_Read+0x260>)
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	0023      	movs	r3, r4
 800351a:	f000 fb6f 	bl	8003bfc <I2C_TransferConfig>
 800351e:	e012      	b.n	8003546 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	b2da      	uxtb	r2, r3
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	049c      	lsls	r4, r3, #18
 8003534:	230a      	movs	r3, #10
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	8819      	ldrh	r1, [r3, #0]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	4b4c      	ldr	r3, [pc, #304]	@ (8003670 <HAL_I2C_Mem_Read+0x260>)
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	0023      	movs	r3, r4
 8003542:	f000 fb5b 	bl	8003bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	0013      	movs	r3, r2
 8003550:	2200      	movs	r2, #0
 8003552:	2104      	movs	r1, #4
 8003554:	f000 f978 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	d001      	beq.n	8003560 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e082      	b.n	8003666 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d03a      	beq.n	8003612 <HAL_I2C_Mem_Read+0x202>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d136      	bne.n	8003612 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	0013      	movs	r3, r2
 80035ae:	2200      	movs	r2, #0
 80035b0:	2180      	movs	r1, #128	@ 0x80
 80035b2:	f000 f949 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e053      	b.n	8003666 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2bff      	cmp	r3, #255	@ 0xff
 80035c6:	d911      	bls.n	80035ec <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	22ff      	movs	r2, #255	@ 0xff
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	045c      	lsls	r4, r3, #17
 80035d8:	230a      	movs	r3, #10
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	8819      	ldrh	r1, [r3, #0]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	0023      	movs	r3, r4
 80035e6:	f000 fb09 	bl	8003bfc <I2C_TransferConfig>
 80035ea:	e012      	b.n	8003612 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	2380      	movs	r3, #128	@ 0x80
 80035fe:	049c      	lsls	r4, r3, #18
 8003600:	230a      	movs	r3, #10
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	8819      	ldrh	r1, [r3, #0]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	2300      	movs	r3, #0
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	0023      	movs	r3, r4
 800360e:	f000 faf5 	bl	8003bfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d194      	bne.n	8003546 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	0018      	movs	r0, r3
 8003624:	f000 f9ae 	bl	8003984 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003628:	1e03      	subs	r3, r0, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e01a      	b.n	8003666 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2220      	movs	r2, #32
 8003636:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	490c      	ldr	r1, [pc, #48]	@ (8003674 <HAL_I2C_Mem_Read+0x264>)
 8003644:	400a      	ands	r2, r1
 8003646:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2241      	movs	r2, #65	@ 0x41
 800364c:	2120      	movs	r1, #32
 800364e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2242      	movs	r2, #66	@ 0x42
 8003654:	2100      	movs	r1, #0
 8003656:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2240      	movs	r2, #64	@ 0x40
 800365c:	2100      	movs	r1, #0
 800365e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e000      	b.n	8003666 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b007      	add	sp, #28
 800366c:	bd90      	pop	{r4, r7, pc}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	80002400 	.word	0x80002400
 8003674:	fe00e800 	.word	0xfe00e800

08003678 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003678:	b5b0      	push	{r4, r5, r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	000c      	movs	r4, r1
 8003682:	0010      	movs	r0, r2
 8003684:	0019      	movs	r1, r3
 8003686:	250a      	movs	r5, #10
 8003688:	197b      	adds	r3, r7, r5
 800368a:	1c22      	adds	r2, r4, #0
 800368c:	801a      	strh	r2, [r3, #0]
 800368e:	2308      	movs	r3, #8
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	1c02      	adds	r2, r0, #0
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	1dbb      	adds	r3, r7, #6
 8003698:	1c0a      	adds	r2, r1, #0
 800369a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800369c:	1dbb      	adds	r3, r7, #6
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	045c      	lsls	r4, r3, #17
 80036a6:	197b      	adds	r3, r7, r5
 80036a8:	8819      	ldrh	r1, [r3, #0]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	4b23      	ldr	r3, [pc, #140]	@ (800373c <I2C_RequestMemoryWrite+0xc4>)
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	0023      	movs	r3, r4
 80036b2:	f000 faa3 	bl	8003bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 f91b 	bl	80038f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80036c2:	1e03      	subs	r3, r0, #0
 80036c4:	d001      	beq.n	80036ca <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e033      	b.n	8003732 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036d2:	2308      	movs	r3, #8
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e0:	e019      	b.n	8003716 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036e2:	2308      	movs	r3, #8
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f6:	6a39      	ldr	r1, [r7, #32]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 f8fc 	bl	80038f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d001      	beq.n	8003708 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e014      	b.n	8003732 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003708:	2308      	movs	r3, #8
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003716:	6a3a      	ldr	r2, [r7, #32]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	0013      	movs	r3, r2
 8003720:	2200      	movs	r2, #0
 8003722:	2180      	movs	r1, #128	@ 0x80
 8003724:	f000 f890 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d001      	beq.n	8003730 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bdb0      	pop	{r4, r5, r7, pc}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	80002000 	.word	0x80002000

08003740 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	000c      	movs	r4, r1
 800374a:	0010      	movs	r0, r2
 800374c:	0019      	movs	r1, r3
 800374e:	250a      	movs	r5, #10
 8003750:	197b      	adds	r3, r7, r5
 8003752:	1c22      	adds	r2, r4, #0
 8003754:	801a      	strh	r2, [r3, #0]
 8003756:	2308      	movs	r3, #8
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	1c02      	adds	r2, r0, #0
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	1dbb      	adds	r3, r7, #6
 8003760:	1c0a      	adds	r2, r1, #0
 8003762:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003764:	1dbb      	adds	r3, r7, #6
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	197b      	adds	r3, r7, r5
 800376c:	8819      	ldrh	r1, [r3, #0]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <I2C_RequestMemoryRead+0xc0>)
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	f000 fa41 	bl	8003bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377c:	6a39      	ldr	r1, [r7, #32]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 f8b9 	bl	80038f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d001      	beq.n	800378e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e033      	b.n	80037f6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800378e:	1dbb      	adds	r3, r7, #6
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d107      	bne.n	80037a6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003796:	2308      	movs	r3, #8
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80037a4:	e019      	b.n	80037da <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037a6:	2308      	movs	r3, #8
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ba:	6a39      	ldr	r1, [r7, #32]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 f89a 	bl	80038f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d001      	beq.n	80037cc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e014      	b.n	80037f6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037cc:	2308      	movs	r3, #8
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037da:	6a3a      	ldr	r2, [r7, #32]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	0013      	movs	r3, r2
 80037e4:	2200      	movs	r2, #0
 80037e6:	2140      	movs	r1, #64	@ 0x40
 80037e8:	f000 f82e 	bl	8003848 <I2C_WaitOnFlagUntilTimeout>
 80037ec:	1e03      	subs	r3, r0, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b004      	add	sp, #16
 80037fc:	bdb0      	pop	{r4, r5, r7, pc}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	80002000 	.word	0x80002000

08003804 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2202      	movs	r2, #2
 8003814:	4013      	ands	r3, r2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d103      	bne.n	8003822 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2200      	movs	r2, #0
 8003820:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2201      	movs	r2, #1
 800382a:	4013      	ands	r3, r2
 800382c:	2b01      	cmp	r3, #1
 800382e:	d007      	beq.n	8003840 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	430a      	orrs	r2, r1
 800383e:	619a      	str	r2, [r3, #24]
  }
}
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003858:	e03a      	b.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	6839      	ldr	r1, [r7, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 f8d3 	bl	8003a0c <I2C_IsErrorOccurred>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d001      	beq.n	800386e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e040      	b.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	d02d      	beq.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003874:	f7ff f95c 	bl	8002b30 <HAL_GetTick>
 8003878:	0002      	movs	r2, r0
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d302      	bcc.n	800388a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d122      	bne.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4013      	ands	r3, r2
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	425a      	negs	r2, r3
 800389a:	4153      	adcs	r3, r2
 800389c:	b2db      	uxtb	r3, r3
 800389e:	001a      	movs	r2, r3
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d113      	bne.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ac:	2220      	movs	r2, #32
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2241      	movs	r2, #65	@ 0x41
 80038b8:	2120      	movs	r1, #32
 80038ba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2242      	movs	r2, #66	@ 0x42
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2240      	movs	r2, #64	@ 0x40
 80038c8:	2100      	movs	r1, #0
 80038ca:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e00f      	b.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	425a      	negs	r2, r3
 80038e0:	4153      	adcs	r3, r2
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	001a      	movs	r2, r3
 80038e6:	1dfb      	adds	r3, r7, #7
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d0b5      	beq.n	800385a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b004      	add	sp, #16
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003904:	e032      	b.n	800396c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	0018      	movs	r0, r3
 800390e:	f000 f87d 	bl	8003a0c <I2C_IsErrorOccurred>
 8003912:	1e03      	subs	r3, r0, #0
 8003914:	d001      	beq.n	800391a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e030      	b.n	800397c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3301      	adds	r3, #1
 800391e:	d025      	beq.n	800396c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003920:	f7ff f906 	bl	8002b30 <HAL_GetTick>
 8003924:	0002      	movs	r2, r0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	d302      	bcc.n	8003936 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11a      	bne.n	800396c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2202      	movs	r2, #2
 800393e:	4013      	ands	r3, r2
 8003940:	2b02      	cmp	r3, #2
 8003942:	d013      	beq.n	800396c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003948:	2220      	movs	r2, #32
 800394a:	431a      	orrs	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2241      	movs	r2, #65	@ 0x41
 8003954:	2120      	movs	r1, #32
 8003956:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2242      	movs	r2, #66	@ 0x42
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	@ 0x40
 8003964:	2100      	movs	r1, #0
 8003966:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e007      	b.n	800397c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2202      	movs	r2, #2
 8003974:	4013      	ands	r3, r2
 8003976:	2b02      	cmp	r3, #2
 8003978:	d1c5      	bne.n	8003906 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b004      	add	sp, #16
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003990:	e02f      	b.n	80039f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 f837 	bl	8003a0c <I2C_IsErrorOccurred>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d001      	beq.n	80039a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e02d      	b.n	8003a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7ff f8c3 	bl	8002b30 <HAL_GetTick>
 80039aa:	0002      	movs	r2, r0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11a      	bne.n	80039f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2220      	movs	r2, #32
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d013      	beq.n	80039f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	2220      	movs	r2, #32
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2241      	movs	r2, #65	@ 0x41
 80039da:	2120      	movs	r1, #32
 80039dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2242      	movs	r2, #66	@ 0x42
 80039e2:	2100      	movs	r1, #0
 80039e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2240      	movs	r2, #64	@ 0x40
 80039ea:	2100      	movs	r1, #0
 80039ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e007      	b.n	8003a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2220      	movs	r2, #32
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d1c8      	bne.n	8003992 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	@ 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2327      	movs	r3, #39	@ 0x27
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2210      	movs	r2, #16
 8003a34:	4013      	ands	r3, r2
 8003a36:	d100      	bne.n	8003a3a <I2C_IsErrorOccurred+0x2e>
 8003a38:	e079      	b.n	8003b2e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a42:	e057      	b.n	8003af4 <I2C_IsErrorOccurred+0xe8>
 8003a44:	2227      	movs	r2, #39	@ 0x27
 8003a46:	18bb      	adds	r3, r7, r2
 8003a48:	18ba      	adds	r2, r7, r2
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3301      	adds	r3, #1
 8003a52:	d04f      	beq.n	8003af4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a54:	f7ff f86c 	bl	8002b30 <HAL_GetTick>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <I2C_IsErrorOccurred+0x5e>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d144      	bne.n	8003af4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	01db      	lsls	r3, r3, #7
 8003a74:	4013      	ands	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a78:	2013      	movs	r0, #19
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	2142      	movs	r1, #66	@ 0x42
 8003a80:	5c52      	ldrb	r2, [r2, r1]
 8003a82:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	401a      	ands	r2, r3
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d126      	bne.n	8003ae6 <I2C_IsErrorOccurred+0xda>
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	01db      	lsls	r3, r3, #7
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d021      	beq.n	8003ae6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d01d      	beq.n	8003ae6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2180      	movs	r1, #128	@ 0x80
 8003ab6:	01c9      	lsls	r1, r1, #7
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003abc:	f7ff f838 	bl	8002b30 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac4:	e00f      	b.n	8003ae6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ac6:	f7ff f833 	bl	8002b30 <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b19      	cmp	r3, #25
 8003ad2:	d908      	bls.n	8003ae6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003adc:	2327      	movs	r3, #39	@ 0x27
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]

              break;
 8003ae4:	e006      	b.n	8003af4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2220      	movs	r2, #32
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d1e8      	bne.n	8003ac6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2220      	movs	r2, #32
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d004      	beq.n	8003b0c <I2C_IsErrorOccurred+0x100>
 8003b02:	2327      	movs	r3, #39	@ 0x27
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d09b      	beq.n	8003a44 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b0c:	2327      	movs	r3, #39	@ 0x27
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2204      	movs	r2, #4
 8003b22:	4313      	orrs	r3, r2
 8003b24:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b26:	2327      	movs	r3, #39	@ 0x27
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	2380      	movs	r3, #128	@ 0x80
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d00c      	beq.n	8003b5a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2201      	movs	r2, #1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2280      	movs	r2, #128	@ 0x80
 8003b4e:	0052      	lsls	r2, r2, #1
 8003b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b52:	2327      	movs	r3, #39	@ 0x27
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00c      	beq.n	8003b7e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2208      	movs	r2, #8
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	00d2      	lsls	r2, r2, #3
 8003b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b76:	2327      	movs	r3, #39	@ 0x27
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4013      	ands	r3, r2
 8003b86:	d00c      	beq.n	8003ba2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2280      	movs	r2, #128	@ 0x80
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b9a:	2327      	movs	r3, #39	@ 0x27
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003ba2:	2327      	movs	r3, #39	@ 0x27
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01d      	beq.n	8003be8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7ff fe28 	bl	8003804 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	490e      	ldr	r1, [pc, #56]	@ (8003bf8 <I2C_IsErrorOccurred+0x1ec>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2241      	movs	r2, #65	@ 0x41
 8003bd4:	2120      	movs	r1, #32
 8003bd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2242      	movs	r2, #66	@ 0x42
 8003bdc:	2100      	movs	r1, #0
 8003bde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2240      	movs	r2, #64	@ 0x40
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003be8:	2327      	movs	r3, #39	@ 0x27
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b00a      	add	sp, #40	@ 0x28
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	fe00e800 	.word	0xfe00e800

08003bfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	0008      	movs	r0, r1
 8003c06:	0011      	movs	r1, r2
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	240a      	movs	r4, #10
 8003c0c:	193b      	adds	r3, r7, r4
 8003c0e:	1c02      	adds	r2, r0, #0
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	2009      	movs	r0, #9
 8003c14:	183b      	adds	r3, r7, r0
 8003c16:	1c0a      	adds	r2, r1, #0
 8003c18:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c1a:	193b      	adds	r3, r7, r4
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	059b      	lsls	r3, r3, #22
 8003c20:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c22:	183b      	adds	r3, r7, r0
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	0419      	lsls	r1, r3, #16
 8003c28:	23ff      	movs	r3, #255	@ 0xff
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c2e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c36:	4313      	orrs	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c46:	0d51      	lsrs	r1, r2, #21
 8003c48:	2280      	movs	r2, #128	@ 0x80
 8003c4a:	00d2      	lsls	r2, r2, #3
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	4907      	ldr	r1, [pc, #28]	@ (8003c6c <I2C_TransferConfig+0x70>)
 8003c50:	430a      	orrs	r2, r1
 8003c52:	43d2      	mvns	r2, r2
 8003c54:	401a      	ands	r2, r3
 8003c56:	0011      	movs	r1, r2
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b007      	add	sp, #28
 8003c68:	bd90      	pop	{r4, r7, pc}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	03ff63ff 	.word	0x03ff63ff

08003c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2241      	movs	r2, #65	@ 0x41
 8003c7e:	5c9b      	ldrb	r3, [r3, r2]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d138      	bne.n	8003cf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2240      	movs	r2, #64	@ 0x40
 8003c8a:	5c9b      	ldrb	r3, [r3, r2]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e032      	b.n	8003cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2240      	movs	r2, #64	@ 0x40
 8003c98:	2101      	movs	r1, #1
 8003c9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2241      	movs	r2, #65	@ 0x41
 8003ca0:	2124      	movs	r1, #36	@ 0x24
 8003ca2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	438a      	bics	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4911      	ldr	r1, [pc, #68]	@ (8003d04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2101      	movs	r1, #1
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2241      	movs	r2, #65	@ 0x41
 8003ce8:	2120      	movs	r1, #32
 8003cea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2240      	movs	r2, #64	@ 0x40
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e000      	b.n	8003cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cf8:	2302      	movs	r3, #2
  }
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	ffffefff 	.word	0xffffefff

08003d08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2241      	movs	r2, #65	@ 0x41
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d139      	bne.n	8003d92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2240      	movs	r2, #64	@ 0x40
 8003d22:	5c9b      	ldrb	r3, [r3, r2]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e033      	b.n	8003d94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2240      	movs	r2, #64	@ 0x40
 8003d30:	2101      	movs	r1, #1
 8003d32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2241      	movs	r2, #65	@ 0x41
 8003d38:	2124      	movs	r1, #36	@ 0x24
 8003d3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	438a      	bics	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a11      	ldr	r2, [pc, #68]	@ (8003d9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2241      	movs	r2, #65	@ 0x41
 8003d82:	2120      	movs	r1, #32
 8003d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2240      	movs	r2, #64	@ 0x40
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e000      	b.n	8003d94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d92:	2302      	movs	r3, #2
  }
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b004      	add	sp, #16
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	fffff0ff 	.word	0xfffff0ff

08003da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003da8:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	2380      	movs	r3, #128	@ 0x80
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d11f      	bne.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003dc4:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	0013      	movs	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4912      	ldr	r1, [pc, #72]	@ (8003e1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fc f9a0 	bl	8000118 <__udivsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dde:	e008      	b.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e001      	b.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e009      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003df2:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d0ed      	beq.n	8003de0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b004      	add	sp, #16
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	40007000 	.word	0x40007000
 8003e14:	fffff9ff 	.word	0xfffff9ff
 8003e18:	20000004 	.word	0x20000004
 8003e1c:	000f4240 	.word	0x000f4240

08003e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f000 fb50 	bl	80044d4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d100      	bne.n	8003e40 <HAL_RCC_OscConfig+0x20>
 8003e3e:	e07c      	b.n	8003f3a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e40:	4bc3      	ldr	r3, [pc, #780]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2238      	movs	r2, #56	@ 0x38
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4a:	4bc1      	ldr	r3, [pc, #772]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2203      	movs	r2, #3
 8003e50:	4013      	ands	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0x40>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d002      	beq.n	8003e66 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d10b      	bne.n	8003e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e66:	4bba      	ldr	r3, [pc, #744]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	2380      	movs	r3, #128	@ 0x80
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d062      	beq.n	8003f38 <HAL_RCC_OscConfig+0x118>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d15e      	bne.n	8003f38 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e32a      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	025b      	lsls	r3, r3, #9
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_OscConfig+0x7a>
 8003e8a:	4bb1      	ldr	r3, [pc, #708]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4bb0      	ldr	r3, [pc, #704]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003e90:	2180      	movs	r1, #128	@ 0x80
 8003e92:	0249      	lsls	r1, r1, #9
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	e020      	b.n	8003edc <HAL_RCC_OscConfig+0xbc>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	23a0      	movs	r3, #160	@ 0xa0
 8003ea0:	02db      	lsls	r3, r3, #11
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xa4>
 8003ea6:	4baa      	ldr	r3, [pc, #680]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4ba9      	ldr	r3, [pc, #676]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003eac:	2180      	movs	r1, #128	@ 0x80
 8003eae:	02c9      	lsls	r1, r1, #11
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	4ba6      	ldr	r3, [pc, #664]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4ba5      	ldr	r3, [pc, #660]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	0249      	lsls	r1, r1, #9
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0xbc>
 8003ec4:	4ba2      	ldr	r3, [pc, #648]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4ba1      	ldr	r3, [pc, #644]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003eca:	49a2      	ldr	r1, [pc, #648]	@ (8004154 <HAL_RCC_OscConfig+0x334>)
 8003ecc:	400a      	ands	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	4b9f      	ldr	r3, [pc, #636]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b9e      	ldr	r3, [pc, #632]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003ed6:	49a0      	ldr	r1, [pc, #640]	@ (8004158 <HAL_RCC_OscConfig+0x338>)
 8003ed8:	400a      	ands	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d014      	beq.n	8003f0e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fe24 	bl	8002b30 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eee:	f7fe fe1f 	bl	8002b30 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b64      	cmp	r3, #100	@ 0x64
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e2e9      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f00:	4b93      	ldr	r3, [pc, #588]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	029b      	lsls	r3, r3, #10
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0xce>
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fe fe0f 	bl	8002b30 <HAL_GetTick>
 8003f12:	0003      	movs	r3, r0
 8003f14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fe fe0a 	bl	8002b30 <HAL_GetTick>
 8003f1c:	0002      	movs	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	@ 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e2d4      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f2a:	4b89      	ldr	r3, [pc, #548]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	2380      	movs	r3, #128	@ 0x80
 8003f30:	029b      	lsls	r3, r3, #10
 8003f32:	4013      	ands	r3, r2
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0xf8>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	d100      	bne.n	8003f46 <HAL_RCC_OscConfig+0x126>
 8003f44:	e099      	b.n	800407a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f46:	4b82      	ldr	r3, [pc, #520]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2238      	movs	r2, #56	@ 0x38
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f50:	4b7f      	ldr	r3, [pc, #508]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2203      	movs	r2, #3
 8003f56:	4013      	ands	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d102      	bne.n	8003f66 <HAL_RCC_OscConfig+0x146>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d002      	beq.n	8003f6c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d135      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f6c:	4b78      	ldr	r3, [pc, #480]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4013      	ands	r3, r2
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_OscConfig+0x164>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e2a7      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b72      	ldr	r3, [pc, #456]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a74      	ldr	r2, [pc, #464]	@ (800415c <HAL_RCC_OscConfig+0x33c>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	021a      	lsls	r2, r3, #8
 8003f94:	4b6e      	ldr	r3, [pc, #440]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d112      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fa0:	4b6b      	ldr	r3, [pc, #428]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8004160 <HAL_RCC_OscConfig+0x340>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	4b68      	ldr	r3, [pc, #416]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003fb4:	4b66      	ldr	r3, [pc, #408]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0adb      	lsrs	r3, r3, #11
 8003fba:	2207      	movs	r2, #7
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	4a69      	ldr	r2, [pc, #420]	@ (8004164 <HAL_RCC_OscConfig+0x344>)
 8003fc0:	40da      	lsrs	r2, r3
 8003fc2:	4b69      	ldr	r3, [pc, #420]	@ (8004168 <HAL_RCC_OscConfig+0x348>)
 8003fc4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fc6:	4b69      	ldr	r3, [pc, #420]	@ (800416c <HAL_RCC_OscConfig+0x34c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7fe fd54 	bl	8002a78 <HAL_InitTick>
 8003fd0:	1e03      	subs	r3, r0, #0
 8003fd2:	d051      	beq.n	8004078 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e27d      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d030      	beq.n	8004042 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5e      	ldr	r2, [pc, #376]	@ (8004160 <HAL_RCC_OscConfig+0x340>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	0019      	movs	r1, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	4b58      	ldr	r3, [pc, #352]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b56      	ldr	r3, [pc, #344]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b55      	ldr	r3, [pc, #340]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8003ffa:	2180      	movs	r1, #128	@ 0x80
 8003ffc:	0049      	lsls	r1, r1, #1
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fe fd95 	bl	8002b30 <HAL_GetTick>
 8004006:	0003      	movs	r3, r0
 8004008:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400c:	f7fe fd90 	bl	8002b30 <HAL_GetTick>
 8004010:	0002      	movs	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e25a      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401e:	4b4c      	ldr	r3, [pc, #304]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	@ 0x80
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4013      	ands	r3, r2
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4b49      	ldr	r3, [pc, #292]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4a4b      	ldr	r2, [pc, #300]	@ (800415c <HAL_RCC_OscConfig+0x33c>)
 8004030:	4013      	ands	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	021a      	lsls	r2, r3, #8
 800403a:	4b45      	ldr	r3, [pc, #276]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	e01b      	b.n	800407a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004042:	4b43      	ldr	r3, [pc, #268]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4b42      	ldr	r3, [pc, #264]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8004048:	4949      	ldr	r1, [pc, #292]	@ (8004170 <HAL_RCC_OscConfig+0x350>)
 800404a:	400a      	ands	r2, r1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fe fd6f 	bl	8002b30 <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004058:	f7fe fd6a 	bl	8002b30 <HAL_GetTick>
 800405c:	0002      	movs	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e234      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800406a:	4b39      	ldr	r3, [pc, #228]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	2380      	movs	r3, #128	@ 0x80
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4013      	ands	r3, r2
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x238>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004078:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2208      	movs	r2, #8
 8004080:	4013      	ands	r3, r2
 8004082:	d047      	beq.n	8004114 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004084:	4b32      	ldr	r3, [pc, #200]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2238      	movs	r2, #56	@ 0x38
 800408a:	4013      	ands	r3, r2
 800408c:	2b18      	cmp	r3, #24
 800408e:	d10a      	bne.n	80040a6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004090:	4b2f      	ldr	r3, [pc, #188]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8004092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004094:	2202      	movs	r2, #2
 8004096:	4013      	ands	r3, r2
 8004098:	d03c      	beq.n	8004114 <HAL_RCC_OscConfig+0x2f4>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d138      	bne.n	8004114 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e216      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d019      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040ae:	4b28      	ldr	r3, [pc, #160]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 80040b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040b2:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 80040b4:	2101      	movs	r1, #1
 80040b6:	430a      	orrs	r2, r1
 80040b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fe fd39 	bl	8002b30 <HAL_GetTick>
 80040be:	0003      	movs	r3, r0
 80040c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fe fd34 	bl	8002b30 <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1fe      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 80040d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040da:	2202      	movs	r2, #2
 80040dc:	4013      	ands	r3, r2
 80040de:	d0f1      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2a4>
 80040e0:	e018      	b.n	8004114 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80040e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 80040e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 80040e8:	2101      	movs	r1, #1
 80040ea:	438a      	bics	r2, r1
 80040ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fe fd1f 	bl	8002b30 <HAL_GetTick>
 80040f2:	0003      	movs	r3, r0
 80040f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f8:	f7fe fd1a 	bl	8002b30 <HAL_GetTick>
 80040fc:	0002      	movs	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e1e4      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800410a:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	2202      	movs	r2, #2
 8004110:	4013      	ands	r3, r2
 8004112:	d1f1      	bne.n	80040f8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2204      	movs	r2, #4
 800411a:	4013      	ands	r3, r2
 800411c:	d100      	bne.n	8004120 <HAL_RCC_OscConfig+0x300>
 800411e:	e0c7      	b.n	80042b0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004120:	231f      	movs	r3, #31
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2238      	movs	r2, #56	@ 0x38
 800412e:	4013      	ands	r3, r2
 8004130:	2b20      	cmp	r3, #32
 8004132:	d11f      	bne.n	8004174 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_RCC_OscConfig+0x330>)
 8004136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004138:	2202      	movs	r2, #2
 800413a:	4013      	ands	r3, r2
 800413c:	d100      	bne.n	8004140 <HAL_RCC_OscConfig+0x320>
 800413e:	e0b7      	b.n	80042b0 <HAL_RCC_OscConfig+0x490>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d000      	beq.n	800414a <HAL_RCC_OscConfig+0x32a>
 8004148:	e0b2      	b.n	80042b0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e1c2      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	40021000 	.word	0x40021000
 8004154:	fffeffff 	.word	0xfffeffff
 8004158:	fffbffff 	.word	0xfffbffff
 800415c:	ffff80ff 	.word	0xffff80ff
 8004160:	ffffc7ff 	.word	0xffffc7ff
 8004164:	00f42400 	.word	0x00f42400
 8004168:	20000004 	.word	0x20000004
 800416c:	20000008 	.word	0x20000008
 8004170:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004174:	4bb5      	ldr	r3, [pc, #724]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004176:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	055b      	lsls	r3, r3, #21
 800417c:	4013      	ands	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_RCC_OscConfig+0x364>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x366>
 8004184:	2300      	movs	r3, #0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d011      	beq.n	80041ae <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4bb0      	ldr	r3, [pc, #704]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 800418c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800418e:	4baf      	ldr	r3, [pc, #700]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004190:	2180      	movs	r1, #128	@ 0x80
 8004192:	0549      	lsls	r1, r1, #21
 8004194:	430a      	orrs	r2, r1
 8004196:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004198:	4bac      	ldr	r3, [pc, #688]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 800419a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	055b      	lsls	r3, r3, #21
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80041a6:	231f      	movs	r3, #31
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ae:	4ba8      	ldr	r3, [pc, #672]	@ (8004450 <HAL_RCC_OscConfig+0x630>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d11a      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ba:	4ba5      	ldr	r3, [pc, #660]	@ (8004450 <HAL_RCC_OscConfig+0x630>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4ba4      	ldr	r3, [pc, #656]	@ (8004450 <HAL_RCC_OscConfig+0x630>)
 80041c0:	2180      	movs	r1, #128	@ 0x80
 80041c2:	0049      	lsls	r1, r1, #1
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80041c8:	f7fe fcb2 	bl	8002b30 <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d2:	f7fe fcad 	bl	8002b30 <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e177      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e4:	4b9a      	ldr	r3, [pc, #616]	@ (8004450 <HAL_RCC_OscConfig+0x630>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x3e6>
 80041f8:	4b94      	ldr	r3, [pc, #592]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80041fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041fc:	4b93      	ldr	r3, [pc, #588]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80041fe:	2101      	movs	r1, #1
 8004200:	430a      	orrs	r2, r1
 8004202:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004204:	e01c      	b.n	8004240 <HAL_RCC_OscConfig+0x420>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b05      	cmp	r3, #5
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x408>
 800420e:	4b8f      	ldr	r3, [pc, #572]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004210:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004212:	4b8e      	ldr	r3, [pc, #568]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004214:	2104      	movs	r1, #4
 8004216:	430a      	orrs	r2, r1
 8004218:	65da      	str	r2, [r3, #92]	@ 0x5c
 800421a:	4b8c      	ldr	r3, [pc, #560]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 800421c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800421e:	4b8b      	ldr	r3, [pc, #556]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004220:	2101      	movs	r1, #1
 8004222:	430a      	orrs	r2, r1
 8004224:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0x420>
 8004228:	4b88      	ldr	r3, [pc, #544]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 800422a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800422c:	4b87      	ldr	r3, [pc, #540]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 800422e:	2101      	movs	r1, #1
 8004230:	438a      	bics	r2, r1
 8004232:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004234:	4b85      	ldr	r3, [pc, #532]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004238:	4b84      	ldr	r3, [pc, #528]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 800423a:	2104      	movs	r1, #4
 800423c:	438a      	bics	r2, r1
 800423e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d014      	beq.n	8004272 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fe fc72 	bl	8002b30 <HAL_GetTick>
 800424c:	0003      	movs	r3, r0
 800424e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004250:	e009      	b.n	8004266 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe fc6d 	bl	8002b30 <HAL_GetTick>
 8004256:	0002      	movs	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	4a7d      	ldr	r2, [pc, #500]	@ (8004454 <HAL_RCC_OscConfig+0x634>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e136      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004266:	4b79      	ldr	r3, [pc, #484]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426a:	2202      	movs	r2, #2
 800426c:	4013      	ands	r3, r2
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x432>
 8004270:	e013      	b.n	800429a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fe fc5d 	bl	8002b30 <HAL_GetTick>
 8004276:	0003      	movs	r3, r0
 8004278:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800427a:	e009      	b.n	8004290 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fe fc58 	bl	8002b30 <HAL_GetTick>
 8004280:	0002      	movs	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	4a73      	ldr	r2, [pc, #460]	@ (8004454 <HAL_RCC_OscConfig+0x634>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e121      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004290:	4b6e      	ldr	r3, [pc, #440]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	2202      	movs	r2, #2
 8004296:	4013      	ands	r3, r2
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800429a:	231f      	movs	r3, #31
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042a4:	4b69      	ldr	r3, [pc, #420]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80042a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a8:	4b68      	ldr	r3, [pc, #416]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80042aa:	496b      	ldr	r1, [pc, #428]	@ (8004458 <HAL_RCC_OscConfig+0x638>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2220      	movs	r2, #32
 80042b6:	4013      	ands	r3, r2
 80042b8:	d039      	beq.n	800432e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01b      	beq.n	80042fa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042c2:	4b62      	ldr	r3, [pc, #392]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b61      	ldr	r3, [pc, #388]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80042c8:	2180      	movs	r1, #128	@ 0x80
 80042ca:	03c9      	lsls	r1, r1, #15
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fe fc2e 	bl	8002b30 <HAL_GetTick>
 80042d4:	0003      	movs	r3, r0
 80042d6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042da:	f7fe fc29 	bl	8002b30 <HAL_GetTick>
 80042de:	0002      	movs	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e0f3      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80042ec:	4b57      	ldr	r3, [pc, #348]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	@ 0x80
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	4013      	ands	r3, r2
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x4ba>
 80042f8:	e019      	b.n	800432e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042fa:	4b54      	ldr	r3, [pc, #336]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b53      	ldr	r3, [pc, #332]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004300:	4956      	ldr	r1, [pc, #344]	@ (800445c <HAL_RCC_OscConfig+0x63c>)
 8004302:	400a      	ands	r2, r1
 8004304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fe fc13 	bl	8002b30 <HAL_GetTick>
 800430a:	0003      	movs	r3, r0
 800430c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004310:	f7fe fc0e 	bl	8002b30 <HAL_GetTick>
 8004314:	0002      	movs	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0d8      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004322:	4b4a      	ldr	r3, [pc, #296]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	2380      	movs	r3, #128	@ 0x80
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	4013      	ands	r3, r2
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d100      	bne.n	8004338 <HAL_RCC_OscConfig+0x518>
 8004336:	e0cc      	b.n	80044d2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004338:	4b44      	ldr	r3, [pc, #272]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2238      	movs	r2, #56	@ 0x38
 800433e:	4013      	ands	r3, r2
 8004340:	2b10      	cmp	r3, #16
 8004342:	d100      	bne.n	8004346 <HAL_RCC_OscConfig+0x526>
 8004344:	e07b      	b.n	800443e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d156      	bne.n	80043fc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434e:	4b3f      	ldr	r3, [pc, #252]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b3e      	ldr	r3, [pc, #248]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004354:	4942      	ldr	r1, [pc, #264]	@ (8004460 <HAL_RCC_OscConfig+0x640>)
 8004356:	400a      	ands	r2, r1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fe fbe9 	bl	8002b30 <HAL_GetTick>
 800435e:	0003      	movs	r3, r0
 8004360:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fe fbe4 	bl	8002b30 <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0ae      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004376:	4b35      	ldr	r3, [pc, #212]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	049b      	lsls	r3, r3, #18
 800437e:	4013      	ands	r3, r2
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004382:	4b32      	ldr	r3, [pc, #200]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a37      	ldr	r2, [pc, #220]	@ (8004464 <HAL_RCC_OscConfig+0x644>)
 8004388:	4013      	ands	r3, r2
 800438a:	0019      	movs	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	431a      	orrs	r2, r3
 80043b0:	4b26      	ldr	r3, [pc, #152]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b6:	4b25      	ldr	r3, [pc, #148]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80043bc:	2180      	movs	r1, #128	@ 0x80
 80043be:	0449      	lsls	r1, r1, #17
 80043c0:	430a      	orrs	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043c4:	4b21      	ldr	r3, [pc, #132]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	0549      	lsls	r1, r1, #21
 80043ce:	430a      	orrs	r2, r1
 80043d0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fe fbad 	bl	8002b30 <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fe fba8 	bl	8002b30 <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e072      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	4b17      	ldr	r3, [pc, #92]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	2380      	movs	r3, #128	@ 0x80
 80043f4:	049b      	lsls	r3, r3, #18
 80043f6:	4013      	ands	r3, r2
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x5bc>
 80043fa:	e06a      	b.n	80044d2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fc:	4b13      	ldr	r3, [pc, #76]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b12      	ldr	r3, [pc, #72]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004402:	4917      	ldr	r1, [pc, #92]	@ (8004460 <HAL_RCC_OscConfig+0x640>)
 8004404:	400a      	ands	r2, r1
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe fb92 	bl	8002b30 <HAL_GetTick>
 800440c:	0003      	movs	r3, r0
 800440e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004412:	f7fe fb8d 	bl	8002b30 <HAL_GetTick>
 8004416:	0002      	movs	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e057      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004424:	4b09      	ldr	r3, [pc, #36]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2380      	movs	r3, #128	@ 0x80
 800442a:	049b      	lsls	r3, r3, #18
 800442c:	4013      	ands	r3, r2
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	4b05      	ldr	r3, [pc, #20]	@ (800444c <HAL_RCC_OscConfig+0x62c>)
 8004436:	490c      	ldr	r1, [pc, #48]	@ (8004468 <HAL_RCC_OscConfig+0x648>)
 8004438:	400a      	ands	r2, r1
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	e049      	b.n	80044d2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d112      	bne.n	800446c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e044      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	40021000 	.word	0x40021000
 8004450:	40007000 	.word	0x40007000
 8004454:	00001388 	.word	0x00001388
 8004458:	efffffff 	.word	0xefffffff
 800445c:	ffbfffff 	.word	0xffbfffff
 8004460:	feffffff 	.word	0xfeffffff
 8004464:	11c1808c 	.word	0x11c1808c
 8004468:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800446c:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <HAL_RCC_OscConfig+0x6bc>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2203      	movs	r2, #3
 8004476:	401a      	ands	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	429a      	cmp	r2, r3
 800447e:	d126      	bne.n	80044ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2270      	movs	r2, #112	@ 0x70
 8004484:	401a      	ands	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d11f      	bne.n	80044ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	23fe      	movs	r3, #254	@ 0xfe
 8004492:	01db      	lsls	r3, r3, #7
 8004494:	401a      	ands	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d116      	bne.n	80044ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	23f8      	movs	r3, #248	@ 0xf8
 80044a4:	039b      	lsls	r3, r3, #14
 80044a6:	401a      	ands	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10e      	bne.n	80044ce <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	23e0      	movs	r3, #224	@ 0xe0
 80044b4:	051b      	lsls	r3, r3, #20
 80044b6:	401a      	ands	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	0f5b      	lsrs	r3, r3, #29
 80044c4:	075a      	lsls	r2, r3, #29
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d001      	beq.n	80044d2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b008      	add	sp, #32
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000

080044e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0e9      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f4:	4b76      	ldr	r3, [pc, #472]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2207      	movs	r2, #7
 80044fa:	4013      	ands	r3, r2
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d91e      	bls.n	8004540 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004502:	4b73      	ldr	r3, [pc, #460]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2207      	movs	r2, #7
 8004508:	4393      	bics	r3, r2
 800450a:	0019      	movs	r1, r3
 800450c:	4b70      	ldr	r3, [pc, #448]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f0>)
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004514:	f7fe fb0c 	bl	8002b30 <HAL_GetTick>
 8004518:	0003      	movs	r3, r0
 800451a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800451c:	e009      	b.n	8004532 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451e:	f7fe fb07 	bl	8002b30 <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	4a6a      	ldr	r2, [pc, #424]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0ca      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004532:	4b67      	ldr	r3, [pc, #412]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2207      	movs	r2, #7
 8004538:	4013      	ands	r3, r2
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d1ee      	bne.n	800451e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2202      	movs	r2, #2
 8004546:	4013      	ands	r3, r2
 8004548:	d015      	beq.n	8004576 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2204      	movs	r2, #4
 8004550:	4013      	ands	r3, r2
 8004552:	d006      	beq.n	8004562 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004554:	4b60      	ldr	r3, [pc, #384]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	4b5f      	ldr	r3, [pc, #380]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 800455a:	21e0      	movs	r1, #224	@ 0xe0
 800455c:	01c9      	lsls	r1, r1, #7
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004562:	4b5d      	ldr	r3, [pc, #372]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4a5d      	ldr	r2, [pc, #372]	@ (80046dc <HAL_RCC_ClockConfig+0x1fc>)
 8004568:	4013      	ands	r3, r2
 800456a:	0019      	movs	r1, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	4b59      	ldr	r3, [pc, #356]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004572:	430a      	orrs	r2, r1
 8004574:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	4013      	ands	r3, r2
 800457e:	d057      	beq.n	8004630 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004588:	4b53      	ldr	r3, [pc, #332]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2380      	movs	r3, #128	@ 0x80
 800458e:	029b      	lsls	r3, r3, #10
 8004590:	4013      	ands	r3, r2
 8004592:	d12b      	bne.n	80045ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e097      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a0:	4b4d      	ldr	r3, [pc, #308]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	2380      	movs	r3, #128	@ 0x80
 80045a6:	049b      	lsls	r3, r3, #18
 80045a8:	4013      	ands	r3, r2
 80045aa:	d11f      	bne.n	80045ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e08b      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d107      	bne.n	80045c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b8:	4b47      	ldr	r3, [pc, #284]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2380      	movs	r3, #128	@ 0x80
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4013      	ands	r3, r2
 80045c2:	d113      	bne.n	80045ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e07f      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d106      	bne.n	80045de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045d0:	4b41      	ldr	r3, [pc, #260]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 80045d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d4:	2202      	movs	r2, #2
 80045d6:	4013      	ands	r3, r2
 80045d8:	d108      	bne.n	80045ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e074      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045de:	4b3e      	ldr	r3, [pc, #248]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 80045e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e2:	2202      	movs	r2, #2
 80045e4:	4013      	ands	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e06d      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ec:	4b3a      	ldr	r3, [pc, #232]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2207      	movs	r2, #7
 80045f2:	4393      	bics	r3, r2
 80045f4:	0019      	movs	r1, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	4b37      	ldr	r3, [pc, #220]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fe fa96 	bl	8002b30 <HAL_GetTick>
 8004604:	0003      	movs	r3, r0
 8004606:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004608:	e009      	b.n	800461e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460a:	f7fe fa91 	bl	8002b30 <HAL_GetTick>
 800460e:	0002      	movs	r2, r0
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	4a2f      	ldr	r2, [pc, #188]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e054      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	4b2e      	ldr	r3, [pc, #184]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2238      	movs	r2, #56	@ 0x38
 8004624:	401a      	ands	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	429a      	cmp	r2, r3
 800462e:	d1ec      	bne.n	800460a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004630:	4b27      	ldr	r3, [pc, #156]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2207      	movs	r2, #7
 8004636:	4013      	ands	r3, r2
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d21e      	bcs.n	800467c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2207      	movs	r2, #7
 8004644:	4393      	bics	r3, r2
 8004646:	0019      	movs	r1, r3
 8004648:	4b21      	ldr	r3, [pc, #132]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f0>)
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004650:	f7fe fa6e 	bl	8002b30 <HAL_GetTick>
 8004654:	0003      	movs	r3, r0
 8004656:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004658:	e009      	b.n	800466e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465a:	f7fe fa69 	bl	8002b30 <HAL_GetTick>
 800465e:	0002      	movs	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	4a1b      	ldr	r2, [pc, #108]	@ (80046d4 <HAL_RCC_ClockConfig+0x1f4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e02c      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800466e:	4b18      	ldr	r3, [pc, #96]	@ (80046d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2207      	movs	r2, #7
 8004674:	4013      	ands	r3, r2
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d1ee      	bne.n	800465a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2204      	movs	r2, #4
 8004682:	4013      	ands	r3, r2
 8004684:	d009      	beq.n	800469a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <HAL_RCC_ClockConfig+0x200>)
 800468c:	4013      	ands	r3, r2
 800468e:	0019      	movs	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800469a:	f000 f829 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 800469e:	0001      	movs	r1, r0
 80046a0:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <HAL_RCC_ClockConfig+0x1f8>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	220f      	movs	r2, #15
 80046a8:	401a      	ands	r2, r3
 80046aa:	4b0e      	ldr	r3, [pc, #56]	@ (80046e4 <HAL_RCC_ClockConfig+0x204>)
 80046ac:	0092      	lsls	r2, r2, #2
 80046ae:	58d3      	ldr	r3, [r2, r3]
 80046b0:	221f      	movs	r2, #31
 80046b2:	4013      	ands	r3, r2
 80046b4:	000a      	movs	r2, r1
 80046b6:	40da      	lsrs	r2, r3
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCC_ClockConfig+0x208>)
 80046ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046bc:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_RCC_ClockConfig+0x20c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7fe f9d9 	bl	8002a78 <HAL_InitTick>
 80046c6:	0003      	movs	r3, r0
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b004      	add	sp, #16
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40022000 	.word	0x40022000
 80046d4:	00001388 	.word	0x00001388
 80046d8:	40021000 	.word	0x40021000
 80046dc:	fffff0ff 	.word	0xfffff0ff
 80046e0:	ffff8fff 	.word	0xffff8fff
 80046e4:	0800644c 	.word	0x0800644c
 80046e8:	20000004 	.word	0x20000004
 80046ec:	20000008 	.word	0x20000008

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046f6:	4b3c      	ldr	r3, [pc, #240]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2238      	movs	r2, #56	@ 0x38
 80046fc:	4013      	ands	r3, r2
 80046fe:	d10f      	bne.n	8004720 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004700:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	0adb      	lsrs	r3, r3, #11
 8004706:	2207      	movs	r2, #7
 8004708:	4013      	ands	r3, r2
 800470a:	2201      	movs	r2, #1
 800470c:	409a      	lsls	r2, r3
 800470e:	0013      	movs	r3, r2
 8004710:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	4835      	ldr	r0, [pc, #212]	@ (80047ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8004716:	f7fb fcff 	bl	8000118 <__udivsi3>
 800471a:	0003      	movs	r3, r0
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	e05d      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004720:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2238      	movs	r2, #56	@ 0x38
 8004726:	4013      	ands	r3, r2
 8004728:	2b08      	cmp	r3, #8
 800472a:	d102      	bne.n	8004732 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800472c:	4b30      	ldr	r3, [pc, #192]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e054      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004732:	4b2d      	ldr	r3, [pc, #180]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2238      	movs	r2, #56	@ 0x38
 8004738:	4013      	ands	r3, r2
 800473a:	2b10      	cmp	r3, #16
 800473c:	d138      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800473e:	4b2a      	ldr	r3, [pc, #168]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2203      	movs	r2, #3
 8004744:	4013      	ands	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004748:	4b27      	ldr	r3, [pc, #156]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	2207      	movs	r2, #7
 8004750:	4013      	ands	r3, r2
 8004752:	3301      	adds	r3, #1
 8004754:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d10d      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	4824      	ldr	r0, [pc, #144]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004760:	f7fb fcda 	bl	8000118 <__udivsi3>
 8004764:	0003      	movs	r3, r0
 8004766:	0019      	movs	r1, r3
 8004768:	4b1f      	ldr	r3, [pc, #124]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	227f      	movs	r2, #127	@ 0x7f
 8004770:	4013      	ands	r3, r2
 8004772:	434b      	muls	r3, r1
 8004774:	617b      	str	r3, [r7, #20]
        break;
 8004776:	e00d      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	481c      	ldr	r0, [pc, #112]	@ (80047ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800477c:	f7fb fccc 	bl	8000118 <__udivsi3>
 8004780:	0003      	movs	r3, r0
 8004782:	0019      	movs	r1, r3
 8004784:	4b18      	ldr	r3, [pc, #96]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	227f      	movs	r2, #127	@ 0x7f
 800478c:	4013      	ands	r3, r2
 800478e:	434b      	muls	r3, r1
 8004790:	617b      	str	r3, [r7, #20]
        break;
 8004792:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004794:	4b14      	ldr	r3, [pc, #80]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0f5b      	lsrs	r3, r3, #29
 800479a:	2207      	movs	r2, #7
 800479c:	4013      	ands	r3, r2
 800479e:	3301      	adds	r3, #1
 80047a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	6978      	ldr	r0, [r7, #20]
 80047a6:	f7fb fcb7 	bl	8000118 <__udivsi3>
 80047aa:	0003      	movs	r3, r0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e015      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047b0:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2238      	movs	r2, #56	@ 0x38
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d103      	bne.n	80047c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e00b      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80047c4:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2238      	movs	r2, #56	@ 0x38
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b18      	cmp	r3, #24
 80047ce:	d103      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80047d0:	23fa      	movs	r3, #250	@ 0xfa
 80047d2:	01db      	lsls	r3, r3, #7
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	e001      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047dc:	693b      	ldr	r3, [r7, #16]
}
 80047de:	0018      	movs	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b006      	add	sp, #24
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	40021000 	.word	0x40021000
 80047ec:	00f42400 	.word	0x00f42400
 80047f0:	007a1200 	.word	0x007a1200

080047f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80047fc:	2313      	movs	r3, #19
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004804:	2312      	movs	r3, #18
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	2380      	movs	r3, #128	@ 0x80
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	4013      	ands	r3, r2
 8004816:	d100      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004818:	e0ad      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2011      	movs	r0, #17
 800481c:	183b      	adds	r3, r7, r0
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004822:	4b47      	ldr	r3, [pc, #284]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	055b      	lsls	r3, r3, #21
 800482a:	4013      	ands	r3, r2
 800482c:	d110      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	4b44      	ldr	r3, [pc, #272]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004830:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004832:	4b43      	ldr	r3, [pc, #268]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004834:	2180      	movs	r1, #128	@ 0x80
 8004836:	0549      	lsls	r1, r1, #21
 8004838:	430a      	orrs	r2, r1
 800483a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800483c:	4b40      	ldr	r3, [pc, #256]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800483e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	055b      	lsls	r3, r3, #21
 8004844:	4013      	ands	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484a:	183b      	adds	r3, r7, r0
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004850:	4b3c      	ldr	r3, [pc, #240]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b3b      	ldr	r3, [pc, #236]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004856:	2180      	movs	r1, #128	@ 0x80
 8004858:	0049      	lsls	r1, r1, #1
 800485a:	430a      	orrs	r2, r1
 800485c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800485e:	f7fe f967 	bl	8002b30 <HAL_GetTick>
 8004862:	0003      	movs	r3, r0
 8004864:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004866:	e00b      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fe f962 	bl	8002b30 <HAL_GetTick>
 800486c:	0002      	movs	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d904      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004876:	2313      	movs	r3, #19
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2203      	movs	r2, #3
 800487c:	701a      	strb	r2, [r3, #0]
        break;
 800487e:	e005      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004880:	4b30      	ldr	r3, [pc, #192]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4013      	ands	r3, r2
 800488a:	d0ed      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800488c:	2313      	movs	r3, #19
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d15e      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004896:	4b2a      	ldr	r3, [pc, #168]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004898:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800489a:	23c0      	movs	r3, #192	@ 0xc0
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4013      	ands	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d019      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d014      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048b2:	4b23      	ldr	r3, [pc, #140]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b6:	4a24      	ldr	r2, [pc, #144]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048bc:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048c2:	2180      	movs	r1, #128	@ 0x80
 80048c4:	0249      	lsls	r1, r1, #9
 80048c6:	430a      	orrs	r2, r1
 80048c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80048ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048d0:	491e      	ldr	r1, [pc, #120]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80048d2:	400a      	ands	r2, r1
 80048d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2201      	movs	r2, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	d016      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fe f924 	bl	8002b30 <HAL_GetTick>
 80048e8:	0003      	movs	r3, r0
 80048ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ec:	e00c      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ee:	f7fe f91f 	bl	8002b30 <HAL_GetTick>
 80048f2:	0002      	movs	r2, r0
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d904      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80048fe:	2313      	movs	r3, #19
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	2203      	movs	r2, #3
 8004904:	701a      	strb	r2, [r3, #0]
            break;
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004908:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800490a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490c:	2202      	movs	r2, #2
 800490e:	4013      	ands	r3, r2
 8004910:	d0ed      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004912:	2313      	movs	r3, #19
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800491c:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800491e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004920:	4a09      	ldr	r2, [pc, #36]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004922:	4013      	ands	r3, r2
 8004924:	0019      	movs	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800492a:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800492c:	430a      	orrs	r2, r1
 800492e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004930:	e016      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004932:	2312      	movs	r3, #18
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	2213      	movs	r2, #19
 8004938:	18ba      	adds	r2, r7, r2
 800493a:	7812      	ldrb	r2, [r2, #0]
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e00f      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004940:	40021000 	.word	0x40021000
 8004944:	40007000 	.word	0x40007000
 8004948:	fffffcff 	.word	0xfffffcff
 800494c:	fffeffff 	.word	0xfffeffff
 8004950:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	2312      	movs	r3, #18
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	2213      	movs	r2, #19
 800495a:	18ba      	adds	r2, r7, r2
 800495c:	7812      	ldrb	r2, [r2, #0]
 800495e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004960:	2311      	movs	r3, #17
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496a:	4bb6      	ldr	r3, [pc, #728]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800496c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800496e:	4bb5      	ldr	r3, [pc, #724]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004970:	49b5      	ldr	r1, [pc, #724]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004972:	400a      	ands	r2, r1
 8004974:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2201      	movs	r2, #1
 800497c:	4013      	ands	r3, r2
 800497e:	d009      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004980:	4bb0      	ldr	r3, [pc, #704]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	2203      	movs	r2, #3
 8004986:	4393      	bics	r3, r2
 8004988:	0019      	movs	r1, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	4bad      	ldr	r3, [pc, #692]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004990:	430a      	orrs	r2, r1
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2202      	movs	r2, #2
 800499a:	4013      	ands	r3, r2
 800499c:	d009      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800499e:	4ba9      	ldr	r3, [pc, #676]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a2:	220c      	movs	r2, #12
 80049a4:	4393      	bics	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	4ba5      	ldr	r3, [pc, #660]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ae:	430a      	orrs	r2, r1
 80049b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2204      	movs	r2, #4
 80049b8:	4013      	ands	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c0:	2230      	movs	r2, #48	@ 0x30
 80049c2:	4393      	bics	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	4b9e      	ldr	r3, [pc, #632]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049cc:	430a      	orrs	r2, r1
 80049ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2210      	movs	r2, #16
 80049d6:	4013      	ands	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049da:	4b9a      	ldr	r3, [pc, #616]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	4a9b      	ldr	r2, [pc, #620]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	4b96      	ldr	r3, [pc, #600]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ea:	430a      	orrs	r2, r1
 80049ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	015b      	lsls	r3, r3, #5
 80049f6:	4013      	ands	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80049fa:	4b92      	ldr	r3, [pc, #584]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fe:	4a94      	ldr	r2, [pc, #592]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	0019      	movs	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	4b8e      	ldr	r3, [pc, #568]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4013      	ands	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a1a:	4b8a      	ldr	r3, [pc, #552]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	4a8d      	ldr	r2, [pc, #564]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a28:	4b86      	ldr	r3, [pc, #536]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4013      	ands	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a3a:	4b82      	ldr	r3, [pc, #520]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3e:	4a86      	ldr	r2, [pc, #536]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a48:	4b7e      	ldr	r3, [pc, #504]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2220      	movs	r2, #32
 8004a54:	4013      	ands	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a58:	4b7a      	ldr	r3, [pc, #488]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	4b77      	ldr	r3, [pc, #476]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2240      	movs	r2, #64	@ 0x40
 8004a72:	4013      	ands	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a76:	4b73      	ldr	r3, [pc, #460]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	4a79      	ldr	r2, [pc, #484]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	0019      	movs	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	4b6f      	ldr	r3, [pc, #444]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a86:	430a      	orrs	r2, r1
 8004a88:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	2380      	movs	r3, #128	@ 0x80
 8004a90:	01db      	lsls	r3, r3, #7
 8004a92:	4013      	ands	r3, r2
 8004a94:	d015      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a96:	4b6b      	ldr	r3, [pc, #428]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	0899      	lsrs	r1, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa2:	4b68      	ldr	r3, [pc, #416]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aac:	2380      	movs	r3, #128	@ 0x80
 8004aae:	05db      	lsls	r3, r3, #23
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ab4:	4b63      	ldr	r3, [pc, #396]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	4b62      	ldr	r3, [pc, #392]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aba:	2180      	movs	r1, #128	@ 0x80
 8004abc:	0249      	lsls	r1, r1, #9
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	2380      	movs	r3, #128	@ 0x80
 8004ac8:	031b      	lsls	r3, r3, #12
 8004aca:	4013      	ands	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ace:	4b5d      	ldr	r3, [pc, #372]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	2240      	movs	r2, #64	@ 0x40
 8004ad4:	4393      	bics	r3, r2
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004adc:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	2380      	movs	r3, #128	@ 0x80
 8004ae8:	039b      	lsls	r3, r3, #14
 8004aea:	4013      	ands	r3, r2
 8004aec:	d016      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004aee:	4b55      	ldr	r3, [pc, #340]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	4a5c      	ldr	r2, [pc, #368]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	0019      	movs	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004afc:	4b51      	ldr	r3, [pc, #324]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004afe:	430a      	orrs	r2, r1
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b06:	2380      	movs	r3, #128	@ 0x80
 8004b08:	03db      	lsls	r3, r3, #15
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d106      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	4b4c      	ldr	r3, [pc, #304]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b14:	2180      	movs	r1, #128	@ 0x80
 8004b16:	0449      	lsls	r1, r1, #17
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	2380      	movs	r3, #128	@ 0x80
 8004b22:	03db      	lsls	r3, r3, #15
 8004b24:	4013      	ands	r3, r2
 8004b26:	d016      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b28:	4b46      	ldr	r3, [pc, #280]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	0019      	movs	r1, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b36:	4b43      	ldr	r3, [pc, #268]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	045b      	lsls	r3, r3, #17
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d106      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b48:	4b3e      	ldr	r3, [pc, #248]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b4e:	2180      	movs	r1, #128	@ 0x80
 8004b50:	0449      	lsls	r1, r1, #17
 8004b52:	430a      	orrs	r2, r1
 8004b54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	2380      	movs	r3, #128	@ 0x80
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d014      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004b62:	4b38      	ldr	r3, [pc, #224]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b66:	2203      	movs	r2, #3
 8004b68:	4393      	bics	r3, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	4b34      	ldr	r3, [pc, #208]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b7e:	4b31      	ldr	r3, [pc, #196]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	4b30      	ldr	r3, [pc, #192]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b84:	2180      	movs	r1, #128	@ 0x80
 8004b86:	0249      	lsls	r1, r1, #9
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	@ 0x80
 8004b92:	019b      	lsls	r3, r3, #6
 8004b94:	4013      	ands	r3, r2
 8004b96:	d014      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004b98:	4b2a      	ldr	r3, [pc, #168]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9c:	220c      	movs	r2, #12
 8004b9e:	4393      	bics	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ba6:	4b27      	ldr	r3, [pc, #156]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bb4:	4b23      	ldr	r3, [pc, #140]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	4b22      	ldr	r3, [pc, #136]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bba:	2180      	movs	r1, #128	@ 0x80
 8004bbc:	0249      	lsls	r1, r1, #9
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	2380      	movs	r3, #128	@ 0x80
 8004bc8:	045b      	lsls	r3, r3, #17
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d016      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bce:	4b1d      	ldr	r3, [pc, #116]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd2:	4a22      	ldr	r2, [pc, #136]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004be6:	2380      	movs	r3, #128	@ 0x80
 8004be8:	019b      	lsls	r3, r3, #6
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d106      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bee:	4b15      	ldr	r3, [pc, #84]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bf4:	2180      	movs	r1, #128	@ 0x80
 8004bf6:	0449      	lsls	r1, r1, #17
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	2380      	movs	r3, #128	@ 0x80
 8004c02:	049b      	lsls	r3, r3, #18
 8004c04:	4013      	ands	r3, r2
 8004c06:	d016      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c08:	4b0e      	ldr	r3, [pc, #56]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0c:	4a10      	ldr	r2, [pc, #64]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c16:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c20:	2380      	movs	r3, #128	@ 0x80
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d106      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c28:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c2e:	2180      	movs	r1, #128	@ 0x80
 8004c30:	0449      	lsls	r1, r1, #17
 8004c32:	430a      	orrs	r2, r1
 8004c34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c36:	2312      	movs	r3, #18
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b006      	add	sp, #24
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	efffffff 	.word	0xefffffff
 8004c4c:	fffff3ff 	.word	0xfffff3ff
 8004c50:	fffffcff 	.word	0xfffffcff
 8004c54:	fff3ffff 	.word	0xfff3ffff
 8004c58:	ffcfffff 	.word	0xffcfffff
 8004c5c:	ffffcfff 	.word	0xffffcfff
 8004c60:	ffff3fff 	.word	0xffff3fff
 8004c64:	ffbfffff 	.word	0xffbfffff
 8004c68:	feffffff 	.word	0xfeffffff

08004c6c <std>:
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	0004      	movs	r4, r0
 8004c72:	6003      	str	r3, [r0, #0]
 8004c74:	6043      	str	r3, [r0, #4]
 8004c76:	6083      	str	r3, [r0, #8]
 8004c78:	8181      	strh	r1, [r0, #12]
 8004c7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c7c:	81c2      	strh	r2, [r0, #14]
 8004c7e:	6103      	str	r3, [r0, #16]
 8004c80:	6143      	str	r3, [r0, #20]
 8004c82:	6183      	str	r3, [r0, #24]
 8004c84:	0019      	movs	r1, r3
 8004c86:	2208      	movs	r2, #8
 8004c88:	305c      	adds	r0, #92	@ 0x5c
 8004c8a:	f000 fa0f 	bl	80050ac <memset>
 8004c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <std+0x50>)
 8004c90:	6224      	str	r4, [r4, #32]
 8004c92:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <std+0x54>)
 8004c96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c98:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <std+0x58>)
 8004c9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <std+0x5c>)
 8004c9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <std+0x60>)
 8004ca2:	429c      	cmp	r4, r3
 8004ca4:	d005      	beq.n	8004cb2 <std+0x46>
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <std+0x64>)
 8004ca8:	429c      	cmp	r4, r3
 8004caa:	d002      	beq.n	8004cb2 <std+0x46>
 8004cac:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <std+0x68>)
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	d103      	bne.n	8004cba <std+0x4e>
 8004cb2:	0020      	movs	r0, r4
 8004cb4:	3058      	adds	r0, #88	@ 0x58
 8004cb6:	f000 fa79 	bl	80051ac <__retarget_lock_init_recursive>
 8004cba:	bd10      	pop	{r4, pc}
 8004cbc:	08004ed5 	.word	0x08004ed5
 8004cc0:	08004efd 	.word	0x08004efd
 8004cc4:	08004f35 	.word	0x08004f35
 8004cc8:	08004f61 	.word	0x08004f61
 8004ccc:	200002f0 	.word	0x200002f0
 8004cd0:	20000358 	.word	0x20000358
 8004cd4:	200003c0 	.word	0x200003c0

08004cd8 <stdio_exit_handler>:
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	4a03      	ldr	r2, [pc, #12]	@ (8004ce8 <stdio_exit_handler+0x10>)
 8004cdc:	4903      	ldr	r1, [pc, #12]	@ (8004cec <stdio_exit_handler+0x14>)
 8004cde:	4804      	ldr	r0, [pc, #16]	@ (8004cf0 <stdio_exit_handler+0x18>)
 8004ce0:	f000 f86c 	bl	8004dbc <_fwalk_sglue>
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	20000010 	.word	0x20000010
 8004cec:	08005a49 	.word	0x08005a49
 8004cf0:	20000020 	.word	0x20000020

08004cf4 <cleanup_stdio>:
 8004cf4:	6841      	ldr	r1, [r0, #4]
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <cleanup_stdio+0x30>)
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	0004      	movs	r4, r0
 8004cfc:	4299      	cmp	r1, r3
 8004cfe:	d001      	beq.n	8004d04 <cleanup_stdio+0x10>
 8004d00:	f000 fea2 	bl	8005a48 <_fflush_r>
 8004d04:	68a1      	ldr	r1, [r4, #8]
 8004d06:	4b08      	ldr	r3, [pc, #32]	@ (8004d28 <cleanup_stdio+0x34>)
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	d002      	beq.n	8004d12 <cleanup_stdio+0x1e>
 8004d0c:	0020      	movs	r0, r4
 8004d0e:	f000 fe9b 	bl	8005a48 <_fflush_r>
 8004d12:	68e1      	ldr	r1, [r4, #12]
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <cleanup_stdio+0x38>)
 8004d16:	4299      	cmp	r1, r3
 8004d18:	d002      	beq.n	8004d20 <cleanup_stdio+0x2c>
 8004d1a:	0020      	movs	r0, r4
 8004d1c:	f000 fe94 	bl	8005a48 <_fflush_r>
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	200002f0 	.word	0x200002f0
 8004d28:	20000358 	.word	0x20000358
 8004d2c:	200003c0 	.word	0x200003c0

08004d30 <global_stdio_init.part.0>:
 8004d30:	b510      	push	{r4, lr}
 8004d32:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <global_stdio_init.part.0+0x28>)
 8004d34:	4a09      	ldr	r2, [pc, #36]	@ (8004d5c <global_stdio_init.part.0+0x2c>)
 8004d36:	2104      	movs	r1, #4
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	4809      	ldr	r0, [pc, #36]	@ (8004d60 <global_stdio_init.part.0+0x30>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f7ff ff95 	bl	8004c6c <std>
 8004d42:	2201      	movs	r2, #1
 8004d44:	2109      	movs	r1, #9
 8004d46:	4807      	ldr	r0, [pc, #28]	@ (8004d64 <global_stdio_init.part.0+0x34>)
 8004d48:	f7ff ff90 	bl	8004c6c <std>
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	2112      	movs	r1, #18
 8004d50:	4805      	ldr	r0, [pc, #20]	@ (8004d68 <global_stdio_init.part.0+0x38>)
 8004d52:	f7ff ff8b 	bl	8004c6c <std>
 8004d56:	bd10      	pop	{r4, pc}
 8004d58:	20000428 	.word	0x20000428
 8004d5c:	08004cd9 	.word	0x08004cd9
 8004d60:	200002f0 	.word	0x200002f0
 8004d64:	20000358 	.word	0x20000358
 8004d68:	200003c0 	.word	0x200003c0

08004d6c <__sfp_lock_acquire>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	4802      	ldr	r0, [pc, #8]	@ (8004d78 <__sfp_lock_acquire+0xc>)
 8004d70:	f000 fa1d 	bl	80051ae <__retarget_lock_acquire_recursive>
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	46c0      	nop			@ (mov r8, r8)
 8004d78:	20000431 	.word	0x20000431

08004d7c <__sfp_lock_release>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4802      	ldr	r0, [pc, #8]	@ (8004d88 <__sfp_lock_release+0xc>)
 8004d80:	f000 fa16 	bl	80051b0 <__retarget_lock_release_recursive>
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	20000431 	.word	0x20000431

08004d8c <__sinit>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	0004      	movs	r4, r0
 8004d90:	f7ff ffec 	bl	8004d6c <__sfp_lock_acquire>
 8004d94:	6a23      	ldr	r3, [r4, #32]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <__sinit+0x14>
 8004d9a:	f7ff ffef 	bl	8004d7c <__sfp_lock_release>
 8004d9e:	bd10      	pop	{r4, pc}
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <__sinit+0x28>)
 8004da2:	6223      	str	r3, [r4, #32]
 8004da4:	4b04      	ldr	r3, [pc, #16]	@ (8004db8 <__sinit+0x2c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f6      	bne.n	8004d9a <__sinit+0xe>
 8004dac:	f7ff ffc0 	bl	8004d30 <global_stdio_init.part.0>
 8004db0:	e7f3      	b.n	8004d9a <__sinit+0xe>
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	08004cf5 	.word	0x08004cf5
 8004db8:	20000428 	.word	0x20000428

08004dbc <_fwalk_sglue>:
 8004dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dbe:	0014      	movs	r4, r2
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	9000      	str	r0, [sp, #0]
 8004dc4:	9101      	str	r1, [sp, #4]
 8004dc6:	68a5      	ldr	r5, [r4, #8]
 8004dc8:	6867      	ldr	r7, [r4, #4]
 8004dca:	3f01      	subs	r7, #1
 8004dcc:	d504      	bpl.n	8004dd8 <_fwalk_sglue+0x1c>
 8004dce:	6824      	ldr	r4, [r4, #0]
 8004dd0:	2c00      	cmp	r4, #0
 8004dd2:	d1f8      	bne.n	8004dc6 <_fwalk_sglue+0xa>
 8004dd4:	0030      	movs	r0, r6
 8004dd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004dd8:	89ab      	ldrh	r3, [r5, #12]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d908      	bls.n	8004df0 <_fwalk_sglue+0x34>
 8004dde:	220e      	movs	r2, #14
 8004de0:	5eab      	ldrsh	r3, [r5, r2]
 8004de2:	3301      	adds	r3, #1
 8004de4:	d004      	beq.n	8004df0 <_fwalk_sglue+0x34>
 8004de6:	0029      	movs	r1, r5
 8004de8:	9800      	ldr	r0, [sp, #0]
 8004dea:	9b01      	ldr	r3, [sp, #4]
 8004dec:	4798      	blx	r3
 8004dee:	4306      	orrs	r6, r0
 8004df0:	3568      	adds	r5, #104	@ 0x68
 8004df2:	e7ea      	b.n	8004dca <_fwalk_sglue+0xe>

08004df4 <iprintf>:
 8004df4:	b40f      	push	{r0, r1, r2, r3}
 8004df6:	b507      	push	{r0, r1, r2, lr}
 8004df8:	4905      	ldr	r1, [pc, #20]	@ (8004e10 <iprintf+0x1c>)
 8004dfa:	ab04      	add	r3, sp, #16
 8004dfc:	6808      	ldr	r0, [r1, #0]
 8004dfe:	cb04      	ldmia	r3!, {r2}
 8004e00:	6881      	ldr	r1, [r0, #8]
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	f000 fb02 	bl	800540c <_vfiprintf_r>
 8004e08:	b003      	add	sp, #12
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	b004      	add	sp, #16
 8004e0e:	4718      	bx	r3
 8004e10:	2000001c 	.word	0x2000001c

08004e14 <_puts_r>:
 8004e14:	6a03      	ldr	r3, [r0, #32]
 8004e16:	b570      	push	{r4, r5, r6, lr}
 8004e18:	0005      	movs	r5, r0
 8004e1a:	000e      	movs	r6, r1
 8004e1c:	6884      	ldr	r4, [r0, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <_puts_r+0x12>
 8004e22:	f7ff ffb3 	bl	8004d8c <__sinit>
 8004e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e28:	07db      	lsls	r3, r3, #31
 8004e2a:	d405      	bmi.n	8004e38 <_puts_r+0x24>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	059b      	lsls	r3, r3, #22
 8004e30:	d402      	bmi.n	8004e38 <_puts_r+0x24>
 8004e32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e34:	f000 f9bb 	bl	80051ae <__retarget_lock_acquire_recursive>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	071b      	lsls	r3, r3, #28
 8004e3c:	d502      	bpl.n	8004e44 <_puts_r+0x30>
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11f      	bne.n	8004e84 <_puts_r+0x70>
 8004e44:	0021      	movs	r1, r4
 8004e46:	0028      	movs	r0, r5
 8004e48:	f000 f8d2 	bl	8004ff0 <__swsetup_r>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d019      	beq.n	8004e84 <_puts_r+0x70>
 8004e50:	2501      	movs	r5, #1
 8004e52:	426d      	negs	r5, r5
 8004e54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e56:	07db      	lsls	r3, r3, #31
 8004e58:	d405      	bmi.n	8004e66 <_puts_r+0x52>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	059b      	lsls	r3, r3, #22
 8004e5e:	d402      	bmi.n	8004e66 <_puts_r+0x52>
 8004e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e62:	f000 f9a5 	bl	80051b0 <__retarget_lock_release_recursive>
 8004e66:	0028      	movs	r0, r5
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	60a3      	str	r3, [r4, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da04      	bge.n	8004e7c <_puts_r+0x68>
 8004e72:	69a2      	ldr	r2, [r4, #24]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	dc16      	bgt.n	8004ea6 <_puts_r+0x92>
 8004e78:	290a      	cmp	r1, #10
 8004e7a:	d014      	beq.n	8004ea6 <_puts_r+0x92>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	6022      	str	r2, [r4, #0]
 8004e82:	7019      	strb	r1, [r3, #0]
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	7831      	ldrb	r1, [r6, #0]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	d1ed      	bne.n	8004e6a <_puts_r+0x56>
 8004e8e:	60a3      	str	r3, [r4, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	da0f      	bge.n	8004eb4 <_puts_r+0xa0>
 8004e94:	0022      	movs	r2, r4
 8004e96:	0028      	movs	r0, r5
 8004e98:	310a      	adds	r1, #10
 8004e9a:	f000 f867 	bl	8004f6c <__swbuf_r>
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d0d6      	beq.n	8004e50 <_puts_r+0x3c>
 8004ea2:	250a      	movs	r5, #10
 8004ea4:	e7d6      	b.n	8004e54 <_puts_r+0x40>
 8004ea6:	0022      	movs	r2, r4
 8004ea8:	0028      	movs	r0, r5
 8004eaa:	f000 f85f 	bl	8004f6c <__swbuf_r>
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d1e8      	bne.n	8004e84 <_puts_r+0x70>
 8004eb2:	e7cd      	b.n	8004e50 <_puts_r+0x3c>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	6022      	str	r2, [r4, #0]
 8004eba:	220a      	movs	r2, #10
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e7f0      	b.n	8004ea2 <_puts_r+0x8e>

08004ec0 <puts>:
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	4b03      	ldr	r3, [pc, #12]	@ (8004ed0 <puts+0x10>)
 8004ec4:	0001      	movs	r1, r0
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	f7ff ffa4 	bl	8004e14 <_puts_r>
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	2000001c 	.word	0x2000001c

08004ed4 <__sread>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	000c      	movs	r4, r1
 8004ed8:	250e      	movs	r5, #14
 8004eda:	5f49      	ldrsh	r1, [r1, r5]
 8004edc:	f000 f914 	bl	8005108 <_read_r>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	db03      	blt.n	8004eec <__sread+0x18>
 8004ee4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ee6:	181b      	adds	r3, r3, r0
 8004ee8:	6563      	str	r3, [r4, #84]	@ 0x54
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	4a02      	ldr	r2, [pc, #8]	@ (8004ef8 <__sread+0x24>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	81a3      	strh	r3, [r4, #12]
 8004ef4:	e7f9      	b.n	8004eea <__sread+0x16>
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	ffffefff 	.word	0xffffefff

08004efc <__swrite>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	001f      	movs	r7, r3
 8004f00:	898b      	ldrh	r3, [r1, #12]
 8004f02:	0005      	movs	r5, r0
 8004f04:	000c      	movs	r4, r1
 8004f06:	0016      	movs	r6, r2
 8004f08:	05db      	lsls	r3, r3, #23
 8004f0a:	d505      	bpl.n	8004f18 <__swrite+0x1c>
 8004f0c:	230e      	movs	r3, #14
 8004f0e:	5ec9      	ldrsh	r1, [r1, r3]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2302      	movs	r3, #2
 8004f14:	f000 f8e4 	bl	80050e0 <_lseek_r>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	4a05      	ldr	r2, [pc, #20]	@ (8004f30 <__swrite+0x34>)
 8004f1c:	0028      	movs	r0, r5
 8004f1e:	4013      	ands	r3, r2
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	0032      	movs	r2, r6
 8004f24:	230e      	movs	r3, #14
 8004f26:	5ee1      	ldrsh	r1, [r4, r3]
 8004f28:	003b      	movs	r3, r7
 8004f2a:	f000 f901 	bl	8005130 <_write_r>
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f30:	ffffefff 	.word	0xffffefff

08004f34 <__sseek>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	000c      	movs	r4, r1
 8004f38:	250e      	movs	r5, #14
 8004f3a:	5f49      	ldrsh	r1, [r1, r5]
 8004f3c:	f000 f8d0 	bl	80050e0 <_lseek_r>
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	1c42      	adds	r2, r0, #1
 8004f44:	d103      	bne.n	8004f4e <__sseek+0x1a>
 8004f46:	4a05      	ldr	r2, [pc, #20]	@ (8004f5c <__sseek+0x28>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	bd70      	pop	{r4, r5, r6, pc}
 8004f4e:	2280      	movs	r2, #128	@ 0x80
 8004f50:	0152      	lsls	r2, r2, #5
 8004f52:	4313      	orrs	r3, r2
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f58:	e7f8      	b.n	8004f4c <__sseek+0x18>
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	ffffefff 	.word	0xffffefff

08004f60 <__sclose>:
 8004f60:	b510      	push	{r4, lr}
 8004f62:	230e      	movs	r3, #14
 8004f64:	5ec9      	ldrsh	r1, [r1, r3]
 8004f66:	f000 f8a9 	bl	80050bc <_close_r>
 8004f6a:	bd10      	pop	{r4, pc}

08004f6c <__swbuf_r>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	0006      	movs	r6, r0
 8004f70:	000d      	movs	r5, r1
 8004f72:	0014      	movs	r4, r2
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d004      	beq.n	8004f82 <__swbuf_r+0x16>
 8004f78:	6a03      	ldr	r3, [r0, #32]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <__swbuf_r+0x16>
 8004f7e:	f7ff ff05 	bl	8004d8c <__sinit>
 8004f82:	69a3      	ldr	r3, [r4, #24]
 8004f84:	60a3      	str	r3, [r4, #8]
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	d502      	bpl.n	8004f92 <__swbuf_r+0x26>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <__swbuf_r+0x3a>
 8004f92:	0021      	movs	r1, r4
 8004f94:	0030      	movs	r0, r6
 8004f96:	f000 f82b 	bl	8004ff0 <__swsetup_r>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d003      	beq.n	8004fa6 <__swbuf_r+0x3a>
 8004f9e:	2501      	movs	r5, #1
 8004fa0:	426d      	negs	r5, r5
 8004fa2:	0028      	movs	r0, r5
 8004fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	b2ef      	uxtb	r7, r5
 8004fac:	1ac0      	subs	r0, r0, r3
 8004fae:	6963      	ldr	r3, [r4, #20]
 8004fb0:	b2ed      	uxtb	r5, r5
 8004fb2:	4283      	cmp	r3, r0
 8004fb4:	dc05      	bgt.n	8004fc2 <__swbuf_r+0x56>
 8004fb6:	0021      	movs	r1, r4
 8004fb8:	0030      	movs	r0, r6
 8004fba:	f000 fd45 	bl	8005a48 <_fflush_r>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d1ed      	bne.n	8004f9e <__swbuf_r+0x32>
 8004fc2:	68a3      	ldr	r3, [r4, #8]
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	60a3      	str	r3, [r4, #8]
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	701f      	strb	r7, [r3, #0]
 8004fd2:	6963      	ldr	r3, [r4, #20]
 8004fd4:	4283      	cmp	r3, r0
 8004fd6:	d004      	beq.n	8004fe2 <__swbuf_r+0x76>
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	07db      	lsls	r3, r3, #31
 8004fdc:	d5e1      	bpl.n	8004fa2 <__swbuf_r+0x36>
 8004fde:	2d0a      	cmp	r5, #10
 8004fe0:	d1df      	bne.n	8004fa2 <__swbuf_r+0x36>
 8004fe2:	0021      	movs	r1, r4
 8004fe4:	0030      	movs	r0, r6
 8004fe6:	f000 fd2f 	bl	8005a48 <_fflush_r>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d0d9      	beq.n	8004fa2 <__swbuf_r+0x36>
 8004fee:	e7d6      	b.n	8004f9e <__swbuf_r+0x32>

08004ff0 <__swsetup_r>:
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80050a8 <__swsetup_r+0xb8>)
 8004ff2:	b570      	push	{r4, r5, r6, lr}
 8004ff4:	0005      	movs	r5, r0
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	000c      	movs	r4, r1
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d004      	beq.n	8005008 <__swsetup_r+0x18>
 8004ffe:	6a03      	ldr	r3, [r0, #32]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <__swsetup_r+0x18>
 8005004:	f7ff fec2 	bl	8004d8c <__sinit>
 8005008:	220c      	movs	r2, #12
 800500a:	5ea3      	ldrsh	r3, [r4, r2]
 800500c:	071a      	lsls	r2, r3, #28
 800500e:	d423      	bmi.n	8005058 <__swsetup_r+0x68>
 8005010:	06da      	lsls	r2, r3, #27
 8005012:	d407      	bmi.n	8005024 <__swsetup_r+0x34>
 8005014:	2209      	movs	r2, #9
 8005016:	602a      	str	r2, [r5, #0]
 8005018:	2240      	movs	r2, #64	@ 0x40
 800501a:	2001      	movs	r0, #1
 800501c:	4313      	orrs	r3, r2
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	4240      	negs	r0, r0
 8005022:	e03a      	b.n	800509a <__swsetup_r+0xaa>
 8005024:	075b      	lsls	r3, r3, #29
 8005026:	d513      	bpl.n	8005050 <__swsetup_r+0x60>
 8005028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800502a:	2900      	cmp	r1, #0
 800502c:	d008      	beq.n	8005040 <__swsetup_r+0x50>
 800502e:	0023      	movs	r3, r4
 8005030:	3344      	adds	r3, #68	@ 0x44
 8005032:	4299      	cmp	r1, r3
 8005034:	d002      	beq.n	800503c <__swsetup_r+0x4c>
 8005036:	0028      	movs	r0, r5
 8005038:	f000 f8c4 	bl	80051c4 <_free_r>
 800503c:	2300      	movs	r3, #0
 800503e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005040:	2224      	movs	r2, #36	@ 0x24
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	4393      	bics	r3, r2
 8005046:	81a3      	strh	r3, [r4, #12]
 8005048:	2300      	movs	r3, #0
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	2308      	movs	r3, #8
 8005052:	89a2      	ldrh	r2, [r4, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	6923      	ldr	r3, [r4, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <__swsetup_r+0x86>
 800505e:	21a0      	movs	r1, #160	@ 0xa0
 8005060:	2280      	movs	r2, #128	@ 0x80
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	0089      	lsls	r1, r1, #2
 8005066:	0092      	lsls	r2, r2, #2
 8005068:	400b      	ands	r3, r1
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <__swsetup_r+0x86>
 800506e:	0021      	movs	r1, r4
 8005070:	0028      	movs	r0, r5
 8005072:	f000 fd3f 	bl	8005af4 <__smakebuf_r>
 8005076:	220c      	movs	r2, #12
 8005078:	5ea3      	ldrsh	r3, [r4, r2]
 800507a:	2101      	movs	r1, #1
 800507c:	001a      	movs	r2, r3
 800507e:	400a      	ands	r2, r1
 8005080:	420b      	tst	r3, r1
 8005082:	d00b      	beq.n	800509c <__swsetup_r+0xac>
 8005084:	2200      	movs	r2, #0
 8005086:	60a2      	str	r2, [r4, #8]
 8005088:	6962      	ldr	r2, [r4, #20]
 800508a:	4252      	negs	r2, r2
 800508c:	61a2      	str	r2, [r4, #24]
 800508e:	2000      	movs	r0, #0
 8005090:	6922      	ldr	r2, [r4, #16]
 8005092:	4282      	cmp	r2, r0
 8005094:	d101      	bne.n	800509a <__swsetup_r+0xaa>
 8005096:	061a      	lsls	r2, r3, #24
 8005098:	d4be      	bmi.n	8005018 <__swsetup_r+0x28>
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	0799      	lsls	r1, r3, #30
 800509e:	d400      	bmi.n	80050a2 <__swsetup_r+0xb2>
 80050a0:	6962      	ldr	r2, [r4, #20]
 80050a2:	60a2      	str	r2, [r4, #8]
 80050a4:	e7f3      	b.n	800508e <__swsetup_r+0x9e>
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	2000001c 	.word	0x2000001c

080050ac <memset>:
 80050ac:	0003      	movs	r3, r0
 80050ae:	1882      	adds	r2, r0, r2
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	7019      	strb	r1, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <_close_r>:
 80050bc:	2300      	movs	r3, #0
 80050be:	b570      	push	{r4, r5, r6, lr}
 80050c0:	4d06      	ldr	r5, [pc, #24]	@ (80050dc <_close_r+0x20>)
 80050c2:	0004      	movs	r4, r0
 80050c4:	0008      	movs	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fd fc24 	bl	8002914 <_close>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d103      	bne.n	80050d8 <_close_r+0x1c>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d000      	beq.n	80050d8 <_close_r+0x1c>
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	bd70      	pop	{r4, r5, r6, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	2000042c 	.word	0x2000042c

080050e0 <_lseek_r>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	0004      	movs	r4, r0
 80050e4:	0008      	movs	r0, r1
 80050e6:	0011      	movs	r1, r2
 80050e8:	001a      	movs	r2, r3
 80050ea:	2300      	movs	r3, #0
 80050ec:	4d05      	ldr	r5, [pc, #20]	@ (8005104 <_lseek_r+0x24>)
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fd fc31 	bl	8002956 <_lseek>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d103      	bne.n	8005100 <_lseek_r+0x20>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d000      	beq.n	8005100 <_lseek_r+0x20>
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	2000042c 	.word	0x2000042c

08005108 <_read_r>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	0004      	movs	r4, r0
 800510c:	0008      	movs	r0, r1
 800510e:	0011      	movs	r1, r2
 8005110:	001a      	movs	r2, r3
 8005112:	2300      	movs	r3, #0
 8005114:	4d05      	ldr	r5, [pc, #20]	@ (800512c <_read_r+0x24>)
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	f7fd fbc3 	bl	80028a2 <_read>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d103      	bne.n	8005128 <_read_r+0x20>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d000      	beq.n	8005128 <_read_r+0x20>
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	bd70      	pop	{r4, r5, r6, pc}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	2000042c 	.word	0x2000042c

08005130 <_write_r>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	0004      	movs	r4, r0
 8005134:	0008      	movs	r0, r1
 8005136:	0011      	movs	r1, r2
 8005138:	001a      	movs	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	4d05      	ldr	r5, [pc, #20]	@ (8005154 <_write_r+0x24>)
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fd fbcc 	bl	80028dc <_write>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d103      	bne.n	8005150 <_write_r+0x20>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d000      	beq.n	8005150 <_write_r+0x20>
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	bd70      	pop	{r4, r5, r6, pc}
 8005152:	46c0      	nop			@ (mov r8, r8)
 8005154:	2000042c 	.word	0x2000042c

08005158 <__errno>:
 8005158:	4b01      	ldr	r3, [pc, #4]	@ (8005160 <__errno+0x8>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	4770      	bx	lr
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	2000001c 	.word	0x2000001c

08005164 <__libc_init_array>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	2600      	movs	r6, #0
 8005168:	4c0c      	ldr	r4, [pc, #48]	@ (800519c <__libc_init_array+0x38>)
 800516a:	4d0d      	ldr	r5, [pc, #52]	@ (80051a0 <__libc_init_array+0x3c>)
 800516c:	1b64      	subs	r4, r4, r5
 800516e:	10a4      	asrs	r4, r4, #2
 8005170:	42a6      	cmp	r6, r4
 8005172:	d109      	bne.n	8005188 <__libc_init_array+0x24>
 8005174:	2600      	movs	r6, #0
 8005176:	f000 fd41 	bl	8005bfc <_init>
 800517a:	4c0a      	ldr	r4, [pc, #40]	@ (80051a4 <__libc_init_array+0x40>)
 800517c:	4d0a      	ldr	r5, [pc, #40]	@ (80051a8 <__libc_init_array+0x44>)
 800517e:	1b64      	subs	r4, r4, r5
 8005180:	10a4      	asrs	r4, r4, #2
 8005182:	42a6      	cmp	r6, r4
 8005184:	d105      	bne.n	8005192 <__libc_init_array+0x2e>
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	00b3      	lsls	r3, r6, #2
 800518a:	58eb      	ldr	r3, [r5, r3]
 800518c:	4798      	blx	r3
 800518e:	3601      	adds	r6, #1
 8005190:	e7ee      	b.n	8005170 <__libc_init_array+0xc>
 8005192:	00b3      	lsls	r3, r6, #2
 8005194:	58eb      	ldr	r3, [r5, r3]
 8005196:	4798      	blx	r3
 8005198:	3601      	adds	r6, #1
 800519a:	e7f2      	b.n	8005182 <__libc_init_array+0x1e>
 800519c:	080064c0 	.word	0x080064c0
 80051a0:	080064c0 	.word	0x080064c0
 80051a4:	080064c4 	.word	0x080064c4
 80051a8:	080064c0 	.word	0x080064c0

080051ac <__retarget_lock_init_recursive>:
 80051ac:	4770      	bx	lr

080051ae <__retarget_lock_acquire_recursive>:
 80051ae:	4770      	bx	lr

080051b0 <__retarget_lock_release_recursive>:
 80051b0:	4770      	bx	lr

080051b2 <memcpy>:
 80051b2:	2300      	movs	r3, #0
 80051b4:	b510      	push	{r4, lr}
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d100      	bne.n	80051bc <memcpy+0xa>
 80051ba:	bd10      	pop	{r4, pc}
 80051bc:	5ccc      	ldrb	r4, [r1, r3]
 80051be:	54c4      	strb	r4, [r0, r3]
 80051c0:	3301      	adds	r3, #1
 80051c2:	e7f8      	b.n	80051b6 <memcpy+0x4>

080051c4 <_free_r>:
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	0005      	movs	r5, r0
 80051c8:	1e0c      	subs	r4, r1, #0
 80051ca:	d010      	beq.n	80051ee <_free_r+0x2a>
 80051cc:	3c04      	subs	r4, #4
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	da00      	bge.n	80051d6 <_free_r+0x12>
 80051d4:	18e4      	adds	r4, r4, r3
 80051d6:	0028      	movs	r0, r5
 80051d8:	f000 f8e0 	bl	800539c <__malloc_lock>
 80051dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005254 <_free_r+0x90>)
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <_free_r+0x2c>
 80051e4:	6063      	str	r3, [r4, #4]
 80051e6:	6014      	str	r4, [r2, #0]
 80051e8:	0028      	movs	r0, r5
 80051ea:	f000 f8df 	bl	80053ac <__malloc_unlock>
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	42a3      	cmp	r3, r4
 80051f2:	d908      	bls.n	8005206 <_free_r+0x42>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	1821      	adds	r1, r4, r0
 80051f8:	428b      	cmp	r3, r1
 80051fa:	d1f3      	bne.n	80051e4 <_free_r+0x20>
 80051fc:	6819      	ldr	r1, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	1809      	adds	r1, r1, r0
 8005202:	6021      	str	r1, [r4, #0]
 8005204:	e7ee      	b.n	80051e4 <_free_r+0x20>
 8005206:	001a      	movs	r2, r3
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <_free_r+0x4e>
 800520e:	42a3      	cmp	r3, r4
 8005210:	d9f9      	bls.n	8005206 <_free_r+0x42>
 8005212:	6811      	ldr	r1, [r2, #0]
 8005214:	1850      	adds	r0, r2, r1
 8005216:	42a0      	cmp	r0, r4
 8005218:	d10b      	bne.n	8005232 <_free_r+0x6e>
 800521a:	6820      	ldr	r0, [r4, #0]
 800521c:	1809      	adds	r1, r1, r0
 800521e:	1850      	adds	r0, r2, r1
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	4283      	cmp	r3, r0
 8005224:	d1e0      	bne.n	80051e8 <_free_r+0x24>
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	1841      	adds	r1, r0, r1
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	6053      	str	r3, [r2, #4]
 8005230:	e7da      	b.n	80051e8 <_free_r+0x24>
 8005232:	42a0      	cmp	r0, r4
 8005234:	d902      	bls.n	800523c <_free_r+0x78>
 8005236:	230c      	movs	r3, #12
 8005238:	602b      	str	r3, [r5, #0]
 800523a:	e7d5      	b.n	80051e8 <_free_r+0x24>
 800523c:	6820      	ldr	r0, [r4, #0]
 800523e:	1821      	adds	r1, r4, r0
 8005240:	428b      	cmp	r3, r1
 8005242:	d103      	bne.n	800524c <_free_r+0x88>
 8005244:	6819      	ldr	r1, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	1809      	adds	r1, r1, r0
 800524a:	6021      	str	r1, [r4, #0]
 800524c:	6063      	str	r3, [r4, #4]
 800524e:	6054      	str	r4, [r2, #4]
 8005250:	e7ca      	b.n	80051e8 <_free_r+0x24>
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	20000438 	.word	0x20000438

08005258 <sbrk_aligned>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	4e0f      	ldr	r6, [pc, #60]	@ (8005298 <sbrk_aligned+0x40>)
 800525c:	000d      	movs	r5, r1
 800525e:	6831      	ldr	r1, [r6, #0]
 8005260:	0004      	movs	r4, r0
 8005262:	2900      	cmp	r1, #0
 8005264:	d102      	bne.n	800526c <sbrk_aligned+0x14>
 8005266:	f000 fcab 	bl	8005bc0 <_sbrk_r>
 800526a:	6030      	str	r0, [r6, #0]
 800526c:	0029      	movs	r1, r5
 800526e:	0020      	movs	r0, r4
 8005270:	f000 fca6 	bl	8005bc0 <_sbrk_r>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d103      	bne.n	8005280 <sbrk_aligned+0x28>
 8005278:	2501      	movs	r5, #1
 800527a:	426d      	negs	r5, r5
 800527c:	0028      	movs	r0, r5
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	2303      	movs	r3, #3
 8005282:	1cc5      	adds	r5, r0, #3
 8005284:	439d      	bics	r5, r3
 8005286:	42a8      	cmp	r0, r5
 8005288:	d0f8      	beq.n	800527c <sbrk_aligned+0x24>
 800528a:	1a29      	subs	r1, r5, r0
 800528c:	0020      	movs	r0, r4
 800528e:	f000 fc97 	bl	8005bc0 <_sbrk_r>
 8005292:	3001      	adds	r0, #1
 8005294:	d1f2      	bne.n	800527c <sbrk_aligned+0x24>
 8005296:	e7ef      	b.n	8005278 <sbrk_aligned+0x20>
 8005298:	20000434 	.word	0x20000434

0800529c <_malloc_r>:
 800529c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800529e:	2203      	movs	r2, #3
 80052a0:	1ccb      	adds	r3, r1, #3
 80052a2:	4393      	bics	r3, r2
 80052a4:	3308      	adds	r3, #8
 80052a6:	0005      	movs	r5, r0
 80052a8:	001f      	movs	r7, r3
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d234      	bcs.n	8005318 <_malloc_r+0x7c>
 80052ae:	270c      	movs	r7, #12
 80052b0:	42b9      	cmp	r1, r7
 80052b2:	d833      	bhi.n	800531c <_malloc_r+0x80>
 80052b4:	0028      	movs	r0, r5
 80052b6:	f000 f871 	bl	800539c <__malloc_lock>
 80052ba:	4e37      	ldr	r6, [pc, #220]	@ (8005398 <_malloc_r+0xfc>)
 80052bc:	6833      	ldr	r3, [r6, #0]
 80052be:	001c      	movs	r4, r3
 80052c0:	2c00      	cmp	r4, #0
 80052c2:	d12f      	bne.n	8005324 <_malloc_r+0x88>
 80052c4:	0039      	movs	r1, r7
 80052c6:	0028      	movs	r0, r5
 80052c8:	f7ff ffc6 	bl	8005258 <sbrk_aligned>
 80052cc:	0004      	movs	r4, r0
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	d15f      	bne.n	8005392 <_malloc_r+0xf6>
 80052d2:	6834      	ldr	r4, [r6, #0]
 80052d4:	9400      	str	r4, [sp, #0]
 80052d6:	9b00      	ldr	r3, [sp, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d14a      	bne.n	8005372 <_malloc_r+0xd6>
 80052dc:	2c00      	cmp	r4, #0
 80052de:	d052      	beq.n	8005386 <_malloc_r+0xea>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	0028      	movs	r0, r5
 80052e4:	18e3      	adds	r3, r4, r3
 80052e6:	9900      	ldr	r1, [sp, #0]
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	f000 fc69 	bl	8005bc0 <_sbrk_r>
 80052ee:	9b01      	ldr	r3, [sp, #4]
 80052f0:	4283      	cmp	r3, r0
 80052f2:	d148      	bne.n	8005386 <_malloc_r+0xea>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	0028      	movs	r0, r5
 80052f8:	1aff      	subs	r7, r7, r3
 80052fa:	0039      	movs	r1, r7
 80052fc:	f7ff ffac 	bl	8005258 <sbrk_aligned>
 8005300:	3001      	adds	r0, #1
 8005302:	d040      	beq.n	8005386 <_malloc_r+0xea>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	19db      	adds	r3, r3, r7
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	6833      	ldr	r3, [r6, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	2a00      	cmp	r2, #0
 8005310:	d133      	bne.n	800537a <_malloc_r+0xde>
 8005312:	9b00      	ldr	r3, [sp, #0]
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	e019      	b.n	800534c <_malloc_r+0xb0>
 8005318:	2b00      	cmp	r3, #0
 800531a:	dac9      	bge.n	80052b0 <_malloc_r+0x14>
 800531c:	230c      	movs	r3, #12
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	2000      	movs	r0, #0
 8005322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005324:	6821      	ldr	r1, [r4, #0]
 8005326:	1bc9      	subs	r1, r1, r7
 8005328:	d420      	bmi.n	800536c <_malloc_r+0xd0>
 800532a:	290b      	cmp	r1, #11
 800532c:	d90a      	bls.n	8005344 <_malloc_r+0xa8>
 800532e:	19e2      	adds	r2, r4, r7
 8005330:	6027      	str	r7, [r4, #0]
 8005332:	42a3      	cmp	r3, r4
 8005334:	d104      	bne.n	8005340 <_malloc_r+0xa4>
 8005336:	6032      	str	r2, [r6, #0]
 8005338:	6863      	ldr	r3, [r4, #4]
 800533a:	6011      	str	r1, [r2, #0]
 800533c:	6053      	str	r3, [r2, #4]
 800533e:	e005      	b.n	800534c <_malloc_r+0xb0>
 8005340:	605a      	str	r2, [r3, #4]
 8005342:	e7f9      	b.n	8005338 <_malloc_r+0x9c>
 8005344:	6862      	ldr	r2, [r4, #4]
 8005346:	42a3      	cmp	r3, r4
 8005348:	d10e      	bne.n	8005368 <_malloc_r+0xcc>
 800534a:	6032      	str	r2, [r6, #0]
 800534c:	0028      	movs	r0, r5
 800534e:	f000 f82d 	bl	80053ac <__malloc_unlock>
 8005352:	0020      	movs	r0, r4
 8005354:	2207      	movs	r2, #7
 8005356:	300b      	adds	r0, #11
 8005358:	1d23      	adds	r3, r4, #4
 800535a:	4390      	bics	r0, r2
 800535c:	1ac2      	subs	r2, r0, r3
 800535e:	4298      	cmp	r0, r3
 8005360:	d0df      	beq.n	8005322 <_malloc_r+0x86>
 8005362:	1a1b      	subs	r3, r3, r0
 8005364:	50a3      	str	r3, [r4, r2]
 8005366:	e7dc      	b.n	8005322 <_malloc_r+0x86>
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	e7ef      	b.n	800534c <_malloc_r+0xb0>
 800536c:	0023      	movs	r3, r4
 800536e:	6864      	ldr	r4, [r4, #4]
 8005370:	e7a6      	b.n	80052c0 <_malloc_r+0x24>
 8005372:	9c00      	ldr	r4, [sp, #0]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	e7ad      	b.n	80052d6 <_malloc_r+0x3a>
 800537a:	001a      	movs	r2, r3
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	42a3      	cmp	r3, r4
 8005380:	d1fb      	bne.n	800537a <_malloc_r+0xde>
 8005382:	2300      	movs	r3, #0
 8005384:	e7da      	b.n	800533c <_malloc_r+0xa0>
 8005386:	230c      	movs	r3, #12
 8005388:	0028      	movs	r0, r5
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	f000 f80e 	bl	80053ac <__malloc_unlock>
 8005390:	e7c6      	b.n	8005320 <_malloc_r+0x84>
 8005392:	6007      	str	r7, [r0, #0]
 8005394:	e7da      	b.n	800534c <_malloc_r+0xb0>
 8005396:	46c0      	nop			@ (mov r8, r8)
 8005398:	20000438 	.word	0x20000438

0800539c <__malloc_lock>:
 800539c:	b510      	push	{r4, lr}
 800539e:	4802      	ldr	r0, [pc, #8]	@ (80053a8 <__malloc_lock+0xc>)
 80053a0:	f7ff ff05 	bl	80051ae <__retarget_lock_acquire_recursive>
 80053a4:	bd10      	pop	{r4, pc}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	20000430 	.word	0x20000430

080053ac <__malloc_unlock>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4802      	ldr	r0, [pc, #8]	@ (80053b8 <__malloc_unlock+0xc>)
 80053b0:	f7ff fefe 	bl	80051b0 <__retarget_lock_release_recursive>
 80053b4:	bd10      	pop	{r4, pc}
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	20000430 	.word	0x20000430

080053bc <__sfputc_r>:
 80053bc:	6893      	ldr	r3, [r2, #8]
 80053be:	b510      	push	{r4, lr}
 80053c0:	3b01      	subs	r3, #1
 80053c2:	6093      	str	r3, [r2, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	da04      	bge.n	80053d2 <__sfputc_r+0x16>
 80053c8:	6994      	ldr	r4, [r2, #24]
 80053ca:	42a3      	cmp	r3, r4
 80053cc:	db07      	blt.n	80053de <__sfputc_r+0x22>
 80053ce:	290a      	cmp	r1, #10
 80053d0:	d005      	beq.n	80053de <__sfputc_r+0x22>
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	1c58      	adds	r0, r3, #1
 80053d6:	6010      	str	r0, [r2, #0]
 80053d8:	7019      	strb	r1, [r3, #0]
 80053da:	0008      	movs	r0, r1
 80053dc:	bd10      	pop	{r4, pc}
 80053de:	f7ff fdc5 	bl	8004f6c <__swbuf_r>
 80053e2:	0001      	movs	r1, r0
 80053e4:	e7f9      	b.n	80053da <__sfputc_r+0x1e>

080053e6 <__sfputs_r>:
 80053e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e8:	0006      	movs	r6, r0
 80053ea:	000f      	movs	r7, r1
 80053ec:	0014      	movs	r4, r2
 80053ee:	18d5      	adds	r5, r2, r3
 80053f0:	42ac      	cmp	r4, r5
 80053f2:	d101      	bne.n	80053f8 <__sfputs_r+0x12>
 80053f4:	2000      	movs	r0, #0
 80053f6:	e007      	b.n	8005408 <__sfputs_r+0x22>
 80053f8:	7821      	ldrb	r1, [r4, #0]
 80053fa:	003a      	movs	r2, r7
 80053fc:	0030      	movs	r0, r6
 80053fe:	f7ff ffdd 	bl	80053bc <__sfputc_r>
 8005402:	3401      	adds	r4, #1
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d1f3      	bne.n	80053f0 <__sfputs_r+0xa>
 8005408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800540c <_vfiprintf_r>:
 800540c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540e:	b0a1      	sub	sp, #132	@ 0x84
 8005410:	000f      	movs	r7, r1
 8005412:	0015      	movs	r5, r2
 8005414:	001e      	movs	r6, r3
 8005416:	9003      	str	r0, [sp, #12]
 8005418:	2800      	cmp	r0, #0
 800541a:	d004      	beq.n	8005426 <_vfiprintf_r+0x1a>
 800541c:	6a03      	ldr	r3, [r0, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <_vfiprintf_r+0x1a>
 8005422:	f7ff fcb3 	bl	8004d8c <__sinit>
 8005426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005428:	07db      	lsls	r3, r3, #31
 800542a:	d405      	bmi.n	8005438 <_vfiprintf_r+0x2c>
 800542c:	89bb      	ldrh	r3, [r7, #12]
 800542e:	059b      	lsls	r3, r3, #22
 8005430:	d402      	bmi.n	8005438 <_vfiprintf_r+0x2c>
 8005432:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005434:	f7ff febb 	bl	80051ae <__retarget_lock_acquire_recursive>
 8005438:	89bb      	ldrh	r3, [r7, #12]
 800543a:	071b      	lsls	r3, r3, #28
 800543c:	d502      	bpl.n	8005444 <_vfiprintf_r+0x38>
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d113      	bne.n	800546c <_vfiprintf_r+0x60>
 8005444:	0039      	movs	r1, r7
 8005446:	9803      	ldr	r0, [sp, #12]
 8005448:	f7ff fdd2 	bl	8004ff0 <__swsetup_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	d00d      	beq.n	800546c <_vfiprintf_r+0x60>
 8005450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005452:	07db      	lsls	r3, r3, #31
 8005454:	d503      	bpl.n	800545e <_vfiprintf_r+0x52>
 8005456:	2001      	movs	r0, #1
 8005458:	4240      	negs	r0, r0
 800545a:	b021      	add	sp, #132	@ 0x84
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545e:	89bb      	ldrh	r3, [r7, #12]
 8005460:	059b      	lsls	r3, r3, #22
 8005462:	d4f8      	bmi.n	8005456 <_vfiprintf_r+0x4a>
 8005464:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005466:	f7ff fea3 	bl	80051b0 <__retarget_lock_release_recursive>
 800546a:	e7f4      	b.n	8005456 <_vfiprintf_r+0x4a>
 800546c:	2300      	movs	r3, #0
 800546e:	ac08      	add	r4, sp, #32
 8005470:	6163      	str	r3, [r4, #20]
 8005472:	3320      	adds	r3, #32
 8005474:	7663      	strb	r3, [r4, #25]
 8005476:	3310      	adds	r3, #16
 8005478:	76a3      	strb	r3, [r4, #26]
 800547a:	9607      	str	r6, [sp, #28]
 800547c:	002e      	movs	r6, r5
 800547e:	7833      	ldrb	r3, [r6, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <_vfiprintf_r+0x7c>
 8005484:	2b25      	cmp	r3, #37	@ 0x25
 8005486:	d148      	bne.n	800551a <_vfiprintf_r+0x10e>
 8005488:	1b73      	subs	r3, r6, r5
 800548a:	9305      	str	r3, [sp, #20]
 800548c:	42ae      	cmp	r6, r5
 800548e:	d00b      	beq.n	80054a8 <_vfiprintf_r+0x9c>
 8005490:	002a      	movs	r2, r5
 8005492:	0039      	movs	r1, r7
 8005494:	9803      	ldr	r0, [sp, #12]
 8005496:	f7ff ffa6 	bl	80053e6 <__sfputs_r>
 800549a:	3001      	adds	r0, #1
 800549c:	d100      	bne.n	80054a0 <_vfiprintf_r+0x94>
 800549e:	e0ae      	b.n	80055fe <_vfiprintf_r+0x1f2>
 80054a0:	6963      	ldr	r3, [r4, #20]
 80054a2:	9a05      	ldr	r2, [sp, #20]
 80054a4:	189b      	adds	r3, r3, r2
 80054a6:	6163      	str	r3, [r4, #20]
 80054a8:	7833      	ldrb	r3, [r6, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d100      	bne.n	80054b0 <_vfiprintf_r+0xa4>
 80054ae:	e0a6      	b.n	80055fe <_vfiprintf_r+0x1f2>
 80054b0:	2201      	movs	r2, #1
 80054b2:	2300      	movs	r3, #0
 80054b4:	4252      	negs	r2, r2
 80054b6:	6062      	str	r2, [r4, #4]
 80054b8:	a904      	add	r1, sp, #16
 80054ba:	3254      	adds	r2, #84	@ 0x54
 80054bc:	1852      	adds	r2, r2, r1
 80054be:	1c75      	adds	r5, r6, #1
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	60e3      	str	r3, [r4, #12]
 80054c4:	60a3      	str	r3, [r4, #8]
 80054c6:	7013      	strb	r3, [r2, #0]
 80054c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80054ca:	4b59      	ldr	r3, [pc, #356]	@ (8005630 <_vfiprintf_r+0x224>)
 80054cc:	2205      	movs	r2, #5
 80054ce:	0018      	movs	r0, r3
 80054d0:	7829      	ldrb	r1, [r5, #0]
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	f000 fb86 	bl	8005be4 <memchr>
 80054d8:	1c6e      	adds	r6, r5, #1
 80054da:	2800      	cmp	r0, #0
 80054dc:	d11f      	bne.n	800551e <_vfiprintf_r+0x112>
 80054de:	6822      	ldr	r2, [r4, #0]
 80054e0:	06d3      	lsls	r3, r2, #27
 80054e2:	d504      	bpl.n	80054ee <_vfiprintf_r+0xe2>
 80054e4:	2353      	movs	r3, #83	@ 0x53
 80054e6:	a904      	add	r1, sp, #16
 80054e8:	185b      	adds	r3, r3, r1
 80054ea:	2120      	movs	r1, #32
 80054ec:	7019      	strb	r1, [r3, #0]
 80054ee:	0713      	lsls	r3, r2, #28
 80054f0:	d504      	bpl.n	80054fc <_vfiprintf_r+0xf0>
 80054f2:	2353      	movs	r3, #83	@ 0x53
 80054f4:	a904      	add	r1, sp, #16
 80054f6:	185b      	adds	r3, r3, r1
 80054f8:	212b      	movs	r1, #43	@ 0x2b
 80054fa:	7019      	strb	r1, [r3, #0]
 80054fc:	782b      	ldrb	r3, [r5, #0]
 80054fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005500:	d016      	beq.n	8005530 <_vfiprintf_r+0x124>
 8005502:	002e      	movs	r6, r5
 8005504:	2100      	movs	r1, #0
 8005506:	200a      	movs	r0, #10
 8005508:	68e3      	ldr	r3, [r4, #12]
 800550a:	7832      	ldrb	r2, [r6, #0]
 800550c:	1c75      	adds	r5, r6, #1
 800550e:	3a30      	subs	r2, #48	@ 0x30
 8005510:	2a09      	cmp	r2, #9
 8005512:	d950      	bls.n	80055b6 <_vfiprintf_r+0x1aa>
 8005514:	2900      	cmp	r1, #0
 8005516:	d111      	bne.n	800553c <_vfiprintf_r+0x130>
 8005518:	e017      	b.n	800554a <_vfiprintf_r+0x13e>
 800551a:	3601      	adds	r6, #1
 800551c:	e7af      	b.n	800547e <_vfiprintf_r+0x72>
 800551e:	9b05      	ldr	r3, [sp, #20]
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	1ac0      	subs	r0, r0, r3
 8005524:	2301      	movs	r3, #1
 8005526:	4083      	lsls	r3, r0
 8005528:	4313      	orrs	r3, r2
 800552a:	0035      	movs	r5, r6
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	e7cc      	b.n	80054ca <_vfiprintf_r+0xbe>
 8005530:	9b07      	ldr	r3, [sp, #28]
 8005532:	1d19      	adds	r1, r3, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	9107      	str	r1, [sp, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	db01      	blt.n	8005540 <_vfiprintf_r+0x134>
 800553c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800553e:	e004      	b.n	800554a <_vfiprintf_r+0x13e>
 8005540:	425b      	negs	r3, r3
 8005542:	60e3      	str	r3, [r4, #12]
 8005544:	2302      	movs	r3, #2
 8005546:	4313      	orrs	r3, r2
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	7833      	ldrb	r3, [r6, #0]
 800554c:	2b2e      	cmp	r3, #46	@ 0x2e
 800554e:	d10c      	bne.n	800556a <_vfiprintf_r+0x15e>
 8005550:	7873      	ldrb	r3, [r6, #1]
 8005552:	2b2a      	cmp	r3, #42	@ 0x2a
 8005554:	d134      	bne.n	80055c0 <_vfiprintf_r+0x1b4>
 8005556:	9b07      	ldr	r3, [sp, #28]
 8005558:	3602      	adds	r6, #2
 800555a:	1d1a      	adds	r2, r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	9207      	str	r2, [sp, #28]
 8005560:	2b00      	cmp	r3, #0
 8005562:	da01      	bge.n	8005568 <_vfiprintf_r+0x15c>
 8005564:	2301      	movs	r3, #1
 8005566:	425b      	negs	r3, r3
 8005568:	9309      	str	r3, [sp, #36]	@ 0x24
 800556a:	4d32      	ldr	r5, [pc, #200]	@ (8005634 <_vfiprintf_r+0x228>)
 800556c:	2203      	movs	r2, #3
 800556e:	0028      	movs	r0, r5
 8005570:	7831      	ldrb	r1, [r6, #0]
 8005572:	f000 fb37 	bl	8005be4 <memchr>
 8005576:	2800      	cmp	r0, #0
 8005578:	d006      	beq.n	8005588 <_vfiprintf_r+0x17c>
 800557a:	2340      	movs	r3, #64	@ 0x40
 800557c:	1b40      	subs	r0, r0, r5
 800557e:	4083      	lsls	r3, r0
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	3601      	adds	r6, #1
 8005584:	4313      	orrs	r3, r2
 8005586:	6023      	str	r3, [r4, #0]
 8005588:	7831      	ldrb	r1, [r6, #0]
 800558a:	2206      	movs	r2, #6
 800558c:	482a      	ldr	r0, [pc, #168]	@ (8005638 <_vfiprintf_r+0x22c>)
 800558e:	1c75      	adds	r5, r6, #1
 8005590:	7621      	strb	r1, [r4, #24]
 8005592:	f000 fb27 	bl	8005be4 <memchr>
 8005596:	2800      	cmp	r0, #0
 8005598:	d040      	beq.n	800561c <_vfiprintf_r+0x210>
 800559a:	4b28      	ldr	r3, [pc, #160]	@ (800563c <_vfiprintf_r+0x230>)
 800559c:	2b00      	cmp	r3, #0
 800559e:	d122      	bne.n	80055e6 <_vfiprintf_r+0x1da>
 80055a0:	2207      	movs	r2, #7
 80055a2:	9b07      	ldr	r3, [sp, #28]
 80055a4:	3307      	adds	r3, #7
 80055a6:	4393      	bics	r3, r2
 80055a8:	3308      	adds	r3, #8
 80055aa:	9307      	str	r3, [sp, #28]
 80055ac:	6963      	ldr	r3, [r4, #20]
 80055ae:	9a04      	ldr	r2, [sp, #16]
 80055b0:	189b      	adds	r3, r3, r2
 80055b2:	6163      	str	r3, [r4, #20]
 80055b4:	e762      	b.n	800547c <_vfiprintf_r+0x70>
 80055b6:	4343      	muls	r3, r0
 80055b8:	002e      	movs	r6, r5
 80055ba:	2101      	movs	r1, #1
 80055bc:	189b      	adds	r3, r3, r2
 80055be:	e7a4      	b.n	800550a <_vfiprintf_r+0xfe>
 80055c0:	2300      	movs	r3, #0
 80055c2:	200a      	movs	r0, #10
 80055c4:	0019      	movs	r1, r3
 80055c6:	3601      	adds	r6, #1
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	7832      	ldrb	r2, [r6, #0]
 80055cc:	1c75      	adds	r5, r6, #1
 80055ce:	3a30      	subs	r2, #48	@ 0x30
 80055d0:	2a09      	cmp	r2, #9
 80055d2:	d903      	bls.n	80055dc <_vfiprintf_r+0x1d0>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0c8      	beq.n	800556a <_vfiprintf_r+0x15e>
 80055d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80055da:	e7c6      	b.n	800556a <_vfiprintf_r+0x15e>
 80055dc:	4341      	muls	r1, r0
 80055de:	002e      	movs	r6, r5
 80055e0:	2301      	movs	r3, #1
 80055e2:	1889      	adds	r1, r1, r2
 80055e4:	e7f1      	b.n	80055ca <_vfiprintf_r+0x1be>
 80055e6:	aa07      	add	r2, sp, #28
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	0021      	movs	r1, r4
 80055ec:	003a      	movs	r2, r7
 80055ee:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <_vfiprintf_r+0x234>)
 80055f0:	9803      	ldr	r0, [sp, #12]
 80055f2:	e000      	b.n	80055f6 <_vfiprintf_r+0x1ea>
 80055f4:	bf00      	nop
 80055f6:	9004      	str	r0, [sp, #16]
 80055f8:	9b04      	ldr	r3, [sp, #16]
 80055fa:	3301      	adds	r3, #1
 80055fc:	d1d6      	bne.n	80055ac <_vfiprintf_r+0x1a0>
 80055fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005600:	07db      	lsls	r3, r3, #31
 8005602:	d405      	bmi.n	8005610 <_vfiprintf_r+0x204>
 8005604:	89bb      	ldrh	r3, [r7, #12]
 8005606:	059b      	lsls	r3, r3, #22
 8005608:	d402      	bmi.n	8005610 <_vfiprintf_r+0x204>
 800560a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800560c:	f7ff fdd0 	bl	80051b0 <__retarget_lock_release_recursive>
 8005610:	89bb      	ldrh	r3, [r7, #12]
 8005612:	065b      	lsls	r3, r3, #25
 8005614:	d500      	bpl.n	8005618 <_vfiprintf_r+0x20c>
 8005616:	e71e      	b.n	8005456 <_vfiprintf_r+0x4a>
 8005618:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800561a:	e71e      	b.n	800545a <_vfiprintf_r+0x4e>
 800561c:	aa07      	add	r2, sp, #28
 800561e:	9200      	str	r2, [sp, #0]
 8005620:	0021      	movs	r1, r4
 8005622:	003a      	movs	r2, r7
 8005624:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <_vfiprintf_r+0x234>)
 8005626:	9803      	ldr	r0, [sp, #12]
 8005628:	f000 f87c 	bl	8005724 <_printf_i>
 800562c:	e7e3      	b.n	80055f6 <_vfiprintf_r+0x1ea>
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	0800648c 	.word	0x0800648c
 8005634:	08006492 	.word	0x08006492
 8005638:	08006496 	.word	0x08006496
 800563c:	00000000 	.word	0x00000000
 8005640:	080053e7 	.word	0x080053e7

08005644 <_printf_common>:
 8005644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005646:	0016      	movs	r6, r2
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	688a      	ldr	r2, [r1, #8]
 800564c:	690b      	ldr	r3, [r1, #16]
 800564e:	000c      	movs	r4, r1
 8005650:	9000      	str	r0, [sp, #0]
 8005652:	4293      	cmp	r3, r2
 8005654:	da00      	bge.n	8005658 <_printf_common+0x14>
 8005656:	0013      	movs	r3, r2
 8005658:	0022      	movs	r2, r4
 800565a:	6033      	str	r3, [r6, #0]
 800565c:	3243      	adds	r2, #67	@ 0x43
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	2a00      	cmp	r2, #0
 8005662:	d001      	beq.n	8005668 <_printf_common+0x24>
 8005664:	3301      	adds	r3, #1
 8005666:	6033      	str	r3, [r6, #0]
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	069b      	lsls	r3, r3, #26
 800566c:	d502      	bpl.n	8005674 <_printf_common+0x30>
 800566e:	6833      	ldr	r3, [r6, #0]
 8005670:	3302      	adds	r3, #2
 8005672:	6033      	str	r3, [r6, #0]
 8005674:	6822      	ldr	r2, [r4, #0]
 8005676:	2306      	movs	r3, #6
 8005678:	0015      	movs	r5, r2
 800567a:	401d      	ands	r5, r3
 800567c:	421a      	tst	r2, r3
 800567e:	d027      	beq.n	80056d0 <_printf_common+0x8c>
 8005680:	0023      	movs	r3, r4
 8005682:	3343      	adds	r3, #67	@ 0x43
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	1e5a      	subs	r2, r3, #1
 8005688:	4193      	sbcs	r3, r2
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	0692      	lsls	r2, r2, #26
 800568e:	d430      	bmi.n	80056f2 <_printf_common+0xae>
 8005690:	0022      	movs	r2, r4
 8005692:	9901      	ldr	r1, [sp, #4]
 8005694:	9800      	ldr	r0, [sp, #0]
 8005696:	9d08      	ldr	r5, [sp, #32]
 8005698:	3243      	adds	r2, #67	@ 0x43
 800569a:	47a8      	blx	r5
 800569c:	3001      	adds	r0, #1
 800569e:	d025      	beq.n	80056ec <_printf_common+0xa8>
 80056a0:	2206      	movs	r2, #6
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	2500      	movs	r5, #0
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d105      	bne.n	80056b8 <_printf_common+0x74>
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	68e5      	ldr	r5, [r4, #12]
 80056b0:	1aed      	subs	r5, r5, r3
 80056b2:	43eb      	mvns	r3, r5
 80056b4:	17db      	asrs	r3, r3, #31
 80056b6:	401d      	ands	r5, r3
 80056b8:	68a3      	ldr	r3, [r4, #8]
 80056ba:	6922      	ldr	r2, [r4, #16]
 80056bc:	4293      	cmp	r3, r2
 80056be:	dd01      	ble.n	80056c4 <_printf_common+0x80>
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	18ed      	adds	r5, r5, r3
 80056c4:	2600      	movs	r6, #0
 80056c6:	42b5      	cmp	r5, r6
 80056c8:	d120      	bne.n	800570c <_printf_common+0xc8>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e010      	b.n	80056f0 <_printf_common+0xac>
 80056ce:	3501      	adds	r5, #1
 80056d0:	68e3      	ldr	r3, [r4, #12]
 80056d2:	6832      	ldr	r2, [r6, #0]
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	42ab      	cmp	r3, r5
 80056d8:	ddd2      	ble.n	8005680 <_printf_common+0x3c>
 80056da:	0022      	movs	r2, r4
 80056dc:	2301      	movs	r3, #1
 80056de:	9901      	ldr	r1, [sp, #4]
 80056e0:	9800      	ldr	r0, [sp, #0]
 80056e2:	9f08      	ldr	r7, [sp, #32]
 80056e4:	3219      	adds	r2, #25
 80056e6:	47b8      	blx	r7
 80056e8:	3001      	adds	r0, #1
 80056ea:	d1f0      	bne.n	80056ce <_printf_common+0x8a>
 80056ec:	2001      	movs	r0, #1
 80056ee:	4240      	negs	r0, r0
 80056f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056f2:	2030      	movs	r0, #48	@ 0x30
 80056f4:	18e1      	adds	r1, r4, r3
 80056f6:	3143      	adds	r1, #67	@ 0x43
 80056f8:	7008      	strb	r0, [r1, #0]
 80056fa:	0021      	movs	r1, r4
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	3145      	adds	r1, #69	@ 0x45
 8005700:	7809      	ldrb	r1, [r1, #0]
 8005702:	18a2      	adds	r2, r4, r2
 8005704:	3243      	adds	r2, #67	@ 0x43
 8005706:	3302      	adds	r3, #2
 8005708:	7011      	strb	r1, [r2, #0]
 800570a:	e7c1      	b.n	8005690 <_printf_common+0x4c>
 800570c:	0022      	movs	r2, r4
 800570e:	2301      	movs	r3, #1
 8005710:	9901      	ldr	r1, [sp, #4]
 8005712:	9800      	ldr	r0, [sp, #0]
 8005714:	9f08      	ldr	r7, [sp, #32]
 8005716:	321a      	adds	r2, #26
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	d0e6      	beq.n	80056ec <_printf_common+0xa8>
 800571e:	3601      	adds	r6, #1
 8005720:	e7d1      	b.n	80056c6 <_printf_common+0x82>
	...

08005724 <_printf_i>:
 8005724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005726:	b08b      	sub	sp, #44	@ 0x2c
 8005728:	9206      	str	r2, [sp, #24]
 800572a:	000a      	movs	r2, r1
 800572c:	3243      	adds	r2, #67	@ 0x43
 800572e:	9307      	str	r3, [sp, #28]
 8005730:	9005      	str	r0, [sp, #20]
 8005732:	9203      	str	r2, [sp, #12]
 8005734:	7e0a      	ldrb	r2, [r1, #24]
 8005736:	000c      	movs	r4, r1
 8005738:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800573a:	2a78      	cmp	r2, #120	@ 0x78
 800573c:	d809      	bhi.n	8005752 <_printf_i+0x2e>
 800573e:	2a62      	cmp	r2, #98	@ 0x62
 8005740:	d80b      	bhi.n	800575a <_printf_i+0x36>
 8005742:	2a00      	cmp	r2, #0
 8005744:	d100      	bne.n	8005748 <_printf_i+0x24>
 8005746:	e0ba      	b.n	80058be <_printf_i+0x19a>
 8005748:	497a      	ldr	r1, [pc, #488]	@ (8005934 <_printf_i+0x210>)
 800574a:	9104      	str	r1, [sp, #16]
 800574c:	2a58      	cmp	r2, #88	@ 0x58
 800574e:	d100      	bne.n	8005752 <_printf_i+0x2e>
 8005750:	e08e      	b.n	8005870 <_printf_i+0x14c>
 8005752:	0025      	movs	r5, r4
 8005754:	3542      	adds	r5, #66	@ 0x42
 8005756:	702a      	strb	r2, [r5, #0]
 8005758:	e022      	b.n	80057a0 <_printf_i+0x7c>
 800575a:	0010      	movs	r0, r2
 800575c:	3863      	subs	r0, #99	@ 0x63
 800575e:	2815      	cmp	r0, #21
 8005760:	d8f7      	bhi.n	8005752 <_printf_i+0x2e>
 8005762:	f7fa fccf 	bl	8000104 <__gnu_thumb1_case_shi>
 8005766:	0016      	.short	0x0016
 8005768:	fff6001f 	.word	0xfff6001f
 800576c:	fff6fff6 	.word	0xfff6fff6
 8005770:	001ffff6 	.word	0x001ffff6
 8005774:	fff6fff6 	.word	0xfff6fff6
 8005778:	fff6fff6 	.word	0xfff6fff6
 800577c:	0036009f 	.word	0x0036009f
 8005780:	fff6007e 	.word	0xfff6007e
 8005784:	00b0fff6 	.word	0x00b0fff6
 8005788:	0036fff6 	.word	0x0036fff6
 800578c:	fff6fff6 	.word	0xfff6fff6
 8005790:	0082      	.short	0x0082
 8005792:	0025      	movs	r5, r4
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	3542      	adds	r5, #66	@ 0x42
 8005798:	1d11      	adds	r1, r2, #4
 800579a:	6019      	str	r1, [r3, #0]
 800579c:	6813      	ldr	r3, [r2, #0]
 800579e:	702b      	strb	r3, [r5, #0]
 80057a0:	2301      	movs	r3, #1
 80057a2:	e09e      	b.n	80058e2 <_printf_i+0x1be>
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	6809      	ldr	r1, [r1, #0]
 80057a8:	1d02      	adds	r2, r0, #4
 80057aa:	060d      	lsls	r5, r1, #24
 80057ac:	d50b      	bpl.n	80057c6 <_printf_i+0xa2>
 80057ae:	6806      	ldr	r6, [r0, #0]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	da03      	bge.n	80057be <_printf_i+0x9a>
 80057b6:	232d      	movs	r3, #45	@ 0x2d
 80057b8:	9a03      	ldr	r2, [sp, #12]
 80057ba:	4276      	negs	r6, r6
 80057bc:	7013      	strb	r3, [r2, #0]
 80057be:	4b5d      	ldr	r3, [pc, #372]	@ (8005934 <_printf_i+0x210>)
 80057c0:	270a      	movs	r7, #10
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	e018      	b.n	80057f8 <_printf_i+0xd4>
 80057c6:	6806      	ldr	r6, [r0, #0]
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	0649      	lsls	r1, r1, #25
 80057cc:	d5f1      	bpl.n	80057b2 <_printf_i+0x8e>
 80057ce:	b236      	sxth	r6, r6
 80057d0:	e7ef      	b.n	80057b2 <_printf_i+0x8e>
 80057d2:	6808      	ldr	r0, [r1, #0]
 80057d4:	6819      	ldr	r1, [r3, #0]
 80057d6:	c940      	ldmia	r1!, {r6}
 80057d8:	0605      	lsls	r5, r0, #24
 80057da:	d402      	bmi.n	80057e2 <_printf_i+0xbe>
 80057dc:	0640      	lsls	r0, r0, #25
 80057de:	d500      	bpl.n	80057e2 <_printf_i+0xbe>
 80057e0:	b2b6      	uxth	r6, r6
 80057e2:	6019      	str	r1, [r3, #0]
 80057e4:	4b53      	ldr	r3, [pc, #332]	@ (8005934 <_printf_i+0x210>)
 80057e6:	270a      	movs	r7, #10
 80057e8:	9304      	str	r3, [sp, #16]
 80057ea:	2a6f      	cmp	r2, #111	@ 0x6f
 80057ec:	d100      	bne.n	80057f0 <_printf_i+0xcc>
 80057ee:	3f02      	subs	r7, #2
 80057f0:	0023      	movs	r3, r4
 80057f2:	2200      	movs	r2, #0
 80057f4:	3343      	adds	r3, #67	@ 0x43
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	6863      	ldr	r3, [r4, #4]
 80057fa:	60a3      	str	r3, [r4, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	db06      	blt.n	800580e <_printf_i+0xea>
 8005800:	2104      	movs	r1, #4
 8005802:	6822      	ldr	r2, [r4, #0]
 8005804:	9d03      	ldr	r5, [sp, #12]
 8005806:	438a      	bics	r2, r1
 8005808:	6022      	str	r2, [r4, #0]
 800580a:	4333      	orrs	r3, r6
 800580c:	d00c      	beq.n	8005828 <_printf_i+0x104>
 800580e:	9d03      	ldr	r5, [sp, #12]
 8005810:	0030      	movs	r0, r6
 8005812:	0039      	movs	r1, r7
 8005814:	f7fa fd06 	bl	8000224 <__aeabi_uidivmod>
 8005818:	9b04      	ldr	r3, [sp, #16]
 800581a:	3d01      	subs	r5, #1
 800581c:	5c5b      	ldrb	r3, [r3, r1]
 800581e:	702b      	strb	r3, [r5, #0]
 8005820:	0033      	movs	r3, r6
 8005822:	0006      	movs	r6, r0
 8005824:	429f      	cmp	r7, r3
 8005826:	d9f3      	bls.n	8005810 <_printf_i+0xec>
 8005828:	2f08      	cmp	r7, #8
 800582a:	d109      	bne.n	8005840 <_printf_i+0x11c>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	07db      	lsls	r3, r3, #31
 8005830:	d506      	bpl.n	8005840 <_printf_i+0x11c>
 8005832:	6862      	ldr	r2, [r4, #4]
 8005834:	6923      	ldr	r3, [r4, #16]
 8005836:	429a      	cmp	r2, r3
 8005838:	dc02      	bgt.n	8005840 <_printf_i+0x11c>
 800583a:	2330      	movs	r3, #48	@ 0x30
 800583c:	3d01      	subs	r5, #1
 800583e:	702b      	strb	r3, [r5, #0]
 8005840:	9b03      	ldr	r3, [sp, #12]
 8005842:	1b5b      	subs	r3, r3, r5
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	9b07      	ldr	r3, [sp, #28]
 8005848:	0021      	movs	r1, r4
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	9805      	ldr	r0, [sp, #20]
 800584e:	9b06      	ldr	r3, [sp, #24]
 8005850:	aa09      	add	r2, sp, #36	@ 0x24
 8005852:	f7ff fef7 	bl	8005644 <_printf_common>
 8005856:	3001      	adds	r0, #1
 8005858:	d148      	bne.n	80058ec <_printf_i+0x1c8>
 800585a:	2001      	movs	r0, #1
 800585c:	4240      	negs	r0, r0
 800585e:	b00b      	add	sp, #44	@ 0x2c
 8005860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005862:	2220      	movs	r2, #32
 8005864:	6809      	ldr	r1, [r1, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	6022      	str	r2, [r4, #0]
 800586a:	2278      	movs	r2, #120	@ 0x78
 800586c:	4932      	ldr	r1, [pc, #200]	@ (8005938 <_printf_i+0x214>)
 800586e:	9104      	str	r1, [sp, #16]
 8005870:	0021      	movs	r1, r4
 8005872:	3145      	adds	r1, #69	@ 0x45
 8005874:	700a      	strb	r2, [r1, #0]
 8005876:	6819      	ldr	r1, [r3, #0]
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	c940      	ldmia	r1!, {r6}
 800587c:	0610      	lsls	r0, r2, #24
 800587e:	d402      	bmi.n	8005886 <_printf_i+0x162>
 8005880:	0650      	lsls	r0, r2, #25
 8005882:	d500      	bpl.n	8005886 <_printf_i+0x162>
 8005884:	b2b6      	uxth	r6, r6
 8005886:	6019      	str	r1, [r3, #0]
 8005888:	07d3      	lsls	r3, r2, #31
 800588a:	d502      	bpl.n	8005892 <_printf_i+0x16e>
 800588c:	2320      	movs	r3, #32
 800588e:	4313      	orrs	r3, r2
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	2e00      	cmp	r6, #0
 8005894:	d001      	beq.n	800589a <_printf_i+0x176>
 8005896:	2710      	movs	r7, #16
 8005898:	e7aa      	b.n	80057f0 <_printf_i+0xcc>
 800589a:	2220      	movs	r2, #32
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	4393      	bics	r3, r2
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	e7f8      	b.n	8005896 <_printf_i+0x172>
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	680d      	ldr	r5, [r1, #0]
 80058a8:	1d10      	adds	r0, r2, #4
 80058aa:	6949      	ldr	r1, [r1, #20]
 80058ac:	6018      	str	r0, [r3, #0]
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	062e      	lsls	r6, r5, #24
 80058b2:	d501      	bpl.n	80058b8 <_printf_i+0x194>
 80058b4:	6019      	str	r1, [r3, #0]
 80058b6:	e002      	b.n	80058be <_printf_i+0x19a>
 80058b8:	066d      	lsls	r5, r5, #25
 80058ba:	d5fb      	bpl.n	80058b4 <_printf_i+0x190>
 80058bc:	8019      	strh	r1, [r3, #0]
 80058be:	2300      	movs	r3, #0
 80058c0:	9d03      	ldr	r5, [sp, #12]
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	e7bf      	b.n	8005846 <_printf_i+0x122>
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	1d11      	adds	r1, r2, #4
 80058ca:	6019      	str	r1, [r3, #0]
 80058cc:	6815      	ldr	r5, [r2, #0]
 80058ce:	2100      	movs	r1, #0
 80058d0:	0028      	movs	r0, r5
 80058d2:	6862      	ldr	r2, [r4, #4]
 80058d4:	f000 f986 	bl	8005be4 <memchr>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d001      	beq.n	80058e0 <_printf_i+0x1bc>
 80058dc:	1b40      	subs	r0, r0, r5
 80058de:	6060      	str	r0, [r4, #4]
 80058e0:	6863      	ldr	r3, [r4, #4]
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	2300      	movs	r3, #0
 80058e6:	9a03      	ldr	r2, [sp, #12]
 80058e8:	7013      	strb	r3, [r2, #0]
 80058ea:	e7ac      	b.n	8005846 <_printf_i+0x122>
 80058ec:	002a      	movs	r2, r5
 80058ee:	6923      	ldr	r3, [r4, #16]
 80058f0:	9906      	ldr	r1, [sp, #24]
 80058f2:	9805      	ldr	r0, [sp, #20]
 80058f4:	9d07      	ldr	r5, [sp, #28]
 80058f6:	47a8      	blx	r5
 80058f8:	3001      	adds	r0, #1
 80058fa:	d0ae      	beq.n	800585a <_printf_i+0x136>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	079b      	lsls	r3, r3, #30
 8005900:	d415      	bmi.n	800592e <_printf_i+0x20a>
 8005902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005904:	68e0      	ldr	r0, [r4, #12]
 8005906:	4298      	cmp	r0, r3
 8005908:	daa9      	bge.n	800585e <_printf_i+0x13a>
 800590a:	0018      	movs	r0, r3
 800590c:	e7a7      	b.n	800585e <_printf_i+0x13a>
 800590e:	0022      	movs	r2, r4
 8005910:	2301      	movs	r3, #1
 8005912:	9906      	ldr	r1, [sp, #24]
 8005914:	9805      	ldr	r0, [sp, #20]
 8005916:	9e07      	ldr	r6, [sp, #28]
 8005918:	3219      	adds	r2, #25
 800591a:	47b0      	blx	r6
 800591c:	3001      	adds	r0, #1
 800591e:	d09c      	beq.n	800585a <_printf_i+0x136>
 8005920:	3501      	adds	r5, #1
 8005922:	68e3      	ldr	r3, [r4, #12]
 8005924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	42ab      	cmp	r3, r5
 800592a:	dcf0      	bgt.n	800590e <_printf_i+0x1ea>
 800592c:	e7e9      	b.n	8005902 <_printf_i+0x1de>
 800592e:	2500      	movs	r5, #0
 8005930:	e7f7      	b.n	8005922 <_printf_i+0x1fe>
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	0800649d 	.word	0x0800649d
 8005938:	080064ae 	.word	0x080064ae

0800593c <__sflush_r>:
 800593c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800593e:	220c      	movs	r2, #12
 8005940:	5e8b      	ldrsh	r3, [r1, r2]
 8005942:	0005      	movs	r5, r0
 8005944:	000c      	movs	r4, r1
 8005946:	071a      	lsls	r2, r3, #28
 8005948:	d456      	bmi.n	80059f8 <__sflush_r+0xbc>
 800594a:	684a      	ldr	r2, [r1, #4]
 800594c:	2a00      	cmp	r2, #0
 800594e:	dc02      	bgt.n	8005956 <__sflush_r+0x1a>
 8005950:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005952:	2a00      	cmp	r2, #0
 8005954:	dd4e      	ble.n	80059f4 <__sflush_r+0xb8>
 8005956:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005958:	2f00      	cmp	r7, #0
 800595a:	d04b      	beq.n	80059f4 <__sflush_r+0xb8>
 800595c:	2200      	movs	r2, #0
 800595e:	2080      	movs	r0, #128	@ 0x80
 8005960:	682e      	ldr	r6, [r5, #0]
 8005962:	602a      	str	r2, [r5, #0]
 8005964:	001a      	movs	r2, r3
 8005966:	0140      	lsls	r0, r0, #5
 8005968:	6a21      	ldr	r1, [r4, #32]
 800596a:	4002      	ands	r2, r0
 800596c:	4203      	tst	r3, r0
 800596e:	d033      	beq.n	80059d8 <__sflush_r+0x9c>
 8005970:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	075b      	lsls	r3, r3, #29
 8005976:	d506      	bpl.n	8005986 <__sflush_r+0x4a>
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	1ad2      	subs	r2, r2, r3
 800597c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <__sflush_r+0x4a>
 8005982:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005984:	1ad2      	subs	r2, r2, r3
 8005986:	2300      	movs	r3, #0
 8005988:	0028      	movs	r0, r5
 800598a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800598c:	6a21      	ldr	r1, [r4, #32]
 800598e:	47b8      	blx	r7
 8005990:	89a2      	ldrh	r2, [r4, #12]
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	d106      	bne.n	80059a4 <__sflush_r+0x68>
 8005996:	6829      	ldr	r1, [r5, #0]
 8005998:	291d      	cmp	r1, #29
 800599a:	d846      	bhi.n	8005a2a <__sflush_r+0xee>
 800599c:	4b29      	ldr	r3, [pc, #164]	@ (8005a44 <__sflush_r+0x108>)
 800599e:	40cb      	lsrs	r3, r1
 80059a0:	07db      	lsls	r3, r3, #31
 80059a2:	d542      	bpl.n	8005a2a <__sflush_r+0xee>
 80059a4:	2300      	movs	r3, #0
 80059a6:	6063      	str	r3, [r4, #4]
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	04d2      	lsls	r2, r2, #19
 80059ae:	d505      	bpl.n	80059bc <__sflush_r+0x80>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <__sflush_r+0x7e>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d100      	bne.n	80059bc <__sflush_r+0x80>
 80059ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80059bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059be:	602e      	str	r6, [r5, #0]
 80059c0:	2900      	cmp	r1, #0
 80059c2:	d017      	beq.n	80059f4 <__sflush_r+0xb8>
 80059c4:	0023      	movs	r3, r4
 80059c6:	3344      	adds	r3, #68	@ 0x44
 80059c8:	4299      	cmp	r1, r3
 80059ca:	d002      	beq.n	80059d2 <__sflush_r+0x96>
 80059cc:	0028      	movs	r0, r5
 80059ce:	f7ff fbf9 	bl	80051c4 <_free_r>
 80059d2:	2300      	movs	r3, #0
 80059d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80059d6:	e00d      	b.n	80059f4 <__sflush_r+0xb8>
 80059d8:	2301      	movs	r3, #1
 80059da:	0028      	movs	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	0002      	movs	r2, r0
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d1c6      	bne.n	8005972 <__sflush_r+0x36>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0c3      	beq.n	8005972 <__sflush_r+0x36>
 80059ea:	2b1d      	cmp	r3, #29
 80059ec:	d001      	beq.n	80059f2 <__sflush_r+0xb6>
 80059ee:	2b16      	cmp	r3, #22
 80059f0:	d11a      	bne.n	8005a28 <__sflush_r+0xec>
 80059f2:	602e      	str	r6, [r5, #0]
 80059f4:	2000      	movs	r0, #0
 80059f6:	e01e      	b.n	8005a36 <__sflush_r+0xfa>
 80059f8:	690e      	ldr	r6, [r1, #16]
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d0fa      	beq.n	80059f4 <__sflush_r+0xb8>
 80059fe:	680f      	ldr	r7, [r1, #0]
 8005a00:	600e      	str	r6, [r1, #0]
 8005a02:	1bba      	subs	r2, r7, r6
 8005a04:	9201      	str	r2, [sp, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	079b      	lsls	r3, r3, #30
 8005a0a:	d100      	bne.n	8005a0e <__sflush_r+0xd2>
 8005a0c:	694a      	ldr	r2, [r1, #20]
 8005a0e:	60a2      	str	r2, [r4, #8]
 8005a10:	9b01      	ldr	r3, [sp, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	ddee      	ble.n	80059f4 <__sflush_r+0xb8>
 8005a16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005a18:	0032      	movs	r2, r6
 8005a1a:	001f      	movs	r7, r3
 8005a1c:	0028      	movs	r0, r5
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	6a21      	ldr	r1, [r4, #32]
 8005a22:	47b8      	blx	r7
 8005a24:	2800      	cmp	r0, #0
 8005a26:	dc07      	bgt.n	8005a38 <__sflush_r+0xfc>
 8005a28:	89a2      	ldrh	r2, [r4, #12]
 8005a2a:	2340      	movs	r3, #64	@ 0x40
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b21b      	sxth	r3, r3
 8005a32:	81a3      	strh	r3, [r4, #12]
 8005a34:	4240      	negs	r0, r0
 8005a36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a38:	9b01      	ldr	r3, [sp, #4]
 8005a3a:	1836      	adds	r6, r6, r0
 8005a3c:	1a1b      	subs	r3, r3, r0
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	e7e6      	b.n	8005a10 <__sflush_r+0xd4>
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	20400001 	.word	0x20400001

08005a48 <_fflush_r>:
 8005a48:	690b      	ldr	r3, [r1, #16]
 8005a4a:	b570      	push	{r4, r5, r6, lr}
 8005a4c:	0005      	movs	r5, r0
 8005a4e:	000c      	movs	r4, r1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <_fflush_r+0x12>
 8005a54:	2500      	movs	r5, #0
 8005a56:	0028      	movs	r0, r5
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d004      	beq.n	8005a68 <_fflush_r+0x20>
 8005a5e:	6a03      	ldr	r3, [r0, #32]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <_fflush_r+0x20>
 8005a64:	f7ff f992 	bl	8004d8c <__sinit>
 8005a68:	220c      	movs	r2, #12
 8005a6a:	5ea3      	ldrsh	r3, [r4, r2]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f1      	beq.n	8005a54 <_fflush_r+0xc>
 8005a70:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a72:	07d2      	lsls	r2, r2, #31
 8005a74:	d404      	bmi.n	8005a80 <_fflush_r+0x38>
 8005a76:	059b      	lsls	r3, r3, #22
 8005a78:	d402      	bmi.n	8005a80 <_fflush_r+0x38>
 8005a7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a7c:	f7ff fb97 	bl	80051ae <__retarget_lock_acquire_recursive>
 8005a80:	0028      	movs	r0, r5
 8005a82:	0021      	movs	r1, r4
 8005a84:	f7ff ff5a 	bl	800593c <__sflush_r>
 8005a88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a8a:	0005      	movs	r5, r0
 8005a8c:	07db      	lsls	r3, r3, #31
 8005a8e:	d4e2      	bmi.n	8005a56 <_fflush_r+0xe>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	059b      	lsls	r3, r3, #22
 8005a94:	d4df      	bmi.n	8005a56 <_fflush_r+0xe>
 8005a96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a98:	f7ff fb8a 	bl	80051b0 <__retarget_lock_release_recursive>
 8005a9c:	e7db      	b.n	8005a56 <_fflush_r+0xe>
	...

08005aa0 <__swhatbuf_r>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	000e      	movs	r6, r1
 8005aa4:	001d      	movs	r5, r3
 8005aa6:	230e      	movs	r3, #14
 8005aa8:	5ec9      	ldrsh	r1, [r1, r3]
 8005aaa:	0014      	movs	r4, r2
 8005aac:	b096      	sub	sp, #88	@ 0x58
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	da0c      	bge.n	8005acc <__swhatbuf_r+0x2c>
 8005ab2:	89b2      	ldrh	r2, [r6, #12]
 8005ab4:	2380      	movs	r3, #128	@ 0x80
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	4019      	ands	r1, r3
 8005aba:	421a      	tst	r2, r3
 8005abc:	d114      	bne.n	8005ae8 <__swhatbuf_r+0x48>
 8005abe:	2380      	movs	r3, #128	@ 0x80
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	6029      	str	r1, [r5, #0]
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	b016      	add	sp, #88	@ 0x58
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	466a      	mov	r2, sp
 8005ace:	f000 f853 	bl	8005b78 <_fstat_r>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	dbed      	blt.n	8005ab2 <__swhatbuf_r+0x12>
 8005ad6:	23f0      	movs	r3, #240	@ 0xf0
 8005ad8:	9901      	ldr	r1, [sp, #4]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	4019      	ands	r1, r3
 8005ade:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <__swhatbuf_r+0x50>)
 8005ae0:	18c9      	adds	r1, r1, r3
 8005ae2:	424b      	negs	r3, r1
 8005ae4:	4159      	adcs	r1, r3
 8005ae6:	e7ea      	b.n	8005abe <__swhatbuf_r+0x1e>
 8005ae8:	2100      	movs	r1, #0
 8005aea:	2340      	movs	r3, #64	@ 0x40
 8005aec:	e7e9      	b.n	8005ac2 <__swhatbuf_r+0x22>
 8005aee:	46c0      	nop			@ (mov r8, r8)
 8005af0:	ffffe000 	.word	0xffffe000

08005af4 <__smakebuf_r>:
 8005af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af6:	2602      	movs	r6, #2
 8005af8:	898b      	ldrh	r3, [r1, #12]
 8005afa:	0005      	movs	r5, r0
 8005afc:	000c      	movs	r4, r1
 8005afe:	b085      	sub	sp, #20
 8005b00:	4233      	tst	r3, r6
 8005b02:	d007      	beq.n	8005b14 <__smakebuf_r+0x20>
 8005b04:	0023      	movs	r3, r4
 8005b06:	3347      	adds	r3, #71	@ 0x47
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	6123      	str	r3, [r4, #16]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	6163      	str	r3, [r4, #20]
 8005b10:	b005      	add	sp, #20
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b14:	ab03      	add	r3, sp, #12
 8005b16:	aa02      	add	r2, sp, #8
 8005b18:	f7ff ffc2 	bl	8005aa0 <__swhatbuf_r>
 8005b1c:	9f02      	ldr	r7, [sp, #8]
 8005b1e:	9001      	str	r0, [sp, #4]
 8005b20:	0039      	movs	r1, r7
 8005b22:	0028      	movs	r0, r5
 8005b24:	f7ff fbba 	bl	800529c <_malloc_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d108      	bne.n	8005b3e <__smakebuf_r+0x4a>
 8005b2c:	220c      	movs	r2, #12
 8005b2e:	5ea3      	ldrsh	r3, [r4, r2]
 8005b30:	059a      	lsls	r2, r3, #22
 8005b32:	d4ed      	bmi.n	8005b10 <__smakebuf_r+0x1c>
 8005b34:	2203      	movs	r2, #3
 8005b36:	4393      	bics	r3, r2
 8005b38:	431e      	orrs	r6, r3
 8005b3a:	81a6      	strh	r6, [r4, #12]
 8005b3c:	e7e2      	b.n	8005b04 <__smakebuf_r+0x10>
 8005b3e:	2380      	movs	r3, #128	@ 0x80
 8005b40:	89a2      	ldrh	r2, [r4, #12]
 8005b42:	6020      	str	r0, [r4, #0]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	6120      	str	r0, [r4, #16]
 8005b4c:	6167      	str	r7, [r4, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00c      	beq.n	8005b6c <__smakebuf_r+0x78>
 8005b52:	0028      	movs	r0, r5
 8005b54:	230e      	movs	r3, #14
 8005b56:	5ee1      	ldrsh	r1, [r4, r3]
 8005b58:	f000 f820 	bl	8005b9c <_isatty_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d005      	beq.n	8005b6c <__smakebuf_r+0x78>
 8005b60:	2303      	movs	r3, #3
 8005b62:	89a2      	ldrh	r2, [r4, #12]
 8005b64:	439a      	bics	r2, r3
 8005b66:	3b02      	subs	r3, #2
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	9a01      	ldr	r2, [sp, #4]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	e7cc      	b.n	8005b10 <__smakebuf_r+0x1c>
	...

08005b78 <_fstat_r>:
 8005b78:	2300      	movs	r3, #0
 8005b7a:	b570      	push	{r4, r5, r6, lr}
 8005b7c:	4d06      	ldr	r5, [pc, #24]	@ (8005b98 <_fstat_r+0x20>)
 8005b7e:	0004      	movs	r4, r0
 8005b80:	0008      	movs	r0, r1
 8005b82:	0011      	movs	r1, r2
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	f7fc fecf 	bl	8002928 <_fstat>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d103      	bne.n	8005b96 <_fstat_r+0x1e>
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d000      	beq.n	8005b96 <_fstat_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	2000042c 	.word	0x2000042c

08005b9c <_isatty_r>:
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	b570      	push	{r4, r5, r6, lr}
 8005ba0:	4d06      	ldr	r5, [pc, #24]	@ (8005bbc <_isatty_r+0x20>)
 8005ba2:	0004      	movs	r4, r0
 8005ba4:	0008      	movs	r0, r1
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fc fecc 	bl	8002944 <_isatty>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d103      	bne.n	8005bb8 <_isatty_r+0x1c>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d000      	beq.n	8005bb8 <_isatty_r+0x1c>
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	2000042c 	.word	0x2000042c

08005bc0 <_sbrk_r>:
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	b570      	push	{r4, r5, r6, lr}
 8005bc4:	4d06      	ldr	r5, [pc, #24]	@ (8005be0 <_sbrk_r+0x20>)
 8005bc6:	0004      	movs	r4, r0
 8005bc8:	0008      	movs	r0, r1
 8005bca:	602b      	str	r3, [r5, #0]
 8005bcc:	f7fc fece 	bl	800296c <_sbrk>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d103      	bne.n	8005bdc <_sbrk_r+0x1c>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d000      	beq.n	8005bdc <_sbrk_r+0x1c>
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	bd70      	pop	{r4, r5, r6, pc}
 8005bde:	46c0      	nop			@ (mov r8, r8)
 8005be0:	2000042c 	.word	0x2000042c

08005be4 <memchr>:
 8005be4:	b2c9      	uxtb	r1, r1
 8005be6:	1882      	adds	r2, r0, r2
 8005be8:	4290      	cmp	r0, r2
 8005bea:	d101      	bne.n	8005bf0 <memchr+0xc>
 8005bec:	2000      	movs	r0, #0
 8005bee:	4770      	bx	lr
 8005bf0:	7803      	ldrb	r3, [r0, #0]
 8005bf2:	428b      	cmp	r3, r1
 8005bf4:	d0fb      	beq.n	8005bee <memchr+0xa>
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	e7f6      	b.n	8005be8 <memchr+0x4>
	...

08005bfc <_init>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr

08005c08 <_fini>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	46c0      	nop			@ (mov r8, r8)
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr
