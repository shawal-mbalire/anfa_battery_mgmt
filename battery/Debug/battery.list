
battery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f84  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003040  08003040  00004040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003080  08003080  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003080  08003080  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003080  08003080  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003084  08003084  00004084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003088  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003094  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003094  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009863  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0d  00000000  00000000  0000e897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  000104a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000722  00000000  00000000  00010e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acf4  00000000  00000000  0001153a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd7a  00000000  00000000  0002c22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aab44  00000000  00000000  00038fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3aec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002038  00000000  00000000  000e3b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e5b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003028 	.word	0x08003028

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003028 	.word	0x08003028

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <BQ25798_init>:
 *  Created on: Aug 21, 2025
 *      Author: shawal
 */
#include "bq25798.h"

uint8_t  BQ25798_init(BQ25798 *device, I2C_HandleTypeDef *i2cHandle){
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	@ 0x24
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]

	// set struct params
	device -> i2cHandle   = i2cHandle;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	601a      	str	r2, [r3, #0]

	uint8_t errorsNumber = 0;
 800022c:	251f      	movs	r5, #31
 800022e:	197b      	adds	r3, r7, r5
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	// check device part number
	uint8_t registerData;
	status = BQ25798_ReadRegister(device, BQ25798_PART_INFO_REG_VALUE, &registerData);
 8000234:	261e      	movs	r6, #30
 8000236:	19bc      	adds	r4, r7, r6
 8000238:	231d      	movs	r3, #29
 800023a:	18fa      	adds	r2, r7, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2131      	movs	r1, #49	@ 0x31
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fb24 	bl	800088e <BQ25798_ReadRegister>
 8000246:	0003      	movs	r3, r0
 8000248:	7023      	strb	r3, [r4, #0]
	errorsNumber += (status != HAL_OK);
 800024a:	19bb      	adds	r3, r7, r6
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	1e5a      	subs	r2, r3, #1
 8000250:	4193      	sbcs	r3, r2
 8000252:	b2db      	uxtb	r3, r3
 8000254:	0019      	movs	r1, r3
 8000256:	197b      	adds	r3, r7, r5
 8000258:	197a      	adds	r2, r7, r5
 800025a:	7812      	ldrb	r2, [r2, #0]
 800025c:	188a      	adds	r2, r1, r2
 800025e:	701a      	strb	r2, [r3, #0]
	if (registerData != BQ25798_PART_INFO_REG_VALUE) return 255;
 8000260:	231d      	movs	r3, #29
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b31      	cmp	r3, #49	@ 0x31
 8000268:	d001      	beq.n	800026e <BQ25798_init+0x52>
 800026a:	23ff      	movs	r3, #255	@ 0xff
 800026c:	e063      	b.n	8000336 <BQ25798_init+0x11a>

	registerData = 0xD1; // cells 4s, Reacharge voltage deglitch 256ms, recharge voltage 100mV below VREG
 800026e:	241d      	movs	r4, #29
 8000270:	193b      	adds	r3, r7, r4
 8000272:	22d1      	movs	r2, #209	@ 0xd1
 8000274:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device,BQ25798_REG_RECHARGE_CTRL, &registerData);
 8000276:	193a      	adds	r2, r7, r4
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	210a      	movs	r1, #10
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fb4b 	bl	8000918 <BQ25798_WriteRegister>
	registerData = 0x10; // disable watchdog, enable host mode, i2c wathdog reset on
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2210      	movs	r2, #16
 8000286:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGER_CTRL_1, &registerData);
 8000288:	193a      	adds	r2, r7, r4
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2110      	movs	r1, #16
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fb42 	bl	8000918 <BQ25798_WriteRegister>

    // set limits Implemented at POR power on reset
	BQ25798_WriteRegister(device, BQ25798_REG_MIN_SYS_VOLTAGE, (uint8_t[]){0x70}); // 14500mV
 8000294:	211c      	movs	r1, #28
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2270      	movs	r2, #112	@ 0x70
 800029a:	701a      	strb	r2, [r3, #0]
 800029c:	187a      	adds	r2, r7, r1
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fb38 	bl	8000918 <BQ25798_WriteRegister>
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGE_VOLTAGE_LIMIT, (uint8_t[]){0x05B4}); // 14600mV
 80002a8:	2118      	movs	r1, #24
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	22b4      	movs	r2, #180	@ 0xb4
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	187a      	adds	r2, r7, r1
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fb2e 	bl	8000918 <BQ25798_WriteRegister>
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGE_CURRENT_LIMIT, (uint8_t[]){0x03F4}); // 3650mA
 80002bc:	2114      	movs	r1, #20
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	22f4      	movs	r2, #244	@ 0xf4
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	187a      	adds	r2, r7, r1
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2103      	movs	r1, #3
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fb24 	bl	8000918 <BQ25798_WriteRegister>
	BQ25798_WriteRegister(device, BQ25798_REG_INPUT_VOLTAGE_LIMIT, (uint8_t[]){0x24}); // 3600mV
 80002d0:	2110      	movs	r1, #16
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2224      	movs	r2, #36	@ 0x24
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	187a      	adds	r2, r7, r1
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2105      	movs	r1, #5
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fb1a 	bl	8000918 <BQ25798_WriteRegister>
	BQ25798_WriteRegister(device, BQ25798_REG_INPUT_CURRENT_LIMIT, (uint8_t[]){0x14A}); //3300mA
 80002e4:	210c      	movs	r1, #12
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	224a      	movs	r2, #74	@ 0x4a
 80002ea:	701a      	strb	r2, [r3, #0]
 80002ec:	187a      	adds	r2, r7, r1
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2106      	movs	r1, #6
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fb10 	bl	8000918 <BQ25798_WriteRegister>

    // TODO: configure ADCs and enable other things
	// all ADCs on by default
	// precharge current 120mA
	BQ25798_WriteRegister(device, BQ25798_REG_PRECHARGE_CTRL, (uint8_t[]){0x03});
 80002f8:	2108      	movs	r1, #8
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2203      	movs	r2, #3
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	187a      	adds	r2, r7, r1
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2108      	movs	r1, #8
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fb06 	bl	8000918 <BQ25798_WriteRegister>
	// charger control 0 ICO and HiZ on
	registerData = 0x8C; // enable charger, HIZ off, IIN
 800030c:	193b      	adds	r3, r7, r4
 800030e:	228c      	movs	r2, #140	@ 0x8c
 8000310:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_CHARGER_CTRL_0, &registerData);
 8000312:	193a      	adds	r2, r7, r4
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	210f      	movs	r1, #15
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fafd 	bl	8000918 <BQ25798_WriteRegister>
	// ADC control
	registerData = 0x80; // all ADCs on
 800031e:	193b      	adds	r3, r7, r4
 8000320:	2280      	movs	r2, #128	@ 0x80
 8000322:	701a      	strb	r2, [r3, #0]
	BQ25798_WriteRegister(device, BQ25798_REG_ADC_CTRL, &registerData);
 8000324:	193a      	adds	r2, r7, r4
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	212e      	movs	r1, #46	@ 0x2e
 800032a:	0018      	movs	r0, r3
 800032c:	f000 faf4 	bl	8000918 <BQ25798_WriteRegister>


	return errorsNumber;
 8000330:	231f      	movs	r3, #31
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	781b      	ldrb	r3, [r3, #0]
}
 8000336:	0018      	movs	r0, r3
 8000338:	46bd      	mov	sp, r7
 800033a:	b009      	add	sp, #36	@ 0x24
 800033c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800033e <readChargerStatus0>:

// Read and interpret REG1B_Charger_Status_0
HAL_StatusTypeDef readChargerStatus0(BQ25798 *device, uint8_t *status){
 800033e:	b5b0      	push	{r4, r5, r7, lr}
 8000340:	b084      	sub	sp, #16
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_0, status);
 8000348:	250f      	movs	r5, #15
 800034a:	197c      	adds	r4, r7, r5
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	211b      	movs	r1, #27
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fa9b 	bl	800088e <BQ25798_ReadRegister>
 8000358:	0003      	movs	r3, r0
 800035a:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 800035c:	197b      	adds	r3, r7, r5
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d139      	bne.n	80003d8 <readChargerStatus0+0x9a>
        device->chargerStatus0.iindpm_stat       = (*status >> 7) & 0x01;
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	09db      	lsrs	r3, r3, #7
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	731a      	strb	r2, [r3, #12]
        device->chargerStatus0.vindpm_stat       = (*status >> 6) & 0x01;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	099b      	lsrs	r3, r3, #6
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2201      	movs	r2, #1
 800037a:	4013      	ands	r3, r2
 800037c:	b2da      	uxtb	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	735a      	strb	r2, [r3, #13]
        device->chargerStatus0.wd_stat           = (*status >> 5) & 0x01;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	095b      	lsrs	r3, r3, #5
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2201      	movs	r2, #1
 800038c:	4013      	ands	r3, r2
 800038e:	b2da      	uxtb	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	739a      	strb	r2, [r3, #14]
        device->chargerStatus0.pg_stat           = (*status >> 3) & 0x01;
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	08db      	lsrs	r3, r3, #3
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2201      	movs	r2, #1
 800039e:	4013      	ands	r3, r2
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	73da      	strb	r2, [r3, #15]
        device->chargerStatus0.ac2_present_stat  = (*status >> 2) & 0x01;
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	089b      	lsrs	r3, r3, #2
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	2201      	movs	r2, #1
 80003b0:	4013      	ands	r3, r2
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	741a      	strb	r2, [r3, #16]
        device->chargerStatus0.ac1_present_stat  = (*status >> 1) & 0x01;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	085b      	lsrs	r3, r3, #1
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	2201      	movs	r2, #1
 80003c2:	4013      	ands	r3, r2
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	745a      	strb	r2, [r3, #17]
        device->chargerStatus0.vbus_present_stat = (*status >> 0) & 0x01;
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2201      	movs	r2, #1
 80003d0:	4013      	ands	r3, r2
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	749a      	strb	r2, [r3, #18]
    }
    return ret_val;
 80003d8:	230f      	movs	r3, #15
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	781b      	ldrb	r3, [r3, #0]
}
 80003de:	0018      	movs	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b004      	add	sp, #16
 80003e4:	bdb0      	pop	{r4, r5, r7, pc}

080003e6 <readChargerStatus1>:

// Read and interpret REG1C_Charger_Status_1
HAL_StatusTypeDef readChargerStatus1(BQ25798 *device, uint8_t *status){
 80003e6:	b5b0      	push	{r4, r5, r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_1, status);
 80003f0:	250f      	movs	r5, #15
 80003f2:	197c      	adds	r4, r7, r5
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	211c      	movs	r1, #28
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fa47 	bl	800088e <BQ25798_ReadRegister>
 8000400:	0003      	movs	r3, r0
 8000402:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000404:	197b      	adds	r3, r7, r5
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d115      	bne.n	8000438 <readChargerStatus1+0x52>
        device->chargerStatus1.chg_stat        = (*status >> 5) & 0x07;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	095b      	lsrs	r3, r3, #5
 8000412:	b2da      	uxtb	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	74da      	strb	r2, [r3, #19]
        device->chargerStatus1.vbus_stat       = (*status >> 1) & 0x0F;
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	085b      	lsrs	r3, r3, #1
 800041e:	b2db      	uxtb	r3, r3
 8000420:	220f      	movs	r2, #15
 8000422:	4013      	ands	r3, r2
 8000424:	b2da      	uxtb	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	751a      	strb	r2, [r3, #20]
        device->chargerStatus1.bc12_done_stat  = (*status >> 0) & 0x01;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2201      	movs	r2, #1
 8000430:	4013      	ands	r3, r2
 8000432:	b2da      	uxtb	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	755a      	strb	r2, [r3, #21]
    }
    return ret_val;
 8000438:	230f      	movs	r3, #15
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	781b      	ldrb	r3, [r3, #0]
}
 800043e:	0018      	movs	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	b004      	add	sp, #16
 8000444:	bdb0      	pop	{r4, r5, r7, pc}

08000446 <readChargerStatus2>:

// Read and interpret REG1D_Charger_Status_2
HAL_StatusTypeDef readChargerStatus2(BQ25798 *device, uint8_t *status){
 8000446:	b5b0      	push	{r4, r5, r7, lr}
 8000448:	b084      	sub	sp, #16
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_2, status);
 8000450:	250f      	movs	r5, #15
 8000452:	197c      	adds	r4, r7, r5
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	211d      	movs	r1, #29
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fa17 	bl	800088e <BQ25798_ReadRegister>
 8000460:	0003      	movs	r3, r0
 8000462:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000464:	197b      	adds	r3, r7, r5
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d11e      	bne.n	80004aa <readChargerStatus2+0x64>
        device->chargerStatus2.ico_stat          = (*status >> 6) & 0x03;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	099b      	lsrs	r3, r3, #6
 8000472:	b2da      	uxtb	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	759a      	strb	r2, [r3, #22]
        device->chargerStatus2.treg_stat         = (*status >> 2) & 0x01;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	089b      	lsrs	r3, r3, #2
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2201      	movs	r2, #1
 8000482:	4013      	ands	r3, r2
 8000484:	b2da      	uxtb	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	75da      	strb	r2, [r3, #23]
        device->chargerStatus2.dpdm_stat         = (*status >> 1) & 0x01;
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	085b      	lsrs	r3, r3, #1
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2201      	movs	r2, #1
 8000494:	4013      	ands	r3, r2
 8000496:	b2da      	uxtb	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	761a      	strb	r2, [r3, #24]
        device->chargerStatus2.vbat_present_stat = (*status >> 0) & 0x01;
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2201      	movs	r2, #1
 80004a2:	4013      	ands	r3, r2
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	765a      	strb	r2, [r3, #25]
    }
    return ret_val;
 80004aa:	230f      	movs	r3, #15
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	781b      	ldrb	r3, [r3, #0]
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bdb0      	pop	{r4, r5, r7, pc}

080004b8 <readChargerStatus3>:

// Read and interpret REG1E_Charger_Status_3
HAL_StatusTypeDef readChargerStatus3(BQ25798 *device, uint8_t *status){
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_3, status);
 80004c2:	250f      	movs	r5, #15
 80004c4:	197c      	adds	r4, r7, r5
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	211e      	movs	r1, #30
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 f9de 	bl	800088e <BQ25798_ReadRegister>
 80004d2:	0003      	movs	r3, r0
 80004d4:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 80004d6:	197b      	adds	r3, r7, r5
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d13c      	bne.n	8000558 <readChargerStatus3+0xa0>
        device->chargerStatus3.acrb2_stat      = (*status >> 7) & 0x01;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	09db      	lsrs	r3, r3, #7
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	769a      	strb	r2, [r3, #26]
        device->chargerStatus3.acrb1_stat      = (*status >> 6) & 0x01;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	099b      	lsrs	r3, r3, #6
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2201      	movs	r2, #1
 80004f4:	4013      	ands	r3, r2
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	76da      	strb	r2, [r3, #27]
        device->chargerStatus3.adc_done_stat   = (*status >> 5) & 0x01;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	095b      	lsrs	r3, r3, #5
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2201      	movs	r2, #1
 8000506:	4013      	ands	r3, r2
 8000508:	b2da      	uxtb	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	771a      	strb	r2, [r3, #28]
        device->chargerStatus3.vsys_stat       = (*status >> 4) & 0x01;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	091b      	lsrs	r3, r3, #4
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	775a      	strb	r2, [r3, #29]
        device->chargerStatus3.chg_tmr_stat    = (*status >> 3) & 0x01;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	08db      	lsrs	r3, r3, #3
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2201      	movs	r2, #1
 800052a:	4013      	ands	r3, r2
 800052c:	b2da      	uxtb	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	779a      	strb	r2, [r3, #30]
        device->chargerStatus3.trichg_tmr_stat = (*status >> 2) & 0x01;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	089b      	lsrs	r3, r3, #2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	b2da      	uxtb	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	77da      	strb	r2, [r3, #31]
        device->chargerStatus3.prechg_tmr_stat = (*status >> 1) & 0x01;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	085b      	lsrs	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2201      	movs	r2, #1
 800054e:	4013      	ands	r3, r2
 8000550:	b2d9      	uxtb	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2220      	movs	r2, #32
 8000556:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 8000558:	230f      	movs	r3, #15
 800055a:	18fb      	adds	r3, r7, r3
 800055c:	781b      	ldrb	r3, [r3, #0]
}
 800055e:	0018      	movs	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	b004      	add	sp, #16
 8000564:	bdb0      	pop	{r4, r5, r7, pc}

08000566 <readChargerStatus4>:

// Read and interpret REG1F_Charger_Status_4
HAL_StatusTypeDef readChargerStatus4(BQ25798 *device, uint8_t *status){
 8000566:	b5b0      	push	{r4, r5, r7, lr}
 8000568:	b084      	sub	sp, #16
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_CHARGER_STATUS_4, status);
 8000570:	250f      	movs	r5, #15
 8000572:	197c      	adds	r4, r7, r5
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	211f      	movs	r1, #31
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f987 	bl	800088e <BQ25798_ReadRegister>
 8000580:	0003      	movs	r3, r0
 8000582:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000584:	197b      	adds	r3, r7, r5
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d12f      	bne.n	80005ec <readChargerStatus4+0x86>
        device->chargerStatus4.vbatotg_low_stat = (*status >> 4) & 0x01;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	091b      	lsrs	r3, r3, #4
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2201      	movs	r2, #1
 8000596:	4013      	ands	r3, r2
 8000598:	b2d9      	uxtb	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2221      	movs	r2, #33	@ 0x21
 800059e:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_cold_stat     = (*status >> 3) & 0x01;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	08db      	lsrs	r3, r3, #3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2201      	movs	r2, #1
 80005aa:	4013      	ands	r3, r2
 80005ac:	b2d9      	uxtb	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2222      	movs	r2, #34	@ 0x22
 80005b2:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_cool_stat     = (*status >> 2) & 0x01;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	089b      	lsrs	r3, r3, #2
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2201      	movs	r2, #1
 80005be:	4013      	ands	r3, r2
 80005c0:	b2d9      	uxtb	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2223      	movs	r2, #35	@ 0x23
 80005c6:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_warm_stat     = (*status >> 1) & 0x01;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	085b      	lsrs	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2201      	movs	r2, #1
 80005d2:	4013      	ands	r3, r2
 80005d4:	b2d9      	uxtb	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2224      	movs	r2, #36	@ 0x24
 80005da:	5499      	strb	r1, [r3, r2]
        device->chargerStatus4.ts_hot_stat      = (*status >> 0) & 0x01;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4013      	ands	r3, r2
 80005e4:	b2d9      	uxtb	r1, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2225      	movs	r2, #37	@ 0x25
 80005ea:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 80005ec:	230f      	movs	r3, #15
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	781b      	ldrb	r3, [r3, #0]
}
 80005f2:	0018      	movs	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b004      	add	sp, #16
 80005f8:	bdb0      	pop	{r4, r5, r7, pc}

080005fa <readFaultStatus0>:

// Read and interpret REG20_FAULT_Status_0
HAL_StatusTypeDef readFaultStatus0(BQ25798 *device, uint8_t *status){
 80005fa:	b5b0      	push	{r4, r5, r7, lr}
 80005fc:	b084      	sub	sp, #16
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_FAULT_STATUS_0, status);
 8000604:	250f      	movs	r5, #15
 8000606:	197c      	adds	r4, r7, r5
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2120      	movs	r1, #32
 800060e:	0018      	movs	r0, r3
 8000610:	f000 f93d 	bl	800088e <BQ25798_ReadRegister>
 8000614:	0003      	movs	r3, r0
 8000616:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 8000618:	197b      	adds	r3, r7, r5
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d14a      	bne.n	80006b6 <readFaultStatus0+0xbc>
        device->faultStatus0.ibat_reg_stat  = (*status >> 7) & 0x01;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	09db      	lsrs	r3, r3, #7
 8000626:	b2d9      	uxtb	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2226      	movs	r2, #38	@ 0x26
 800062c:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vbus_ovp_stat  = (*status >> 6) & 0x01;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	099b      	lsrs	r3, r3, #6
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	b2d9      	uxtb	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2227      	movs	r2, #39	@ 0x27
 8000640:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vbat_ovp_stat  = (*status >> 5) & 0x01;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2201      	movs	r2, #1
 800064c:	4013      	ands	r3, r2
 800064e:	b2d9      	uxtb	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2228      	movs	r2, #40	@ 0x28
 8000654:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.ibus_ocp_stat  = (*status >> 4) & 0x01;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	091b      	lsrs	r3, r3, #4
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2201      	movs	r2, #1
 8000660:	4013      	ands	r3, r2
 8000662:	b2d9      	uxtb	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2229      	movs	r2, #41	@ 0x29
 8000668:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.ibat_ocp_stat  = (*status >> 3) & 0x01;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	08db      	lsrs	r3, r3, #3
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	b2d9      	uxtb	r1, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	222a      	movs	r2, #42	@ 0x2a
 800067c:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.conv_ocp_stat  = (*status >> 2) & 0x01;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	b2d9      	uxtb	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	222b      	movs	r2, #43	@ 0x2b
 8000690:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vac2_ovp_stat  = (*status >> 1) & 0x01;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	085b      	lsrs	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	b2d9      	uxtb	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	222c      	movs	r2, #44	@ 0x2c
 80006a4:	5499      	strb	r1, [r3, r2]
        device->faultStatus0.vac1_ovp_stat  = (*status >> 0) & 0x01;
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	b2d9      	uxtb	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	222d      	movs	r2, #45	@ 0x2d
 80006b4:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 80006b6:	230f      	movs	r3, #15
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	781b      	ldrb	r3, [r3, #0]
}
 80006bc:	0018      	movs	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	b004      	add	sp, #16
 80006c2:	bdb0      	pop	{r4, r5, r7, pc}

080006c4 <readFaultStatus1>:

// Read and interpret REG21_FAULT_Status_1
HAL_StatusTypeDef readFaultStatus1(BQ25798 *device, uint8_t *status){
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret_val = BQ25798_ReadRegister(device, BQ25798_REG_FAULT_STATUS_1, status);
 80006ce:	250f      	movs	r5, #15
 80006d0:	197c      	adds	r4, r7, r5
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2121      	movs	r1, #33	@ 0x21
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 f8d8 	bl	800088e <BQ25798_ReadRegister>
 80006de:	0003      	movs	r3, r0
 80006e0:	7023      	strb	r3, [r4, #0]
    if (ret_val == HAL_OK) {
 80006e2:	197b      	adds	r3, r7, r5
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d12e      	bne.n	8000748 <readFaultStatus1+0x84>
        device->faultStatus1.vsys_short_stat = (*status >> 7) & 0x01;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	09db      	lsrs	r3, r3, #7
 80006f0:	b2d9      	uxtb	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	222e      	movs	r2, #46	@ 0x2e
 80006f6:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.vsys_ovp_stat   = (*status >> 6) & 0x01;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	099b      	lsrs	r3, r3, #6
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2201      	movs	r2, #1
 8000702:	4013      	ands	r3, r2
 8000704:	b2d9      	uxtb	r1, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	222f      	movs	r2, #47	@ 0x2f
 800070a:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.otg_ovp_stat    = (*status >> 5) & 0x01;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	095b      	lsrs	r3, r3, #5
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2201      	movs	r2, #1
 8000716:	4013      	ands	r3, r2
 8000718:	b2d9      	uxtb	r1, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2230      	movs	r2, #48	@ 0x30
 800071e:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.otg_uvp_stat    = (*status >> 4) & 0x01;
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	091b      	lsrs	r3, r3, #4
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2201      	movs	r2, #1
 800072a:	4013      	ands	r3, r2
 800072c:	b2d9      	uxtb	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2231      	movs	r2, #49	@ 0x31
 8000732:	5499      	strb	r1, [r3, r2]
        device->faultStatus1.tshut_stat      = (*status >> 2) & 0x01;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	089b      	lsrs	r3, r3, #2
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2201      	movs	r2, #1
 800073e:	4013      	ands	r3, r2
 8000740:	b2d9      	uxtb	r1, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2232      	movs	r2, #50	@ 0x32
 8000746:	5499      	strb	r1, [r3, r2]
    }
    return ret_val;
 8000748:	230f      	movs	r3, #15
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	781b      	ldrb	r3, [r3, #0]
}
 800074e:	0018      	movs	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	b004      	add	sp, #16
 8000754:	bdb0      	pop	{r4, r5, r7, pc}

08000756 <BQ25798_readBusVoltage>:

// Read input voltage and current
HAL_StatusTypeDef BQ25798_readBusVoltage(BQ25798 *device){
 8000756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000758:	b085      	sub	sp, #20
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_VBUS_ADC, registerData, 2); // bit resolution 1mV
 800075e:	260f      	movs	r6, #15
 8000760:	19bc      	adds	r4, r7, r6
 8000762:	2508      	movs	r5, #8
 8000764:	197a      	adds	r2, r7, r5
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	2302      	movs	r3, #2
 800076a:	2135      	movs	r1, #53	@ 0x35
 800076c:	f000 f8ad 	bl	80008ca <BQ25798_ReadRegisters>
 8000770:	0003      	movs	r3, r0
 8000772:	7023      	strb	r3, [r4, #0]
	uint16_t voltageRaw = (registerData[0] << 8) | registerData[1];
 8000774:	0029      	movs	r1, r5
 8000776:	187b      	adds	r3, r7, r1
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	b21b      	sxth	r3, r3
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b21a      	sxth	r2, r3
 8000780:	187b      	adds	r3, r7, r1
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	b21b      	sxth	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b21a      	sxth	r2, r3
 800078a:	210c      	movs	r1, #12
 800078c:	187b      	adds	r3, r7, r1
 800078e:	801a      	strh	r2, [r3, #0]
	device->voltageBus = voltageRaw; // in mV
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	187a      	adds	r2, r7, r1
 8000794:	8812      	ldrh	r2, [r2, #0]
 8000796:	809a      	strh	r2, [r3, #4]
	return status;
 8000798:	19bb      	adds	r3, r7, r6
 800079a:	781b      	ldrb	r3, [r3, #0]
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b005      	add	sp, #20
 80007a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007a4 <BQ25798_readBusCurrent>:
HAL_StatusTypeDef BQ25798_readBusCurrent(BQ25798 *device){
 80007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_IBUS_ADC, registerData, 2); // bit resolution 1mV
 80007ac:	260f      	movs	r6, #15
 80007ae:	19bc      	adds	r4, r7, r6
 80007b0:	2508      	movs	r5, #8
 80007b2:	197a      	adds	r2, r7, r5
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	2302      	movs	r3, #2
 80007b8:	2131      	movs	r1, #49	@ 0x31
 80007ba:	f000 f886 	bl	80008ca <BQ25798_ReadRegisters>
 80007be:	0003      	movs	r3, r0
 80007c0:	7023      	strb	r3, [r4, #0]
	uint16_t currentRaw = (registerData[0] << 8) | registerData[1];
 80007c2:	0029      	movs	r1, r5
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	b21a      	sxth	r2, r3
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	210c      	movs	r1, #12
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	801a      	strh	r2, [r3, #0]
	device->currentBus = currentRaw; // in mA
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	187a      	adds	r2, r7, r1
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	80da      	strh	r2, [r3, #6]
	return status;
 80007e6:	19bb      	adds	r3, r7, r6
 80007e8:	781b      	ldrb	r3, [r3, #0]
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b005      	add	sp, #20
 80007f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007f2 <BQ25798_readBatteryVoltage>:
// Read output/ battery voltage and current

HAL_StatusTypeDef BQ25798_readBatteryVoltage(BQ25798 *device){
 80007f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f4:	b085      	sub	sp, #20
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_VBAT_ADC, registerData, 2); // bit resolution 1mV
 80007fa:	260f      	movs	r6, #15
 80007fc:	19bc      	adds	r4, r7, r6
 80007fe:	2508      	movs	r5, #8
 8000800:	197a      	adds	r2, r7, r5
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	2302      	movs	r3, #2
 8000806:	213b      	movs	r1, #59	@ 0x3b
 8000808:	f000 f85f 	bl	80008ca <BQ25798_ReadRegisters>
 800080c:	0003      	movs	r3, r0
 800080e:	7023      	strb	r3, [r4, #0]
	uint16_t voltageRaw = (registerData[0] << 8) | registerData[1];
 8000810:	0029      	movs	r1, r5
 8000812:	187b      	adds	r3, r7, r1
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21b      	sxth	r3, r3
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	187b      	adds	r3, r7, r1
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21a      	sxth	r2, r3
 8000826:	210c      	movs	r1, #12
 8000828:	187b      	adds	r3, r7, r1
 800082a:	801a      	strh	r2, [r3, #0]
	device->voltageBattery = voltageRaw; // in mV
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	187a      	adds	r2, r7, r1
 8000830:	8812      	ldrh	r2, [r2, #0]
 8000832:	811a      	strh	r2, [r3, #8]
	return status;
 8000834:	19bb      	adds	r3, r7, r6
 8000836:	781b      	ldrb	r3, [r3, #0]
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b005      	add	sp, #20
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000840 <BQ25798_readBatteryCurrent>:
HAL_StatusTypeDef BQ25798_readBatteryCurrent(BQ25798 *device){
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	// Read raw values from voltage registers (16 bits)
	// we have a 16 bit ADC but 8bit RAM thus we read 2 addresses instead
	uint8_t registerData[2];
	HAL_StatusTypeDef status = BQ25798_ReadRegisters(device, BQ25798_REG_IBAT_ADC, registerData, 2); // bit resolution 1mA
 8000848:	260f      	movs	r6, #15
 800084a:	19bc      	adds	r4, r7, r6
 800084c:	2508      	movs	r5, #8
 800084e:	197a      	adds	r2, r7, r5
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	2302      	movs	r3, #2
 8000854:	2133      	movs	r1, #51	@ 0x33
 8000856:	f000 f838 	bl	80008ca <BQ25798_ReadRegisters>
 800085a:	0003      	movs	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
	uint16_t currentRaw = (registerData[0] << 8) | registerData[1];
 800085e:	0029      	movs	r1, r5
 8000860:	187b      	adds	r3, r7, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b21b      	sxth	r3, r3
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b21a      	sxth	r2, r3
 800086a:	187b      	adds	r3, r7, r1
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21a      	sxth	r2, r3
 8000874:	210c      	movs	r1, #12
 8000876:	187b      	adds	r3, r7, r1
 8000878:	801a      	strh	r2, [r3, #0]
	device->currentBattery = currentRaw; // in mA
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	187a      	adds	r2, r7, r1
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	815a      	strh	r2, [r3, #10]
	return status;
 8000882:	19bb      	adds	r3, r7, r6
 8000884:	781b      	ldrb	r3, [r3, #0]
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b005      	add	sp, #20
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800088e <BQ25798_ReadRegister>:

// LOW LEVEL FUNCTIONS

HAL_StatusTypeDef BQ25798_ReadRegister(BQ25798 *device, uint8_t reg, uint8_t *data){
 800088e:	b590      	push	{r4, r7, lr}
 8000890:	b089      	sub	sp, #36	@ 0x24
 8000892:	af04      	add	r7, sp, #16
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	240b      	movs	r4, #11
 800089a:	193b      	adds	r3, r7, r4
 800089c:	1c0a      	adds	r2, r1, #0
 800089e:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	6818      	ldr	r0, [r3, #0]
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	2301      	movs	r3, #1
 80008ac:	425b      	negs	r3, r3
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	21d6      	movs	r1, #214	@ 0xd6
 80008bc:	f000 ff5a 	bl	8001774 <HAL_I2C_Mem_Read>
 80008c0:	0003      	movs	r3, r0
			I2C_MEMADD_SIZE_8BIT,
			data,
			1,
			HAL_MAX_DELAY
	);
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b005      	add	sp, #20
 80008c8:	bd90      	pop	{r4, r7, pc}

080008ca <BQ25798_ReadRegisters>:

HAL_StatusTypeDef BQ25798_ReadRegisters(BQ25798 *device, uint8_t reg, uint8_t *data, uint8_t length){
 80008ca:	b5b0      	push	{r4, r5, r7, lr}
 80008cc:	b088      	sub	sp, #32
 80008ce:	af04      	add	r7, sp, #16
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	0008      	movs	r0, r1
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	0019      	movs	r1, r3
 80008d8:	240b      	movs	r4, #11
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	1c02      	adds	r2, r0, #0
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	250a      	movs	r5, #10
 80008e2:	197b      	adds	r3, r7, r5
 80008e4:	1c0a      	adds	r2, r1, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b299      	uxth	r1, r3
 80008f2:	197b      	adds	r3, r7, r5
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	2201      	movs	r2, #1
 80008fa:	4252      	negs	r2, r2
 80008fc:	9202      	str	r2, [sp, #8]
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	000a      	movs	r2, r1
 8000908:	21d6      	movs	r1, #214	@ 0xd6
 800090a:	f000 ff33 	bl	8001774 <HAL_I2C_Mem_Read>
 800090e:	0003      	movs	r3, r0
			data,
			length,
			HAL_MAX_DELAY
	);

}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	b004      	add	sp, #16
 8000916:	bdb0      	pop	{r4, r5, r7, pc}

08000918 <BQ25798_WriteRegister>:
HAL_StatusTypeDef BQ25798_WriteRegister(BQ25798 *device, uint8_t reg, uint8_t *data){
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b089      	sub	sp, #36	@ 0x24
 800091c:	af04      	add	r7, sp, #16
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	240b      	movs	r4, #11
 8000924:	193b      	adds	r3, r7, r4
 8000926:	1c0a      	adds	r2, r1, #0
 8000928:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	193b      	adds	r3, r7, r4
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b29a      	uxth	r2, r3
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	9302      	str	r3, [sp, #8]
 800093a:	2301      	movs	r3, #1
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	21d6      	movs	r1, #214	@ 0xd6
 8000946:	f000 fde7 	bl	8001518 <HAL_I2C_Mem_Write>
 800094a:	0003      	movs	r3, r0
			data,
			1,
			HAL_MAX_DELAY
	);

}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b005      	add	sp, #20
 8000952:	bd90      	pop	{r4, r7, pc}

08000954 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <MX_GPIO_Init+0x28>)
 800095c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800095e:	4b07      	ldr	r3, [pc, #28]	@ (800097c <MX_GPIO_Init+0x28>)
 8000960:	2101      	movs	r1, #1
 8000962:	430a      	orrs	r2, r1
 8000964:	635a      	str	r2, [r3, #52]	@ 0x34
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <MX_GPIO_Init+0x28>)
 8000968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800096a:	2201      	movs	r2, #1
 800096c:	4013      	ands	r3, r2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	40021000 	.word	0x40021000

08000980 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_I2C1_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <MX_I2C1_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_I2C1_Init+0x74>)
 800098c:	4a1b      	ldr	r2, [pc, #108]	@ (80009fc <MX_I2C1_Init+0x7c>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <MX_I2C1_Init+0x74>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_I2C1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_I2C1_Init+0x74>)
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fd05 	bl	80013cc <HAL_I2C_Init>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f000 f969 	bl	8000c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <MX_I2C1_Init+0x74>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 fb00 	bl	8001fd4 <HAL_I2CEx_ConfigAnalogFilter>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f000 f960 	bl	8000c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <MX_I2C1_Init+0x74>)
 80009de:	2100      	movs	r1, #0
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fb43 	bl	800206c <HAL_I2CEx_ConfigDigitalFilter>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f957 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000028 	.word	0x20000028
 80009f8:	40005400 	.word	0x40005400
 80009fc:	00503d58 	.word	0x00503d58

08000a00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b09d      	sub	sp, #116	@ 0x74
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	235c      	movs	r3, #92	@ 0x5c
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f002 fadc 	bl	8002fd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	2410      	movs	r4, #16
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	234c      	movs	r3, #76	@ 0x4c
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f002 fad4 	bl	8002fd0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <HAL_I2C_MspInit+0xbc>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d13f      	bne.n	8000ab2 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2220      	movs	r2, #32
 8000a36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 f889 	bl	8002b58 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a4a:	f000 f927 	bl	8000c9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <HAL_I2C_MspInit+0xc0>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <HAL_I2C_MspInit+0xc0>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <HAL_I2C_MspInit+0xc0>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a66:	215c      	movs	r1, #92	@ 0x5c
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	22c0      	movs	r2, #192	@ 0xc0
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2212      	movs	r2, #18
 8000a74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2206      	movs	r2, #6
 8000a86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	187a      	adds	r2, r7, r1
 8000a8a:	23a0      	movs	r3, #160	@ 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 faf7 	bl	8001084 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_I2C_MspInit+0xc0>)
 8000a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <HAL_I2C_MspInit+0xc0>)
 8000a9c:	2180      	movs	r1, #128	@ 0x80
 8000a9e:	0389      	lsls	r1, r1, #14
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_I2C_MspInit+0xc0>)
 8000aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	039b      	lsls	r3, r3, #14
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b01d      	add	sp, #116	@ 0x74
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 f967 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f89d 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f7ff ff3f 	bl	8000954 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ad6:	f7ff ff53 	bl	8000980 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the BQ25798 charger
  if (BQ25798_init(&bq25798_charger, &hi2c1) != 0) {
 8000ada:	4a47      	ldr	r2, [pc, #284]	@ (8000bf8 <main+0x134>)
 8000adc:	4b47      	ldr	r3, [pc, #284]	@ (8000bfc <main+0x138>)
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fb9b 	bl	800021c <BQ25798_init>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <main+0x2a>
      // Initialization failed, immediately enter error state
      Error_Handler();
 8000aea:	f000 f8d7 	bl	8000c9c <Error_Handler>
  }

  // Initialize last update tick to current time for immediate first update
  last_bq_update_tick = HAL_GetTick();
 8000aee:	f000 f9d1 	bl	8000e94 <HAL_GetTick>
 8000af2:	0002      	movs	r2, r0
 8000af4:	4b42      	ldr	r3, [pc, #264]	@ (8000c00 <main+0x13c>)
 8000af6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // --- Non-blocking BQ25798 Status Update ---
      // Check if BQ_UPDATE_INTERVAL_MS has passed since the last update
      if ((HAL_GetTick() - last_bq_update_tick) >= BQ_UPDATE_INTERVAL_MS)
 8000af8:	f000 f9cc 	bl	8000e94 <HAL_GetTick>
 8000afc:	0002      	movs	r2, r0
 8000afe:	4b40      	ldr	r3, [pc, #256]	@ (8000c00 <main+0x13c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1ad2      	subs	r2, r2, r3
 8000b04:	23fa      	movs	r3, #250	@ 0xfa
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d354      	bcc.n	8000bb6 <main+0xf2>
      {
          // Reset the timer for the next update
          last_bq_update_tick = HAL_GetTick();
 8000b0c:	f000 f9c2 	bl	8000e94 <HAL_GetTick>
 8000b10:	0002      	movs	r2, r0
 8000b12:	4b3b      	ldr	r3, [pc, #236]	@ (8000c00 <main+0x13c>)
 8000b14:	601a      	str	r2, [r3, #0]

          // Declare a status variable for each read operation
          uint8_t read_status_byte = 0;
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

          // Read all status registers and populate the bq25798_charger struct
          // Check return values for I2C errors for more robust error handling if needed
          readChargerStatus0(&bq25798_charger, &read_status_byte);
 8000b1c:	1dfa      	adds	r2, r7, #7
 8000b1e:	4b37      	ldr	r3, [pc, #220]	@ (8000bfc <main+0x138>)
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fc0b 	bl	800033e <readChargerStatus0>
          readChargerStatus1(&bq25798_charger, &read_status_byte);
 8000b28:	1dfa      	adds	r2, r7, #7
 8000b2a:	4b34      	ldr	r3, [pc, #208]	@ (8000bfc <main+0x138>)
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fc59 	bl	80003e6 <readChargerStatus1>
          readChargerStatus2(&bq25798_charger, &read_status_byte);
 8000b34:	1dfa      	adds	r2, r7, #7
 8000b36:	4b31      	ldr	r3, [pc, #196]	@ (8000bfc <main+0x138>)
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff fc83 	bl	8000446 <readChargerStatus2>
          readChargerStatus3(&bq25798_charger, &read_status_byte);
 8000b40:	1dfa      	adds	r2, r7, #7
 8000b42:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <main+0x138>)
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fcb6 	bl	80004b8 <readChargerStatus3>
          readChargerStatus4(&bq25798_charger, &read_status_byte);
 8000b4c:	1dfa      	adds	r2, r7, #7
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <main+0x138>)
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fd07 	bl	8000566 <readChargerStatus4>
          readFaultStatus0(&bq25798_charger, &read_status_byte);
 8000b58:	1dfa      	adds	r2, r7, #7
 8000b5a:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <main+0x138>)
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fd4b 	bl	80005fa <readFaultStatus0>
          readFaultStatus1(&bq25798_charger, &read_status_byte);
 8000b64:	1dfa      	adds	r2, r7, #7
 8000b66:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <main+0x138>)
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fdaa 	bl	80006c4 <readFaultStatus1>

          // --- Read ADC values to update voltage and current data ---
          BQ25798_readBusVoltage(&bq25798_charger);
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <main+0x138>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fdef 	bl	8000756 <BQ25798_readBusVoltage>
          BQ25798_readBusCurrent(&bq25798_charger);
 8000b78:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <main+0x138>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff fe12 	bl	80007a4 <BQ25798_readBusCurrent>
          BQ25798_readBatteryVoltage(&bq25798_charger);
 8000b80:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <main+0x138>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fe35 	bl	80007f2 <BQ25798_readBatteryVoltage>
          BQ25798_readBatteryCurrent(&bq25798_charger);
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <main+0x138>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fe58 	bl	8000840 <BQ25798_readBatteryCurrent>

          // --- Example: Act on the status flags (Green LED for battery presence) ---
          if (bq25798_charger.chargerStatus2.vbat_present_stat == 1) {
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <main+0x138>)
 8000b92:	7e5b      	ldrb	r3, [r3, #25]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d107      	bne.n	8000ba8 <main+0xe4>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // Green LED ON (assuming active low)
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	019b      	lsls	r3, r3, #6
 8000b9c:	4819      	ldr	r0, [pc, #100]	@ (8000c04 <main+0x140>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	f000 fbdb 	bl	800135c <HAL_GPIO_WritePin>
 8000ba6:	e006      	b.n	8000bb6 <main+0xf2>
          } else {
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Green LED OFF
 8000ba8:	2380      	movs	r3, #128	@ 0x80
 8000baa:	019b      	lsls	r3, r3, #6
 8000bac:	4815      	ldr	r0, [pc, #84]	@ (8000c04 <main+0x140>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	f000 fbd3 	bl	800135c <HAL_GPIO_WritePin>
      }

      // --- Non-blocking Error LED (Orange LED) handling ---
      // This is for demonstration, assuming GPIO_PIN_5 (orange LED) is for a general fault indicator.
      // You would typically turn this on or blink it in your Error_Handler or if a specific fault is detected.
      if (bq25798_charger.faultStatus1.tshut_stat == 1) {
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <main+0x138>)
 8000bb8:	2232      	movs	r2, #50	@ 0x32
 8000bba:	5c9b      	ldrb	r3, [r3, r2]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d113      	bne.n	8000be8 <main+0x124>
          if ((HAL_GetTick() - last_error_led_toggle_tick) >= ERROR_LED_BLINK_RATE_MS) {
 8000bc0:	f000 f968 	bl	8000e94 <HAL_GetTick>
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <main+0x144>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2bc7      	cmp	r3, #199	@ 0xc7
 8000bce:	d993      	bls.n	8000af8 <main+0x34>
              last_error_led_toggle_tick = HAL_GetTick();
 8000bd0:	f000 f960 	bl	8000e94 <HAL_GetTick>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <main+0x144>)
 8000bd8:	601a      	str	r2, [r3, #0]
              HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle Orange LED
 8000bda:	23a0      	movs	r3, #160	@ 0xa0
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	2120      	movs	r1, #32
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fbd8 	bl	8001396 <HAL_GPIO_TogglePin>
 8000be6:	e787      	b.n	8000af8 <main+0x34>
          }
      } else {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Keep Orange LED OFF (assuming active low)
 8000be8:	23a0      	movs	r3, #160	@ 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	2201      	movs	r2, #1
 8000bee:	2120      	movs	r1, #32
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 fbb3 	bl	800135c <HAL_GPIO_WritePin>
      if ((HAL_GetTick() - last_bq_update_tick) >= BQ_UPDATE_INTERVAL_MS)
 8000bf6:	e77f      	b.n	8000af8 <main+0x34>
 8000bf8:	20000028 	.word	0x20000028
 8000bfc:	2000007c 	.word	0x2000007c
 8000c00:	200000b0 	.word	0x200000b0
 8000c04:	50000800 	.word	0x50000800
 8000c08:	200000b4 	.word	0x200000b4

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b095      	sub	sp, #84	@ 0x54
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	2414      	movs	r4, #20
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	0018      	movs	r0, r3
 8000c18:	233c      	movs	r3, #60	@ 0x3c
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f002 f9d7 	bl	8002fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2310      	movs	r3, #16
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f002 f9d0 	bl	8002fd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 fa65 	bl	8002104 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2280      	movs	r2, #128	@ 0x80
 8000c44:	0052      	lsls	r2, r2, #1
 8000c46:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2240      	movs	r2, #64	@ 0x40
 8000c52:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 fa91 	bl	8002184 <HAL_RCC_OscConfig>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c66:	f000 f819 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2100      	movs	r1, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fddc 	bl	8002844 <HAL_RCC_ClockConfig>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c90:	f000 f804 	bl	8000c9c <Error_Handler>
  }
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b015      	add	sp, #84	@ 0x54
 8000c9a:	bd90      	pop	{r4, r7, pc}

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	46c0      	nop			@ (mov r8, r8)

  // Assuming an LED (e.g., on GPIOA, PIN_5) is available for error indication
  // Make sure this pin is initialized in MX_GPIO_Init()
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle an LED to indicate error
 8000ca4:	23a0      	movs	r3, #160	@ 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	2120      	movs	r1, #32
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fb73 	bl	8001396 <HAL_GPIO_TogglePin>
      HAL_Delay(100); // Small delay for visible blinking
 8000cb0:	2064      	movs	r0, #100	@ 0x64
 8000cb2:	f000 f8f9 	bl	8000ea8 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle an LED to indicate error
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	e7f4      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_MspInit+0x4c>)
 8000cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <HAL_MspInit+0x4c>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_MspInit+0x4c>)
 8000cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_MspInit+0x4c>)
 8000ce0:	2180      	movs	r1, #128	@ 0x80
 8000ce2:	0549      	lsls	r1, r1, #21
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <HAL_MspInit+0x4c>)
 8000cea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cec:	2380      	movs	r3, #128	@ 0x80
 8000cee:	055b      	lsls	r3, r3, #21
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000cf6:	23c0      	movs	r3, #192	@ 0xc0
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 f8f8 	bl	8000ef0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	46c0      	nop			@ (mov r8, r8)
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f89c 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f7ff fff7 	bl	8000d3e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d76:	f002 f933 	bl	8002fe0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d7a:	f7ff fea3 	bl	8000ac4 <main>

08000d7e <LoopForever>:

LoopForever:
  b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d8c:	08003088 	.word	0x08003088
  ldr r2, =_sbss
 8000d90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d94:	200000bc 	.word	0x200000bc

08000d98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_COMP_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_Init+0x3c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <HAL_Init+0x3c>)
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	0049      	lsls	r1, r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 f810 	bl	8000ddc <HAL_InitTick>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e001      	b.n	8000dcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff ff78 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40022000 	.word	0x40022000

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dec:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <HAL_InitTick+0x88>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d02b      	beq.n	8000e4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000df4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <HAL_InitTick+0x8c>)
 8000df6:	681c      	ldr	r4, [r3, #0]
 8000df8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <HAL_InitTick+0x88>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	23fa      	movs	r3, #250	@ 0xfa
 8000e00:	0098      	lsls	r0, r3, #2
 8000e02:	f7ff f97f 	bl	8000104 <__udivsi3>
 8000e06:	0003      	movs	r3, r0
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f7ff f97a 	bl	8000104 <__udivsi3>
 8000e10:	0003      	movs	r3, r0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f929 	bl	800106a <HAL_SYSTICK_Config>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d112      	bne.n	8000e42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d80a      	bhi.n	8000e38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	2301      	movs	r3, #1
 8000e26:	425b      	negs	r3, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 f908 	bl	8001040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_InitTick+0x90>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e00d      	b.n	8000e54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e008      	b.n	8000e54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e42:	230f      	movs	r3, #15
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e003      	b.n	8000e54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e54:	230f      	movs	r3, #15
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	781b      	ldrb	r3, [r3, #0]
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b005      	add	sp, #20
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <HAL_IncTick+0x1c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	18d2      	adds	r2, r2, r3
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_IncTick+0x20>)
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	200000b8 	.word	0x200000b8

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b02      	ldr	r3, [pc, #8]	@ (8000ea4 <HAL_GetTick+0x10>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	200000b8 	.word	0x200000b8

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff fff0 	bl	8000e94 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_Delay+0x44>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	189b      	adds	r3, r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	f7ff ffe0 	bl	8000e94 <HAL_GetTick>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	46c0      	nop			@ (mov r8, r8)
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	20000008 	.word	0x20000008

08000ef0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	0019      	movs	r1, r3
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	40010000 	.word	0x40010000
 8000f18:	fffff9ff 	.word	0xfffff9ff

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	0002      	movs	r2, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f30:	d828      	bhi.n	8000f84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f32:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff0 <__NVIC_SetPriority+0xd4>)
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	33c0      	adds	r3, #192	@ 0xc0
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	589b      	ldr	r3, [r3, r2]
 8000f42:	1dfa      	adds	r2, r7, #7
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	0011      	movs	r1, r2
 8000f48:	2203      	movs	r2, #3
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	00d2      	lsls	r2, r2, #3
 8000f4e:	21ff      	movs	r1, #255	@ 0xff
 8000f50:	4091      	lsls	r1, r2
 8000f52:	000a      	movs	r2, r1
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	401a      	ands	r2, r3
 8000f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	019b      	lsls	r3, r3, #6
 8000f5e:	22ff      	movs	r2, #255	@ 0xff
 8000f60:	401a      	ands	r2, r3
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	0018      	movs	r0, r3
 8000f68:	2303      	movs	r3, #3
 8000f6a:	4003      	ands	r3, r0
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f70:	481f      	ldr	r0, [pc, #124]	@ (8000ff0 <__NVIC_SetPriority+0xd4>)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	33c0      	adds	r3, #192	@ 0xc0
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f82:	e031      	b.n	8000fe8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff4 <__NVIC_SetPriority+0xd8>)
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	400b      	ands	r3, r1
 8000f90:	3b08      	subs	r3, #8
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3306      	adds	r3, #6
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	1dfa      	adds	r2, r7, #7
 8000fa0:	7812      	ldrb	r2, [r2, #0]
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	00d2      	lsls	r2, r2, #3
 8000faa:	21ff      	movs	r1, #255	@ 0xff
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	43d2      	mvns	r2, r2
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	22ff      	movs	r2, #255	@ 0xff
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	4003      	ands	r3, r0
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fcc:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <__NVIC_SetPriority+0xd8>)
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	001c      	movs	r4, r3
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	4023      	ands	r3, r4
 8000fd8:	3b08      	subs	r3, #8
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	3306      	adds	r3, #6
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	18c3      	adds	r3, r0, r3
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b003      	add	sp, #12
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	1e5a      	subs	r2, r3, #1
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	045b      	lsls	r3, r3, #17
 8001008:	429a      	cmp	r2, r3
 800100a:	d301      	bcc.n	8001010 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100c:	2301      	movs	r3, #1
 800100e:	e010      	b.n	8001032 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <SysTick_Config+0x44>)
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	3a01      	subs	r2, #1
 8001016:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001018:	2301      	movs	r3, #1
 800101a:	425b      	negs	r3, r3
 800101c:	2103      	movs	r1, #3
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff ff7c 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SysTick_Config+0x44>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <SysTick_Config+0x44>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	210f      	movs	r1, #15
 800104c:	187b      	adds	r3, r7, r1
 800104e:	1c02      	adds	r2, r0, #0
 8001050:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	187b      	adds	r3, r7, r1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b25b      	sxtb	r3, r3
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b004      	add	sp, #16
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ffbf 	bl	8000ff8 <SysTick_Config>
 800107a:	0003      	movs	r3, r0
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001092:	e14d      	b.n	8001330 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4091      	lsls	r1, r2
 800109e:	000a      	movs	r2, r1
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d100      	bne.n	80010ac <HAL_GPIO_Init+0x28>
 80010aa:	e13e      	b.n	800132a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d005      	beq.n	80010c4 <HAL_GPIO_Init+0x40>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	2201      	movs	r2, #1
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2203      	movs	r2, #3
 800112c:	4013      	ands	r3, r2
 800112e:	2b03      	cmp	r3, #3
 8001130:	d017      	beq.n	8001162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2203      	movs	r2, #3
 8001168:	4013      	ands	r3, r2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	58d3      	ldr	r3, [r2, r3]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2207      	movs	r2, #7
 8001180:	4013      	ands	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2107      	movs	r1, #7
 800119a:	400b      	ands	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	6939      	ldr	r1, [r7, #16]
 80011b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	401a      	ands	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	23c0      	movs	r3, #192	@ 0xc0
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	d100      	bne.n	80011f8 <HAL_GPIO_Init+0x174>
 80011f6:	e098      	b.n	800132a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011f8:	4a53      	ldr	r2, [pc, #332]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3318      	adds	r3, #24
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	589b      	ldr	r3, [r3, r2]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2203      	movs	r2, #3
 800120a:	4013      	ands	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	220f      	movs	r2, #15
 8001210:	409a      	lsls	r2, r3
 8001212:	0013      	movs	r3, r2
 8001214:	43da      	mvns	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	23a0      	movs	r3, #160	@ 0xa0
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	429a      	cmp	r2, r3
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x1d6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a48      	ldr	r2, [pc, #288]	@ (800134c <HAL_GPIO_Init+0x2c8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x1d2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a47      	ldr	r2, [pc, #284]	@ (8001350 <HAL_GPIO_Init+0x2cc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x1ce>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a46      	ldr	r2, [pc, #280]	@ (8001354 <HAL_GPIO_Init+0x2d0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x1ca>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a45      	ldr	r2, [pc, #276]	@ (8001358 <HAL_GPIO_Init+0x2d4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x1c6>
 8001246:	2304      	movs	r3, #4
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x1d8>
 800124a:	2305      	movs	r3, #5
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x1d8>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1d8>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1d8>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1d8>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	2103      	movs	r1, #3
 8001260:	400a      	ands	r2, r1
 8001262:	00d2      	lsls	r2, r2, #3
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800126c:	4936      	ldr	r1, [pc, #216]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3318      	adds	r3, #24
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127a:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	@ 0x80
 8001290:	035b      	lsls	r3, r3, #13
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	039b      	lsls	r3, r3, #14
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 80012d0:	2384      	movs	r3, #132	@ 0x84
 80012d2:	58d3      	ldr	r3, [r2, r3]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43da      	mvns	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	029b      	lsls	r3, r3, #10
 80012e8:	4013      	ands	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f4:	4914      	ldr	r1, [pc, #80]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 80012f6:	2284      	movs	r2, #132	@ 0x84
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	58d3      	ldr	r3, [r2, r3]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	2380      	movs	r3, #128	@ 0x80
 8001314:	025b      	lsls	r3, r3, #9
 8001316:	4013      	ands	r3, r2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001322:	4909      	ldr	r1, [pc, #36]	@ (8001348 <HAL_GPIO_Init+0x2c4>)
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	40da      	lsrs	r2, r3
 8001338:	1e13      	subs	r3, r2, #0
 800133a:	d000      	beq.n	800133e <HAL_GPIO_Init+0x2ba>
 800133c:	e6aa      	b.n	8001094 <HAL_GPIO_Init+0x10>
  }
}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b006      	add	sp, #24
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021800 	.word	0x40021800
 800134c:	50000400 	.word	0x50000400
 8001350:	50000800 	.word	0x50000800
 8001354:	50000c00 	.word	0x50000c00
 8001358:	50001000 	.word	0x50001000

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	0008      	movs	r0, r1
 8001366:	0011      	movs	r1, r2
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	1c7b      	adds	r3, r7, #1
 8001370:	1c0a      	adds	r2, r1, #0
 8001372:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001374:	1c7b      	adds	r3, r7, #1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137c:	1cbb      	adds	r3, r7, #2
 800137e:	881a      	ldrh	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001386:	1cbb      	adds	r3, r7, #2
 8001388:	881a      	ldrh	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	000a      	movs	r2, r1
 80013a0:	1cbb      	adds	r3, r7, #2
 80013a2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013aa:	1cbb      	adds	r3, r7, #2
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	041a      	lsls	r2, r3, #16
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	1cb9      	adds	r1, r7, #2
 80013ba:	8809      	ldrh	r1, [r1, #0]
 80013bc:	400b      	ands	r3, r1
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b004      	add	sp, #16
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e08f      	b.n	80014fe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2241      	movs	r2, #65	@ 0x41
 80013e2:	5c9b      	ldrb	r3, [r3, r2]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d107      	bne.n	80013fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2240      	movs	r2, #64	@ 0x40
 80013ee:	2100      	movs	r1, #0
 80013f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fb03 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2241      	movs	r2, #65	@ 0x41
 80013fe:	2124      	movs	r1, #36	@ 0x24
 8001400:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	438a      	bics	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	493b      	ldr	r1, [pc, #236]	@ (8001508 <HAL_I2C_Init+0x13c>)
 800141c:	400a      	ands	r2, r1
 800141e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4938      	ldr	r1, [pc, #224]	@ (800150c <HAL_I2C_Init+0x140>)
 800142c:	400a      	ands	r2, r1
 800142e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2180      	movs	r1, #128	@ 0x80
 8001442:	0209      	lsls	r1, r1, #8
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e007      	b.n	800145a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2184      	movs	r1, #132	@ 0x84
 8001454:	0209      	lsls	r1, r1, #8
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d109      	bne.n	8001476 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2180      	movs	r1, #128	@ 0x80
 800146e:	0109      	lsls	r1, r1, #4
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	e007      	b.n	8001486 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4923      	ldr	r1, [pc, #140]	@ (8001510 <HAL_I2C_Init+0x144>)
 8001482:	400a      	ands	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4920      	ldr	r1, [pc, #128]	@ (8001514 <HAL_I2C_Init+0x148>)
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	491a      	ldr	r1, [pc, #104]	@ (800150c <HAL_I2C_Init+0x140>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69d9      	ldr	r1, [r3, #28]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2101      	movs	r1, #1
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2241      	movs	r2, #65	@ 0x41
 80014ea:	2120      	movs	r1, #32
 80014ec:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2242      	movs	r2, #66	@ 0x42
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b002      	add	sp, #8
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	f0ffffff 	.word	0xf0ffffff
 800150c:	ffff7fff 	.word	0xffff7fff
 8001510:	fffff7ff 	.word	0xfffff7ff
 8001514:	02008000 	.word	0x02008000

08001518 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af02      	add	r7, sp, #8
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	000c      	movs	r4, r1
 8001522:	0010      	movs	r0, r2
 8001524:	0019      	movs	r1, r3
 8001526:	230a      	movs	r3, #10
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	1c22      	adds	r2, r4, #0
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	2308      	movs	r3, #8
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	1c02      	adds	r2, r0, #0
 8001534:	801a      	strh	r2, [r3, #0]
 8001536:	1dbb      	adds	r3, r7, #6
 8001538:	1c0a      	adds	r2, r1, #0
 800153a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2241      	movs	r2, #65	@ 0x41
 8001540:	5c9b      	ldrb	r3, [r3, r2]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b20      	cmp	r3, #32
 8001546:	d000      	beq.n	800154a <HAL_I2C_Mem_Write+0x32>
 8001548:	e10c      	b.n	8001764 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800154a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <HAL_I2C_Mem_Write+0x42>
 8001550:	232c      	movs	r3, #44	@ 0x2c
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2280      	movs	r2, #128	@ 0x80
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0ff      	b.n	8001766 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2240      	movs	r2, #64	@ 0x40
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_I2C_Mem_Write+0x5c>
 8001570:	2302      	movs	r3, #2
 8001572:	e0f8      	b.n	8001766 <HAL_I2C_Mem_Write+0x24e>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2240      	movs	r2, #64	@ 0x40
 8001578:	2101      	movs	r1, #1
 800157a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800157c:	f7ff fc8a 	bl	8000e94 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	0219      	lsls	r1, r3, #8
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2319      	movs	r3, #25
 8001590:	2201      	movs	r2, #1
 8001592:	f000 fb0b 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d001      	beq.n	800159e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0e3      	b.n	8001766 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2241      	movs	r2, #65	@ 0x41
 80015a2:	2121      	movs	r1, #33	@ 0x21
 80015a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2242      	movs	r2, #66	@ 0x42
 80015aa:	2140      	movs	r1, #64	@ 0x40
 80015ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	222c      	movs	r2, #44	@ 0x2c
 80015be:	18ba      	adds	r2, r7, r2
 80015c0:	8812      	ldrh	r2, [r2, #0]
 80015c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ca:	1dbb      	adds	r3, r7, #6
 80015cc:	881c      	ldrh	r4, [r3, #0]
 80015ce:	2308      	movs	r3, #8
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	881a      	ldrh	r2, [r3, #0]
 80015d4:	230a      	movs	r3, #10
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	8819      	ldrh	r1, [r3, #0]
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	0023      	movs	r3, r4
 80015e6:	f000 f9f9 	bl	80019dc <I2C_RequestMemoryWrite>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d005      	beq.n	80015fa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2240      	movs	r2, #64	@ 0x40
 80015f2:	2100      	movs	r1, #0
 80015f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0b5      	b.n	8001766 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2bff      	cmp	r3, #255	@ 0xff
 8001602:	d911      	bls.n	8001628 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	22ff      	movs	r2, #255	@ 0xff
 8001608:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160e:	b2da      	uxtb	r2, r3
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	045c      	lsls	r4, r3, #17
 8001614:	230a      	movs	r3, #10
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	8819      	ldrh	r1, [r3, #0]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	2300      	movs	r3, #0
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	0023      	movs	r3, r4
 8001622:	f000 fc9d 	bl	8001f60 <I2C_TransferConfig>
 8001626:	e012      	b.n	800164e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001636:	b2da      	uxtb	r2, r3
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	049c      	lsls	r4, r3, #18
 800163c:	230a      	movs	r3, #10
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	8819      	ldrh	r1, [r3, #0]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	2300      	movs	r3, #0
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	0023      	movs	r3, r4
 800164a:	f000 fc89 	bl	8001f60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	0018      	movs	r0, r3
 8001656:	f000 fb01 	bl	8001c5c <I2C_WaitOnTXISFlagUntilTimeout>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d001      	beq.n	8001662 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e081      	b.n	8001766 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800167c:	b29b      	uxth	r3, r3
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d03a      	beq.n	8001712 <HAL_I2C_Mem_Write+0x1fa>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d136      	bne.n	8001712 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	0013      	movs	r3, r2
 80016ae:	2200      	movs	r2, #0
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	f000 fa7b 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 80016b6:	1e03      	subs	r3, r0, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e053      	b.n	8001766 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	2bff      	cmp	r3, #255	@ 0xff
 80016c6:	d911      	bls.n	80016ec <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	22ff      	movs	r2, #255	@ 0xff
 80016cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	045c      	lsls	r4, r3, #17
 80016d8:	230a      	movs	r3, #10
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	8819      	ldrh	r1, [r3, #0]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	2300      	movs	r3, #0
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	0023      	movs	r3, r4
 80016e6:	f000 fc3b 	bl	8001f60 <I2C_TransferConfig>
 80016ea:	e012      	b.n	8001712 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	049c      	lsls	r4, r3, #18
 8001700:	230a      	movs	r3, #10
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	8819      	ldrh	r1, [r3, #0]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	2300      	movs	r3, #0
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	0023      	movs	r3, r4
 800170e:	f000 fc27 	bl	8001f60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d198      	bne.n	800164e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	0018      	movs	r0, r3
 8001724:	f000 fae0 	bl	8001ce8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d001      	beq.n	8001730 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e01a      	b.n	8001766 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2220      	movs	r2, #32
 8001736:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	490b      	ldr	r1, [pc, #44]	@ (8001770 <HAL_I2C_Mem_Write+0x258>)
 8001744:	400a      	ands	r2, r1
 8001746:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2241      	movs	r2, #65	@ 0x41
 800174c:	2120      	movs	r1, #32
 800174e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2242      	movs	r2, #66	@ 0x42
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2240      	movs	r2, #64	@ 0x40
 800175c:	2100      	movs	r1, #0
 800175e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001764:	2302      	movs	r3, #2
  }
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b007      	add	sp, #28
 800176c:	bd90      	pop	{r4, r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	fe00e800 	.word	0xfe00e800

08001774 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af02      	add	r7, sp, #8
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	000c      	movs	r4, r1
 800177e:	0010      	movs	r0, r2
 8001780:	0019      	movs	r1, r3
 8001782:	230a      	movs	r3, #10
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	1c22      	adds	r2, r4, #0
 8001788:	801a      	strh	r2, [r3, #0]
 800178a:	2308      	movs	r3, #8
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	1c02      	adds	r2, r0, #0
 8001790:	801a      	strh	r2, [r3, #0]
 8001792:	1dbb      	adds	r3, r7, #6
 8001794:	1c0a      	adds	r2, r1, #0
 8001796:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2241      	movs	r2, #65	@ 0x41
 800179c:	5c9b      	ldrb	r3, [r3, r2]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d000      	beq.n	80017a6 <HAL_I2C_Mem_Read+0x32>
 80017a4:	e110      	b.n	80019c8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80017a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_I2C_Mem_Read+0x42>
 80017ac:	232c      	movs	r3, #44	@ 0x2c
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d105      	bne.n	80017c2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2280      	movs	r2, #128	@ 0x80
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e103      	b.n	80019ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2240      	movs	r2, #64	@ 0x40
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_I2C_Mem_Read+0x5c>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0fc      	b.n	80019ca <HAL_I2C_Mem_Read+0x256>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2240      	movs	r2, #64	@ 0x40
 80017d4:	2101      	movs	r1, #1
 80017d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017d8:	f7ff fb5c 	bl	8000e94 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	0219      	lsls	r1, r3, #8
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2319      	movs	r3, #25
 80017ec:	2201      	movs	r2, #1
 80017ee:	f000 f9dd 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0e7      	b.n	80019ca <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2241      	movs	r2, #65	@ 0x41
 80017fe:	2122      	movs	r1, #34	@ 0x22
 8001800:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2242      	movs	r2, #66	@ 0x42
 8001806:	2140      	movs	r1, #64	@ 0x40
 8001808:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	222c      	movs	r2, #44	@ 0x2c
 800181a:	18ba      	adds	r2, r7, r2
 800181c:	8812      	ldrh	r2, [r2, #0]
 800181e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	881c      	ldrh	r4, [r3, #0]
 800182a:	2308      	movs	r3, #8
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	230a      	movs	r3, #10
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	8819      	ldrh	r1, [r3, #0]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	0023      	movs	r3, r4
 8001842:	f000 f92f 	bl	8001aa4 <I2C_RequestMemoryRead>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d005      	beq.n	8001856 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2240      	movs	r2, #64	@ 0x40
 800184e:	2100      	movs	r1, #0
 8001850:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0b9      	b.n	80019ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	2bff      	cmp	r3, #255	@ 0xff
 800185e:	d911      	bls.n	8001884 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	22ff      	movs	r2, #255	@ 0xff
 8001864:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186a:	b2da      	uxtb	r2, r3
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	045c      	lsls	r4, r3, #17
 8001870:	230a      	movs	r3, #10
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	8819      	ldrh	r1, [r3, #0]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	4b56      	ldr	r3, [pc, #344]	@ (80019d4 <HAL_I2C_Mem_Read+0x260>)
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	0023      	movs	r3, r4
 800187e:	f000 fb6f 	bl	8001f60 <I2C_TransferConfig>
 8001882:	e012      	b.n	80018aa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001892:	b2da      	uxtb	r2, r3
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	049c      	lsls	r4, r3, #18
 8001898:	230a      	movs	r3, #10
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	8819      	ldrh	r1, [r3, #0]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	4b4c      	ldr	r3, [pc, #304]	@ (80019d4 <HAL_I2C_Mem_Read+0x260>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	0023      	movs	r3, r4
 80018a6:	f000 fb5b 	bl	8001f60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80018aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	0013      	movs	r3, r2
 80018b4:	2200      	movs	r2, #0
 80018b6:	2104      	movs	r1, #4
 80018b8:	f000 f978 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d001      	beq.n	80018c4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e082      	b.n	80019ca <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d03a      	beq.n	8001976 <HAL_I2C_Mem_Read+0x202>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	d136      	bne.n	8001976 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	0013      	movs	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	2180      	movs	r1, #128	@ 0x80
 8001916:	f000 f949 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e053      	b.n	80019ca <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	2bff      	cmp	r3, #255	@ 0xff
 800192a:	d911      	bls.n	8001950 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	22ff      	movs	r2, #255	@ 0xff
 8001930:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001936:	b2da      	uxtb	r2, r3
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	045c      	lsls	r4, r3, #17
 800193c:	230a      	movs	r3, #10
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	8819      	ldrh	r1, [r3, #0]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	0023      	movs	r3, r4
 800194a:	f000 fb09 	bl	8001f60 <I2C_TransferConfig>
 800194e:	e012      	b.n	8001976 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195e:	b2da      	uxtb	r2, r3
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	049c      	lsls	r4, r3, #18
 8001964:	230a      	movs	r3, #10
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	2300      	movs	r3, #0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	0023      	movs	r3, r4
 8001972:	f000 faf5 	bl	8001f60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d194      	bne.n	80018aa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0018      	movs	r0, r3
 8001988:	f000 f9ae 	bl	8001ce8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e01a      	b.n	80019ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2220      	movs	r2, #32
 800199a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <HAL_I2C_Mem_Read+0x264>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2241      	movs	r2, #65	@ 0x41
 80019b0:	2120      	movs	r1, #32
 80019b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2242      	movs	r2, #66	@ 0x42
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	@ 0x40
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b007      	add	sp, #28
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	80002400 	.word	0x80002400
 80019d8:	fe00e800 	.word	0xfe00e800

080019dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80019dc:	b5b0      	push	{r4, r5, r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	000c      	movs	r4, r1
 80019e6:	0010      	movs	r0, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	250a      	movs	r5, #10
 80019ec:	197b      	adds	r3, r7, r5
 80019ee:	1c22      	adds	r2, r4, #0
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	2308      	movs	r3, #8
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	1dbb      	adds	r3, r7, #6
 80019fc:	1c0a      	adds	r2, r1, #0
 80019fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a00:	1dbb      	adds	r3, r7, #6
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	045c      	lsls	r4, r3, #17
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	8819      	ldrh	r1, [r3, #0]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <I2C_RequestMemoryWrite+0xc4>)
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	0023      	movs	r3, r4
 8001a16:	f000 faa3 	bl	8001f60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a1c:	6a39      	ldr	r1, [r7, #32]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 f91b 	bl	8001c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d001      	beq.n	8001a2e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e033      	b.n	8001a96 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a2e:	1dbb      	adds	r3, r7, #6
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a36:	2308      	movs	r3, #8
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a44:	e019      	b.n	8001a7a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a46:	2308      	movs	r3, #8
 8001a48:	18fb      	adds	r3, r7, r3
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a5a:	6a39      	ldr	r1, [r7, #32]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 f8fc 	bl	8001c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d001      	beq.n	8001a6c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e014      	b.n	8001a96 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a7a:	6a3a      	ldr	r2, [r7, #32]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	0013      	movs	r3, r2
 8001a84:	2200      	movs	r2, #0
 8001a86:	2180      	movs	r1, #128	@ 0x80
 8001a88:	f000 f890 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d001      	beq.n	8001a94 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b004      	add	sp, #16
 8001a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	80002000 	.word	0x80002000

08001aa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	000c      	movs	r4, r1
 8001aae:	0010      	movs	r0, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	250a      	movs	r5, #10
 8001ab4:	197b      	adds	r3, r7, r5
 8001ab6:	1c22      	adds	r2, r4, #0
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	2308      	movs	r3, #8
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	1c02      	adds	r2, r0, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
 8001ac2:	1dbb      	adds	r3, r7, #6
 8001ac4:	1c0a      	adds	r2, r1, #0
 8001ac6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ac8:	1dbb      	adds	r3, r7, #6
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	197b      	adds	r3, r7, r5
 8001ad0:	8819      	ldrh	r1, [r3, #0]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <I2C_RequestMemoryRead+0xc0>)
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f000 fa41 	bl	8001f60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae0:	6a39      	ldr	r1, [r7, #32]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 f8b9 	bl	8001c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d001      	beq.n	8001af2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e033      	b.n	8001b5a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001af2:	1dbb      	adds	r3, r7, #6
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001afa:	2308      	movs	r3, #8
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b08:	e019      	b.n	8001b3e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1e:	6a39      	ldr	r1, [r7, #32]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 f89a 	bl	8001c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d001      	beq.n	8001b30 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e014      	b.n	8001b5a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b30:	2308      	movs	r3, #8
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b3e:	6a3a      	ldr	r2, [r7, #32]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	0013      	movs	r3, r2
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2140      	movs	r1, #64	@ 0x40
 8001b4c:	f000 f82e 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d001      	beq.n	8001b58 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b004      	add	sp, #16
 8001b60:	bdb0      	pop	{r4, r5, r7, pc}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	80002000 	.word	0x80002000

08001b68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2202      	movs	r2, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d103      	bne.n	8001b86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d007      	beq.n	8001ba4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	619a      	str	r2, [r3, #24]
  }
}
 8001ba4:	46c0      	nop			@ (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bbc:	e03a      	b.n	8001c34 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	6839      	ldr	r1, [r7, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 f8d3 	bl	8001d70 <I2C_IsErrorOccurred>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d001      	beq.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e040      	b.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	d02d      	beq.n	8001c34 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd8:	f7ff f95c 	bl	8000e94 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d302      	bcc.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x42>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d122      	bne.n	8001c34 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	425a      	negs	r2, r3
 8001bfe:	4153      	adcs	r3, r2
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	001a      	movs	r2, r3
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d113      	bne.n	8001c34 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c10:	2220      	movs	r2, #32
 8001c12:	431a      	orrs	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2241      	movs	r2, #65	@ 0x41
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2242      	movs	r2, #66	@ 0x42
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2240      	movs	r2, #64	@ 0x40
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e00f      	b.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	425a      	negs	r2, r3
 8001c44:	4153      	adcs	r3, r2
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	001a      	movs	r2, r3
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d0b5      	beq.n	8001bbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b004      	add	sp, #16
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c68:	e032      	b.n	8001cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 f87d 	bl	8001d70 <I2C_IsErrorOccurred>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e030      	b.n	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3301      	adds	r3, #1
 8001c82:	d025      	beq.n	8001cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c84:	f7ff f906 	bl	8000e94 <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d302      	bcc.n	8001c9a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d11a      	bne.n	8001cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d013      	beq.n	8001cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cac:	2220      	movs	r2, #32
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2241      	movs	r2, #65	@ 0x41
 8001cb8:	2120      	movs	r1, #32
 8001cba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2242      	movs	r2, #66	@ 0x42
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2240      	movs	r2, #64	@ 0x40
 8001cc8:	2100      	movs	r1, #0
 8001cca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e007      	b.n	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d1c5      	bne.n	8001c6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cf4:	e02f      	b.n	8001d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 f837 	bl	8001d70 <I2C_IsErrorOccurred>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e02d      	b.n	8001d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0a:	f7ff f8c3 	bl	8000e94 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11a      	bne.n	8001d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2220      	movs	r2, #32
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d013      	beq.n	8001d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	2220      	movs	r2, #32
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2241      	movs	r2, #65	@ 0x41
 8001d3e:	2120      	movs	r1, #32
 8001d40:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2242      	movs	r2, #66	@ 0x42
 8001d46:	2100      	movs	r1, #0
 8001d48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2240      	movs	r2, #64	@ 0x40
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e007      	b.n	8001d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d1c8      	bne.n	8001cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	@ 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d7c:	2327      	movs	r3, #39	@ 0x27
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2210      	movs	r2, #16
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <I2C_IsErrorOccurred+0x2e>
 8001d9c:	e079      	b.n	8001e92 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2210      	movs	r2, #16
 8001da4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001da6:	e057      	b.n	8001e58 <I2C_IsErrorOccurred+0xe8>
 8001da8:	2227      	movs	r2, #39	@ 0x27
 8001daa:	18bb      	adds	r3, r7, r2
 8001dac:	18ba      	adds	r2, r7, r2
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3301      	adds	r3, #1
 8001db6:	d04f      	beq.n	8001e58 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db8:	f7ff f86c 	bl	8000e94 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <I2C_IsErrorOccurred+0x5e>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d144      	bne.n	8001e58 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	4013      	ands	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ddc:	2013      	movs	r0, #19
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	2142      	movs	r1, #66	@ 0x42
 8001de4:	5c52      	ldrb	r2, [r2, r1]
 8001de6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	401a      	ands	r2, r3
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d126      	bne.n	8001e4a <I2C_IsErrorOccurred+0xda>
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d021      	beq.n	8001e4a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d01d      	beq.n	8001e4a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2180      	movs	r1, #128	@ 0x80
 8001e1a:	01c9      	lsls	r1, r1, #7
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e20:	f7ff f838 	bl	8000e94 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e28:	e00f      	b.n	8001e4a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e2a:	f7ff f833 	bl	8000e94 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b19      	cmp	r3, #25
 8001e36:	d908      	bls.n	8001e4a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e40:	2327      	movs	r3, #39	@ 0x27
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]

              break;
 8001e48:	e006      	b.n	8001e58 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2220      	movs	r2, #32
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d1e8      	bne.n	8001e2a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d004      	beq.n	8001e70 <I2C_IsErrorOccurred+0x100>
 8001e66:	2327      	movs	r3, #39	@ 0x27
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d09b      	beq.n	8001da8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e70:	2327      	movs	r3, #39	@ 0x27
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	2204      	movs	r2, #4
 8001e86:	4313      	orrs	r3, r2
 8001e88:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e8a:	2327      	movs	r3, #39	@ 0x27
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d00c      	beq.n	8001ebe <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2280      	movs	r2, #128	@ 0x80
 8001eb2:	0052      	lsls	r2, r2, #1
 8001eb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eb6:	2327      	movs	r3, #39	@ 0x27
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d00c      	beq.n	8001ee2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	00d2      	lsls	r2, r2, #3
 8001ed8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eda:	2327      	movs	r3, #39	@ 0x27
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d00c      	beq.n	8001f06 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2280      	movs	r2, #128	@ 0x80
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001efe:	2327      	movs	r3, #39	@ 0x27
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001f06:	2327      	movs	r3, #39	@ 0x27
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01d      	beq.n	8001f4c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f7ff fe28 	bl	8001b68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	490e      	ldr	r1, [pc, #56]	@ (8001f5c <I2C_IsErrorOccurred+0x1ec>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2241      	movs	r2, #65	@ 0x41
 8001f38:	2120      	movs	r1, #32
 8001f3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2242      	movs	r2, #66	@ 0x42
 8001f40:	2100      	movs	r1, #0
 8001f42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2240      	movs	r2, #64	@ 0x40
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f4c:	2327      	movs	r3, #39	@ 0x27
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b00a      	add	sp, #40	@ 0x28
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	fe00e800 	.word	0xfe00e800

08001f60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	0008      	movs	r0, r1
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	240a      	movs	r4, #10
 8001f70:	193b      	adds	r3, r7, r4
 8001f72:	1c02      	adds	r2, r0, #0
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	2009      	movs	r0, #9
 8001f78:	183b      	adds	r3, r7, r0
 8001f7a:	1c0a      	adds	r2, r1, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	059b      	lsls	r3, r3, #22
 8001f84:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f86:	183b      	adds	r3, r7, r0
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	0419      	lsls	r1, r3, #16
 8001f8c:	23ff      	movs	r3, #255	@ 0xff
 8001f8e:	041b      	lsls	r3, r3, #16
 8001f90:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f92:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001faa:	0d51      	lsrs	r1, r2, #21
 8001fac:	2280      	movs	r2, #128	@ 0x80
 8001fae:	00d2      	lsls	r2, r2, #3
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	4907      	ldr	r1, [pc, #28]	@ (8001fd0 <I2C_TransferConfig+0x70>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	43d2      	mvns	r2, r2
 8001fb8:	401a      	ands	r2, r3
 8001fba:	0011      	movs	r1, r2
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b007      	add	sp, #28
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	03ff63ff 	.word	0x03ff63ff

08001fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2241      	movs	r2, #65	@ 0x41
 8001fe2:	5c9b      	ldrb	r3, [r3, r2]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d138      	bne.n	800205c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e032      	b.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2240      	movs	r2, #64	@ 0x40
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2241      	movs	r2, #65	@ 0x41
 8002004:	2124      	movs	r1, #36	@ 0x24
 8002006:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	438a      	bics	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4911      	ldr	r1, [pc, #68]	@ (8002068 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002024:	400a      	ands	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6819      	ldr	r1, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2101      	movs	r1, #1
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2241      	movs	r2, #65	@ 0x41
 800204c:	2120      	movs	r1, #32
 800204e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2240      	movs	r2, #64	@ 0x40
 8002054:	2100      	movs	r1, #0
 8002056:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b002      	add	sp, #8
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	ffffefff 	.word	0xffffefff

0800206c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2241      	movs	r2, #65	@ 0x41
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b20      	cmp	r3, #32
 8002080:	d139      	bne.n	80020f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2240      	movs	r2, #64	@ 0x40
 8002086:	5c9b      	ldrb	r3, [r3, r2]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800208c:	2302      	movs	r3, #2
 800208e:	e033      	b.n	80020f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2240      	movs	r2, #64	@ 0x40
 8002094:	2101      	movs	r1, #1
 8002096:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2241      	movs	r2, #65	@ 0x41
 800209c:	2124      	movs	r1, #36	@ 0x24
 800209e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2101      	movs	r1, #1
 80020ac:	438a      	bics	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a11      	ldr	r2, [pc, #68]	@ (8002100 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2241      	movs	r2, #65	@ 0x41
 80020e6:	2120      	movs	r1, #32
 80020e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2240      	movs	r2, #64	@ 0x40
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020f6:	2302      	movs	r3, #2
  }
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	fffff0ff 	.word	0xfffff0ff

08002104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002112:	4013      	ands	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d11f      	bne.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002128:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	0013      	movs	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	189b      	adds	r3, r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4912      	ldr	r1, [pc, #72]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002136:	0018      	movs	r0, r3
 8002138:	f7fd ffe4 	bl	8000104 <__udivsi3>
 800213c:	0003      	movs	r3, r0
 800213e:	3301      	adds	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002142:	e008      	b.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3b01      	subs	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e001      	b.n	8002156 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e009      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002156:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	401a      	ands	r2, r3
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	429a      	cmp	r2, r3
 8002166:	d0ed      	beq.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	40007000 	.word	0x40007000
 8002178:	fffff9ff 	.word	0xfffff9ff
 800217c:	20000000 	.word	0x20000000
 8002180:	000f4240 	.word	0x000f4240

08002184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f000 fb50 	bl	8002838 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d100      	bne.n	80021a4 <HAL_RCC_OscConfig+0x20>
 80021a2:	e07c      	b.n	800229e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a4:	4bc3      	ldr	r3, [pc, #780]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2238      	movs	r2, #56	@ 0x38
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ae:	4bc1      	ldr	r3, [pc, #772]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2203      	movs	r2, #3
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x40>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d002      	beq.n	80021ca <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ca:	4bba      	ldr	r3, [pc, #744]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	029b      	lsls	r3, r3, #10
 80021d2:	4013      	ands	r3, r2
 80021d4:	d062      	beq.n	800229c <HAL_RCC_OscConfig+0x118>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d15e      	bne.n	800229c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e32a      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	025b      	lsls	r3, r3, #9
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_OscConfig+0x7a>
 80021ee:	4bb1      	ldr	r3, [pc, #708]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4bb0      	ldr	r3, [pc, #704]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	0249      	lsls	r1, r1, #9
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e020      	b.n	8002240 <HAL_RCC_OscConfig+0xbc>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	23a0      	movs	r3, #160	@ 0xa0
 8002204:	02db      	lsls	r3, r3, #11
 8002206:	429a      	cmp	r2, r3
 8002208:	d10e      	bne.n	8002228 <HAL_RCC_OscConfig+0xa4>
 800220a:	4baa      	ldr	r3, [pc, #680]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4ba9      	ldr	r3, [pc, #676]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002210:	2180      	movs	r1, #128	@ 0x80
 8002212:	02c9      	lsls	r1, r1, #11
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	4ba6      	ldr	r3, [pc, #664]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4ba5      	ldr	r3, [pc, #660]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800221e:	2180      	movs	r1, #128	@ 0x80
 8002220:	0249      	lsls	r1, r1, #9
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0xbc>
 8002228:	4ba2      	ldr	r3, [pc, #648]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4ba1      	ldr	r3, [pc, #644]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800222e:	49a2      	ldr	r1, [pc, #648]	@ (80024b8 <HAL_RCC_OscConfig+0x334>)
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	4b9f      	ldr	r3, [pc, #636]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b9e      	ldr	r3, [pc, #632]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800223a:	49a0      	ldr	r1, [pc, #640]	@ (80024bc <HAL_RCC_OscConfig+0x338>)
 800223c:	400a      	ands	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d014      	beq.n	8002272 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fe24 	bl	8000e94 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002252:	f7fe fe1f 	bl	8000e94 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	@ 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e2e9      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002264:	4b93      	ldr	r3, [pc, #588]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	029b      	lsls	r3, r3, #10
 800226c:	4013      	ands	r3, r2
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0xce>
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe fe0f 	bl	8000e94 <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7fe fe0a 	bl	8000e94 <HAL_GetTick>
 8002280:	0002      	movs	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e2d4      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228e:	4b89      	ldr	r3, [pc, #548]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	029b      	lsls	r3, r3, #10
 8002296:	4013      	ands	r3, r2
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0xf8>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d100      	bne.n	80022aa <HAL_RCC_OscConfig+0x126>
 80022a8:	e099      	b.n	80023de <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022aa:	4b82      	ldr	r3, [pc, #520]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2238      	movs	r2, #56	@ 0x38
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b4:	4b7f      	ldr	r3, [pc, #508]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2203      	movs	r2, #3
 80022ba:	4013      	ands	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d102      	bne.n	80022ca <HAL_RCC_OscConfig+0x146>
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d135      	bne.n	800233c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d0:	4b78      	ldr	r3, [pc, #480]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	@ 0x80
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4013      	ands	r3, r2
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_OscConfig+0x164>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e2a7      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b72      	ldr	r3, [pc, #456]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a74      	ldr	r2, [pc, #464]	@ (80024c0 <HAL_RCC_OscConfig+0x33c>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	021a      	lsls	r2, r3, #8
 80022f8:	4b6e      	ldr	r3, [pc, #440]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d112      	bne.n	800232a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002304:	4b6b      	ldr	r3, [pc, #428]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6e      	ldr	r2, [pc, #440]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 800230a:	4013      	ands	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	4b68      	ldr	r3, [pc, #416]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002318:	4b66      	ldr	r3, [pc, #408]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0adb      	lsrs	r3, r3, #11
 800231e:	2207      	movs	r2, #7
 8002320:	4013      	ands	r3, r2
 8002322:	4a69      	ldr	r2, [pc, #420]	@ (80024c8 <HAL_RCC_OscConfig+0x344>)
 8002324:	40da      	lsrs	r2, r3
 8002326:	4b69      	ldr	r3, [pc, #420]	@ (80024cc <HAL_RCC_OscConfig+0x348>)
 8002328:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800232a:	4b69      	ldr	r3, [pc, #420]	@ (80024d0 <HAL_RCC_OscConfig+0x34c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0018      	movs	r0, r3
 8002330:	f7fe fd54 	bl	8000ddc <HAL_InitTick>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d051      	beq.n	80023dc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e27d      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d030      	beq.n	80023a6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002344:	4b5b      	ldr	r3, [pc, #364]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a5e      	ldr	r2, [pc, #376]	@ (80024c4 <HAL_RCC_OscConfig+0x340>)
 800234a:	4013      	ands	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	4b58      	ldr	r3, [pc, #352]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b56      	ldr	r3, [pc, #344]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b55      	ldr	r3, [pc, #340]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800235e:	2180      	movs	r1, #128	@ 0x80
 8002360:	0049      	lsls	r1, r1, #1
 8002362:	430a      	orrs	r2, r1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7fe fd95 	bl	8000e94 <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002370:	f7fe fd90 	bl	8000e94 <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e25a      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002382:	4b4c      	ldr	r3, [pc, #304]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4013      	ands	r3, r2
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b49      	ldr	r3, [pc, #292]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4a4b      	ldr	r2, [pc, #300]	@ (80024c0 <HAL_RCC_OscConfig+0x33c>)
 8002394:	4013      	ands	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	021a      	lsls	r2, r3, #8
 800239e:	4b45      	ldr	r3, [pc, #276]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	e01b      	b.n	80023de <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b42      	ldr	r3, [pc, #264]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80023ac:	4949      	ldr	r1, [pc, #292]	@ (80024d4 <HAL_RCC_OscConfig+0x350>)
 80023ae:	400a      	ands	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe fd6f 	bl	8000e94 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7fe fd6a 	bl	8000e94 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e234      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ce:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	@ 0x80
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x238>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2208      	movs	r2, #8
 80023e4:	4013      	ands	r3, r2
 80023e6:	d047      	beq.n	8002478 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023e8:	4b32      	ldr	r3, [pc, #200]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2238      	movs	r2, #56	@ 0x38
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b18      	cmp	r3, #24
 80023f2:	d10a      	bne.n	800240a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023f4:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 80023f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d03c      	beq.n	8002478 <HAL_RCC_OscConfig+0x2f4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d138      	bne.n	8002478 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e216      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d019      	beq.n	8002446 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002412:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002414:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002416:	4b27      	ldr	r3, [pc, #156]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002418:	2101      	movs	r1, #1
 800241a:	430a      	orrs	r2, r1
 800241c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7fe fd39 	bl	8000e94 <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fd34 	bl	8000e94 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1fe      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243a:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800243c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243e:	2202      	movs	r2, #2
 8002440:	4013      	ands	r3, r2
 8002442:	d0f1      	beq.n	8002428 <HAL_RCC_OscConfig+0x2a4>
 8002444:	e018      	b.n	8002478 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800244a:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800244c:	2101      	movs	r1, #1
 800244e:	438a      	bics	r2, r1
 8002450:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe fd1f 	bl	8000e94 <HAL_GetTick>
 8002456:	0003      	movs	r3, r0
 8002458:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245c:	f7fe fd1a 	bl	8000e94 <HAL_GetTick>
 8002460:	0002      	movs	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1e4      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246e:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 8002470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	d1f1      	bne.n	800245c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2204      	movs	r2, #4
 800247e:	4013      	ands	r3, r2
 8002480:	d100      	bne.n	8002484 <HAL_RCC_OscConfig+0x300>
 8002482:	e0c7      	b.n	8002614 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002484:	231f      	movs	r3, #31
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800248c:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2238      	movs	r2, #56	@ 0x38
 8002492:	4013      	ands	r3, r2
 8002494:	2b20      	cmp	r3, #32
 8002496:	d11f      	bne.n	80024d8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_RCC_OscConfig+0x330>)
 800249a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249c:	2202      	movs	r2, #2
 800249e:	4013      	ands	r3, r2
 80024a0:	d100      	bne.n	80024a4 <HAL_RCC_OscConfig+0x320>
 80024a2:	e0b7      	b.n	8002614 <HAL_RCC_OscConfig+0x490>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d000      	beq.n	80024ae <HAL_RCC_OscConfig+0x32a>
 80024ac:	e0b2      	b.n	8002614 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1c2      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
 80024b2:	46c0      	nop			@ (mov r8, r8)
 80024b4:	40021000 	.word	0x40021000
 80024b8:	fffeffff 	.word	0xfffeffff
 80024bc:	fffbffff 	.word	0xfffbffff
 80024c0:	ffff80ff 	.word	0xffff80ff
 80024c4:	ffffc7ff 	.word	0xffffc7ff
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004
 80024d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d8:	4bb5      	ldr	r3, [pc, #724]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80024da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	055b      	lsls	r3, r3, #21
 80024e0:	4013      	ands	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x364>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x366>
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d011      	beq.n	8002512 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4bb0      	ldr	r3, [pc, #704]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80024f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024f2:	4baf      	ldr	r3, [pc, #700]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80024f4:	2180      	movs	r1, #128	@ 0x80
 80024f6:	0549      	lsls	r1, r1, #21
 80024f8:	430a      	orrs	r2, r1
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024fc:	4bac      	ldr	r3, [pc, #688]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80024fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	055b      	lsls	r3, r3, #21
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800250a:	231f      	movs	r3, #31
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002512:	4ba8      	ldr	r3, [pc, #672]	@ (80027b4 <HAL_RCC_OscConfig+0x630>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d11a      	bne.n	8002554 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800251e:	4ba5      	ldr	r3, [pc, #660]	@ (80027b4 <HAL_RCC_OscConfig+0x630>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4ba4      	ldr	r3, [pc, #656]	@ (80027b4 <HAL_RCC_OscConfig+0x630>)
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	0049      	lsls	r1, r1, #1
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800252c:	f7fe fcb2 	bl	8000e94 <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe fcad 	bl	8000e94 <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e177      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	4b9a      	ldr	r3, [pc, #616]	@ (80027b4 <HAL_RCC_OscConfig+0x630>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4013      	ands	r3, r2
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x3e6>
 800255c:	4b94      	ldr	r3, [pc, #592]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800255e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002560:	4b93      	ldr	r3, [pc, #588]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002562:	2101      	movs	r1, #1
 8002564:	430a      	orrs	r2, r1
 8002566:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002568:	e01c      	b.n	80025a4 <HAL_RCC_OscConfig+0x420>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x408>
 8002572:	4b8f      	ldr	r3, [pc, #572]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002574:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002576:	4b8e      	ldr	r3, [pc, #568]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002578:	2104      	movs	r1, #4
 800257a:	430a      	orrs	r2, r1
 800257c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800257e:	4b8c      	ldr	r3, [pc, #560]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002580:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002582:	4b8b      	ldr	r3, [pc, #556]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002584:	2101      	movs	r1, #1
 8002586:	430a      	orrs	r2, r1
 8002588:	65da      	str	r2, [r3, #92]	@ 0x5c
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0x420>
 800258c:	4b88      	ldr	r3, [pc, #544]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800258e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002590:	4b87      	ldr	r3, [pc, #540]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002592:	2101      	movs	r1, #1
 8002594:	438a      	bics	r2, r1
 8002596:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002598:	4b85      	ldr	r3, [pc, #532]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800259a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800259c:	4b84      	ldr	r3, [pc, #528]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800259e:	2104      	movs	r1, #4
 80025a0:	438a      	bics	r2, r1
 80025a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d014      	beq.n	80025d6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fc72 	bl	8000e94 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b4:	e009      	b.n	80025ca <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fc6d 	bl	8000e94 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	4a7d      	ldr	r2, [pc, #500]	@ (80027b8 <HAL_RCC_OscConfig+0x634>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e136      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ca:	4b79      	ldr	r3, [pc, #484]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80025cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x432>
 80025d4:	e013      	b.n	80025fe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fc5d 	bl	8000e94 <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025de:	e009      	b.n	80025f4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fc58 	bl	8000e94 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	4a73      	ldr	r2, [pc, #460]	@ (80027b8 <HAL_RCC_OscConfig+0x634>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e121      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f4:	4b6e      	ldr	r3, [pc, #440]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80025f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025fe:	231f      	movs	r3, #31
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002608:	4b69      	ldr	r3, [pc, #420]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800260a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800260c:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800260e:	496b      	ldr	r1, [pc, #428]	@ (80027bc <HAL_RCC_OscConfig+0x638>)
 8002610:	400a      	ands	r2, r1
 8002612:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2220      	movs	r2, #32
 800261a:	4013      	ands	r3, r2
 800261c:	d039      	beq.n	8002692 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01b      	beq.n	800265e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002626:	4b62      	ldr	r3, [pc, #392]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b61      	ldr	r3, [pc, #388]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800262c:	2180      	movs	r1, #128	@ 0x80
 800262e:	03c9      	lsls	r1, r1, #15
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe fc2e 	bl	8000e94 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800263e:	f7fe fc29 	bl	8000e94 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0f3      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002650:	4b57      	ldr	r3, [pc, #348]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	4013      	ands	r3, r2
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x4ba>
 800265c:	e019      	b.n	8002692 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800265e:	4b54      	ldr	r3, [pc, #336]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b53      	ldr	r3, [pc, #332]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002664:	4956      	ldr	r1, [pc, #344]	@ (80027c0 <HAL_RCC_OscConfig+0x63c>)
 8002666:	400a      	ands	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fc13 	bl	8000e94 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002674:	f7fe fc0e 	bl	8000e94 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0d8      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002686:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	4013      	ands	r3, r2
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d100      	bne.n	800269c <HAL_RCC_OscConfig+0x518>
 800269a:	e0cc      	b.n	8002836 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269c:	4b44      	ldr	r3, [pc, #272]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2238      	movs	r2, #56	@ 0x38
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d100      	bne.n	80026aa <HAL_RCC_OscConfig+0x526>
 80026a8:	e07b      	b.n	80027a2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d156      	bne.n	8002760 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b3f      	ldr	r3, [pc, #252]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b3e      	ldr	r3, [pc, #248]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80026b8:	4942      	ldr	r1, [pc, #264]	@ (80027c4 <HAL_RCC_OscConfig+0x640>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fbe9 	bl	8000e94 <HAL_GetTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fbe4 	bl	8000e94 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0ae      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026da:	4b35      	ldr	r3, [pc, #212]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	049b      	lsls	r3, r3, #18
 80026e2:	4013      	ands	r3, r2
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e6:	4b32      	ldr	r3, [pc, #200]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4a37      	ldr	r2, [pc, #220]	@ (80027c8 <HAL_RCC_OscConfig+0x644>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002712:	431a      	orrs	r2, r3
 8002714:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002716:	430a      	orrs	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271a:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b24      	ldr	r3, [pc, #144]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002720:	2180      	movs	r1, #128	@ 0x80
 8002722:	0449      	lsls	r1, r1, #17
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002728:	4b21      	ldr	r3, [pc, #132]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800272e:	2180      	movs	r1, #128	@ 0x80
 8002730:	0549      	lsls	r1, r1, #21
 8002732:	430a      	orrs	r2, r1
 8002734:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fbad 	bl	8000e94 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fba8 	bl	8000e94 <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e072      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	049b      	lsls	r3, r3, #18
 800275a:	4013      	ands	r3, r2
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x5bc>
 800275e:	e06a      	b.n	8002836 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002766:	4917      	ldr	r1, [pc, #92]	@ (80027c4 <HAL_RCC_OscConfig+0x640>)
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fb92 	bl	8000e94 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe fb8d 	bl	8000e94 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e057      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	049b      	lsls	r3, r3, #18
 8002790:	4013      	ands	r3, r2
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_OscConfig+0x62c>)
 800279a:	490c      	ldr	r1, [pc, #48]	@ (80027cc <HAL_RCC_OscConfig+0x648>)
 800279c:	400a      	ands	r2, r1
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	e049      	b.n	8002836 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d112      	bne.n	80027d0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e044      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40007000 	.word	0x40007000
 80027b8:	00001388 	.word	0x00001388
 80027bc:	efffffff 	.word	0xefffffff
 80027c0:	ffbfffff 	.word	0xffbfffff
 80027c4:	feffffff 	.word	0xfeffffff
 80027c8:	11c1808c 	.word	0x11c1808c
 80027cc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_RCC_OscConfig+0x6bc>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2203      	movs	r2, #3
 80027da:	401a      	ands	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d126      	bne.n	8002832 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2270      	movs	r2, #112	@ 0x70
 80027e8:	401a      	ands	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d11f      	bne.n	8002832 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	23fe      	movs	r3, #254	@ 0xfe
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d116      	bne.n	8002832 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	23f8      	movs	r3, #248	@ 0xf8
 8002808:	039b      	lsls	r3, r3, #14
 800280a:	401a      	ands	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d10e      	bne.n	8002832 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	23e0      	movs	r3, #224	@ 0xe0
 8002818:	051b      	lsls	r3, r3, #20
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	0f5b      	lsrs	r3, r3, #29
 8002828:	075a      	lsls	r2, r3, #29
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b008      	add	sp, #32
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0e9      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b76      	ldr	r3, [pc, #472]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2207      	movs	r2, #7
 800285e:	4013      	ands	r3, r2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d91e      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b73      	ldr	r3, [pc, #460]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2207      	movs	r2, #7
 800286c:	4393      	bics	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	4b70      	ldr	r3, [pc, #448]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002878:	f7fe fb0c 	bl	8000e94 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002880:	e009      	b.n	8002896 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002882:	f7fe fb07 	bl	8000e94 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0ca      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002896:	4b67      	ldr	r3, [pc, #412]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2207      	movs	r2, #7
 800289c:	4013      	ands	r3, r2
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d1ee      	bne.n	8002882 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d015      	beq.n	80028da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2204      	movs	r2, #4
 80028b4:	4013      	ands	r3, r2
 80028b6:	d006      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028b8:	4b60      	ldr	r3, [pc, #384]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	4b5f      	ldr	r3, [pc, #380]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 80028be:	21e0      	movs	r1, #224	@ 0xe0
 80028c0:	01c9      	lsls	r1, r1, #7
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002a40 <HAL_RCC_ClockConfig+0x1fc>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	4b59      	ldr	r3, [pc, #356]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	4013      	ands	r3, r2
 80028e2:	d057      	beq.n	8002994 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ec:	4b53      	ldr	r3, [pc, #332]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	029b      	lsls	r3, r3, #10
 80028f4:	4013      	ands	r3, r2
 80028f6:	d12b      	bne.n	8002950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e097      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d107      	bne.n	8002914 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002904:	4b4d      	ldr	r3, [pc, #308]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	049b      	lsls	r3, r3, #18
 800290c:	4013      	ands	r3, r2
 800290e:	d11f      	bne.n	8002950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e08b      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800291c:	4b47      	ldr	r3, [pc, #284]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4013      	ands	r3, r2
 8002926:	d113      	bne.n	8002950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e07f      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d106      	bne.n	8002942 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002934:	4b41      	ldr	r3, [pc, #260]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d108      	bne.n	8002950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e074      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002942:	4b3e      	ldr	r3, [pc, #248]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002946:	2202      	movs	r2, #2
 8002948:	4013      	ands	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e06d      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002950:	4b3a      	ldr	r3, [pc, #232]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2207      	movs	r2, #7
 8002956:	4393      	bics	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	4b37      	ldr	r3, [pc, #220]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe fa96 	bl	8000e94 <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296c:	e009      	b.n	8002982 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296e:	f7fe fa91 	bl	8000e94 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	4a2f      	ldr	r2, [pc, #188]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e054      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	4b2e      	ldr	r3, [pc, #184]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2238      	movs	r2, #56	@ 0x38
 8002988:	401a      	ands	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	429a      	cmp	r2, r3
 8002992:	d1ec      	bne.n	800296e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002994:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2207      	movs	r2, #7
 800299a:	4013      	ands	r3, r2
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d21e      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2207      	movs	r2, #7
 80029a8:	4393      	bics	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fa6e 	bl	8000e94 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029bc:	e009      	b.n	80029d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029be:	f7fe fa69 	bl	8000e94 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e02c      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029d2:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2207      	movs	r2, #7
 80029d8:	4013      	ands	r3, r2
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1ee      	bne.n	80029be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2204      	movs	r2, #4
 80029e6:	4013      	ands	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029ea:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	4a15      	ldr	r2, [pc, #84]	@ (8002a44 <HAL_RCC_ClockConfig+0x200>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029fe:	f000 f829 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002a02:	0001      	movs	r1, r0
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_RCC_ClockConfig+0x204>)
 8002a10:	0092      	lsls	r2, r2, #2
 8002a12:	58d3      	ldr	r3, [r2, r3]
 8002a14:	221f      	movs	r2, #31
 8002a16:	4013      	ands	r3, r2
 8002a18:	000a      	movs	r2, r1
 8002a1a:	40da      	lsrs	r2, r3
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_RCC_ClockConfig+0x208>)
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <HAL_RCC_ClockConfig+0x20c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7fe f9d9 	bl	8000ddc <HAL_InitTick>
 8002a2a:	0003      	movs	r3, r0
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b004      	add	sp, #16
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40022000 	.word	0x40022000
 8002a38:	00001388 	.word	0x00001388
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	fffff0ff 	.word	0xfffff0ff
 8002a44:	ffff8fff 	.word	0xffff8fff
 8002a48:	08003040 	.word	0x08003040
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	20000004 	.word	0x20000004

08002a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2238      	movs	r2, #56	@ 0x38
 8002a60:	4013      	ands	r3, r2
 8002a62:	d10f      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a64:	4b39      	ldr	r3, [pc, #228]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0adb      	lsrs	r3, r3, #11
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2201      	movs	r2, #1
 8002a70:	409a      	lsls	r2, r3
 8002a72:	0013      	movs	r3, r2
 8002a74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	4835      	ldr	r0, [pc, #212]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a7a:	f7fd fb43 	bl	8000104 <__udivsi3>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	e05d      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a84:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2238      	movs	r2, #56	@ 0x38
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d102      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a90:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e054      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a96:	4b2d      	ldr	r3, [pc, #180]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2238      	movs	r2, #56	@ 0x38
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d138      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aac:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d10d      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4824      	ldr	r0, [pc, #144]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ac4:	f7fd fb1e 	bl	8000104 <__udivsi3>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	0019      	movs	r1, r3
 8002acc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	227f      	movs	r2, #127	@ 0x7f
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	434b      	muls	r3, r1
 8002ad8:	617b      	str	r3, [r7, #20]
        break;
 8002ada:	e00d      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	481c      	ldr	r0, [pc, #112]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ae0:	f7fd fb10 	bl	8000104 <__udivsi3>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	227f      	movs	r2, #127	@ 0x7f
 8002af0:	4013      	ands	r3, r2
 8002af2:	434b      	muls	r3, r1
 8002af4:	617b      	str	r3, [r7, #20]
        break;
 8002af6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0f5b      	lsrs	r3, r3, #29
 8002afe:	2207      	movs	r2, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	3301      	adds	r3, #1
 8002b04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	6978      	ldr	r0, [r7, #20]
 8002b0a:	f7fd fafb 	bl	8000104 <__udivsi3>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	e015      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b14:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2238      	movs	r2, #56	@ 0x38
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d103      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b28:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2238      	movs	r2, #56	@ 0x38
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b18      	cmp	r3, #24
 8002b32:	d103      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b34:	23fa      	movs	r3, #250	@ 0xfa
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	e001      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b40:	693b      	ldr	r3, [r7, #16]
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b006      	add	sp, #24
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	007a1200 	.word	0x007a1200

08002b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b60:	2313      	movs	r3, #19
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b68:	2312      	movs	r3, #18
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b7c:	e0ad      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7e:	2011      	movs	r0, #17
 8002b80:	183b      	adds	r3, r7, r0
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b47      	ldr	r3, [pc, #284]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	055b      	lsls	r3, r3, #21
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d110      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b44      	ldr	r3, [pc, #272]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b96:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b98:	2180      	movs	r1, #128	@ 0x80
 8002b9a:	0549      	lsls	r1, r1, #21
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ba0:	4b40      	ldr	r3, [pc, #256]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	055b      	lsls	r3, r3, #21
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	0049      	lsls	r1, r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc2:	f7fe f967 	bl	8000e94 <HAL_GetTick>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bca:	e00b      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bcc:	f7fe f962 	bl	8000e94 <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d904      	bls.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002bda:	2313      	movs	r3, #19
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2203      	movs	r2, #3
 8002be0:	701a      	strb	r2, [r3, #0]
        break;
 8002be2:	e005      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be4:	4b30      	ldr	r3, [pc, #192]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	d0ed      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002bf0:	2313      	movs	r3, #19
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d15e      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bfe:	23c0      	movs	r3, #192	@ 0xc0
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4013      	ands	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d019      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d014      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c16:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	4a24      	ldr	r2, [pc, #144]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c20:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c26:	2180      	movs	r1, #128	@ 0x80
 8002c28:	0249      	lsls	r1, r1, #9
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c34:	491e      	ldr	r1, [pc, #120]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2201      	movs	r2, #1
 8002c44:	4013      	ands	r3, r2
 8002c46:	d016      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe f924 	bl	8000e94 <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c50:	e00c      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe f91f 	bl	8000e94 <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	4a15      	ldr	r2, [pc, #84]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d904      	bls.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c62:	2313      	movs	r3, #19
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2203      	movs	r2, #3
 8002c68:	701a      	strb	r2, [r3, #0]
            break;
 8002c6a:	e004      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	2202      	movs	r2, #2
 8002c72:	4013      	ands	r3, r2
 8002c74:	d0ed      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c76:	2313      	movs	r3, #19
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	4a09      	ldr	r2, [pc, #36]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c94:	e016      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c96:	2312      	movs	r3, #18
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	2213      	movs	r2, #19
 8002c9c:	18ba      	adds	r2, r7, r2
 8002c9e:	7812      	ldrb	r2, [r2, #0]
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e00f      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	fffffcff 	.word	0xfffffcff
 8002cb0:	fffeffff 	.word	0xfffeffff
 8002cb4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	2312      	movs	r3, #18
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2213      	movs	r2, #19
 8002cbe:	18ba      	adds	r2, r7, r2
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cc4:	2311      	movs	r3, #17
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4bb6      	ldr	r3, [pc, #728]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cd2:	4bb5      	ldr	r3, [pc, #724]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cd4:	49b5      	ldr	r1, [pc, #724]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce4:	4bb0      	ldr	r3, [pc, #704]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4393      	bics	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4bad      	ldr	r3, [pc, #692]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d009      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d02:	4ba9      	ldr	r3, [pc, #676]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d06:	220c      	movs	r2, #12
 8002d08:	4393      	bics	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4ba5      	ldr	r3, [pc, #660]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d12:	430a      	orrs	r2, r1
 8002d14:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d20:	4ba1      	ldr	r3, [pc, #644]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	2230      	movs	r2, #48	@ 0x30
 8002d26:	4393      	bics	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	4b9e      	ldr	r3, [pc, #632]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d30:	430a      	orrs	r2, r1
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2210      	movs	r2, #16
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d3e:	4b9a      	ldr	r3, [pc, #616]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	4a9b      	ldr	r2, [pc, #620]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	4b96      	ldr	r3, [pc, #600]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	2380      	movs	r3, #128	@ 0x80
 8002d58:	015b      	lsls	r3, r3, #5
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002d5e:	4b92      	ldr	r3, [pc, #584]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d62:	4a94      	ldr	r2, [pc, #592]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d7e:	4b8a      	ldr	r3, [pc, #552]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d82:	4a8d      	ldr	r2, [pc, #564]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d8c:	4b86      	ldr	r3, [pc, #536]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d9e:	4b82      	ldr	r3, [pc, #520]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da2:	4a86      	ldr	r2, [pc, #536]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dac:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dae:	430a      	orrs	r2, r1
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dbc:	4b7a      	ldr	r3, [pc, #488]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	4a7f      	ldr	r2, [pc, #508]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	4b77      	ldr	r3, [pc, #476]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2240      	movs	r2, #64	@ 0x40
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dda:	4b73      	ldr	r3, [pc, #460]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dde:	4a79      	ldr	r2, [pc, #484]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	01db      	lsls	r3, r3, #7
 8002df6:	4013      	ands	r3, r2
 8002df8:	d015      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	0899      	lsrs	r1, r3, #2
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e06:	4b68      	ldr	r3, [pc, #416]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	05db      	lsls	r3, r3, #23
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d106      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e18:	4b63      	ldr	r3, [pc, #396]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b62      	ldr	r3, [pc, #392]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	0249      	lsls	r1, r1, #9
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	031b      	lsls	r3, r3, #12
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e32:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	2240      	movs	r2, #64	@ 0x40
 8002e38:	4393      	bics	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e40:	4b59      	ldr	r3, [pc, #356]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e42:	430a      	orrs	r2, r1
 8002e44:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	039b      	lsls	r3, r3, #14
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d016      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e52:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e56:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e60:	4b51      	ldr	r3, [pc, #324]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e62:	430a      	orrs	r2, r1
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e6a:	2380      	movs	r3, #128	@ 0x80
 8002e6c:	03db      	lsls	r3, r3, #15
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d106      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e72:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e78:	2180      	movs	r1, #128	@ 0x80
 8002e7a:	0449      	lsls	r1, r1, #17
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	03db      	lsls	r3, r3, #15
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d016      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e8c:	4b46      	ldr	r3, [pc, #280]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	4a4e      	ldr	r2, [pc, #312]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e9a:	4b43      	ldr	r3, [pc, #268]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	045b      	lsls	r3, r3, #17
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002eac:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eb2:	2180      	movs	r1, #128	@ 0x80
 8002eb4:	0449      	lsls	r1, r1, #17
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d014      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ec6:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	2203      	movs	r2, #3
 8002ecc:	4393      	bics	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1a      	ldr	r2, [r3, #32]
 8002ed4:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ee2:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	0249      	lsls	r1, r1, #9
 8002eec:	430a      	orrs	r2, r1
 8002eee:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	019b      	lsls	r3, r3, #6
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d014      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002efc:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	220c      	movs	r2, #12
 8002f02:	4393      	bics	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f0a:	4b27      	ldr	r3, [pc, #156]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d106      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f18:	4b23      	ldr	r3, [pc, #140]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	4b22      	ldr	r3, [pc, #136]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f1e:	2180      	movs	r1, #128	@ 0x80
 8002f20:	0249      	lsls	r1, r1, #9
 8002f22:	430a      	orrs	r2, r1
 8002f24:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	045b      	lsls	r3, r3, #17
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d016      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f32:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	4a22      	ldr	r2, [pc, #136]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f40:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f42:	430a      	orrs	r2, r1
 8002f44:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d106      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f58:	2180      	movs	r1, #128	@ 0x80
 8002f5a:	0449      	lsls	r1, r1, #17
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	@ 0x80
 8002f66:	049b      	lsls	r3, r3, #18
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d016      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	4a10      	ldr	r2, [pc, #64]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f84:	2380      	movs	r3, #128	@ 0x80
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f8c:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f92:	2180      	movs	r1, #128	@ 0x80
 8002f94:	0449      	lsls	r1, r1, #17
 8002f96:	430a      	orrs	r2, r1
 8002f98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f9a:	2312      	movs	r3, #18
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b006      	add	sp, #24
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	efffffff 	.word	0xefffffff
 8002fb0:	fffff3ff 	.word	0xfffff3ff
 8002fb4:	fffffcff 	.word	0xfffffcff
 8002fb8:	fff3ffff 	.word	0xfff3ffff
 8002fbc:	ffcfffff 	.word	0xffcfffff
 8002fc0:	ffffcfff 	.word	0xffffcfff
 8002fc4:	ffff3fff 	.word	0xffff3fff
 8002fc8:	ffbfffff 	.word	0xffbfffff
 8002fcc:	feffffff 	.word	0xfeffffff

08002fd0 <memset>:
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	1882      	adds	r2, r0, r2
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d100      	bne.n	8002fda <memset+0xa>
 8002fd8:	4770      	bx	lr
 8002fda:	7019      	strb	r1, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	e7f9      	b.n	8002fd4 <memset+0x4>

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	4c0c      	ldr	r4, [pc, #48]	@ (8003018 <__libc_init_array+0x38>)
 8002fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800301c <__libc_init_array+0x3c>)
 8002fe8:	1b64      	subs	r4, r4, r5
 8002fea:	10a4      	asrs	r4, r4, #2
 8002fec:	42a6      	cmp	r6, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	f000 f819 	bl	8003028 <_init>
 8002ff6:	4c0a      	ldr	r4, [pc, #40]	@ (8003020 <__libc_init_array+0x40>)
 8002ff8:	4d0a      	ldr	r5, [pc, #40]	@ (8003024 <__libc_init_array+0x44>)
 8002ffa:	1b64      	subs	r4, r4, r5
 8002ffc:	10a4      	asrs	r4, r4, #2
 8002ffe:	42a6      	cmp	r6, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	00b3      	lsls	r3, r6, #2
 8003006:	58eb      	ldr	r3, [r5, r3]
 8003008:	4798      	blx	r3
 800300a:	3601      	adds	r6, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	00b3      	lsls	r3, r6, #2
 8003010:	58eb      	ldr	r3, [r5, r3]
 8003012:	4798      	blx	r3
 8003014:	3601      	adds	r6, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	08003080 	.word	0x08003080
 800301c:	08003080 	.word	0x08003080
 8003020:	08003084 	.word	0x08003084
 8003024:	08003080 	.word	0x08003080

08003028 <_init>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr

08003034 <_fini>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr
