
spc250ms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001718c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0801724c  0801724c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080175b0  080175b0  00019214  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080175b0  080175b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080175b8  080175b8  00019214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080175b8  080175b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080175bc  080175bc  000185bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  080175c0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f64  20000214  080177d4  00019214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002178  080177d4  0001a178  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00019214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dc3f  00000000  00000000  00019242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007414  00000000  00000000  00046e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002858  00000000  00000000  0004e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ec6  00000000  00000000  00050af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5df  00000000  00000000  000529b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000353fd  00000000  00000000  0007cf95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed611  00000000  00000000  000b2392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000041e7  00000000  00000000  0019f9a3  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033c  00000000  00000000  001a3b8a  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  001a3ec8  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000a3f0  00000000  00000000  001a3eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  001ae2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000214 	.word	0x20000214
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08017234 	.word	0x08017234

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000218 	.word	0x20000218
 8000104:	08017234 	.word	0x08017234

08000108 <USBPD_CAD_Init>:
 8000108:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	0015      	movs	r5, r2
 800010e:	001e      	movs	r6, r3
 8000110:	2400      	movs	r4, #0
 8000112:	4668      	mov	r0, sp
 8000114:	7a00      	ldrb	r0, [r0, #8]
 8000116:	2803      	cmp	r0, #3
 8000118:	d301      	bcc.n	800011e <USBPD_CAD_Init+0x16>
 800011a:	2401      	movs	r4, #1
 800011c:	e01f      	b.n	800015e <USBPD_CAD_Init+0x56>
 800011e:	9100      	str	r1, [sp, #0]
 8000120:	2900      	cmp	r1, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x20>
 8000124:	2402      	movs	r4, #2
 8000126:	e01a      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000128:	200c      	movs	r0, #12
 800012a:	f016 fbcb 	bl	80168c4 <malloc>
 800012e:	0007      	movs	r7, r0
 8000130:	d101      	bne.n	8000136 <USBPD_CAD_Init+0x2e>
 8000132:	2403      	movs	r4, #3
 8000134:	e013      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000136:	210c      	movs	r1, #12
 8000138:	f016 fcf3 	bl	8016b22 <__aeabi_memclr>
 800013c:	603e      	str	r6, [r7, #0]
 800013e:	723c      	strb	r4, [r7, #8]
 8000140:	9800      	ldr	r0, [sp, #0]
 8000142:	6078      	str	r0, [r7, #4]
 8000144:	484a      	ldr	r0, [pc, #296]	@ (8000270 <.text_6>)
 8000146:	4669      	mov	r1, sp
 8000148:	7a09      	ldrb	r1, [r1, #8]
 800014a:	0089      	lsls	r1, r1, #2
 800014c:	5047      	str	r7, [r0, r1]
 800014e:	9800      	ldr	r0, [sp, #0]
 8000150:	6843      	ldr	r3, [r0, #4]
 8000152:	0032      	movs	r2, r6
 8000154:	0029      	movs	r1, r5
 8000156:	4668      	mov	r0, sp
 8000158:	7a00      	ldrb	r0, [r0, #8]
 800015a:	f010 fa49 	bl	80105f0 <CAD_Init>
 800015e:	0020      	movs	r0, r4
 8000160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000162 <USBPD_CAD_PortEnable>:
 8000162:	2803      	cmp	r0, #3
 8000164:	d203      	bcs.n	800016e <USBPD_CAD_PortEnable+0xc>
 8000166:	4a42      	ldr	r2, [pc, #264]	@ (8000270 <.text_6>)
 8000168:	0080      	lsls	r0, r0, #2
 800016a:	5810      	ldr	r0, [r2, r0]
 800016c:	7201      	strb	r1, [r0, #8]
 800016e:	4770      	bx	lr

08000170 <USBPD_CAD_Process>:
 8000170:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000172:	2400      	movs	r4, #0
 8000174:	4669      	mov	r1, sp
 8000176:	700c      	strb	r4, [r1, #0]
 8000178:	9401      	str	r4, [sp, #4]
 800017a:	2500      	movs	r5, #0
 800017c:	43ed      	mvns	r5, r5
 800017e:	4f3d      	ldr	r7, [pc, #244]	@ (8000274 <.text_7>)
 8000180:	483b      	ldr	r0, [pc, #236]	@ (8000270 <.text_6>)
 8000182:	00a1      	lsls	r1, r4, #2
 8000184:	1846      	adds	r6, r0, r1
 8000186:	6830      	ldr	r0, [r6, #0]
 8000188:	2800      	cmp	r0, #0
 800018a:	d06c      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800018c:	7a00      	ldrb	r0, [r0, #8]
 800018e:	2801      	cmp	r0, #1
 8000190:	d169      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 8000192:	aa01      	add	r2, sp, #4
 8000194:	4669      	mov	r1, sp
 8000196:	b2e0      	uxtb	r0, r4
 8000198:	f010 fbd2 	bl	8010940 <CAD_StateMachine>
 800019c:	42a8      	cmp	r0, r5
 800019e:	d800      	bhi.n	80001a2 <USBPD_CAD_Process+0x32>
 80001a0:	0005      	movs	r5, r0
 80001a2:	4668      	mov	r0, sp
 80001a4:	7800      	ldrb	r0, [r0, #0]
 80001a6:	2801      	cmp	r0, #1
 80001a8:	d004      	beq.n	80001b4 <USBPD_CAD_Process+0x44>
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d012      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001ae:	2804      	cmp	r0, #4
 80001b0:	d010      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001b2:	e040      	b.n	8000236 <USBPD_CAD_Process+0xc6>
 80001b4:	6830      	ldr	r0, [r6, #0]
 80001b6:	6801      	ldr	r1, [r0, #0]
 80001b8:	680a      	ldr	r2, [r1, #0]
 80001ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000278 <.text_8>)
 80001bc:	4013      	ands	r3, r2
 80001be:	600b      	str	r3, [r1, #0]
 80001c0:	6801      	ldr	r1, [r0, #0]
 80001c2:	680a      	ldr	r2, [r1, #0]
 80001c4:	23c0      	movs	r3, #192	@ 0xc0
 80001c6:	439a      	bics	r2, r3
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	6800      	ldr	r0, [r0, #0]
 80001cc:	6801      	ldr	r1, [r0, #0]
 80001ce:	4039      	ands	r1, r7
 80001d0:	6001      	str	r1, [r0, #0]
 80001d2:	e034      	b.n	800023e <USBPD_CAD_Process+0xce>
 80001d4:	6830      	ldr	r0, [r6, #0]
 80001d6:	9901      	ldr	r1, [sp, #4]
 80001d8:	2901      	cmp	r1, #1
 80001da:	6801      	ldr	r1, [r0, #0]
 80001dc:	680a      	ldr	r2, [r1, #0]
 80001de:	d103      	bne.n	80001e8 <USBPD_CAD_Process+0x78>
 80001e0:	403a      	ands	r2, r7
 80001e2:	2380      	movs	r3, #128	@ 0x80
 80001e4:	01db      	lsls	r3, r3, #7
 80001e6:	e002      	b.n	80001ee <USBPD_CAD_Process+0x7e>
 80001e8:	403a      	ands	r2, r7
 80001ea:	2380      	movs	r3, #128	@ 0x80
 80001ec:	019b      	lsls	r3, r3, #6
 80001ee:	4313      	orrs	r3, r2
 80001f0:	600b      	str	r3, [r1, #0]
 80001f2:	6801      	ldr	r1, [r0, #0]
 80001f4:	680b      	ldr	r3, [r1, #0]
 80001f6:	22c0      	movs	r2, #192	@ 0xc0
 80001f8:	4393      	bics	r3, r2
 80001fa:	469c      	mov	ip, r3
 80001fc:	9a01      	ldr	r2, [sp, #4]
 80001fe:	0193      	lsls	r3, r2, #6
 8000200:	22c0      	movs	r2, #192	@ 0xc0
 8000202:	401a      	ands	r2, r3
 8000204:	4663      	mov	r3, ip
 8000206:	431a      	orrs	r2, r3
 8000208:	600a      	str	r2, [r1, #0]
 800020a:	6801      	ldr	r1, [r0, #0]
 800020c:	680a      	ldr	r2, [r1, #0]
 800020e:	2380      	movs	r3, #128	@ 0x80
 8000210:	015b      	lsls	r3, r3, #5
 8000212:	4313      	orrs	r3, r2
 8000214:	600b      	str	r3, [r1, #0]
 8000216:	6800      	ldr	r0, [r0, #0]
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	074a      	lsls	r2, r1, #29
 800021c:	0fd2      	lsrs	r2, r2, #31
 800021e:	d103      	bne.n	8000228 <USBPD_CAD_Process+0xb8>
 8000220:	2208      	movs	r2, #8
 8000222:	4391      	bics	r1, r2
 8000224:	6001      	str	r1, [r0, #0]
 8000226:	e002      	b.n	800022e <USBPD_CAD_Process+0xbe>
 8000228:	2208      	movs	r2, #8
 800022a:	430a      	orrs	r2, r1
 800022c:	6002      	str	r2, [r0, #0]
 800022e:	2168      	movs	r1, #104	@ 0x68
 8000230:	b2e0      	uxtb	r0, r4
 8000232:	f000 f925 	bl	8000480 <USBPD_PE_Notification>
 8000236:	4668      	mov	r0, sp
 8000238:	7800      	ldrb	r0, [r0, #0]
 800023a:	2800      	cmp	r0, #0
 800023c:	d013      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800023e:	9a01      	ldr	r2, [sp, #4]
 8000240:	4668      	mov	r0, sp
 8000242:	7801      	ldrb	r1, [r0, #0]
 8000244:	b2e0      	uxtb	r0, r4
 8000246:	6833      	ldr	r3, [r6, #0]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4798      	blx	r3
 800024e:	4668      	mov	r0, sp
 8000250:	7800      	ldrb	r0, [r0, #0]
 8000252:	2801      	cmp	r0, #1
 8000254:	d003      	beq.n	800025e <USBPD_CAD_Process+0xee>
 8000256:	4668      	mov	r0, sp
 8000258:	7800      	ldrb	r0, [r0, #0]
 800025a:	2803      	cmp	r0, #3
 800025c:	d103      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 800025e:	2169      	movs	r1, #105	@ 0x69
 8000260:	b2e0      	uxtb	r0, r4
 8000262:	f000 f90d 	bl	8000480 <USBPD_PE_Notification>
 8000266:	1c64      	adds	r4, r4, #1
 8000268:	2c03      	cmp	r4, #3
 800026a:	d389      	bcc.n	8000180 <USBPD_CAD_Process+0x10>
 800026c:	0028      	movs	r0, r5
 800026e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000270 <.text_6>:
 8000270:	20000230 	.word	0x20000230

08000274 <.text_7>:
 8000274:	ffff9fff 	.word	0xffff9fff

08000278 <.text_8>:
 8000278:	ffffefff 	.word	0xffffefff

0800027c <USBPD_CAD_AssertRd>:
 800027c:	b510      	push	{r4, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	f012 f84c 	bl	801231c <USBPDM1_DeAssertRp>
 8000284:	0020      	movs	r0, r4
 8000286:	f012 f853 	bl	8012330 <USBPDM1_AssertRd>
 800028a:	bd10      	pop	{r4, pc}

0800028c <USBPD_CAD_AssertRp>:
 800028c:	b510      	push	{r4, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	f012 f8f4 	bl	801247c <USBPDM1_DeAssertRd>
 8000294:	0020      	movs	r0, r4
 8000296:	f011 ff89 	bl	80121ac <USBPDM1_AssertRp>
 800029a:	bd10      	pop	{r4, pc}

0800029c <USBPD_CAD_EnterErrorRecovery>:
 800029c:	b580      	push	{r7, lr}
 800029e:	f010 fa89 	bl	80107b4 <CAD_Enter_ErrorRecovery>
 80002a2:	bd01      	pop	{r0, pc}

080002a4 <USBPD_CAD_SRC_SetRpResistor>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	2404      	movs	r4, #4
 80002a8:	f010 faee 	bl	8010888 <CAD_Set_ResistorRp>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d100      	bne.n	80002b2 <USBPD_CAD_SRC_SetRpResistor+0xe>
 80002b0:	2400      	movs	r4, #0
 80002b2:	0020      	movs	r0, r4
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <USBPD_CAD_SetRpResistor>:
 80002b6:	b580      	push	{r7, lr}
 80002b8:	f7ff fff4 	bl	80002a4 <USBPD_CAD_SRC_SetRpResistor>
 80002bc:	bd02      	pop	{r1, pc}

080002be <USBPD_CAD_GetMemoryConsumption>:
 80002be:	2024      	movs	r0, #36	@ 0x24
 80002c0:	4770      	bx	lr
	...

080002c4 <USBPD_PE_Init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	000e      	movs	r6, r1
 80002c8:	0017      	movs	r7, r2
 80002ca:	001c      	movs	r4, r3
 80002cc:	6871      	ldr	r1, [r6, #4]
 80002ce:	070a      	lsls	r2, r1, #28
 80002d0:	0fd2      	lsrs	r2, r2, #31
 80002d2:	d002      	beq.n	80002da <USBPD_PE_Init+0x16>
 80002d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d002      	beq.n	80002e0 <USBPD_PE_Init+0x1c>
 80002da:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80002dc:	2900      	cmp	r1, #0
 80002de:	d101      	bne.n	80002e4 <USBPD_PE_Init+0x20>
 80002e0:	241b      	movs	r4, #27
 80002e2:	e04a      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002e4:	4669      	mov	r1, sp
 80002e6:	7008      	strb	r0, [r1, #0]
 80002e8:	4668      	mov	r0, sp
 80002ea:	7800      	ldrb	r0, [r0, #0]
 80002ec:	2803      	cmp	r0, #3
 80002ee:	d301      	bcc.n	80002f4 <USBPD_PE_Init+0x30>
 80002f0:	2417      	movs	r4, #23
 80002f2:	e042      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002f4:	2096      	movs	r0, #150	@ 0x96
 80002f6:	00c0      	lsls	r0, r0, #3
 80002f8:	f016 fae4 	bl	80168c4 <malloc>
 80002fc:	0005      	movs	r5, r0
 80002fe:	d101      	bne.n	8000304 <USBPD_PE_Init+0x40>
 8000300:	2416      	movs	r4, #22
 8000302:	e03a      	b.n	800037a <USBPD_PE_Init+0xb6>
 8000304:	2196      	movs	r1, #150	@ 0x96
 8000306:	00c9      	lsls	r1, r1, #3
 8000308:	f016 fc0b 	bl	8016b22 <__aeabi_memclr>
 800030c:	487a      	ldr	r0, [pc, #488]	@ (80004f8 <.text_16>)
 800030e:	4669      	mov	r1, sp
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	0089      	lsls	r1, r1, #2
 8000314:	5045      	str	r5, [r0, r1]
 8000316:	602e      	str	r6, [r5, #0]
 8000318:	606f      	str	r7, [r5, #4]
 800031a:	4668      	mov	r0, sp
 800031c:	7800      	ldrb	r0, [r0, #0]
 800031e:	7428      	strb	r0, [r5, #16]
 8000320:	60ac      	str	r4, [r5, #8]
 8000322:	4876      	ldr	r0, [pc, #472]	@ (80004fc <.text_17>)
 8000324:	182b      	adds	r3, r5, r0
 8000326:	4876      	ldr	r0, [pc, #472]	@ (8000500 <.text_18>)
 8000328:	182a      	adds	r2, r5, r0
 800032a:	0031      	movs	r1, r6
 800032c:	4668      	mov	r0, sp
 800032e:	7800      	ldrb	r0, [r0, #0]
 8000330:	f005 f98c 	bl	800564c <USBPD_PRL_Init>
 8000334:	0004      	movs	r4, r0
 8000336:	d120      	bne.n	800037a <USBPD_PE_Init+0xb6>
 8000338:	6868      	ldr	r0, [r5, #4]
 800033a:	6801      	ldr	r1, [r0, #0]
 800033c:	2703      	movs	r7, #3
 800033e:	682a      	ldr	r2, [r5, #0]
 8000340:	6852      	ldr	r2, [r2, #4]
 8000342:	0753      	lsls	r3, r2, #29
 8000344:	0fdb      	lsrs	r3, r3, #31
 8000346:	d006      	beq.n	8000356 <USBPD_PE_Init+0x92>
 8000348:	2208      	movs	r2, #8
 800034a:	430a      	orrs	r2, r1
 800034c:	6002      	str	r2, [r0, #0]
 800034e:	6873      	ldr	r3, [r6, #4]
 8000350:	403b      	ands	r3, r7
 8000352:	2201      	movs	r2, #1
 8000354:	e005      	b.n	8000362 <USBPD_PE_Init+0x9e>
 8000356:	2208      	movs	r2, #8
 8000358:	4391      	bics	r1, r2
 800035a:	6001      	str	r1, [r0, #0]
 800035c:	6873      	ldr	r3, [r6, #4]
 800035e:	403b      	ands	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	4611      	mov	r1, r2
 8000364:	4668      	mov	r0, sp
 8000366:	7800      	ldrb	r0, [r0, #0]
 8000368:	f005 f9ab 	bl	80056c2 <USBPD_PRL_SetHeader>
 800036c:	6870      	ldr	r0, [r6, #4]
 800036e:	4007      	ands	r7, r0
 8000370:	0039      	movs	r1, r7
 8000372:	4668      	mov	r0, sp
 8000374:	7800      	ldrb	r0, [r0, #0]
 8000376:	f005 f9e2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 800037a:	0020      	movs	r0, r4
 800037c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800037e <USBPD_PE_TimerCounter>:
 800037e:	495e      	ldr	r1, [pc, #376]	@ (80004f8 <.text_16>)
 8000380:	0080      	lsls	r0, r0, #2
 8000382:	5808      	ldr	r0, [r1, r0]
 8000384:	49b4      	ldr	r1, [pc, #720]	@ (8000658 <.text_20>)
 8000386:	084a      	lsrs	r2, r1, #1
 8000388:	8bc3      	ldrh	r3, [r0, #30]
 800038a:	4213      	tst	r3, r2
 800038c:	d002      	beq.n	8000394 <USBPD_PE_TimerCounter+0x16>
 800038e:	8bc3      	ldrh	r3, [r0, #30]
 8000390:	185b      	adds	r3, r3, r1
 8000392:	83c3      	strh	r3, [r0, #30]
 8000394:	8c03      	ldrh	r3, [r0, #32]
 8000396:	4213      	tst	r3, r2
 8000398:	d002      	beq.n	80003a0 <USBPD_PE_TimerCounter+0x22>
 800039a:	8c03      	ldrh	r3, [r0, #32]
 800039c:	185b      	adds	r3, r3, r1
 800039e:	8403      	strh	r3, [r0, #32]
 80003a0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80003a2:	4213      	tst	r3, r2
 80003a4:	d002      	beq.n	80003ac <USBPD_PE_TimerCounter+0x2e>
 80003a6:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80003a8:	185b      	adds	r3, r3, r1
 80003aa:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80003ac:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80003ae:	4213      	tst	r3, r2
 80003b0:	d002      	beq.n	80003b8 <USBPD_PE_TimerCounter+0x3a>
 80003b2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	8443      	strh	r3, [r0, #34]	@ 0x22
 80003b8:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 80003ba:	4213      	tst	r3, r2
 80003bc:	d002      	beq.n	80003c4 <USBPD_PE_TimerCounter+0x46>
 80003be:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 80003c0:	1851      	adds	r1, r2, r1
 80003c2:	8481      	strh	r1, [r0, #36]	@ 0x24
 80003c4:	4770      	bx	lr

080003c6 <USBPD_PE_TimerCounteUpdate>:
 80003c6:	b570      	push	{r4, r5, r6, lr}
 80003c8:	000e      	movs	r6, r1
 80003ca:	494b      	ldr	r1, [pc, #300]	@ (80004f8 <.text_16>)
 80003cc:	0080      	lsls	r0, r0, #2
 80003ce:	580c      	ldr	r4, [r1, r0]
 80003d0:	2180      	movs	r1, #128	@ 0x80
 80003d2:	0209      	lsls	r1, r1, #8
 80003d4:	428e      	cmp	r6, r1
 80003d6:	da28      	bge.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 80003d8:	1e4d      	subs	r5, r1, #1
 80003da:	8be0      	ldrh	r0, [r4, #30]
 80003dc:	4228      	tst	r0, r5
 80003de:	d004      	beq.n	80003ea <USBPD_PE_TimerCounteUpdate+0x24>
 80003e0:	0031      	movs	r1, r6
 80003e2:	8be0      	ldrh	r0, [r4, #30]
 80003e4:	f000 ffcb 	bl	800137e <PE_UpdateTimer>
 80003e8:	83e0      	strh	r0, [r4, #30]
 80003ea:	8c20      	ldrh	r0, [r4, #32]
 80003ec:	4228      	tst	r0, r5
 80003ee:	d004      	beq.n	80003fa <USBPD_PE_TimerCounteUpdate+0x34>
 80003f0:	0031      	movs	r1, r6
 80003f2:	8c20      	ldrh	r0, [r4, #32]
 80003f4:	f000 ffc3 	bl	800137e <PE_UpdateTimer>
 80003f8:	8420      	strh	r0, [r4, #32]
 80003fa:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 80003fc:	4228      	tst	r0, r5
 80003fe:	d004      	beq.n	800040a <USBPD_PE_TimerCounteUpdate+0x44>
 8000400:	0031      	movs	r1, r6
 8000402:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8000404:	f000 ffbb 	bl	800137e <PE_UpdateTimer>
 8000408:	84e0      	strh	r0, [r4, #38]	@ 0x26
 800040a:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 800040c:	4228      	tst	r0, r5
 800040e:	d004      	beq.n	800041a <USBPD_PE_TimerCounteUpdate+0x54>
 8000410:	0031      	movs	r1, r6
 8000412:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000414:	f000 ffb3 	bl	800137e <PE_UpdateTimer>
 8000418:	8460      	strh	r0, [r4, #34]	@ 0x22
 800041a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800041c:	4228      	tst	r0, r5
 800041e:	d004      	beq.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 8000420:	0031      	movs	r1, r6
 8000422:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8000424:	f000 ffab 	bl	800137e <PE_UpdateTimer>
 8000428:	84a0      	strh	r0, [r4, #36]	@ 0x24
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <USBPD_PE_IsCableConnected>:
 800042c:	b510      	push	{r4, lr}
 800042e:	4a32      	ldr	r2, [pc, #200]	@ (80004f8 <.text_16>)
 8000430:	0080      	lsls	r0, r0, #2
 8000432:	5810      	ldr	r0, [r2, r0]
 8000434:	6842      	ldr	r2, [r0, #4]
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	4cb2      	ldr	r4, [pc, #712]	@ (8000704 <.text_22>)
 800043a:	401c      	ands	r4, r3
 800043c:	0309      	lsls	r1, r1, #12
 800043e:	2380      	movs	r3, #128	@ 0x80
 8000440:	015b      	lsls	r3, r3, #5
 8000442:	4019      	ands	r1, r3
 8000444:	4321      	orrs	r1, r4
 8000446:	6011      	str	r1, [r2, #0]
 8000448:	2148      	movs	r1, #72	@ 0x48
 800044a:	7441      	strb	r1, [r0, #17]
 800044c:	bd10      	pop	{r4, pc}

0800044e <USBPD_PE_StateMachine_Reset>:
 800044e:	2148      	movs	r1, #72	@ 0x48
 8000450:	4a29      	ldr	r2, [pc, #164]	@ (80004f8 <.text_16>)
 8000452:	0080      	lsls	r0, r0, #2
 8000454:	5810      	ldr	r0, [r2, r0]
 8000456:	7441      	strb	r1, [r0, #17]
 8000458:	4770      	bx	lr

0800045a <USBPD_PE_StateMachine_Stop>:
 800045a:	b580      	push	{r7, lr}
 800045c:	f005 fc34 	bl	8005cc8 <USBPD_PRL_Stop>
 8000460:	bd01      	pop	{r0, pc}

08000462 <USBPD_PE_StateMachine_DRP>:
 8000462:	b580      	push	{r7, lr}
 8000464:	4924      	ldr	r1, [pc, #144]	@ (80004f8 <.text_16>)
 8000466:	0082      	lsls	r2, r0, #2
 8000468:	5889      	ldr	r1, [r1, r2]
 800046a:	6849      	ldr	r1, [r1, #4]
 800046c:	6809      	ldr	r1, [r1, #0]
 800046e:	074a      	lsls	r2, r1, #29
 8000470:	0fd2      	lsrs	r2, r2, #31
 8000472:	d002      	beq.n	800047a <USBPD_PE_StateMachine_DRP+0x18>
 8000474:	f002 fb8a 	bl	8002b8c <USBPD_PE_StateMachine_SRC>
 8000478:	bd02      	pop	{r1, pc}
 800047a:	f001 fcd5 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 800047e:	bd02      	pop	{r1, pc}

08000480 <USBPD_PE_Notification>:
 8000480:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000482:	0004      	movs	r4, r0
 8000484:	2803      	cmp	r0, #3
 8000486:	d211      	bcs.n	80004ac <USBPD_PE_Notification+0x2c>
 8000488:	000d      	movs	r5, r1
 800048a:	2000      	movs	r0, #0
 800048c:	9000      	str	r0, [sp, #0]
 800048e:	2300      	movs	r3, #0
 8000490:	002a      	movs	r2, r5
 8000492:	0021      	movs	r1, r4
 8000494:	2009      	movs	r0, #9
 8000496:	4eb2      	ldr	r6, [pc, #712]	@ (8000760 <.text_24>)
 8000498:	6836      	ldr	r6, [r6, #0]
 800049a:	47b0      	blx	r6
 800049c:	0029      	movs	r1, r5
 800049e:	0020      	movs	r0, r4
 80004a0:	4ab0      	ldr	r2, [pc, #704]	@ (8000764 <.text_25>)
 80004a2:	00a3      	lsls	r3, r4, #2
 80004a4:	58d2      	ldr	r2, [r2, r3]
 80004a6:	6892      	ldr	r2, [r2, #8]
 80004a8:	68d2      	ldr	r2, [r2, #12]
 80004aa:	4790      	blx	r2
 80004ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080004ae <USBPD_PE_InitVDM_Callback>:
 80004ae:	4aad      	ldr	r2, [pc, #692]	@ (8000764 <.text_25>)
 80004b0:	0080      	lsls	r0, r0, #2
 80004b2:	5810      	ldr	r0, [r2, r0]
 80004b4:	60c1      	str	r1, [r0, #12]
 80004b6:	4770      	bx	lr

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	49aa      	ldr	r1, [pc, #680]	@ (8000764 <.text_25>)
 80004bc:	0082      	lsls	r2, r0, #2
 80004be:	5889      	ldr	r1, [r1, r2]
 80004c0:	220f      	movs	r2, #15
 80004c2:	2332      	movs	r3, #50	@ 0x32
 80004c4:	54ca      	strb	r2, [r1, r3]
 80004c6:	6889      	ldr	r1, [r1, #8]
 80004c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80004ca:	4788      	blx	r1
 80004cc:	2000      	movs	r0, #0
 80004ce:	bd02      	pop	{r1, pc}

080004d0 <USBPD_PE_Request_CableReset>:
 80004d0:	b580      	push	{r7, lr}
 80004d2:	4909      	ldr	r1, [pc, #36]	@ (80004f8 <.text_16>)
 80004d4:	0082      	lsls	r2, r0, #2
 80004d6:	5889      	ldr	r1, [r1, r2]
 80004d8:	684a      	ldr	r2, [r1, #4]
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4ba2      	ldr	r3, [pc, #648]	@ (8000768 <.text_26>)
 80004de:	4013      	ands	r3, r2
 80004e0:	4aa2      	ldr	r2, [pc, #648]	@ (800076c <.text_27>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d105      	bne.n	80004f2 <USBPD_PE_Request_CableReset+0x22>
 80004e6:	2299      	movs	r2, #153	@ 0x99
 80004e8:	2332      	movs	r3, #50	@ 0x32
 80004ea:	54ca      	strb	r2, [r1, r3]
 80004ec:	6889      	ldr	r1, [r1, #8]
 80004ee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80004f0:	4788      	blx	r1
 80004f2:	2010      	movs	r0, #16
 80004f4:	bd02      	pop	{r1, pc}
	...

080004f8 <.text_16>:
 80004f8:	2000023c 	.word	0x2000023c

080004fc <.text_17>:
 80004fc:	0000048e 	.word	0x0000048e

08000500 <.text_18>:
 8000500:	00000281 	.word	0x00000281

08000504 <USBPD_PE_Request_CtrlMessage>:
 8000504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000506:	b096      	sub	sp, #88	@ 0x58
 8000508:	4896      	ldr	r0, [pc, #600]	@ (8000764 <.text_25>)
 800050a:	a916      	add	r1, sp, #88	@ 0x58
 800050c:	7809      	ldrb	r1, [r1, #0]
 800050e:	0089      	lsls	r1, r1, #2
 8000510:	5840      	ldr	r0, [r0, r1]
 8000512:	9001      	str	r0, [sp, #4]
 8000514:	2400      	movs	r4, #0
 8000516:	a802      	add	r0, sp, #8
 8000518:	4995      	ldr	r1, [pc, #596]	@ (8000770 <.text_28>)
 800051a:	224c      	movs	r2, #76	@ 0x4c
 800051c:	f016 faf6 	bl	8016b0c <__aeabi_memcpy>
 8000520:	2303      	movs	r3, #3
 8000522:	9801      	ldr	r0, [sp, #4]
 8000524:	2132      	movs	r1, #50	@ 0x32
 8000526:	5c40      	ldrb	r0, [r0, r1]
 8000528:	2800      	cmp	r0, #0
 800052a:	d105      	bne.n	8000538 <USBPD_PE_Request_CtrlMessage+0x34>
 800052c:	9801      	ldr	r0, [sp, #4]
 800052e:	6840      	ldr	r0, [r0, #4]
 8000530:	6800      	ldr	r0, [r0, #0]
 8000532:	04c1      	lsls	r1, r0, #19
 8000534:	0fc9      	lsrs	r1, r1, #31
 8000536:	d101      	bne.n	800053c <USBPD_PE_Request_CtrlMessage+0x38>
 8000538:	2403      	movs	r4, #3
 800053a:	e089      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	6809      	ldr	r1, [r1, #0]
 8000540:	684a      	ldr	r2, [r1, #4]
 8000542:	0712      	lsls	r2, r2, #28
 8000544:	0fd5      	lsrs	r5, r2, #31
 8000546:	466a      	mov	r2, sp
 8000548:	7055      	strb	r5, [r2, #1]
 800054a:	2201      	movs	r2, #1
 800054c:	0885      	lsrs	r5, r0, #2
 800054e:	4015      	ands	r5, r2
 8000550:	d103      	bne.n	800055a <USBPD_PE_Request_CtrlMessage+0x56>
 8000552:	2502      	movs	r5, #2
 8000554:	466f      	mov	r7, sp
 8000556:	703c      	strb	r4, [r7, #0]
 8000558:	e003      	b.n	8000562 <USBPD_PE_Request_CtrlMessage+0x5e>
 800055a:	2500      	movs	r5, #0
 800055c:	2604      	movs	r6, #4
 800055e:	466f      	mov	r7, sp
 8000560:	703e      	strb	r6, [r7, #0]
 8000562:	0546      	lsls	r6, r0, #21
 8000564:	0f76      	lsrs	r6, r6, #29
 8000566:	2e03      	cmp	r6, #3
 8000568:	d101      	bne.n	800056e <USBPD_PE_Request_CtrlMessage+0x6a>
 800056a:	2608      	movs	r6, #8
 800056c:	e000      	b.n	8000570 <USBPD_PE_Request_CtrlMessage+0x6c>
 800056e:	2600      	movs	r6, #0
 8000570:	4018      	ands	r0, r3
 8000572:	2802      	cmp	r0, #2
 8000574:	d101      	bne.n	800057a <USBPD_PE_Request_CtrlMessage+0x76>
 8000576:	2040      	movs	r0, #64	@ 0x40
 8000578:	e000      	b.n	800057c <USBPD_PE_Request_CtrlMessage+0x78>
 800057a:	2000      	movs	r0, #0
 800057c:	787f      	ldrb	r7, [r7, #1]
 800057e:	433d      	orrs	r5, r7
 8000580:	466f      	mov	r7, sp
 8000582:	783f      	ldrb	r7, [r7, #0]
 8000584:	432f      	orrs	r7, r5
 8000586:	433e      	orrs	r6, r7
 8000588:	4330      	orrs	r0, r6
 800058a:	4003      	ands	r3, r0
 800058c:	d002      	beq.n	8000594 <USBPD_PE_Request_CtrlMessage+0x90>
 800058e:	0003      	movs	r3, r0
 8000590:	2010      	movs	r0, #16
 8000592:	4318      	orrs	r0, r3
 8000594:	2505      	movs	r5, #5
 8000596:	4228      	tst	r0, r5
 8000598:	d002      	beq.n	80005a0 <USBPD_PE_Request_CtrlMessage+0x9c>
 800059a:	0003      	movs	r3, r0
 800059c:	2020      	movs	r0, #32
 800059e:	4318      	orrs	r0, r3
 80005a0:	ab17      	add	r3, sp, #92	@ 0x5c
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	005e      	lsls	r6, r3, #1
 80005a6:	18f3      	adds	r3, r6, r3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	ab02      	add	r3, sp, #8
 80005ac:	9e00      	ldr	r6, [sp, #0]
 80005ae:	5d9e      	ldrb	r6, [r3, r6]
 80005b0:	4030      	ands	r0, r6
 80005b2:	42b0      	cmp	r0, r6
 80005b4:	d11f      	bne.n	80005f6 <USBPD_PE_Request_CtrlMessage+0xf2>
 80005b6:	9e01      	ldr	r6, [sp, #4]
 80005b8:	2733      	movs	r7, #51	@ 0x33
 80005ba:	55f4      	strb	r4, [r6, r7]
 80005bc:	9801      	ldr	r0, [sp, #4]
 80005be:	4eb2      	ldr	r6, [pc, #712]	@ (8000888 <.text_30>)
 80005c0:	1980      	adds	r0, r0, r6
 80005c2:	ae17      	add	r6, sp, #92	@ 0x5c
 80005c4:	7836      	ldrb	r6, [r6, #0]
 80005c6:	2e05      	cmp	r6, #5
 80005c8:	d031      	beq.n	800062e <USBPD_PE_Request_CtrlMessage+0x12a>
 80005ca:	2e0b      	cmp	r6, #11
 80005cc:	d00e      	beq.n	80005ec <USBPD_PE_Request_CtrlMessage+0xe8>
 80005ce:	2e0d      	cmp	r6, #13
 80005d0:	d028      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005d2:	2e11      	cmp	r6, #17
 80005d4:	d011      	beq.n	80005fa <USBPD_PE_Request_CtrlMessage+0xf6>
 80005d6:	2e12      	cmp	r6, #18
 80005d8:	d013      	beq.n	8000602 <USBPD_PE_Request_CtrlMessage+0xfe>
 80005da:	2e14      	cmp	r6, #20
 80005dc:	d013      	beq.n	8000606 <USBPD_PE_Request_CtrlMessage+0x102>
 80005de:	2e15      	cmp	r6, #21
 80005e0:	d017      	beq.n	8000612 <USBPD_PE_Request_CtrlMessage+0x10e>
 80005e2:	2e16      	cmp	r6, #22
 80005e4:	d00b      	beq.n	80005fe <USBPD_PE_Request_CtrlMessage+0xfa>
 80005e6:	2e18      	cmp	r6, #24
 80005e8:	d01c      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005ea:	e021      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	6889      	ldr	r1, [r1, #8]
 80005f0:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d11c      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005f6:	2402      	movs	r4, #2
 80005f8:	e02a      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 80005fa:	2111      	movs	r1, #17
 80005fc:	e010      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 80005fe:	2116      	movs	r1, #22
 8000600:	e00e      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000602:	2112      	movs	r1, #18
 8000604:	e00c      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000606:	8909      	ldrh	r1, [r1, #8]
 8000608:	0889      	lsrs	r1, r1, #2
 800060a:	4211      	tst	r1, r2
 800060c:	d110      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800060e:	2410      	movs	r4, #16
 8000610:	e01e      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000612:	8909      	ldrh	r1, [r1, #8]
 8000614:	09c9      	lsrs	r1, r1, #7
 8000616:	4211      	tst	r1, r2
 8000618:	d101      	bne.n	800061e <USBPD_PE_Request_CtrlMessage+0x11a>
 800061a:	2010      	movs	r0, #16
 800061c:	e019      	b.n	8000652 <USBPD_PE_Request_CtrlMessage+0x14e>
 800061e:	2115      	movs	r1, #21
 8000620:	7001      	strb	r1, [r0, #0]
 8000622:	e005      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000624:	a918      	add	r1, sp, #96	@ 0x60
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	55d1      	strb	r1, [r2, r7]
 800062c:	e000      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800062e:	7005      	strb	r5, [r0, #0]
 8000630:	9900      	ldr	r1, [sp, #0]
 8000632:	1859      	adds	r1, r3, r1
 8000634:	7849      	ldrb	r1, [r1, #1]
 8000636:	7041      	strb	r1, [r0, #1]
 8000638:	9800      	ldr	r0, [sp, #0]
 800063a:	1818      	adds	r0, r3, r0
 800063c:	7880      	ldrb	r0, [r0, #2]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	2232      	movs	r2, #50	@ 0x32
 8000642:	5488      	strb	r0, [r1, r2]
 8000644:	a816      	add	r0, sp, #88	@ 0x58
 8000646:	7800      	ldrb	r0, [r0, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	6889      	ldr	r1, [r1, #8]
 800064c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800064e:	4788      	blx	r1
 8000650:	0020      	movs	r0, r4
 8000652:	b019      	add	sp, #100	@ 0x64
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000658 <.text_20>:
 8000658:	0000ffff 	.word	0x0000ffff

0800065c <USBPD_PE_Request_DataMessage>:
 800065c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	000b      	movs	r3, r1
 8000662:	0017      	movs	r7, r2
 8000664:	483f      	ldr	r0, [pc, #252]	@ (8000764 <.text_25>)
 8000666:	4669      	mov	r1, sp
 8000668:	7a09      	ldrb	r1, [r1, #8]
 800066a:	0089      	lsls	r1, r1, #2
 800066c:	5841      	ldr	r1, [r0, r1]
 800066e:	2402      	movs	r4, #2
 8000670:	2032      	movs	r0, #50	@ 0x32
 8000672:	5c08      	ldrb	r0, [r1, r0]
 8000674:	2800      	cmp	r0, #0
 8000676:	d105      	bne.n	8000684 <USBPD_PE_Request_DataMessage+0x28>
 8000678:	2001      	movs	r0, #1
 800067a:	684a      	ldr	r2, [r1, #4]
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	0b12      	lsrs	r2, r2, #12
 8000680:	4002      	ands	r2, r0
 8000682:	d101      	bne.n	8000688 <USBPD_PE_Request_DataMessage+0x2c>
 8000684:	2403      	movs	r4, #3
 8000686:	e021      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 8000688:	466a      	mov	r2, sp
 800068a:	7013      	strb	r3, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2533      	movs	r5, #51	@ 0x33
 8000690:	554a      	strb	r2, [r1, r5]
 8000692:	000b      	movs	r3, r1
 8000694:	3332      	adds	r3, #50	@ 0x32
 8000696:	4dc0      	ldr	r5, [pc, #768]	@ (8000998 <.text_36>)
 8000698:	4ec0      	ldr	r6, [pc, #768]	@ (800099c <.text_37>)
 800069a:	9701      	str	r7, [sp, #4]
 800069c:	466f      	mov	r7, sp
 800069e:	783f      	ldrb	r7, [r7, #0]
 80006a0:	2f01      	cmp	r7, #1
 80006a2:	d004      	beq.n	80006ae <USBPD_PE_Request_DataMessage+0x52>
 80006a4:	2f06      	cmp	r7, #6
 80006a6:	d013      	beq.n	80006d0 <USBPD_PE_Request_DataMessage+0x74>
 80006a8:	2f07      	cmp	r7, #7
 80006aa:	d01b      	beq.n	80006e4 <USBPD_PE_Request_DataMessage+0x88>
 80006ac:	e027      	b.n	80006fe <USBPD_PE_Request_DataMessage+0xa2>
 80006ae:	684d      	ldr	r5, [r1, #4]
 80006b0:	682d      	ldr	r5, [r5, #0]
 80006b2:	08ad      	lsrs	r5, r5, #2
 80006b4:	4005      	ands	r5, r0
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006b8:	4cc1      	ldr	r4, [pc, #772]	@ (80009c0 <.text_39>)
 80006ba:	5508      	strb	r0, [r1, r4]
 80006bc:	2007      	movs	r0, #7
 80006be:	7018      	strb	r0, [r3, #0]
 80006c0:	2400      	movs	r4, #0
 80006c2:	4668      	mov	r0, sp
 80006c4:	7a00      	ldrb	r0, [r0, #8]
 80006c6:	6889      	ldr	r1, [r1, #8]
 80006c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80006ca:	4788      	blx	r1
 80006cc:	0020      	movs	r0, r4
 80006ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d0:	6848      	ldr	r0, [r1, #4]
 80006d2:	6800      	ldr	r0, [r0, #0]
 80006d4:	4006      	ands	r6, r0
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d1f8      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006da:	9801      	ldr	r0, [sp, #4]
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	6288      	str	r0, [r1, #40]	@ 0x28
 80006e0:	202b      	movs	r0, #43	@ 0x2b
 80006e2:	e7ec      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006e4:	6848      	ldr	r0, [r1, #4]
 80006e6:	6800      	ldr	r0, [r0, #0]
 80006e8:	4006      	ands	r6, r0
 80006ea:	42ae      	cmp	r6, r5
 80006ec:	d1ee      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006ee:	9801      	ldr	r0, [sp, #4]
 80006f0:	6800      	ldr	r0, [r0, #0]
 80006f2:	6288      	str	r0, [r1, #40]	@ 0x28
 80006f4:	205d      	movs	r0, #93	@ 0x5d
 80006f6:	4cb2      	ldr	r4, [pc, #712]	@ (80009c0 <.text_39>)
 80006f8:	5508      	strb	r0, [r1, r4]
 80006fa:	2062      	movs	r0, #98	@ 0x62
 80006fc:	e7df      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006fe:	2410      	movs	r4, #16
 8000700:	e7e4      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
	...

08000704 <.text_22>:
 8000704:	ffffefff 	.word	0xffffefff

08000708 <USBPD_PE_Send_Request>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	000b      	movs	r3, r1
 800070c:	4915      	ldr	r1, [pc, #84]	@ (8000764 <.text_25>)
 800070e:	0084      	lsls	r4, r0, #2
 8000710:	590d      	ldr	r5, [r1, r4]
 8000712:	2102      	movs	r1, #2
 8000714:	2432      	movs	r4, #50	@ 0x32
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	2c00      	cmp	r4, #0
 800071a:	d104      	bne.n	8000726 <USBPD_PE_Send_Request+0x1e>
 800071c:	686c      	ldr	r4, [r5, #4]
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	04e6      	lsls	r6, r4, #19
 8000722:	0ff6      	lsrs	r6, r6, #31
 8000724:	d101      	bne.n	800072a <USBPD_PE_Send_Request+0x22>
 8000726:	2103      	movs	r1, #3
 8000728:	e017      	b.n	800075a <USBPD_PE_Send_Request+0x52>
 800072a:	4ea6      	ldr	r6, [pc, #664]	@ (80009c4 <.text_40>)
 800072c:	4026      	ands	r6, r4
 800072e:	24c0      	movs	r4, #192	@ 0xc0
 8000730:	00a4      	lsls	r4, r4, #2
 8000732:	42a6      	cmp	r6, r4
 8000734:	d111      	bne.n	800075a <USBPD_PE_Send_Request+0x52>
 8000736:	2145      	movs	r1, #69	@ 0x45
 8000738:	2432      	movs	r4, #50	@ 0x32
 800073a:	5529      	strb	r1, [r5, r4]
 800073c:	61ab      	str	r3, [r5, #24]
 800073e:	6969      	ldr	r1, [r5, #20]
 8000740:	2318      	movs	r3, #24
 8000742:	4399      	bics	r1, r3
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	4013      	ands	r3, r2
 8000748:	430b      	orrs	r3, r1
 800074a:	616b      	str	r3, [r5, #20]
 800074c:	2400      	movs	r4, #0
 800074e:	2233      	movs	r2, #51	@ 0x33
 8000750:	54ac      	strb	r4, [r5, r2]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000756:	4788      	blx	r1
 8000758:	2100      	movs	r1, #0
 800075a:	0008      	movs	r0, r1
 800075c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000760 <.text_24>:
 8000760:	20000000 	.word	0x20000000

08000764 <.text_25>:
 8000764:	2000023c 	.word	0x2000023c

08000768 <.text_26>:
 8000768:	00008708 	.word	0x00008708

0800076c <.text_27>:
 800076c:	00008308 	.word	0x00008308

08000770 <.text_28>:
 8000770:	080172a4 	.word	0x080172a4

08000774 <USBPD_PE_SendExtendedMessage>:
 8000774:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	001f      	movs	r7, r3
 800077a:	2400      	movs	r4, #0
 800077c:	2500      	movs	r5, #0
 800077e:	48b5      	ldr	r0, [pc, #724]	@ (8000a54 <.text_43>)
 8000780:	4669      	mov	r1, sp
 8000782:	7b09      	ldrb	r1, [r1, #12]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	5846      	ldr	r6, [r0, r1]
 8000788:	2003      	movs	r0, #3
 800078a:	2132      	movs	r1, #50	@ 0x32
 800078c:	5c71      	ldrb	r1, [r6, r1]
 800078e:	2900      	cmp	r1, #0
 8000790:	d107      	bne.n	80007a2 <USBPD_PE_SendExtendedMessage+0x2e>
 8000792:	6871      	ldr	r1, [r6, #4]
 8000794:	6809      	ldr	r1, [r1, #0]
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	400b      	ands	r3, r1
 80007a0:	d101      	bne.n	80007a6 <USBPD_PE_SendExtendedMessage+0x32>
 80007a2:	2503      	movs	r5, #3
 80007a4:	e06c      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007a6:	9b00      	ldr	r3, [sp, #0]
 80007a8:	055b      	lsls	r3, r3, #21
 80007aa:	0f5b      	lsrs	r3, r3, #29
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d10b      	bne.n	80007c8 <USBPD_PE_SendExtendedMessage+0x54>
 80007b0:	9b00      	ldr	r3, [sp, #0]
 80007b2:	4018      	ands	r0, r3
 80007b4:	2801      	cmp	r0, #1
 80007b6:	d801      	bhi.n	80007bc <USBPD_PE_SendExtendedMessage+0x48>
 80007b8:	2501      	movs	r5, #1
 80007ba:	e061      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007bc:	4668      	mov	r0, sp
 80007be:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 80007c0:	21ff      	movs	r1, #255	@ 0xff
 80007c2:	1d89      	adds	r1, r1, #6
 80007c4:	4288      	cmp	r0, r1
 80007c6:	d301      	bcc.n	80007cc <USBPD_PE_SendExtendedMessage+0x58>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e059      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007cc:	4668      	mov	r0, sp
 80007ce:	7002      	strb	r2, [r0, #0]
 80007d0:	6970      	ldr	r0, [r6, #20]
 80007d2:	2120      	movs	r1, #32
 80007d4:	4388      	bics	r0, r1
 80007d6:	6170      	str	r0, [r6, #20]
 80007d8:	2020      	movs	r0, #32
 80007da:	4669      	mov	r1, sp
 80007dc:	7809      	ldrb	r1, [r1, #0]
 80007de:	2903      	cmp	r1, #3
 80007e0:	d008      	beq.n	80007f4 <USBPD_PE_SendExtendedMessage+0x80>
 80007e2:	2904      	cmp	r1, #4
 80007e4:	d020      	beq.n	8000828 <USBPD_PE_SendExtendedMessage+0xb4>
 80007e6:	2906      	cmp	r1, #6
 80007e8:	d020      	beq.n	800082c <USBPD_PE_SendExtendedMessage+0xb8>
 80007ea:	2908      	cmp	r1, #8
 80007ec:	d020      	beq.n	8000830 <USBPD_PE_SendExtendedMessage+0xbc>
 80007ee:	290a      	cmp	r1, #10
 80007f0:	d023      	beq.n	800083a <USBPD_PE_SendExtendedMessage+0xc6>
 80007f2:	e024      	b.n	800083e <USBPD_PE_SendExtendedMessage+0xca>
 80007f4:	210c      	movs	r1, #12
 80007f6:	4aac      	ldr	r2, [pc, #688]	@ (8000aa8 <.text_45>)
 80007f8:	18b2      	adds	r2, r6, r2
 80007fa:	7091      	strb	r1, [r2, #2]
 80007fc:	6971      	ldr	r1, [r6, #20]
 80007fe:	4308      	orrs	r0, r1
 8000800:	6170      	str	r0, [r6, #20]
 8000802:	4668      	mov	r0, sp
 8000804:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8000806:	2800      	cmp	r0, #0
 8000808:	d027      	beq.n	800085a <USBPD_PE_SendExtendedMessage+0xe6>
 800080a:	9401      	str	r4, [sp, #4]
 800080c:	4668      	mov	r0, sp
 800080e:	7b00      	ldrb	r0, [r0, #12]
 8000810:	f000 fa98 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8000814:	2801      	cmp	r0, #1
 8000816:	d101      	bne.n	800081c <USBPD_PE_SendExtendedMessage+0xa8>
 8000818:	2004      	movs	r0, #4
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	9702      	str	r7, [sp, #8]
 800081e:	9801      	ldr	r0, [sp, #4]
 8000820:	4669      	mov	r1, sp
 8000822:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8000824:	4fa1      	ldr	r7, [pc, #644]	@ (8000aac <.text_46>)
 8000826:	e012      	b.n	800084e <USBPD_PE_SendExtendedMessage+0xda>
 8000828:	210d      	movs	r1, #13
 800082a:	e7e4      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 800082c:	210e      	movs	r1, #14
 800082e:	e7e2      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 8000830:	205b      	movs	r0, #91	@ 0x5b
 8000832:	499d      	ldr	r1, [pc, #628]	@ (8000aa8 <.text_45>)
 8000834:	1871      	adds	r1, r6, r1
 8000836:	7088      	strb	r0, [r1, #2]
 8000838:	e7e3      	b.n	8000802 <USBPD_PE_SendExtendedMessage+0x8e>
 800083a:	205c      	movs	r0, #92	@ 0x5c
 800083c:	e7f9      	b.n	8000832 <USBPD_PE_SendExtendedMessage+0xbe>
 800083e:	2510      	movs	r5, #16
 8000840:	e01e      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 8000842:	9a02      	ldr	r2, [sp, #8]
 8000844:	5d12      	ldrb	r2, [r2, r4]
 8000846:	1823      	adds	r3, r4, r0
 8000848:	18f3      	adds	r3, r6, r3
 800084a:	55da      	strb	r2, [r3, r7]
 800084c:	1c64      	adds	r4, r4, #1
 800084e:	428c      	cmp	r4, r1
 8000850:	d3f7      	bcc.n	8000842 <USBPD_PE_SendExtendedMessage+0xce>
 8000852:	2092      	movs	r0, #146	@ 0x92
 8000854:	00c0      	lsls	r0, r0, #3
 8000856:	5231      	strh	r1, [r6, r0]
 8000858:	e002      	b.n	8000860 <USBPD_PE_SendExtendedMessage+0xec>
 800085a:	2092      	movs	r0, #146	@ 0x92
 800085c:	00c0      	lsls	r0, r0, #3
 800085e:	5234      	strh	r4, [r6, r0]
 8000860:	4668      	mov	r0, sp
 8000862:	7c00      	ldrb	r0, [r0, #16]
 8000864:	2133      	movs	r1, #51	@ 0x33
 8000866:	5470      	strb	r0, [r6, r1]
 8000868:	4668      	mov	r0, sp
 800086a:	7800      	ldrb	r0, [r0, #0]
 800086c:	498e      	ldr	r1, [pc, #568]	@ (8000aa8 <.text_45>)
 800086e:	5470      	strb	r0, [r6, r1]
 8000870:	2031      	movs	r0, #49	@ 0x31
 8000872:	2132      	movs	r1, #50	@ 0x32
 8000874:	5470      	strb	r0, [r6, r1]
 8000876:	4668      	mov	r0, sp
 8000878:	7b00      	ldrb	r0, [r0, #12]
 800087a:	68b1      	ldr	r1, [r6, #8]
 800087c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800087e:	4788      	blx	r1
 8000880:	0028      	movs	r0, r5
 8000882:	b005      	add	sp, #20
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000888 <.text_30>:
 8000888:	0000025e 	.word	0x0000025e

0800088c <PE_Send_RESET>:
 800088c:	b538      	push	{r3, r4, r5, lr}
 800088e:	0005      	movs	r5, r0
 8000890:	000c      	movs	r4, r1
 8000892:	2c05      	cmp	r4, #5
 8000894:	d101      	bne.n	800089a <PE_Send_RESET+0xe>
 8000896:	211f      	movs	r1, #31
 8000898:	e000      	b.n	800089c <PE_Send_RESET+0x10>
 800089a:	215e      	movs	r1, #94	@ 0x5e
 800089c:	7c28      	ldrb	r0, [r5, #16]
 800089e:	f7ff fdef 	bl	8000480 <USBPD_PE_Notification>
 80008a2:	0021      	movs	r1, r4
 80008a4:	7c28      	ldrb	r0, [r5, #16]
 80008a6:	f005 f9ab 	bl	8005c00 <USBPD_PRL_ResetRequestProcess>
 80008aa:	f3ef 8010 	mrs	r0, PRIMASK
 80008ae:	b672      	cpsid	i
 80008b0:	2100      	movs	r1, #0
 80008b2:	223c      	movs	r2, #60	@ 0x3c
 80008b4:	54a9      	strb	r1, [r5, r2]
 80008b6:	f380 8810 	msr	PRIMASK, r0
 80008ba:	bd31      	pop	{r0, r4, r5, pc}

080008bc <PE_Get_SpecRevision>:
 80008bc:	4965      	ldr	r1, [pc, #404]	@ (8000a54 <.text_43>)
 80008be:	0080      	lsls	r0, r0, #2
 80008c0:	5808      	ldr	r0, [r1, r0]
 80008c2:	6840      	ldr	r0, [r0, #4]
 80008c4:	7800      	ldrb	r0, [r0, #0]
 80008c6:	0780      	lsls	r0, r0, #30
 80008c8:	0f80      	lsrs	r0, r0, #30
 80008ca:	4770      	bx	lr

080008cc <PE_ChangePowerRole>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	6842      	ldr	r2, [r0, #4]
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	2404      	movs	r4, #4
 80008d4:	43a3      	bics	r3, r4
 80008d6:	008c      	lsls	r4, r1, #2
 80008d8:	2504      	movs	r5, #4
 80008da:	402c      	ands	r4, r5
 80008dc:	431c      	orrs	r4, r3
 80008de:	6014      	str	r4, [r2, #0]
 80008e0:	7c00      	ldrb	r0, [r0, #16]
 80008e2:	f004 ff0a 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80008e6:	bd31      	pop	{r0, r4, r5, pc}

080008e8 <PE_Get_RxEvent>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0001      	movs	r1, r0
 80008ec:	2014      	movs	r0, #20
 80008ee:	f3ef 8210 	mrs	r2, PRIMASK
 80008f2:	b672      	cpsid	i
 80008f4:	233c      	movs	r3, #60	@ 0x3c
 80008f6:	5ccc      	ldrb	r4, [r1, r3]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d029      	beq.n	8000950 <PE_Get_RxEvent+0x68>
 80008fc:	2393      	movs	r3, #147	@ 0x93
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18cb      	adds	r3, r1, r3
 8000902:	5d1d      	ldrb	r5, [r3, r4]
 8000904:	066d      	lsls	r5, r5, #25
 8000906:	d401      	bmi.n	800090c <PE_Get_RxEvent+0x24>
 8000908:	2003      	movs	r0, #3
 800090a:	e021      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800090c:	2584      	movs	r5, #132	@ 0x84
 800090e:	006d      	lsls	r5, r5, #1
 8000910:	436c      	muls	r4, r5
 8000912:	190c      	adds	r4, r1, r4
 8000914:	3ccb      	subs	r4, #203	@ 0xcb
 8000916:	638c      	str	r4, [r1, #56]	@ 0x38
 8000918:	7825      	ldrb	r5, [r4, #0]
 800091a:	7864      	ldrb	r4, [r4, #1]
 800091c:	0224      	lsls	r4, r4, #8
 800091e:	192c      	adds	r4, r5, r4
 8000920:	868c      	strh	r4, [r1, #52]	@ 0x34
 8000922:	000c      	movs	r4, r1
 8000924:	3430      	adds	r4, #48	@ 0x30
 8000926:	253c      	movs	r5, #60	@ 0x3c
 8000928:	5d49      	ldrb	r1, [r1, r5]
 800092a:	5c59      	ldrb	r1, [r3, r1]
 800092c:	06c9      	lsls	r1, r1, #27
 800092e:	0ec9      	lsrs	r1, r1, #27
 8000930:	2901      	cmp	r1, #1
 8000932:	d004      	beq.n	800093e <PE_Get_RxEvent+0x56>
 8000934:	2902      	cmp	r1, #2
 8000936:	d005      	beq.n	8000944 <PE_Get_RxEvent+0x5c>
 8000938:	2904      	cmp	r1, #4
 800093a:	d006      	beq.n	800094a <PE_Get_RxEvent+0x62>
 800093c:	e008      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800093e:	2011      	movs	r0, #17
 8000940:	2100      	movs	r1, #0
 8000942:	e004      	b.n	800094e <PE_Get_RxEvent+0x66>
 8000944:	2012      	movs	r0, #18
 8000946:	2101      	movs	r1, #1
 8000948:	e001      	b.n	800094e <PE_Get_RxEvent+0x66>
 800094a:	2013      	movs	r0, #19
 800094c:	2102      	movs	r1, #2
 800094e:	7021      	strb	r1, [r4, #0]
 8000950:	f382 8810 	msr	PRIMASK, r2
 8000954:	bd30      	pop	{r4, r5, pc}

08000956 <PE_Clear_RxEvent>:
 8000956:	b510      	push	{r4, lr}
 8000958:	0001      	movs	r1, r0
 800095a:	f3ef 8010 	mrs	r0, PRIMASK
 800095e:	b672      	cpsid	i
 8000960:	223c      	movs	r2, #60	@ 0x3c
 8000962:	5c8a      	ldrb	r2, [r1, r2]
 8000964:	2a00      	cmp	r2, #0
 8000966:	d014      	beq.n	8000992 <PE_Clear_RxEvent+0x3c>
 8000968:	1e53      	subs	r3, r2, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4acb      	ldr	r2, [pc, #812]	@ (8000c9c <.text_56>)
 800096e:	188c      	adds	r4, r1, r2
 8000970:	2200      	movs	r2, #0
 8000972:	54e2      	strb	r2, [r4, r3]
 8000974:	1e5b      	subs	r3, r3, #1
 8000976:	419b      	sbcs	r3, r3
 8000978:	0fdb      	lsrs	r3, r3, #31
 800097a:	5ce4      	ldrb	r4, [r4, r3]
 800097c:	0664      	lsls	r4, r4, #25
 800097e:	d506      	bpl.n	800098e <PE_Clear_RxEvent+0x38>
 8000980:	1c5b      	adds	r3, r3, #1
 8000982:	223c      	movs	r2, #60	@ 0x3c
 8000984:	548b      	strb	r3, [r1, r2]
 8000986:	f380 8810 	msr	PRIMASK, r0
 800098a:	7c08      	ldrb	r0, [r1, #16]
 800098c:	e168      	b.n	8000c60 <.text_54>
 800098e:	233c      	movs	r3, #60	@ 0x3c
 8000990:	54ca      	strb	r2, [r1, r3]
 8000992:	f380 8810 	msr	PRIMASK, r0
 8000996:	bd10      	pop	{r4, pc}

08000998 <.text_36>:
 8000998:	00000302 	.word	0x00000302

0800099c <.text_37>:
 800099c:	00000703 	.word	0x00000703

080009a0 <PE_PRL_Control_RxEvent>:
 80009a0:	492c      	ldr	r1, [pc, #176]	@ (8000a54 <.text_43>)
 80009a2:	0080      	lsls	r0, r0, #2
 80009a4:	580a      	ldr	r2, [r1, r0]
 80009a6:	2000      	movs	r0, #0
 80009a8:	f3ef 8110 	mrs	r1, PRIMASK
 80009ac:	b672      	cpsid	i
 80009ae:	233c      	movs	r3, #60	@ 0x3c
 80009b0:	5cd2      	ldrb	r2, [r2, r3]
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d000      	beq.n	80009b8 <PE_PRL_Control_RxEvent+0x18>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f381 8810 	msr	PRIMASK, r1
 80009bc:	4770      	bx	lr
	...

080009c0 <.text_39>:
 80009c0:	0000025f 	.word	0x0000025f

080009c4 <.text_40>:
 80009c4:	00000704 	.word	0x00000704

080009c8 <PE_Convert_SOPRxEvent>:
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d003      	beq.n	80009d4 <PE_Convert_SOPRxEvent+0xc>
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d005      	beq.n	80009dc <PE_Convert_SOPRxEvent+0x14>
 80009d0:	d302      	bcc.n	80009d8 <PE_Convert_SOPRxEvent+0x10>
 80009d2:	e005      	b.n	80009e0 <PE_Convert_SOPRxEvent+0x18>
 80009d4:	2011      	movs	r0, #17
 80009d6:	4770      	bx	lr
 80009d8:	2012      	movs	r0, #18
 80009da:	4770      	bx	lr
 80009dc:	2013      	movs	r0, #19
 80009de:	4770      	bx	lr
 80009e0:	2014      	movs	r0, #20
 80009e2:	4770      	bx	lr

080009e4 <PE_Check_AMSConflict>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0005      	movs	r5, r0
 80009e8:	2400      	movs	r4, #0
 80009ea:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80009ec:	49b7      	ldr	r1, [pc, #732]	@ (8000ccc <.text_58>)
 80009ee:	4001      	ands	r1, r0
 80009f0:	290d      	cmp	r1, #13
 80009f2:	d101      	bne.n	80009f8 <PE_Check_AMSConflict+0x14>
 80009f4:	2010      	movs	r0, #16
 80009f6:	e01b      	b.n	8000a30 <PE_Check_AMSConflict+0x4c>
 80009f8:	2603      	movs	r6, #3
 80009fa:	200f      	movs	r0, #15
 80009fc:	7f29      	ldrb	r1, [r5, #28]
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d011      	beq.n	8000a26 <PE_Check_AMSConflict+0x42>
 8000a02:	1e49      	subs	r1, r1, #1
 8000a04:	2901      	cmp	r1, #1
 8000a06:	d912      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a08:	1e89      	subs	r1, r1, #2
 8000a0a:	d011      	beq.n	8000a30 <PE_Check_AMSConflict+0x4c>
 8000a0c:	1e49      	subs	r1, r1, #1
 8000a0e:	d01d      	beq.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a10:	1e49      	subs	r1, r1, #1
 8000a12:	2909      	cmp	r1, #9
 8000a14:	d90b      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a16:	390b      	subs	r1, #11
 8000a18:	2901      	cmp	r1, #1
 8000a1a:	d908      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a1c:	1e89      	subs	r1, r1, #2
 8000a1e:	d004      	beq.n	8000a2a <PE_Check_AMSConflict+0x46>
 8000a20:	394d      	subs	r1, #77	@ 0x4d
 8000a22:	d004      	beq.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a24:	e006      	b.n	8000a34 <PE_Check_AMSConflict+0x50>
 8000a26:	746e      	strb	r6, [r5, #17]
 8000a28:	e011      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2a:	7468      	strb	r0, [r5, #17]
 8000a2c:	e00f      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2e:	2011      	movs	r0, #17
 8000a30:	7468      	strb	r0, [r5, #17]
 8000a32:	e00b      	b.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a34:	215c      	movs	r1, #92	@ 0x5c
 8000a36:	7c28      	ldrb	r0, [r5, #16]
 8000a38:	f7ff fd22 	bl	8000480 <USBPD_PE_Notification>
 8000a3c:	746e      	strb	r6, [r5, #17]
 8000a3e:	6868      	ldr	r0, [r5, #4]
 8000a40:	6800      	ldr	r0, [r0, #0]
 8000a42:	49c4      	ldr	r1, [pc, #784]	@ (8000d54 <.text_62>)
 8000a44:	4001      	ands	r1, r0
 8000a46:	0230      	lsls	r0, r6, #8
 8000a48:	4281      	cmp	r1, r0
 8000a4a:	d000      	beq.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a4c:	2415      	movs	r4, #21
 8000a4e:	0020      	movs	r0, r4
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a54 <.text_43>:
 8000a54:	2000023c 	.word	0x2000023c

08000a58 <PE_PRL_ResetReceived>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	48be      	ldr	r0, [pc, #760]	@ (8000d58 <.text_63>)
 8000a5e:	00a2      	lsls	r2, r4, #2
 8000a60:	5885      	ldr	r5, [r0, r2]
 8000a62:	2905      	cmp	r1, #5
 8000a64:	d115      	bne.n	8000a92 <PE_PRL_ResetReceived+0x3a>
 8000a66:	6868      	ldr	r0, [r5, #4]
 8000a68:	6801      	ldr	r1, [r0, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	4391      	bics	r1, r2
 8000a6e:	6001      	str	r1, [r0, #0]
 8000a70:	6968      	ldr	r0, [r5, #20]
 8000a72:	49ba      	ldr	r1, [pc, #744]	@ (8000d5c <.text_64>)
 8000a74:	4001      	ands	r1, r0
 8000a76:	0150      	lsls	r0, r2, #5
 8000a78:	4308      	orrs	r0, r1
 8000a7a:	6168      	str	r0, [r5, #20]
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	2132      	movs	r1, #50	@ 0x32
 8000a80:	5468      	strb	r0, [r5, r1]
 8000a82:	2000      	movs	r0, #0
 8000a84:	213c      	movs	r1, #60	@ 0x3c
 8000a86:	5468      	strb	r0, [r5, r1]
 8000a88:	211e      	movs	r1, #30
 8000a8a:	7c28      	ldrb	r0, [r5, #16]
 8000a8c:	f7ff fcf8 	bl	8000480 <USBPD_PE_Notification>
 8000a90:	e004      	b.n	8000a9c <PE_PRL_ResetReceived+0x44>
 8000a92:	6968      	ldr	r0, [r5, #20]
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	4301      	orrs	r1, r0
 8000a9a:	6169      	str	r1, [r5, #20]
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	68a9      	ldr	r1, [r5, #8]
 8000aa0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000aa2:	4788      	blx	r1
 8000aa4:	bd31      	pop	{r0, r4, r5, pc}
	...

08000aa8 <.text_45>:
 8000aa8:	0000025d 	.word	0x0000025d

08000aac <.text_46>:
 8000aac:	00000385 	.word	0x00000385

08000ab0 <PE_PRL_BistCompleted>:
 8000ab0:	4770      	bx	lr

08000ab2 <PE_Reset_HardReset>:
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	2032      	movs	r0, #50	@ 0x32
 8000ab8:	5c20      	ldrb	r0, [r4, r0]
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d003      	beq.n	8000ac6 <PE_Reset_HardReset+0x14>
 8000abe:	215b      	movs	r1, #91	@ 0x5b
 8000ac0:	7c20      	ldrb	r0, [r4, #16]
 8000ac2:	f7ff fcdd 	bl	8000480 <USBPD_PE_Notification>
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f000 f82c 	bl	8000b24 <PE_Reset_ZI>
 8000acc:	2503      	movs	r5, #3
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	6843      	ldr	r3, [r0, #4]
 8000ad2:	402b      	ands	r3, r5
 8000ad4:	7c20      	ldrb	r0, [r4, #16]
 8000ad6:	6861      	ldr	r1, [r4, #4]
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	074a      	lsls	r2, r1, #29
 8000adc:	0fd2      	lsrs	r2, r2, #31
 8000ade:	d008      	beq.n	8000af2 <PE_Reset_HardReset+0x40>
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f004 fdee 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000ae6:	6860      	ldr	r0, [r4, #4]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	2208      	movs	r2, #8
 8000aec:	430a      	orrs	r2, r1
 8000aee:	6002      	str	r2, [r0, #0]
 8000af0:	e007      	b.n	8000b02 <PE_Reset_HardReset+0x50>
 8000af2:	2100      	movs	r1, #0
 8000af4:	f004 fde5 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000af8:	6860      	ldr	r0, [r4, #4]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4391      	bics	r1, r2
 8000b00:	6001      	str	r1, [r0, #0]
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	6840      	ldr	r0, [r0, #4]
 8000b06:	4005      	ands	r5, r0
 8000b08:	6860      	ldr	r0, [r4, #4]
 8000b0a:	6801      	ldr	r1, [r0, #0]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4391      	bics	r1, r2
 8000b10:	430d      	orrs	r5, r1
 8000b12:	6005      	str	r5, [r0, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	7c20      	ldrb	r0, [r4, #16]
 8000b18:	f004 fe44 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8000b1c:	7c20      	ldrb	r0, [r4, #16]
 8000b1e:	f005 f8ad 	bl	8005c7c <USBPD_PRL_Reset>
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Reset_ZI>:
 8000b24:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000b26:	0004      	movs	r4, r0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	6801      	ldr	r1, [r0, #0]
 8000b30:	2210      	movs	r2, #16
 8000b32:	4391      	bics	r1, r2
 8000b34:	6001      	str	r1, [r0, #0]
 8000b36:	2100      	movs	r1, #0
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fc34 	bl	80013a6 <PE_SetPowerNegotiation>
 8000b3e:	2193      	movs	r1, #147	@ 0x93
 8000b40:	0089      	lsls	r1, r1, #2
 8000b42:	0020      	movs	r0, r4
 8000b44:	3014      	adds	r0, #20
 8000b46:	f015 ffec 	bl	8016b22 <__aeabi_memclr>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	aa01      	add	r2, sp, #4
 8000b4e:	2102      	movs	r1, #2
 8000b50:	7c20      	ldrb	r0, [r4, #16]
 8000b52:	68a5      	ldr	r5, [r4, #8]
 8000b54:	69ad      	ldr	r5, [r5, #24]
 8000b56:	47a8      	blx	r5
 8000b58:	2080      	movs	r0, #128	@ 0x80
 8000b5a:	0440      	lsls	r0, r0, #17
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	2304      	movs	r3, #4
 8000b60:	466a      	mov	r2, sp
 8000b62:	2106      	movs	r1, #6
 8000b64:	7c20      	ldrb	r0, [r4, #16]
 8000b66:	68a5      	ldr	r5, [r4, #8]
 8000b68:	69ad      	ldr	r5, [r5, #24]
 8000b6a:	47a8      	blx	r5
 8000b6c:	2503      	movs	r5, #3
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	6841      	ldr	r1, [r0, #4]
 8000b72:	4029      	ands	r1, r5
 8000b74:	7c20      	ldrb	r0, [r4, #16]
 8000b76:	f004 fde2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	6840      	ldr	r0, [r0, #4]
 8000b7e:	4005      	ands	r5, r0
 8000b80:	6860      	ldr	r0, [r4, #4]
 8000b82:	6801      	ldr	r1, [r0, #0]
 8000b84:	4a76      	ldr	r2, [pc, #472]	@ (8000d60 <.text_65>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	06a9      	lsls	r1, r5, #26
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	6001      	str	r1, [r0, #0]
 8000b8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b90 <PE_Reset_Counter>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	2103      	movs	r1, #3
 8000b94:	2298      	movs	r2, #152	@ 0x98
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	f015 ffc2 	bl	8016b22 <__aeabi_memclr>
 8000b9e:	bd01      	pop	{r0, pc}

08000ba0 <PE_Reset_StateMachine>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	2032      	movs	r0, #50	@ 0x32
 8000ba6:	5c20      	ldrb	r0, [r4, r0]
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d003      	beq.n	8000bb4 <PE_Reset_StateMachine+0x14>
 8000bac:	215b      	movs	r1, #91	@ 0x5b
 8000bae:	7c20      	ldrb	r0, [r4, #16]
 8000bb0:	f7ff fc66 	bl	8000480 <USBPD_PE_Notification>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f7ff ffb5 	bl	8000b24 <PE_Reset_ZI>
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fbf2 	bl	80013a6 <PE_SetPowerNegotiation>
 8000bc2:	7c20      	ldrb	r0, [r4, #16]
 8000bc4:	f005 f85a 	bl	8005c7c <USBPD_PRL_Reset>
 8000bc8:	6860      	ldr	r0, [r4, #4]
 8000bca:	6801      	ldr	r1, [r0, #0]
 8000bcc:	2501      	movs	r5, #1
 8000bce:	08ca      	lsrs	r2, r1, #3
 8000bd0:	402a      	ands	r2, r5
 8000bd2:	078b      	lsls	r3, r1, #30
 8000bd4:	0f9b      	lsrs	r3, r3, #30
 8000bd6:	7c20      	ldrb	r0, [r4, #16]
 8000bd8:	0889      	lsrs	r1, r1, #2
 8000bda:	400d      	ands	r5, r1
 8000bdc:	d004      	beq.n	8000be8 <PE_Reset_StateMachine+0x48>
 8000bde:	2101      	movs	r1, #1
 8000be0:	f004 fd6f 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000be4:	2002      	movs	r0, #2
 8000be6:	e003      	b.n	8000bf0 <PE_Reset_StateMachine+0x50>
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fd6a 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000bee:	203e      	movs	r0, #62	@ 0x3e
 8000bf0:	7460      	strb	r0, [r4, #17]
 8000bf2:	bd31      	pop	{r0, r4, r5, pc}

08000bf4 <PE_ExtRevisionInteroperability>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4957      	ldr	r1, [pc, #348]	@ (8000d58 <.text_63>)
 8000bfa:	0083      	lsls	r3, r0, #2
 8000bfc:	58cb      	ldr	r3, [r1, r3]
 8000bfe:	685c      	ldr	r4, [r3, #4]
 8000c00:	6825      	ldr	r5, [r4, #0]
 8000c02:	2103      	movs	r1, #3
 8000c04:	2603      	movs	r6, #3
 8000c06:	402e      	ands	r6, r5
 8000c08:	42b2      	cmp	r2, r6
 8000c0a:	db00      	blt.n	8000c0e <PE_ExtRevisionInteroperability+0x1a>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	438d      	bics	r5, r1
 8000c10:	400a      	ands	r2, r1
 8000c12:	432a      	orrs	r2, r5
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	6814      	ldr	r4, [r2, #0]
 8000c1a:	2503      	movs	r5, #3
 8000c1c:	4025      	ands	r5, r4
 8000c1e:	2d01      	cmp	r5, #1
 8000c20:	d101      	bne.n	8000c26 <PE_ExtRevisionInteroperability+0x32>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e000      	b.n	8000c28 <PE_ExtRevisionInteroperability+0x34>
 8000c26:	2520      	movs	r5, #32
 8000c28:	2620      	movs	r6, #32
 8000c2a:	43b4      	bics	r4, r6
 8000c2c:	4325      	orrs	r5, r4
 8000c2e:	6015      	str	r5, [r2, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	4011      	ands	r1, r2
 8000c36:	f004 fd76 	bl	8005726 <USBPD_PRL_SetHeaderSpecification>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}

08000c3c <PE_PRL_FastRoleSwapReception>:
 8000c3c:	4946      	ldr	r1, [pc, #280]	@ (8000d58 <.text_63>)
 8000c3e:	0082      	lsls	r2, r0, #2
 8000c40:	5889      	ldr	r1, [r1, r2]
 8000c42:	7f0a      	ldrb	r2, [r1, #28]
 8000c44:	2a09      	cmp	r2, #9
 8000c46:	d100      	bne.n	8000c4a <PE_PRL_FastRoleSwapReception+0xe>
 8000c48:	4770      	bx	lr
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	2410      	movs	r4, #16
 8000c52:	431c      	orrs	r4, r3
 8000c54:	6014      	str	r4, [r2, #0]
 8000c56:	694a      	ldr	r2, [r1, #20]
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]

08000c60 <.text_54>:
 8000c60:	6889      	ldr	r1, [r1, #8]
 8000c62:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000c64:	4788      	blx	r1
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <PE_PRL_PostReceiveEvent>:
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d58 <.text_63>)
 8000c6c:	0080      	lsls	r0, r0, #2
 8000c6e:	5813      	ldr	r3, [r2, r0]
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	191a      	adds	r2, r3, r4
 8000c76:	4d09      	ldr	r5, [pc, #36]	@ (8000c9c <.text_56>)
 8000c78:	1952      	adds	r2, r2, r5
 8000c7a:	7815      	ldrb	r5, [r2, #0]
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d004      	beq.n	8000c8a <PE_PRL_PostReceiveEvent+0x22>
 8000c80:	1c64      	adds	r4, r4, #1
 8000c82:	b2e4      	uxtb	r4, r4
 8000c84:	2c01      	cmp	r4, #1
 8000c86:	d9f5      	bls.n	8000c74 <PE_PRL_PostReceiveEvent+0xc>
 8000c88:	bd30      	pop	{r4, r5, pc}
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	7010      	strb	r0, [r2, #0]
 8000c8e:	2001      	movs	r0, #1
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	2401      	movs	r4, #1
 8000c94:	408c      	lsls	r4, r1
 8000c96:	431c      	orrs	r4, r3
 8000c98:	7014      	strb	r4, [r2, #0]
 8000c9a:	bd30      	pop	{r4, r5, pc}

08000c9c <.text_56>:
 8000c9c:	0000024d 	.word	0x0000024d

08000ca0 <PE_PRL_PostReceiveEventError>:
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	492d      	ldr	r1, [pc, #180]	@ (8000d58 <.text_63>)
 8000ca4:	0080      	lsls	r0, r0, #2
 8000ca6:	5809      	ldr	r1, [r1, r0]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	b2d3      	uxtb	r3, r2
 8000cae:	18cb      	adds	r3, r1, r3
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	@ (8000d64 <.text_66>)
 8000cb2:	191b      	adds	r3, r3, r4
 8000cb4:	781c      	ldrb	r4, [r3, #0]
 8000cb6:	2560      	movs	r5, #96	@ 0x60
 8000cb8:	4025      	ands	r5, r4
 8000cba:	2d20      	cmp	r5, #32
 8000cbc:	d004      	beq.n	8000cc8 <PE_PRL_PostReceiveEventError+0x28>
 8000cbe:	1c52      	adds	r2, r2, #1
 8000cc0:	b2d3      	uxtb	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d3f2      	bcc.n	8000cac <PE_PRL_PostReceiveEventError+0xc>
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	7018      	strb	r0, [r3, #0]
 8000cca:	bd30      	pop	{r4, r5, pc}

08000ccc <.text_58>:
 8000ccc:	0000f01f 	.word	0x0000f01f

08000cd0 <PE_PRL_PostReceiveEventCopy>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <.text_63>)
 8000cd4:	0080      	lsls	r0, r0, #2
 8000cd6:	5813      	ldr	r3, [r2, r0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	b2d0      	uxtb	r0, r2
 8000cdc:	181c      	adds	r4, r3, r0
 8000cde:	4d21      	ldr	r5, [pc, #132]	@ (8000d64 <.text_66>)
 8000ce0:	5d64      	ldrb	r4, [r4, r5]
 8000ce2:	2560      	movs	r5, #96	@ 0x60
 8000ce4:	4025      	ands	r5, r4
 8000ce6:	2d20      	cmp	r5, #32
 8000ce8:	d004      	beq.n	8000cf4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000cea:	1c52      	adds	r2, r2, #1
 8000cec:	b2d0      	uxtb	r0, r2
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d3f3      	bcc.n	8000cda <PE_PRL_PostReceiveEventCopy+0xa>
 8000cf2:	bd31      	pop	{r0, r4, r5, pc}
 8000cf4:	2284      	movs	r2, #132	@ 0x84
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	4350      	muls	r0, r2
 8000cfa:	1818      	adds	r0, r3, r0
 8000cfc:	303d      	adds	r0, #61	@ 0x3d
 8000cfe:	f015 ff05 	bl	8016b0c <__aeabi_memcpy>
 8000d02:	bd31      	pop	{r0, r4, r5, pc}

08000d04 <PE_PRL_PostReceiveEventComplete>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4914      	ldr	r1, [pc, #80]	@ (8000d58 <.text_63>)
 8000d08:	0082      	lsls	r2, r0, #2
 8000d0a:	5889      	ldr	r1, [r1, r2]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	18cb      	adds	r3, r1, r3
 8000d12:	4c14      	ldr	r4, [pc, #80]	@ (8000d64 <.text_66>)
 8000d14:	191b      	adds	r3, r3, r4
 8000d16:	781c      	ldrb	r4, [r3, #0]
 8000d18:	2560      	movs	r5, #96	@ 0x60
 8000d1a:	4025      	ands	r5, r4
 8000d1c:	2d20      	cmp	r5, #32
 8000d1e:	d003      	beq.n	8000d28 <PE_PRL_PostReceiveEventComplete+0x24>
 8000d20:	b2d3      	uxtb	r3, r2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d3f3      	bcc.n	8000d0e <PE_PRL_PostReceiveEventComplete+0xa>
 8000d26:	bd31      	pop	{r0, r4, r5, pc}
 8000d28:	781c      	ldrb	r4, [r3, #0]
 8000d2a:	2540      	movs	r5, #64	@ 0x40
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	701d      	strb	r5, [r3, #0]
 8000d30:	233c      	movs	r3, #60	@ 0x3c
 8000d32:	5ccb      	ldrb	r3, [r1, r3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <PE_PRL_PostReceiveEventComplete+0x38>
 8000d38:	233c      	movs	r3, #60	@ 0x3c
 8000d3a:	54ca      	strb	r2, [r1, r3]
 8000d3c:	6889      	ldr	r1, [r1, #8]
 8000d3e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000d40:	4788      	blx	r1
 8000d42:	bd31      	pop	{r0, r4, r5, pc}

08000d44 <PE_Get_UnchunkedSupport>:
 8000d44:	4904      	ldr	r1, [pc, #16]	@ (8000d58 <.text_63>)
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	5808      	ldr	r0, [r1, r0]
 8000d4a:	6840      	ldr	r0, [r0, #4]
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	0181      	lsls	r1, r0, #6
 8000d50:	0fc8      	lsrs	r0, r1, #31
 8000d52:	4770      	bx	lr

08000d54 <.text_62>:
 8000d54:	00000704 	.word	0x00000704

08000d58 <.text_63>:
 8000d58:	2000023c 	.word	0x2000023c

08000d5c <.text_64>:
 8000d5c:	fffff9ff 	.word	0xfffff9ff

08000d60 <.text_65>:
 8000d60:	f3ffffff 	.word	0xf3ffffff

08000d64 <.text_66>:
 8000d64:	0000024d 	.word	0x0000024d

08000d68 <PE_SubStateMachine_Generic>:
 8000d68:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d6a:	b08d      	sub	sp, #52	@ 0x34
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9004      	str	r0, [sp, #16]
 8000d72:	2500      	movs	r5, #0
 8000d74:	9503      	str	r5, [sp, #12]
 8000d76:	2601      	movs	r6, #1
 8000d78:	2714      	movs	r7, #20
 8000d7a:	7c61      	ldrb	r1, [r4, #17]
 8000d7c:	2901      	cmp	r1, #1
 8000d7e:	d100      	bne.n	8000d82 <PE_SubStateMachine_Generic+0x1a>
 8000d80:	e195      	b.n	80010ae <PE_SubStateMachine_Generic+0x346>
 8000d82:	2918      	cmp	r1, #24
 8000d84:	d03f      	beq.n	8000e06 <PE_SubStateMachine_Generic+0x9e>
 8000d86:	2919      	cmp	r1, #25
 8000d88:	d050      	beq.n	8000e2c <PE_SubStateMachine_Generic+0xc4>
 8000d8a:	291d      	cmp	r1, #29
 8000d8c:	d100      	bne.n	8000d90 <PE_SubStateMachine_Generic+0x28>
 8000d8e:	e092      	b.n	8000eb6 <PE_SubStateMachine_Generic+0x14e>
 8000d90:	2927      	cmp	r1, #39	@ 0x27
 8000d92:	d100      	bne.n	8000d96 <PE_SubStateMachine_Generic+0x2e>
 8000d94:	e0b0      	b.n	8000ef8 <PE_SubStateMachine_Generic+0x190>
 8000d96:	2928      	cmp	r1, #40	@ 0x28
 8000d98:	d100      	bne.n	8000d9c <PE_SubStateMachine_Generic+0x34>
 8000d9a:	e0b9      	b.n	8000f10 <PE_SubStateMachine_Generic+0x1a8>
 8000d9c:	2929      	cmp	r1, #41	@ 0x29
 8000d9e:	d100      	bne.n	8000da2 <PE_SubStateMachine_Generic+0x3a>
 8000da0:	e0c0      	b.n	8000f24 <PE_SubStateMachine_Generic+0x1bc>
 8000da2:	292c      	cmp	r1, #44	@ 0x2c
 8000da4:	d100      	bne.n	8000da8 <PE_SubStateMachine_Generic+0x40>
 8000da6:	e2bc      	b.n	8001322 <PE_SubStateMachine_Generic+0x5ba>
 8000da8:	2930      	cmp	r1, #48	@ 0x30
 8000daa:	d100      	bne.n	8000dae <PE_SubStateMachine_Generic+0x46>
 8000dac:	e1de      	b.n	800116c <PE_SubStateMachine_Generic+0x404>
 8000dae:	293a      	cmp	r1, #58	@ 0x3a
 8000db0:	d100      	bne.n	8000db4 <PE_SubStateMachine_Generic+0x4c>
 8000db2:	e28c      	b.n	80012ce <PE_SubStateMachine_Generic+0x566>
 8000db4:	293b      	cmp	r1, #59	@ 0x3b
 8000db6:	d100      	bne.n	8000dba <PE_SubStateMachine_Generic+0x52>
 8000db8:	e270      	b.n	800129c <PE_SubStateMachine_Generic+0x534>
 8000dba:	293c      	cmp	r1, #60	@ 0x3c
 8000dbc:	d100      	bne.n	8000dc0 <PE_SubStateMachine_Generic+0x58>
 8000dbe:	e247      	b.n	8001250 <PE_SubStateMachine_Generic+0x4e8>
 8000dc0:	294b      	cmp	r1, #75	@ 0x4b
 8000dc2:	d100      	bne.n	8000dc6 <PE_SubStateMachine_Generic+0x5e>
 8000dc4:	e114      	b.n	8000ff0 <PE_SubStateMachine_Generic+0x288>
 8000dc6:	2963      	cmp	r1, #99	@ 0x63
 8000dc8:	d100      	bne.n	8000dcc <PE_SubStateMachine_Generic+0x64>
 8000dca:	e178      	b.n	80010be <PE_SubStateMachine_Generic+0x356>
 8000dcc:	2964      	cmp	r1, #100	@ 0x64
 8000dce:	d100      	bne.n	8000dd2 <PE_SubStateMachine_Generic+0x6a>
 8000dd0:	e1a0      	b.n	8001114 <PE_SubStateMachine_Generic+0x3ac>
 8000dd2:	2967      	cmp	r1, #103	@ 0x67
 8000dd4:	d100      	bne.n	8000dd8 <PE_SubStateMachine_Generic+0x70>
 8000dd6:	e120      	b.n	800101a <PE_SubStateMachine_Generic+0x2b2>
 8000dd8:	2968      	cmp	r1, #104	@ 0x68
 8000dda:	d100      	bne.n	8000dde <PE_SubStateMachine_Generic+0x76>
 8000ddc:	e138      	b.n	8001050 <PE_SubStateMachine_Generic+0x2e8>
 8000dde:	2974      	cmp	r1, #116	@ 0x74
 8000de0:	d100      	bne.n	8000de4 <PE_SubStateMachine_Generic+0x7c>
 8000de2:	e1f3      	b.n	80011cc <PE_SubStateMachine_Generic+0x464>
 8000de4:	2993      	cmp	r1, #147	@ 0x93
 8000de6:	d100      	bne.n	8000dea <PE_SubStateMachine_Generic+0x82>
 8000de8:	e0a6      	b.n	8000f38 <PE_SubStateMachine_Generic+0x1d0>
 8000dea:	2994      	cmp	r1, #148	@ 0x94
 8000dec:	d100      	bne.n	8000df0 <PE_SubStateMachine_Generic+0x88>
 8000dee:	e0a7      	b.n	8000f40 <PE_SubStateMachine_Generic+0x1d8>
 8000df0:	2995      	cmp	r1, #149	@ 0x95
 8000df2:	d100      	bne.n	8000df6 <PE_SubStateMachine_Generic+0x8e>
 8000df4:	e0bd      	b.n	8000f72 <PE_SubStateMachine_Generic+0x20a>
 8000df6:	2999      	cmp	r1, #153	@ 0x99
 8000df8:	d000      	beq.n	8000dfc <PE_SubStateMachine_Generic+0x94>
 8000dfa:	e297      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fd44 	bl	800088c <PE_Send_RESET>
 8000e04:	e220      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000e06:	6861      	ldr	r1, [r4, #4]
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	0889      	lsrs	r1, r1, #2
 8000e0c:	400e      	ands	r6, r1
 8000e0e:	d002      	beq.n	8000e16 <PE_SubStateMachine_Generic+0xae>
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	0741      	lsls	r1, r0, #29
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	9000      	str	r0, [sp, #0]
 8000e18:	2319      	movs	r3, #25
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f000 fb76 	bl	8001510 <PE_Send_CtrlMessage>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d156      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000e28:	2007      	movs	r0, #7
 8000e2a:	e107      	b.n	800103c <PE_SubStateMachine_Generic+0x2d4>
 8000e2c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000e2e:	7800      	ldrb	r0, [r0, #0]
 8000e30:	2811      	cmp	r0, #17
 8000e32:	d13c      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e34:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8000e36:	0bc1      	lsrs	r1, r0, #15
 8000e38:	d11e      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e3a:	0441      	lsls	r1, r0, #17
 8000e3c:	0f49      	lsrs	r1, r1, #29
 8000e3e:	d01b      	beq.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e40:	06c0      	lsls	r0, r0, #27
 8000e42:	0ec0      	lsrs	r0, r0, #27
 8000e44:	2804      	cmp	r0, #4
 8000e46:	d117      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e48:	008b      	lsls	r3, r1, #2
 8000e4a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8000e4c:	1c82      	adds	r2, r0, #2
 8000e4e:	2105      	movs	r1, #5
 8000e50:	7c20      	ldrb	r0, [r4, #16]
 8000e52:	68a6      	ldr	r6, [r4, #8]
 8000e54:	69b6      	ldr	r6, [r6, #24]
 8000e56:	47b0      	blx	r6
 8000e58:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000e5a:	7800      	ldrb	r0, [r0, #0]
 8000e5c:	2814      	cmp	r0, #20
 8000e5e:	d004      	beq.n	8000e6a <PE_SubStateMachine_Generic+0x102>
 8000e60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8000e62:	700f      	strb	r7, [r1, #0]
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff fd76 	bl	8000956 <PE_Clear_RxEvent>
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	7460      	strb	r0, [r4, #17]
 8000e6e:	9504      	str	r5, [sp, #16]
 8000e70:	2107      	movs	r1, #7
 8000e72:	7c20      	ldrb	r0, [r4, #16]
 8000e74:	f7ff fb04 	bl	8000480 <USBPD_PE_Notification>
 8000e78:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8000e7a:	21f0      	movs	r1, #240	@ 0xf0
 8000e7c:	0209      	lsls	r1, r1, #8
 8000e7e:	4001      	ands	r1, r0
 8000e80:	d115      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e82:	06c0      	lsls	r0, r0, #27
 8000e84:	0ec0      	lsrs	r0, r0, #27
 8000e86:	2804      	cmp	r0, #4
 8000e88:	d001      	beq.n	8000e8e <PE_SubStateMachine_Generic+0x126>
 8000e8a:	2810      	cmp	r0, #16
 8000e8c:	d10f      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e8e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000e90:	7800      	ldrb	r0, [r0, #0]
 8000e92:	2814      	cmp	r0, #20
 8000e94:	d004      	beq.n	8000ea0 <PE_SubStateMachine_Generic+0x138>
 8000e96:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000e98:	7007      	strb	r7, [r0, #0]
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff fd5b 	bl	8000956 <PE_Clear_RxEvent>
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	7460      	strb	r0, [r4, #17]
 8000ea4:	9504      	str	r5, [sp, #16]
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	7c20      	ldrb	r0, [r4, #16]
 8000eaa:	f7ff fae9 	bl	8000480 <USBPD_PE_Notification>
 8000eae:	8be0      	ldrh	r0, [r4, #30]
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0209      	lsls	r1, r1, #8
 8000eb4:	e099      	b.n	8000fea <PE_SubStateMachine_Generic+0x282>
 8000eb6:	9505      	str	r5, [sp, #20]
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	aa06      	add	r2, sp, #24
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	7c20      	ldrb	r0, [r4, #16]
 8000ec0:	68a5      	ldr	r5, [r4, #8]
 8000ec2:	696d      	ldr	r5, [r5, #20]
 8000ec4:	47a8      	blx	r5
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	9805      	ldr	r0, [sp, #20]
 8000eca:	f000 fabf 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d002      	beq.n	8000ed8 <PE_SubStateMachine_Generic+0x170>
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	7460      	strb	r0, [r4, #17]
 8000ed6:	e22a      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000ed8:	9002      	str	r0, [sp, #8]
 8000eda:	2003      	movs	r0, #3
 8000edc:	9001      	str	r0, [sp, #4]
 8000ede:	9805      	ldr	r0, [sp, #20]
 8000ee0:	0880      	lsrs	r0, r0, #2
 8000ee2:	9000      	str	r0, [sp, #0]
 8000ee4:	ab06      	add	r3, sp, #24
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	0020      	movs	r0, r4
 8000eec:	f000 fb3b 	bl	8001566 <PE_Send_DataMessage>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	e165      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000ef8:	2012      	movs	r0, #18
 8000efa:	7720      	strb	r0, [r4, #28]
 8000efc:	2105      	movs	r1, #5
 8000efe:	7c20      	ldrb	r0, [r4, #16]
 8000f00:	f004 feab 	bl	8005c5a <USBDPD_PRL_BistCarrierEyeMode>
 8000f04:	2028      	movs	r0, #40	@ 0x28
 8000f06:	7460      	strb	r0, [r4, #17]
 8000f08:	484f      	ldr	r0, [pc, #316]	@ (8001048 <PE_SubStateMachine_Generic+0x2e0>)
 8000f0a:	83e0      	strh	r0, [r4, #30]
 8000f0c:	202d      	movs	r0, #45	@ 0x2d
 8000f0e:	e099      	b.n	8001044 <PE_SubStateMachine_Generic+0x2dc>
 8000f10:	8be0      	ldrh	r0, [r4, #30]
 8000f12:	03f1      	lsls	r1, r6, #15
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d10e      	bne.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f18:	2105      	movs	r1, #5
 8000f1a:	7c20      	ldrb	r0, [r4, #16]
 8000f1c:	f004 fea5 	bl	8005c6a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f20:	83e5      	strh	r5, [r4, #30]
 8000f22:	e191      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000f24:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000f26:	7800      	ldrb	r0, [r0, #0]
 8000f28:	2814      	cmp	r0, #20
 8000f2a:	d004      	beq.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f2c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000f2e:	7007      	strb	r7, [r0, #0]
 8000f30:	0020      	movs	r0, r4
 8000f32:	f7ff fd10 	bl	8000956 <PE_Clear_RxEvent>
 8000f36:	e1fa      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f38:	0020      	movs	r0, r4
 8000f3a:	f000 f9fb 	bl	8001334 <PE_SubStateMachine_ReceiveDRS>
 8000f3e:	e1f6      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	0889      	lsrs	r1, r1, #2
 8000f46:	400e      	ands	r6, r1
 8000f48:	d002      	beq.n	8000f50 <PE_SubStateMachine_Generic+0x1e8>
 8000f4a:	6960      	ldr	r0, [r4, #20]
 8000f4c:	0741      	lsls	r1, r0, #29
 8000f4e:	0fc8      	lsrs	r0, r1, #31
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	2395      	movs	r3, #149	@ 0x95
 8000f54:	2209      	movs	r2, #9
 8000f56:	2100      	movs	r1, #0
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f000 fad9 	bl	8001510 <PE_Send_CtrlMessage>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1ed      	bne.n	8000f3e <PE_SubStateMachine_Generic+0x1d6>
 8000f62:	2010      	movs	r0, #16
 8000f64:	7720      	strb	r0, [r4, #28]
 8000f66:	4839      	ldr	r0, [pc, #228]	@ (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8000f68:	83e0      	strh	r0, [r4, #30]
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	9004      	str	r0, [sp, #16]
 8000f6e:	2122      	movs	r1, #34	@ 0x22
 8000f70:	e128      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000f72:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000f74:	7800      	ldrb	r0, [r0, #0]
 8000f76:	2814      	cmp	r0, #20
 8000f78:	d035      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f7a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8000f7c:	21f0      	movs	r1, #240	@ 0xf0
 8000f7e:	0209      	lsls	r1, r1, #8
 8000f80:	4001      	ands	r1, r0
 8000f82:	d130      	bne.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f84:	211f      	movs	r1, #31
 8000f86:	231f      	movs	r3, #31
 8000f88:	4003      	ands	r3, r0
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d006      	beq.n	8000f9c <PE_SubStateMachine_Generic+0x234>
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d008      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d006      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d015      	beq.n	8000fc6 <PE_SubStateMachine_Generic+0x25e>
 8000f9a:	e024      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f000 fa6d 	bl	800147c <PE_SwitchDataRole>
 8000fa2:	e008      	b.n	8000fb6 <PE_SubStateMachine_Generic+0x24e>
 8000fa4:	4001      	ands	r1, r0
 8000fa6:	290c      	cmp	r1, #12
 8000fa8:	d101      	bne.n	8000fae <PE_SubStateMachine_Generic+0x246>
 8000faa:	2126      	movs	r1, #38	@ 0x26
 8000fac:	e000      	b.n	8000fb0 <PE_SubStateMachine_Generic+0x248>
 8000fae:	2127      	movs	r1, #39	@ 0x27
 8000fb0:	7c20      	ldrb	r0, [r4, #16]
 8000fb2:	f7ff fa65 	bl	8000480 <USBPD_PE_Notification>
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	7460      	strb	r0, [r4, #17]
 8000fba:	9504      	str	r5, [sp, #16]
 8000fbc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000fbe:	7800      	ldrb	r0, [r0, #0]
 8000fc0:	2814      	cmp	r0, #20
 8000fc2:	d10b      	bne.n	8000fdc <PE_SubStateMachine_Generic+0x274>
 8000fc4:	e00f      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fc6:	2128      	movs	r1, #40	@ 0x28
 8000fc8:	7c20      	ldrb	r0, [r4, #16]
 8000fca:	f7ff fa59 	bl	8000480 <USBPD_PE_Notification>
 8000fce:	2003      	movs	r0, #3
 8000fd0:	7460      	strb	r0, [r4, #17]
 8000fd2:	9504      	str	r5, [sp, #16]
 8000fd4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000fd6:	7800      	ldrb	r0, [r0, #0]
 8000fd8:	2814      	cmp	r0, #20
 8000fda:	d004      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fdc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8000fde:	7007      	strb	r7, [r0, #0]
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff fcb8 	bl	8000956 <PE_Clear_RxEvent>
 8000fe6:	8be0      	ldrh	r0, [r4, #30]
 8000fe8:	03f1      	lsls	r1, r6, #15
 8000fea:	4288      	cmp	r0, r1
 8000fec:	d12b      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 8000fee:	e12b      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000ff0:	ab03      	add	r3, sp, #12
 8000ff2:	aa05      	add	r2, sp, #20
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	7c20      	ldrb	r0, [r4, #16]
 8000ff8:	68a5      	ldr	r5, [r4, #8]
 8000ffa:	696d      	ldr	r5, [r5, #20]
 8000ffc:	47a8      	blx	r5
 8000ffe:	9803      	ldr	r0, [sp, #12]
 8001000:	2800      	cmp	r0, #0
 8001002:	d100      	bne.n	8001006 <PE_SubStateMachine_Generic+0x29e>
 8001004:	e192      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001006:	2000      	movs	r0, #0
 8001008:	9002      	str	r0, [sp, #8]
 800100a:	2003      	movs	r0, #3
 800100c:	9001      	str	r0, [sp, #4]
 800100e:	9803      	ldr	r0, [sp, #12]
 8001010:	0880      	lsrs	r0, r0, #2
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	ab05      	add	r3, sp, #20
 8001016:	220c      	movs	r2, #12
 8001018:	e154      	b.n	80012c4 <PE_SubStateMachine_Generic+0x55c>
 800101a:	6861      	ldr	r1, [r4, #4]
 800101c:	6809      	ldr	r1, [r1, #0]
 800101e:	0889      	lsrs	r1, r1, #2
 8001020:	4031      	ands	r1, r6
 8001022:	d000      	beq.n	8001026 <PE_SubStateMachine_Generic+0x2be>
 8001024:	2001      	movs	r0, #1
 8001026:	9000      	str	r0, [sp, #0]
 8001028:	2368      	movs	r3, #104	@ 0x68
 800102a:	2218      	movs	r2, #24
 800102c:	2031      	movs	r0, #49	@ 0x31
 800102e:	5c21      	ldrb	r1, [r4, r0]
 8001030:	0020      	movs	r0, r4
 8001032:	f000 fa6d 	bl	8001510 <PE_Send_CtrlMessage>
 8001036:	2800      	cmp	r0, #0
 8001038:	d105      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 800103a:	200f      	movs	r0, #15
 800103c:	7720      	strb	r0, [r4, #28]
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8001040:	83e0      	strh	r0, [r4, #30]
 8001042:	201b      	movs	r0, #27
 8001044:	9004      	str	r0, [sp, #16]
 8001046:	e172      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001048:	0000802d 	.word	0x0000802d
 800104c:	0000801b 	.word	0x0000801b
 8001050:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001052:	7800      	ldrb	r0, [r0, #0]
 8001054:	2814      	cmp	r0, #20
 8001056:	d023      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001058:	2030      	movs	r0, #48	@ 0x30
 800105a:	5c20      	ldrb	r0, [r4, r0]
 800105c:	2131      	movs	r1, #49	@ 0x31
 800105e:	5c61      	ldrb	r1, [r4, r1]
 8001060:	4288      	cmp	r0, r1
 8001062:	d11d      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001064:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001066:	0bc1      	lsrs	r1, r0, #15
 8001068:	d11a      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 800106a:	0b01      	lsrs	r1, r0, #12
 800106c:	0749      	lsls	r1, r1, #29
 800106e:	d017      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001070:	06c0      	lsls	r0, r0, #27
 8001072:	0ec0      	lsrs	r0, r0, #27
 8001074:	280c      	cmp	r0, #12
 8001076:	d113      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001078:	2304      	movs	r3, #4
 800107a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800107c:	1c82      	adds	r2, r0, #2
 800107e:	2114      	movs	r1, #20
 8001080:	7c20      	ldrb	r0, [r4, #16]
 8001082:	68a6      	ldr	r6, [r4, #8]
 8001084:	69b6      	ldr	r6, [r6, #24]
 8001086:	47b0      	blx	r6
 8001088:	2003      	movs	r0, #3
 800108a:	7460      	strb	r0, [r4, #17]
 800108c:	9504      	str	r5, [sp, #16]
 800108e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001090:	7800      	ldrb	r0, [r0, #0]
 8001092:	2814      	cmp	r0, #20
 8001094:	d004      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001096:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001098:	7007      	strb	r7, [r0, #0]
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff fc5b 	bl	8000956 <PE_Clear_RxEvent>
 80010a0:	8be0      	ldrh	r0, [r4, #30]
 80010a2:	2180      	movs	r1, #128	@ 0x80
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d108      	bne.n	80010bc <PE_SubStateMachine_Generic+0x354>
 80010aa:	2011      	movs	r0, #17
 80010ac:	e0cd      	b.n	800124a <PE_SubStateMachine_Generic+0x4e2>
 80010ae:	9500      	str	r5, [sp, #0]
 80010b0:	2303      	movs	r3, #3
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	0020      	movs	r0, r4
 80010b8:	f000 fa2a 	bl	8001510 <PE_Send_CtrlMessage>
 80010bc:	e137      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80010be:	ab03      	add	r3, sp, #12
 80010c0:	48c9      	ldr	r0, [pc, #804]	@ (80013e8 <.text_73>)
 80010c2:	1822      	adds	r2, r4, r0
 80010c4:	2108      	movs	r1, #8
 80010c6:	7c20      	ldrb	r0, [r4, #16]
 80010c8:	68a7      	ldr	r7, [r4, #8]
 80010ca:	697f      	ldr	r7, [r7, #20]
 80010cc:	47b8      	blx	r7
 80010ce:	2119      	movs	r1, #25
 80010d0:	9803      	ldr	r0, [sp, #12]
 80010d2:	f000 f9bb 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d129      	bne.n	800112e <PE_SubStateMachine_Generic+0x3c6>
 80010da:	48c4      	ldr	r0, [pc, #784]	@ (80013ec <.text_74>)
 80010dc:	1826      	adds	r6, r4, r0
 80010de:	7035      	strb	r5, [r6, #0]
 80010e0:	7075      	strb	r5, [r6, #1]
 80010e2:	7c20      	ldrb	r0, [r4, #16]
 80010e4:	f7ff fe2e 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d103      	bne.n	80010f4 <PE_SubStateMachine_Generic+0x38c>
 80010ec:	7870      	ldrb	r0, [r6, #1]
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	4301      	orrs	r1, r0
 80010f2:	7071      	strb	r1, [r6, #1]
 80010f4:	9502      	str	r5, [sp, #8]
 80010f6:	2003      	movs	r0, #3
 80010f8:	9001      	str	r0, [sp, #4]
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	b280      	uxth	r0, r0
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	48bb      	ldr	r0, [pc, #748]	@ (80013f0 <.text_75>)
 8001104:	1823      	adds	r3, r4, r0
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	0020      	movs	r0, r4
 800110c:	f000 fb5e 	bl	80017cc <PE_Send_ExtendedMessage>
 8001110:	2148      	movs	r1, #72	@ 0x48
 8001112:	e057      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8001114:	ab03      	add	r3, sp, #12
 8001116:	48b4      	ldr	r0, [pc, #720]	@ (80013e8 <.text_73>)
 8001118:	1822      	adds	r2, r4, r0
 800111a:	2113      	movs	r1, #19
 800111c:	7c20      	ldrb	r0, [r4, #16]
 800111e:	68a7      	ldr	r7, [r4, #8]
 8001120:	697f      	ldr	r7, [r7, #20]
 8001122:	47b8      	blx	r7
 8001124:	2118      	movs	r1, #24
 8001126:	9803      	ldr	r0, [sp, #12]
 8001128:	f000 f990 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800112c:	2800      	cmp	r0, #0
 800112e:	d000      	beq.n	8001132 <PE_SubStateMachine_Generic+0x3ca>
 8001130:	e0fc      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001132:	48ae      	ldr	r0, [pc, #696]	@ (80013ec <.text_74>)
 8001134:	1826      	adds	r6, r4, r0
 8001136:	7035      	strb	r5, [r6, #0]
 8001138:	7075      	strb	r5, [r6, #1]
 800113a:	7c20      	ldrb	r0, [r4, #16]
 800113c:	f7ff fe02 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001140:	2800      	cmp	r0, #0
 8001142:	d103      	bne.n	800114c <PE_SubStateMachine_Generic+0x3e4>
 8001144:	7870      	ldrb	r0, [r6, #1]
 8001146:	2180      	movs	r1, #128	@ 0x80
 8001148:	4301      	orrs	r1, r0
 800114a:	7071      	strb	r1, [r6, #1]
 800114c:	9502      	str	r5, [sp, #8]
 800114e:	2003      	movs	r0, #3
 8001150:	9001      	str	r0, [sp, #4]
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	1d00      	adds	r0, r0, #4
 8001156:	b280      	uxth	r0, r0
 8001158:	9000      	str	r0, [sp, #0]
 800115a:	48a5      	ldr	r0, [pc, #660]	@ (80013f0 <.text_75>)
 800115c:	1823      	adds	r3, r4, r0
 800115e:	220f      	movs	r2, #15
 8001160:	2100      	movs	r1, #0
 8001162:	0020      	movs	r0, r4
 8001164:	f000 fb32 	bl	80017cc <PE_Send_ExtendedMessage>
 8001168:	2161      	movs	r1, #97	@ 0x61
 800116a:	e02b      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 800116c:	ab03      	add	r3, sp, #12
 800116e:	489e      	ldr	r0, [pc, #632]	@ (80013e8 <.text_73>)
 8001170:	1822      	adds	r2, r4, r0
 8001172:	2109      	movs	r1, #9
 8001174:	7c20      	ldrb	r0, [r4, #16]
 8001176:	68a7      	ldr	r7, [r4, #8]
 8001178:	697f      	ldr	r7, [r7, #20]
 800117a:	47b8      	blx	r7
 800117c:	2107      	movs	r1, #7
 800117e:	9803      	ldr	r0, [sp, #12]
 8001180:	f000 f964 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001184:	2800      	cmp	r0, #0
 8001186:	d170      	bne.n	800126a <PE_SubStateMachine_Generic+0x502>
 8001188:	4998      	ldr	r1, [pc, #608]	@ (80013ec <.text_74>)
 800118a:	5465      	strb	r5, [r4, r1]
 800118c:	1860      	adds	r0, r4, r1
 800118e:	7045      	strb	r5, [r0, #1]
 8001190:	7c20      	ldrb	r0, [r4, #16]
 8001192:	f7ff fdd7 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001196:	2800      	cmp	r0, #0
 8001198:	d105      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x43e>
 800119a:	4894      	ldr	r0, [pc, #592]	@ (80013ec <.text_74>)
 800119c:	1820      	adds	r0, r4, r0
 800119e:	7841      	ldrb	r1, [r0, #1]
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	430a      	orrs	r2, r1
 80011a4:	7042      	strb	r2, [r0, #1]
 80011a6:	9502      	str	r5, [sp, #8]
 80011a8:	2003      	movs	r0, #3
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	9803      	ldr	r0, [sp, #12]
 80011ae:	1d00      	adds	r0, r0, #4
 80011b0:	b280      	uxth	r0, r0
 80011b2:	9000      	str	r0, [sp, #0]
 80011b4:	488e      	ldr	r0, [pc, #568]	@ (80013f0 <.text_75>)
 80011b6:	1823      	adds	r3, r4, r0
 80011b8:	2202      	movs	r2, #2
 80011ba:	2100      	movs	r1, #0
 80011bc:	0020      	movs	r0, r4
 80011be:	f000 fb05 	bl	80017cc <PE_Send_ExtendedMessage>
 80011c2:	214f      	movs	r1, #79	@ 0x4f
 80011c4:	7c20      	ldrb	r0, [r4, #16]
 80011c6:	f7ff f95b 	bl	8000480 <USBPD_PE_Notification>
 80011ca:	e0b0      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80011cc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80011ce:	7800      	ldrb	r0, [r0, #0]
 80011d0:	2814      	cmp	r0, #20
 80011d2:	d034      	beq.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 80011d4:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80011d6:	0bc1      	lsrs	r1, r0, #15
 80011d8:	d11a      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011da:	0b01      	lsrs	r1, r0, #12
 80011dc:	0749      	lsls	r1, r1, #29
 80011de:	d017      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e0:	06c0      	lsls	r0, r0, #27
 80011e2:	0ec0      	lsrs	r0, r0, #27
 80011e4:	2805      	cmp	r0, #5
 80011e6:	d113      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e8:	2304      	movs	r3, #4
 80011ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80011ec:	1d02      	adds	r2, r0, #4
 80011ee:	210f      	movs	r1, #15
 80011f0:	7c20      	ldrb	r0, [r4, #16]
 80011f2:	68a6      	ldr	r6, [r4, #8]
 80011f4:	69b6      	ldr	r6, [r6, #24]
 80011f6:	47b0      	blx	r6
 80011f8:	2003      	movs	r0, #3
 80011fa:	7460      	strb	r0, [r4, #17]
 80011fc:	9504      	str	r5, [sp, #16]
 80011fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001200:	7800      	ldrb	r0, [r0, #0]
 8001202:	2814      	cmp	r0, #20
 8001204:	d004      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 8001206:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001208:	700f      	strb	r7, [r1, #0]
 800120a:	0020      	movs	r0, r4
 800120c:	f7ff fba3 	bl	8000956 <PE_Clear_RxEvent>
 8001210:	2034      	movs	r0, #52	@ 0x34
 8001212:	5c20      	ldrb	r0, [r4, r0]
 8001214:	06c0      	lsls	r0, r0, #27
 8001216:	0ec0      	lsrs	r0, r0, #27
 8001218:	2810      	cmp	r0, #16
 800121a:	d110      	bne.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 800121c:	2159      	movs	r1, #89	@ 0x59
 800121e:	7c20      	ldrb	r0, [r4, #16]
 8001220:	f7ff f92e 	bl	8000480 <USBPD_PE_Notification>
 8001224:	83e5      	strh	r5, [r4, #30]
 8001226:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001228:	7800      	ldrb	r0, [r0, #0]
 800122a:	2814      	cmp	r0, #20
 800122c:	d004      	beq.n	8001238 <PE_SubStateMachine_Generic+0x4d0>
 800122e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001230:	7007      	strb	r7, [r0, #0]
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff fb8f 	bl	8000956 <PE_Clear_RxEvent>
 8001238:	2003      	movs	r0, #3
 800123a:	7460      	strb	r0, [r4, #17]
 800123c:	9504      	str	r5, [sp, #16]
 800123e:	8be0      	ldrh	r0, [r4, #30]
 8001240:	2180      	movs	r1, #128	@ 0x80
 8001242:	0209      	lsls	r1, r1, #8
 8001244:	4288      	cmp	r0, r1
 8001246:	d172      	bne.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001248:	2003      	movs	r0, #3
 800124a:	7460      	strb	r0, [r4, #17]
 800124c:	9504      	str	r5, [sp, #16]
 800124e:	e06e      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001250:	ab03      	add	r3, sp, #12
 8001252:	4865      	ldr	r0, [pc, #404]	@ (80013e8 <.text_73>)
 8001254:	1822      	adds	r2, r4, r0
 8001256:	210d      	movs	r1, #13
 8001258:	7c20      	ldrb	r0, [r4, #16]
 800125a:	68a7      	ldr	r7, [r4, #8]
 800125c:	697f      	ldr	r7, [r7, #20]
 800125e:	47b8      	blx	r7
 8001260:	2104      	movs	r1, #4
 8001262:	9803      	ldr	r0, [sp, #12]
 8001264:	f000 f8f2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001268:	2800      	cmp	r0, #0
 800126a:	d15f      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 800126c:	485f      	ldr	r0, [pc, #380]	@ (80013ec <.text_74>)
 800126e:	1826      	adds	r6, r4, r0
 8001270:	7035      	strb	r5, [r6, #0]
 8001272:	7075      	strb	r5, [r6, #1]
 8001274:	7c20      	ldrb	r0, [r4, #16]
 8001276:	f7ff fd65 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800127a:	2800      	cmp	r0, #0
 800127c:	d103      	bne.n	8001286 <PE_SubStateMachine_Generic+0x51e>
 800127e:	7870      	ldrb	r0, [r6, #1]
 8001280:	2180      	movs	r1, #128	@ 0x80
 8001282:	4301      	orrs	r1, r0
 8001284:	7071      	strb	r1, [r6, #1]
 8001286:	9502      	str	r5, [sp, #8]
 8001288:	2003      	movs	r0, #3
 800128a:	9001      	str	r0, [sp, #4]
 800128c:	9803      	ldr	r0, [sp, #12]
 800128e:	1d00      	adds	r0, r0, #4
 8001290:	b280      	uxth	r0, r0
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	4856      	ldr	r0, [pc, #344]	@ (80013f0 <.text_75>)
 8001296:	1823      	adds	r3, r4, r0
 8001298:	2207      	movs	r2, #7
 800129a:	e03d      	b.n	8001318 <PE_SubStateMachine_Generic+0x5b0>
 800129c:	9505      	str	r5, [sp, #20]
 800129e:	ab03      	add	r3, sp, #12
 80012a0:	aa05      	add	r2, sp, #20
 80012a2:	210f      	movs	r1, #15
 80012a4:	7c20      	ldrb	r0, [r4, #16]
 80012a6:	68a5      	ldr	r5, [r4, #8]
 80012a8:	696d      	ldr	r5, [r5, #20]
 80012aa:	47a8      	blx	r5
 80012ac:	2104      	movs	r1, #4
 80012ae:	9803      	ldr	r0, [sp, #12]
 80012b0:	f000 f8cc 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d139      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	2003      	movs	r0, #3
 80012bc:	9001      	str	r0, [sp, #4]
 80012be:	9600      	str	r6, [sp, #0]
 80012c0:	ab05      	add	r3, sp, #20
 80012c2:	2205      	movs	r2, #5
 80012c4:	2100      	movs	r1, #0
 80012c6:	0020      	movs	r0, r4
 80012c8:	f000 f94d 	bl	8001566 <PE_Send_DataMessage>
 80012cc:	e02f      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	4845      	ldr	r0, [pc, #276]	@ (80013e8 <.text_73>)
 80012d2:	1822      	adds	r2, r4, r0
 80012d4:	2111      	movs	r1, #17
 80012d6:	7c20      	ldrb	r0, [r4, #16]
 80012d8:	68a7      	ldr	r7, [r4, #8]
 80012da:	697f      	ldr	r7, [r7, #20]
 80012dc:	47b8      	blx	r7
 80012de:	2109      	movs	r1, #9
 80012e0:	9803      	ldr	r0, [sp, #12]
 80012e2:	f000 f8b3 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d120      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012ea:	4840      	ldr	r0, [pc, #256]	@ (80013ec <.text_74>)
 80012ec:	1826      	adds	r6, r4, r0
 80012ee:	7035      	strb	r5, [r6, #0]
 80012f0:	7075      	strb	r5, [r6, #1]
 80012f2:	7c20      	ldrb	r0, [r4, #16]
 80012f4:	f7ff fd26 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d103      	bne.n	8001304 <PE_SubStateMachine_Generic+0x59c>
 80012fc:	7870      	ldrb	r0, [r6, #1]
 80012fe:	2180      	movs	r1, #128	@ 0x80
 8001300:	4301      	orrs	r1, r0
 8001302:	7071      	strb	r1, [r6, #1]
 8001304:	9502      	str	r5, [sp, #8]
 8001306:	2003      	movs	r0, #3
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	1d00      	adds	r0, r0, #4
 800130e:	b280      	uxth	r0, r0
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	4837      	ldr	r0, [pc, #220]	@ (80013f0 <.text_75>)
 8001314:	1823      	adds	r3, r4, r0
 8001316:	2205      	movs	r2, #5
 8001318:	2100      	movs	r1, #0
 800131a:	0020      	movs	r0, r4
 800131c:	f000 fa56 	bl	80017cc <PE_Send_ExtendedMessage>
 8001320:	e005      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001322:	2150      	movs	r1, #80	@ 0x50
 8001324:	7c20      	ldrb	r0, [r4, #16]
 8001326:	f7ff f8ab 	bl	8000480 <USBPD_PE_Notification>
 800132a:	e78d      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 800132c:	7466      	strb	r6, [r4, #17]
 800132e:	9804      	ldr	r0, [sp, #16]
 8001330:	b00f      	add	sp, #60	@ 0x3c
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001334 <PE_SubStateMachine_ReceiveDRS>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	252a      	movs	r5, #42	@ 0x2a
 800133a:	7c20      	ldrb	r0, [r4, #16]
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8001340:	4788      	blx	r1
 8001342:	280a      	cmp	r0, #10
 8001344:	d002      	beq.n	800134c <PE_SubStateMachine_ReceiveDRS+0x18>
 8001346:	280c      	cmp	r0, #12
 8001348:	d017      	beq.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 800134a:	e00d      	b.n	8001368 <PE_SubStateMachine_ReceiveDRS+0x34>
 800134c:	2000      	movs	r0, #0
 800134e:	9000      	str	r0, [sp, #0]
 8001350:	2303      	movs	r3, #3
 8001352:	2203      	movs	r2, #3
 8001354:	2100      	movs	r1, #0
 8001356:	0020      	movs	r0, r4
 8001358:	f000 f8da 	bl	8001510 <PE_Send_CtrlMessage>
 800135c:	2800      	cmp	r0, #0
 800135e:	d10d      	bne.n	800137c <PE_SubStateMachine_ReceiveDRS+0x48>
 8001360:	0020      	movs	r0, r4
 8001362:	f000 f88b 	bl	800147c <PE_SwitchDataRole>
 8001366:	bd31      	pop	{r0, r4, r5, pc}
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	7800      	ldrb	r0, [r0, #0]
 800136c:	0780      	lsls	r0, r0, #30
 800136e:	0f80      	lsrs	r0, r0, #30
 8001370:	2802      	cmp	r0, #2
 8001372:	d102      	bne.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 8001374:	2001      	movs	r0, #1
 8001376:	7460      	strb	r0, [r4, #17]
 8001378:	bd31      	pop	{r0, r4, r5, pc}
 800137a:	7465      	strb	r5, [r4, #17]
 800137c:	bd31      	pop	{r0, r4, r5, pc}

0800137e <PE_UpdateTimer>:
 800137e:	b510      	push	{r4, lr}
 8001380:	0002      	movs	r2, r0
 8001382:	2080      	movs	r0, #128	@ 0x80
 8001384:	0200      	lsls	r0, r0, #8
 8001386:	0454      	lsls	r4, r2, #17
 8001388:	0c64      	lsrs	r4, r4, #17
 800138a:	42a1      	cmp	r1, r4
 800138c:	da00      	bge.n	8001390 <PE_UpdateTimer+0x12>
 800138e:	1a50      	subs	r0, r2, r1
 8001390:	b280      	uxth	r0, r0
 8001392:	bd10      	pop	{r4, pc}

08001394 <PE_CallHardResetCallback>:
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <PE_CallHardResetCallback+0xa>
 800139c:	4770      	bx	lr
 800139e:	b580      	push	{r7, lr}
 80013a0:	7c00      	ldrb	r0, [r0, #16]
 80013a2:	4798      	blx	r3
 80013a4:	bd01      	pop	{r0, pc}

080013a6 <PE_SetPowerNegotiation>:
 80013a6:	b510      	push	{r4, lr}
 80013a8:	6842      	ldr	r2, [r0, #4]
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	055c      	lsls	r4, r3, #21
 80013ae:	0f64      	lsrs	r4, r4, #29
 80013b0:	42a1      	cmp	r1, r4
 80013b2:	d00b      	beq.n	80013cc <PE_SetPowerNegotiation+0x26>
 80013b4:	4c2e      	ldr	r4, [pc, #184]	@ (8001470 <.text_79>)
 80013b6:	401c      	ands	r4, r3
 80013b8:	0209      	lsls	r1, r1, #8
 80013ba:	23e0      	movs	r3, #224	@ 0xe0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	400b      	ands	r3, r1
 80013c0:	4323      	orrs	r3, r4
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	215a      	movs	r1, #90	@ 0x5a
 80013c6:	7c00      	ldrb	r0, [r0, #16]
 80013c8:	f7ff f85a 	bl	8000480 <USBPD_PE_Notification>
 80013cc:	bd10      	pop	{r4, pc}

080013ce <USBPD_PE_ExecFastRoleSwapSignalling>:
 80013ce:	b580      	push	{r7, lr}
 80013d0:	4928      	ldr	r1, [pc, #160]	@ (8001474 <.text_80>)
 80013d2:	0082      	lsls	r2, r0, #2
 80013d4:	5889      	ldr	r1, [r1, r2]
 80013d6:	694a      	ldr	r2, [r1, #20]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4313      	orrs	r3, r2
 80013de:	614b      	str	r3, [r1, #20]
 80013e0:	6889      	ldr	r1, [r1, #8]
 80013e2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80013e4:	4788      	blx	r1
 80013e6:	bd01      	pop	{r0, pc}

080013e8 <.text_73>:
 80013e8:	00000267 	.word	0x00000267

080013ec <.text_74>:
 80013ec:	00000265 	.word	0x00000265

080013f0 <.text_75>:
 80013f0:	00000263 	.word	0x00000263

080013f4 <PE_CalculateMinTiming>:
 80013f4:	0001      	movs	r1, r0
 80013f6:	2000      	movs	r0, #0
 80013f8:	43c0      	mvns	r0, r0
 80013fa:	0c42      	lsrs	r2, r0, #17
 80013fc:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 80013fe:	4213      	tst	r3, r2
 8001400:	d001      	beq.n	8001406 <PE_CalculateMinTiming+0x12>
 8001402:	8c88      	ldrh	r0, [r1, #36]	@ 0x24
 8001404:	4010      	ands	r0, r2
 8001406:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 8001408:	4213      	tst	r3, r2
 800140a:	d006      	beq.n	800141a <PE_CalculateMinTiming+0x26>
 800140c:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 800140e:	4013      	ands	r3, r2
 8001410:	4298      	cmp	r0, r3
 8001412:	d302      	bcc.n	800141a <PE_CalculateMinTiming+0x26>
 8001414:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8001416:	0010      	movs	r0, r2
 8001418:	4008      	ands	r0, r1
 800141a:	4770      	bx	lr

0800141c <PE_SetPowerNegociation>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	0005      	movs	r5, r0
 8001420:	000c      	movs	r4, r1
 8001422:	6868      	ldr	r0, [r5, #4]
 8001424:	6800      	ldr	r0, [r0, #0]
 8001426:	0540      	lsls	r0, r0, #21
 8001428:	0f40      	lsrs	r0, r0, #29
 800142a:	4284      	cmp	r4, r0
 800142c:	d003      	beq.n	8001436 <PE_SetPowerNegociation+0x1a>
 800142e:	215a      	movs	r1, #90	@ 0x5a
 8001430:	7c28      	ldrb	r0, [r5, #16]
 8001432:	f7ff f825 	bl	8000480 <USBPD_PE_Notification>
 8001436:	6868      	ldr	r0, [r5, #4]
 8001438:	6801      	ldr	r1, [r0, #0]
 800143a:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <.text_79>)
 800143c:	400a      	ands	r2, r1
 800143e:	0221      	lsls	r1, r4, #8
 8001440:	23e0      	movs	r3, #224	@ 0xe0
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	400b      	ands	r3, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	6003      	str	r3, [r0, #0]
 800144a:	bd31      	pop	{r0, r4, r5, pc}

0800144c <PE_CheckDataSizeFromGetDataInfo>:
 800144c:	b51c      	push	{r2, r3, r4, lr}
 800144e:	0002      	movs	r2, r0
 8001450:	2000      	movs	r0, #0
 8001452:	428a      	cmp	r2, r1
 8001454:	d20a      	bcs.n	800146c <PE_CheckDataSizeFromGetDataInfo+0x20>
 8001456:	2018      	movs	r0, #24
 8001458:	9000      	str	r0, [sp, #0]
 800145a:	bf00      	nop
 800145c:	a315      	add	r3, pc, #84	@ (adr r3, 80014b4 <.text_83>)
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2006      	movs	r0, #6
 8001464:	4c04      	ldr	r4, [pc, #16]	@ (8001478 <.text_81>)
 8001466:	6824      	ldr	r4, [r4, #0]
 8001468:	47a0      	blx	r4
 800146a:	2002      	movs	r0, #2
 800146c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001470 <.text_79>:
 8001470:	fffff8ff 	.word	0xfffff8ff

08001474 <.text_80>:
 8001474:	2000023c 	.word	0x2000023c

08001478 <.text_81>:
 8001478:	20000000 	.word	0x20000000

0800147c <PE_SwitchDataRole>:
 800147c:	b510      	push	{r4, lr}
 800147e:	0004      	movs	r4, r0
 8001480:	6860      	ldr	r0, [r4, #4]
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	08d3      	lsrs	r3, r2, #3
 8001488:	400b      	ands	r3, r1
 800148a:	d107      	bne.n	800149c <PE_SwitchDataRole+0x20>
 800148c:	2308      	movs	r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	6003      	str	r3, [r0, #0]
 8001492:	7c20      	ldrb	r0, [r4, #16]
 8001494:	f004 f93b 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 8001498:	2125      	movs	r1, #37	@ 0x25
 800149a:	e007      	b.n	80014ac <PE_SwitchDataRole+0x30>
 800149c:	2108      	movs	r1, #8
 800149e:	438a      	bics	r2, r1
 80014a0:	6002      	str	r2, [r0, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	7c20      	ldrb	r0, [r4, #16]
 80014a6:	f004 f932 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 80014aa:	2124      	movs	r1, #36	@ 0x24
 80014ac:	7c20      	ldrb	r0, [r4, #16]
 80014ae:	f7fe ffe7 	bl	8000480 <USBPD_PE_Notification>
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <.text_83>:
 80014b4:	61746144 	.word	0x61746144
 80014b8:	7a695320 	.word	0x7a695320
 80014bc:	73692065 	.word	0x73692065
 80014c0:	746f6e20 	.word	0x746f6e20
 80014c4:	726f6320 	.word	0x726f6320
 80014c8:	74636572 	.word	0x74636572
 80014cc:	00          	.byte	0x00
 80014cd:	00          	.byte	0x00
	...

080014d0 <USBPD_PE_SetTrace>:
 80014d0:	0001      	movs	r1, r0
 80014d2:	d100      	bne.n	80014d6 <USBPD_PE_SetTrace+0x6>
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <.text_5>)
 80014d6:	4906      	ldr	r1, [pc, #24]	@ (80014f0 <.text_6>)
 80014d8:	6008      	str	r0, [r1, #0]
 80014da:	4770      	bx	lr

080014dc <USBPD_PE_CheckLIB>:
 80014dc:	0001      	movs	r1, r0
 80014de:	2000      	movs	r0, #0
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <.text_7>)
 80014e2:	4291      	cmp	r1, r2
 80014e4:	d100      	bne.n	80014e8 <USBPD_PE_CheckLIB+0xc>
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
	...

080014ec <.text_5>:
 80014ec:	0800150f 	.word	0x0800150f

080014f0 <.text_6>:
 80014f0:	20000000 	.word	0x20000000

080014f4 <.text_7>:
 80014f4:	30410000 	.word	0x30410000

080014f8 <USBPD_PE_GetMemoryConsumption>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	f004 f8df 	bl	80056bc <USBPD_PRL_GetMemoryConsumption>
 80014fe:	0004      	movs	r4, r0
 8001500:	f7fe fedd 	bl	80002be <USBPD_CAD_GetMemoryConsumption>
 8001504:	1820      	adds	r0, r4, r0
 8001506:	21e1      	movs	r1, #225	@ 0xe1
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	1840      	adds	r0, r0, r1
 800150c:	bd10      	pop	{r4, pc}

0800150e <PE_Trace_Empty>:
 800150e:	4770      	bx	lr

08001510 <PE_Send_CtrlMessage>:
 8001510:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001512:	2501      	movs	r5, #1
 8001514:	0004      	movs	r4, r0
 8001516:	000f      	movs	r7, r1
 8001518:	0016      	movs	r6, r2
 800151a:	6860      	ldr	r0, [r4, #4]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	0b00      	lsrs	r0, r0, #12
 8001520:	4028      	ands	r0, r5
 8001522:	d014      	beq.n	800154e <PE_Send_CtrlMessage+0x3e>
 8001524:	a808      	add	r0, sp, #32
 8001526:	7800      	ldrb	r0, [r0, #0]
 8001528:	9001      	str	r0, [sp, #4]
 800152a:	2002      	movs	r0, #2
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	48a2      	ldr	r0, [pc, #648]	@ (80017b8 <.text_5>)
 8001530:	1823      	adds	r3, r4, r0
 8001532:	0032      	movs	r2, r6
 8001534:	0039      	movs	r1, r7
 8001536:	7c20      	ldrb	r0, [r4, #16]
 8001538:	f004 f938 	bl	80057ac <USBPD_PRL_SendMessage>
 800153c:	2803      	cmp	r0, #3
 800153e:	d0ec      	beq.n	800151a <PE_Send_CtrlMessage+0xa>
 8001540:	0039      	movs	r1, r7
 8001542:	2810      	cmp	r0, #16
 8001544:	d00e      	beq.n	8001564 <PE_Send_CtrlMessage+0x54>
 8001546:	2e0d      	cmp	r6, #13
 8001548:	d104      	bne.n	8001554 <PE_Send_CtrlMessage+0x44>
 800154a:	2201      	movs	r2, #1
 800154c:	e003      	b.n	8001556 <PE_Send_CtrlMessage+0x46>
 800154e:	7460      	strb	r0, [r4, #17]
 8001550:	2010      	movs	r0, #16
 8001552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001554:	2200      	movs	r2, #0
 8001556:	466b      	mov	r3, sp
 8001558:	7a1b      	ldrb	r3, [r3, #8]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	0003      	movs	r3, r0
 800155e:	0020      	movs	r0, r4
 8001560:	f000 fc24 	bl	8001dac <PE_CheckSendMessageStatus>
 8001564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001566 <PE_Send_DataMessage>:
 8001566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	0004      	movs	r4, r0
 800156c:	2000      	movs	r0, #0
 800156e:	4e93      	ldr	r6, [pc, #588]	@ (80017bc <.text_6>)
 8001570:	e00c      	b.n	800158c <PE_Send_DataMessage+0x26>
 8001572:	2100      	movs	r1, #0
 8001574:	0082      	lsls	r2, r0, #2
 8001576:	18a2      	adds	r2, r4, r2
 8001578:	1855      	adds	r5, r2, r1
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	00cf      	lsls	r7, r1, #3
 800157e:	40fa      	lsrs	r2, r7
 8001580:	55aa      	strb	r2, [r5, r6]
 8001582:	1c49      	adds	r1, r1, #1
 8001584:	2904      	cmp	r1, #4
 8001586:	d3f5      	bcc.n	8001574 <PE_Send_DataMessage+0xe>
 8001588:	1d1b      	adds	r3, r3, #4
 800158a:	1c40      	adds	r0, r0, #1
 800158c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800158e:	4288      	cmp	r0, r1
 8001590:	d3ef      	bcc.n	8001572 <PE_Send_DataMessage+0xc>
 8001592:	6860      	ldr	r0, [r4, #4]
 8001594:	6800      	ldr	r0, [r0, #0]
 8001596:	04c1      	lsls	r1, r0, #19
 8001598:	0fc9      	lsrs	r1, r1, #31
 800159a:	d01f      	beq.n	80015dc <PE_Send_DataMessage+0x76>
 800159c:	a80c      	add	r0, sp, #48	@ 0x30
 800159e:	7800      	ldrb	r0, [r0, #0]
 80015a0:	9001      	str	r0, [sp, #4]
 80015a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80015a4:	0080      	lsls	r0, r0, #2
 80015a6:	1c80      	adds	r0, r0, #2
 80015a8:	b280      	uxth	r0, r0
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	1eb0      	subs	r0, r6, #2
 80015ae:	1823      	adds	r3, r4, r0
 80015b0:	4668      	mov	r0, sp
 80015b2:	7c02      	ldrb	r2, [r0, #16]
 80015b4:	7b01      	ldrb	r1, [r0, #12]
 80015b6:	7c20      	ldrb	r0, [r4, #16]
 80015b8:	f004 f8f8 	bl	80057ac <USBPD_PRL_SendMessage>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d0e8      	beq.n	8001592 <PE_Send_DataMessage+0x2c>
 80015c0:	4669      	mov	r1, sp
 80015c2:	7b09      	ldrb	r1, [r1, #12]
 80015c4:	2810      	cmp	r0, #16
 80015c6:	d007      	beq.n	80015d8 <PE_Send_DataMessage+0x72>
 80015c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	0003      	movs	r3, r0
 80015d0:	2200      	movs	r2, #0
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fbea 	bl	8001dac <PE_CheckSendMessageStatus>
 80015d8:	b005      	add	sp, #20
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2010      	movs	r0, #16
 80015de:	e7fb      	b.n	80015d8 <PE_Send_DataMessage+0x72>

080015e0 <PE_Check_ExtendedMessage>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	0004      	movs	r4, r0
 80015e4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80015e6:	7881      	ldrb	r1, [r0, #2]
 80015e8:	78c0      	ldrb	r0, [r0, #3]
 80015ea:	0200      	lsls	r0, r0, #8
 80015ec:	1808      	adds	r0, r1, r0
 80015ee:	4974      	ldr	r1, [pc, #464]	@ (80017c0 <.text_7>)
 80015f0:	1861      	adds	r1, r4, r1
 80015f2:	8008      	strh	r0, [r1, #0]
 80015f4:	2234      	movs	r2, #52	@ 0x34
 80015f6:	5ca2      	ldrb	r2, [r4, r2]
 80015f8:	06d2      	lsls	r2, r2, #27
 80015fa:	0ed2      	lsrs	r2, r2, #27
 80015fc:	708a      	strb	r2, [r1, #2]
 80015fe:	2501      	movs	r5, #1
 8001600:	0403      	lsls	r3, r0, #16
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	2201      	movs	r2, #1
 8001606:	401a      	ands	r2, r3
 8001608:	0403      	lsls	r3, r0, #16
 800160a:	0edb      	lsrs	r3, r3, #27
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	d003      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001610:	0013      	movs	r3, r2
 8001612:	d001      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001614:	2034      	movs	r0, #52	@ 0x34
 8001616:	e09e      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001618:	05c6      	lsls	r6, r0, #23
 800161a:	0df6      	lsrs	r6, r6, #23
 800161c:	2300      	movs	r3, #0
 800161e:	0407      	lsls	r7, r0, #16
 8001620:	0fff      	lsrs	r7, r7, #31
 8001622:	d10d      	bne.n	8001640 <PE_Check_ExtendedMessage+0x60>
 8001624:	4867      	ldr	r0, [pc, #412]	@ (80017c4 <.text_8>)
 8001626:	5226      	strh	r6, [r4, r0]
 8001628:	4866      	ldr	r0, [pc, #408]	@ (80017c4 <.text_8>)
 800162a:	5a20      	ldrh	r0, [r4, r0]
 800162c:	4283      	cmp	r3, r0
 800162e:	d21b      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001630:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001632:	1d00      	adds	r0, r0, #4
 8001634:	5cc0      	ldrb	r0, [r0, r3]
 8001636:	4a64      	ldr	r2, [pc, #400]	@ (80017c8 <.text_9>)
 8001638:	18a2      	adds	r2, r4, r2
 800163a:	54d0      	strb	r0, [r2, r3]
 800163c:	1c5b      	adds	r3, r3, #1
 800163e:	e7f3      	b.n	8001628 <PE_Check_ExtendedMessage+0x48>
 8001640:	27f8      	movs	r7, #248	@ 0xf8
 8001642:	01ff      	lsls	r7, r7, #7
 8001644:	4007      	ands	r7, r0
 8001646:	d106      	bne.n	8001656 <PE_Check_ExtendedMessage+0x76>
 8001648:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800164a:	0440      	lsls	r0, r0, #17
 800164c:	0f40      	lsrs	r0, r0, #29
 800164e:	2807      	cmp	r0, #7
 8001650:	d30a      	bcc.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001652:	2e1a      	cmp	r6, #26
 8001654:	d908      	bls.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001656:	2a00      	cmp	r2, #0
 8001658:	d106      	bne.n	8001668 <PE_Check_ExtendedMessage+0x88>
 800165a:	485a      	ldr	r0, [pc, #360]	@ (80017c4 <.text_8>)
 800165c:	5a20      	ldrh	r0, [r4, r0]
 800165e:	42b0      	cmp	r0, r6
 8001660:	d202      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001662:	83e3      	strh	r3, [r4, #30]
 8001664:	2037      	movs	r0, #55	@ 0x37
 8001666:	e076      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001668:	7889      	ldrb	r1, [r1, #2]
 800166a:	2603      	movs	r6, #3
 800166c:	7f22      	ldrb	r2, [r4, #28]
 800166e:	2a00      	cmp	r2, #0
 8001670:	d039      	beq.n	80016e6 <PE_Check_ExtendedMessage+0x106>
 8001672:	2901      	cmp	r1, #1
 8001674:	d008      	beq.n	8001688 <PE_Check_ExtendedMessage+0xa8>
 8001676:	2902      	cmp	r1, #2
 8001678:	d01c      	beq.n	80016b4 <PE_Check_ExtendedMessage+0xd4>
 800167a:	2905      	cmp	r1, #5
 800167c:	d02a      	beq.n	80016d4 <PE_Check_ExtendedMessage+0xf4>
 800167e:	2907      	cmp	r1, #7
 8001680:	d023      	beq.n	80016ca <PE_Check_ExtendedMessage+0xea>
 8001682:	290f      	cmp	r1, #15
 8001684:	d00b      	beq.n	800169e <PE_Check_ExtendedMessage+0xbe>
 8001686:	e094      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001688:	2319      	movs	r3, #25
 800168a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800168c:	1d02      	adds	r2, r0, #4
 800168e:	2108      	movs	r1, #8
 8001690:	7c20      	ldrb	r0, [r4, #16]
 8001692:	68a7      	ldr	r7, [r4, #8]
 8001694:	69bf      	ldr	r7, [r7, #24]
 8001696:	47b8      	blx	r7
 8001698:	7466      	strb	r6, [r4, #17]
 800169a:	2147      	movs	r1, #71	@ 0x47
 800169c:	e014      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 800169e:	2318      	movs	r3, #24
 80016a0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016a2:	1d02      	adds	r2, r0, #4
 80016a4:	2113      	movs	r1, #19
 80016a6:	7c20      	ldrb	r0, [r4, #16]
 80016a8:	68a7      	ldr	r7, [r4, #8]
 80016aa:	69bf      	ldr	r7, [r7, #24]
 80016ac:	47b8      	blx	r7
 80016ae:	7466      	strb	r6, [r4, #17]
 80016b0:	2162      	movs	r1, #98	@ 0x62
 80016b2:	e009      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 80016b4:	2307      	movs	r3, #7
 80016b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016b8:	1d02      	adds	r2, r0, #4
 80016ba:	2109      	movs	r1, #9
 80016bc:	7c20      	ldrb	r0, [r4, #16]
 80016be:	68a7      	ldr	r7, [r4, #8]
 80016c0:	69bf      	ldr	r7, [r7, #24]
 80016c2:	47b8      	blx	r7
 80016c4:	7466      	strb	r6, [r4, #17]
 80016c6:	214e      	movs	r1, #78	@ 0x4e
 80016c8:	e2c7      	b.n	8001c5a <.text_21>
 80016ca:	231a      	movs	r3, #26
 80016cc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016ce:	1d02      	adds	r2, r0, #4
 80016d0:	210d      	movs	r1, #13
 80016d2:	e003      	b.n	80016dc <PE_Check_ExtendedMessage+0xfc>
 80016d4:	2309      	movs	r3, #9
 80016d6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016d8:	1d02      	adds	r2, r0, #4
 80016da:	2111      	movs	r1, #17
 80016dc:	7c20      	ldrb	r0, [r4, #16]
 80016de:	68a7      	ldr	r7, [r4, #8]
 80016e0:	69bf      	ldr	r7, [r7, #24]
 80016e2:	47b8      	blx	r7
 80016e4:	e063      	b.n	80017ae <PE_Check_ExtendedMessage+0x1ce>
 80016e6:	1ec8      	subs	r0, r1, #3
 80016e8:	2808      	cmp	r0, #8
 80016ea:	d862      	bhi.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 80016ec:	a201      	add	r2, pc, #4	@ (adr r2, 80016f4 <PE_Check_ExtendedMessage+0x114>)
 80016ee:	5c12      	ldrb	r2, [r2, r0]
 80016f0:	4497      	add	pc, r2
 80016f2:	bf00      	nop
 80016f4:	46be280a 	.word	0x46be280a
 80016f8:	669884be 	.word	0x669884be
 80016fc:	006e      	.short	0x006e
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	8900      	ldrh	r0, [r0, #8]
 8001702:	0b00      	lsrs	r0, r0, #12
 8001704:	4228      	tst	r0, r5
 8001706:	d054      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001708:	2301      	movs	r3, #1
 800170a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800170c:	1d02      	adds	r2, r0, #4
 800170e:	2110      	movs	r1, #16
 8001710:	7c20      	ldrb	r0, [r4, #16]
 8001712:	68a5      	ldr	r5, [r4, #8]
 8001714:	69ad      	ldr	r5, [r5, #24]
 8001716:	47a8      	blx	r5
 8001718:	203a      	movs	r0, #58	@ 0x3a
 800171a:	e01c      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	8900      	ldrh	r0, [r0, #8]
 8001720:	0b00      	lsrs	r0, r0, #12
 8001722:	4228      	tst	r0, r5
 8001724:	d045      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001726:	2301      	movs	r3, #1
 8001728:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800172a:	1d02      	adds	r2, r0, #4
 800172c:	210e      	movs	r1, #14
 800172e:	7c20      	ldrb	r0, [r4, #16]
 8001730:	68a5      	ldr	r5, [r4, #8]
 8001732:	69ad      	ldr	r5, [r5, #24]
 8001734:	47a8      	blx	r5
 8001736:	203b      	movs	r0, #59	@ 0x3b
 8001738:	e00d      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	8900      	ldrh	r0, [r0, #8]
 800173e:	0980      	lsrs	r0, r0, #6
 8001740:	4228      	tst	r0, r5
 8001742:	d036      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001744:	2302      	movs	r3, #2
 8001746:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001748:	1d02      	adds	r2, r0, #4
 800174a:	210c      	movs	r1, #12
 800174c:	7c20      	ldrb	r0, [r4, #16]
 800174e:	68a5      	ldr	r5, [r4, #8]
 8001750:	69ad      	ldr	r5, [r5, #24]
 8001752:	47a8      	blx	r5
 8001754:	203c      	movs	r0, #60	@ 0x3c
 8001756:	7460      	strb	r0, [r4, #17]
 8001758:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	8900      	ldrh	r0, [r0, #8]
 800175e:	0a80      	lsrs	r0, r0, #10
 8001760:	e00d      	b.n	800177e <PE_Check_ExtendedMessage+0x19e>
 8001762:	68a0      	ldr	r0, [r4, #8]
 8001764:	6905      	ldr	r5, [r0, #16]
 8001766:	2d00      	cmp	r5, #0
 8001768:	d024      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800176a:	4816      	ldr	r0, [pc, #88]	@ (80017c4 <.text_8>)
 800176c:	5a23      	ldrh	r3, [r4, r0]
 800176e:	4816      	ldr	r0, [pc, #88]	@ (80017c8 <.text_9>)
 8001770:	1822      	adds	r2, r4, r0
 8001772:	7c20      	ldrb	r0, [r4, #16]
 8001774:	47a8      	blx	r5
 8001776:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	8900      	ldrh	r0, [r0, #8]
 800177c:	0a40      	lsrs	r0, r0, #9
 800177e:	4228      	tst	r0, r5
 8001780:	d017      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	6900      	ldr	r0, [r0, #16]
 8001786:	2800      	cmp	r0, #0
 8001788:	d109      	bne.n	800179e <PE_Check_ExtendedMessage+0x1be>
 800178a:	e012      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	8900      	ldrh	r0, [r0, #8]
 8001790:	0a40      	lsrs	r0, r0, #9
 8001792:	4228      	tst	r0, r5
 8001794:	d00e      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 8001796:	68a0      	ldr	r0, [r4, #8]
 8001798:	6900      	ldr	r0, [r0, #16]
 800179a:	2800      	cmp	r0, #0
 800179c:	d00a      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800179e:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <.text_8>)
 80017a0:	5a23      	ldrh	r3, [r4, r0]
 80017a2:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <.text_9>)
 80017a4:	1822      	adds	r2, r4, r0
 80017a6:	7c20      	ldrb	r0, [r4, #16]
 80017a8:	68a5      	ldr	r5, [r4, #8]
 80017aa:	692d      	ldr	r5, [r5, #16]
 80017ac:	47a8      	blx	r5
 80017ae:	7466      	strb	r6, [r4, #17]
 80017b0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80017b2:	7465      	strb	r5, [r4, #17]
 80017b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080017b8 <.text_5>:
 80017b8:	00000263 	.word	0x00000263

080017bc <.text_6>:
 80017bc:	00000265 	.word	0x00000265

080017c0 <.text_7>:
 80017c0:	0000025a 	.word	0x0000025a

080017c4 <.text_8>:
 80017c4:	0000048e 	.word	0x0000048e

080017c8 <.text_9>:
 80017c8:	00000281 	.word	0x00000281

080017cc <PE_Send_ExtendedMessage>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80017d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80017d4:	0004      	movs	r4, r0
 80017d6:	000d      	movs	r5, r1
 80017d8:	4668      	mov	r0, sp
 80017da:	7202      	strb	r2, [r0, #8]
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	04c1      	lsls	r1, r0, #19
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	d019      	beq.n	800181c <PE_Send_ExtendedMessage+0x50>
 80017e8:	9601      	str	r6, [sp, #4]
 80017ea:	9700      	str	r7, [sp, #0]
 80017ec:	9b03      	ldr	r3, [sp, #12]
 80017ee:	4668      	mov	r0, sp
 80017f0:	7a00      	ldrb	r0, [r0, #8]
 80017f2:	2280      	movs	r2, #128	@ 0x80
 80017f4:	4302      	orrs	r2, r0
 80017f6:	0029      	movs	r1, r5
 80017f8:	7c20      	ldrb	r0, [r4, #16]
 80017fa:	f003 ffd7 	bl	80057ac <USBPD_PRL_SendMessage>
 80017fe:	2803      	cmp	r0, #3
 8001800:	d0ed      	beq.n	80017de <PE_Send_ExtendedMessage+0x12>
 8001802:	0029      	movs	r1, r5
 8001804:	2810      	cmp	r0, #16
 8001806:	d007      	beq.n	8001818 <PE_Send_ExtendedMessage+0x4c>
 8001808:	aa0b      	add	r2, sp, #44	@ 0x2c
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	0003      	movs	r3, r0
 8001810:	2200      	movs	r2, #0
 8001812:	0020      	movs	r0, r4
 8001814:	f000 faca 	bl	8001dac <PE_CheckSendMessageStatus>
 8001818:	b005      	add	sp, #20
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2011      	movs	r0, #17
 800181e:	7460      	strb	r0, [r4, #17]
 8001820:	2010      	movs	r0, #16
 8001822:	e7f9      	b.n	8001818 <PE_Send_ExtendedMessage+0x4c>

08001824 <PE_SubStateMachine_ExtendedMessages>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	0004      	movs	r4, r0
 800182a:	2702      	movs	r7, #2
 800182c:	4889      	ldr	r0, [pc, #548]	@ (8001a54 <.text_12>)
 800182e:	1820      	adds	r0, r4, r0
 8001830:	9000      	str	r0, [sp, #0]
 8001832:	2039      	movs	r0, #57	@ 0x39
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	466a      	mov	r2, sp
 8001838:	7211      	strb	r1, [r2, #8]
 800183a:	4a87      	ldr	r2, [pc, #540]	@ (8001a58 <.text_13>)
 800183c:	2500      	movs	r5, #0
 800183e:	2603      	movs	r6, #3
 8001840:	7c63      	ldrb	r3, [r4, #17]
 8001842:	2b31      	cmp	r3, #49	@ 0x31
 8001844:	d010      	beq.n	8001868 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001846:	2b33      	cmp	r3, #51	@ 0x33
 8001848:	d075      	beq.n	8001936 <PE_SubStateMachine_ExtendedMessages+0x112>
 800184a:	2b34      	cmp	r3, #52	@ 0x34
 800184c:	d07c      	beq.n	8001948 <PE_SubStateMachine_ExtendedMessages+0x124>
 800184e:	2b35      	cmp	r3, #53	@ 0x35
 8001850:	d100      	bne.n	8001854 <PE_SubStateMachine_ExtendedMessages+0x30>
 8001852:	e0a8      	b.n	80019a6 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001854:	2b36      	cmp	r3, #54	@ 0x36
 8001856:	d100      	bne.n	800185a <PE_SubStateMachine_ExtendedMessages+0x36>
 8001858:	e0be      	b.n	80019d8 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800185a:	2b37      	cmp	r3, #55	@ 0x37
 800185c:	d100      	bne.n	8001860 <PE_SubStateMachine_ExtendedMessages+0x3c>
 800185e:	e0be      	b.n	80019de <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001860:	2b38      	cmp	r3, #56	@ 0x38
 8001862:	d100      	bne.n	8001866 <PE_SubStateMachine_ExtendedMessages+0x42>
 8001864:	e0ef      	b.n	8001a46 <PE_SubStateMachine_ExtendedMessages+0x222>
 8001866:	e0f2      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001868:	487c      	ldr	r0, [pc, #496]	@ (8001a5c <.text_14>)
 800186a:	1820      	adds	r0, r4, r0
 800186c:	9004      	str	r0, [sp, #16]
 800186e:	4669      	mov	r1, sp
 8001870:	730d      	strb	r5, [r1, #12]
 8001872:	497b      	ldr	r1, [pc, #492]	@ (8001a60 <.text_15>)
 8001874:	5265      	strh	r5, [r4, r1]
 8001876:	7c20      	ldrb	r0, [r4, #16]
 8001878:	f7ff fa64 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800187c:	2801      	cmp	r0, #1
 800187e:	d107      	bne.n	8001890 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001880:	4878      	ldr	r0, [pc, #480]	@ (8001a64 <.text_16>)
 8001882:	1820      	adds	r0, r4, r0
 8001884:	7005      	strb	r5, [r0, #0]
 8001886:	7045      	strb	r5, [r0, #1]
 8001888:	4877      	ldr	r0, [pc, #476]	@ (8001a68 <.text_17>)
 800188a:	1820      	adds	r0, r4, r0
 800188c:	9004      	str	r0, [sp, #16]
 800188e:	e028      	b.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001890:	4976      	ldr	r1, [pc, #472]	@ (8001a6c <.text_18>)
 8001892:	1861      	adds	r1, r4, r1
 8001894:	72cd      	strb	r5, [r1, #11]
 8001896:	4975      	ldr	r1, [pc, #468]	@ (8001a6c <.text_18>)
 8001898:	1861      	adds	r1, r4, r1
 800189a:	730d      	strb	r5, [r1, #12]
 800189c:	7c20      	ldrb	r0, [r4, #16]
 800189e:	f7ff fa51 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d106      	bne.n	80018b4 <PE_SubStateMachine_ExtendedMessages+0x90>
 80018a6:	4871      	ldr	r0, [pc, #452]	@ (8001a6c <.text_18>)
 80018a8:	1820      	adds	r0, r4, r0
 80018aa:	7b01      	ldrb	r1, [r0, #12]
 80018ac:	466a      	mov	r2, sp
 80018ae:	7a12      	ldrb	r2, [r2, #8]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	7302      	strb	r2, [r0, #12]
 80018b4:	486a      	ldr	r0, [pc, #424]	@ (8001a60 <.text_15>)
 80018b6:	1820      	adds	r0, r4, r0
 80018b8:	8841      	ldrh	r1, [r0, #2]
 80018ba:	291b      	cmp	r1, #27
 80018bc:	d30e      	bcc.n	80018dc <PE_SubStateMachine_ExtendedMessages+0xb8>
 80018be:	486a      	ldr	r0, [pc, #424]	@ (8001a68 <.text_17>)
 80018c0:	1820      	adds	r0, r4, r0
 80018c2:	5d40      	ldrb	r0, [r0, r5]
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	5548      	strb	r0, [r1, r5]
 80018c8:	1c6d      	adds	r5, r5, #1
 80018ca:	2d1a      	cmp	r5, #26
 80018cc:	d209      	bcs.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 80018ce:	e7f6      	b.n	80018be <PE_SubStateMachine_ExtendedMessages+0x9a>
 80018d0:	4965      	ldr	r1, [pc, #404]	@ (8001a68 <.text_17>)
 80018d2:	1861      	adds	r1, r4, r1
 80018d4:	5d49      	ldrb	r1, [r1, r5]
 80018d6:	9a00      	ldr	r2, [sp, #0]
 80018d8:	5551      	strb	r1, [r2, r5]
 80018da:	1c6d      	adds	r5, r5, #1
 80018dc:	8841      	ldrh	r1, [r0, #2]
 80018de:	428d      	cmp	r5, r1
 80018e0:	d3f6      	bcc.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0xac>
 80018e2:	2001      	movs	r0, #1
 80018e4:	6961      	ldr	r1, [r4, #20]
 80018e6:	0949      	lsrs	r1, r1, #5
 80018e8:	4001      	ands	r1, r0
 80018ea:	d00a      	beq.n	8001902 <PE_SubStateMachine_ExtendedMessages+0xde>
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	0889      	lsrs	r1, r1, #2
 80018f2:	4001      	ands	r1, r0
 80018f4:	d002      	beq.n	80018fc <PE_SubStateMachine_ExtendedMessages+0xd8>
 80018f6:	4669      	mov	r1, sp
 80018f8:	7308      	strb	r0, [r1, #12]
 80018fa:	e001      	b.n	8001900 <PE_SubStateMachine_ExtendedMessages+0xdc>
 80018fc:	4669      	mov	r1, sp
 80018fe:	730f      	strb	r7, [r1, #12]
 8001900:	2633      	movs	r6, #51	@ 0x33
 8001902:	4668      	mov	r0, sp
 8001904:	7b00      	ldrb	r0, [r0, #12]
 8001906:	9002      	str	r0, [sp, #8]
 8001908:	9601      	str	r6, [sp, #4]
 800190a:	4855      	ldr	r0, [pc, #340]	@ (8001a60 <.text_15>)
 800190c:	1820      	adds	r0, r4, r0
 800190e:	8840      	ldrh	r0, [r0, #2]
 8001910:	1d00      	adds	r0, r0, #4
 8001912:	b280      	uxth	r0, r0
 8001914:	9000      	str	r0, [sp, #0]
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	4854      	ldr	r0, [pc, #336]	@ (8001a6c <.text_18>)
 800191a:	1820      	adds	r0, r4, r0
 800191c:	78c2      	ldrb	r2, [r0, #3]
 800191e:	2033      	movs	r0, #51	@ 0x33
 8001920:	5c21      	ldrb	r1, [r4, r0]
 8001922:	0020      	movs	r0, r4
 8001924:	f7ff ff52 	bl	80017cc <PE_Send_ExtendedMessage>
 8001928:	2800      	cmp	r0, #0
 800192a:	d103      	bne.n	8001934 <PE_SubStateMachine_ExtendedMessages+0x110>
 800192c:	484f      	ldr	r0, [pc, #316]	@ (8001a6c <.text_18>)
 800192e:	1820      	adds	r0, r4, r0
 8001930:	7940      	ldrb	r0, [r0, #5]
 8001932:	7720      	strb	r0, [r4, #28]
 8001934:	e08b      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001936:	83e2      	strh	r2, [r4, #30]
 8001938:	271b      	movs	r7, #27
 800193a:	494c      	ldr	r1, [pc, #304]	@ (8001a6c <.text_18>)
 800193c:	1861      	adds	r1, r4, r1
 800193e:	78c9      	ldrb	r1, [r1, #3]
 8001940:	2904      	cmp	r1, #4
 8001942:	d151      	bne.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001944:	2074      	movs	r0, #116	@ 0x74
 8001946:	e04f      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001948:	4848      	ldr	r0, [pc, #288]	@ (8001a6c <.text_18>)
 800194a:	5a20      	ldrh	r0, [r4, r0]
 800194c:	0440      	lsls	r0, r0, #17
 800194e:	0f02      	lsrs	r2, r0, #28
 8001950:	211a      	movs	r1, #26
 8001952:	4351      	muls	r1, r2
 8001954:	4842      	ldr	r0, [pc, #264]	@ (8001a60 <.text_15>)
 8001956:	1820      	adds	r0, r4, r0
 8001958:	8843      	ldrh	r3, [r0, #2]
 800195a:	4299      	cmp	r1, r3
 800195c:	da01      	bge.n	8001962 <PE_SubStateMachine_ExtendedMessages+0x13e>
 800195e:	2a0a      	cmp	r2, #10
 8001960:	d301      	bcc.n	8001966 <PE_SubStateMachine_ExtendedMessages+0x142>
 8001962:	7466      	strb	r6, [r4, #17]
 8001964:	e01d      	b.n	80019a2 <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001966:	1a5a      	subs	r2, r3, r1
 8001968:	2a1a      	cmp	r2, #26
 800196a:	d202      	bcs.n	8001972 <PE_SubStateMachine_ExtendedMessages+0x14e>
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e000      	b.n	8001974 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001972:	231a      	movs	r3, #26
 8001974:	2200      	movs	r2, #0
 8001976:	e006      	b.n	8001986 <PE_SubStateMachine_ExtendedMessages+0x162>
 8001978:	4e3b      	ldr	r6, [pc, #236]	@ (8001a68 <.text_17>)
 800197a:	19a6      	adds	r6, r4, r6
 800197c:	188f      	adds	r7, r1, r2
 800197e:	5df6      	ldrb	r6, [r6, r7]
 8001980:	9f00      	ldr	r7, [sp, #0]
 8001982:	54be      	strb	r6, [r7, r2]
 8001984:	1c52      	adds	r2, r2, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f6      	bcc.n	8001978 <PE_SubStateMachine_ExtendedMessages+0x154>
 800198a:	4934      	ldr	r1, [pc, #208]	@ (8001a5c <.text_14>)
 800198c:	1863      	adds	r3, r4, r1
 800198e:	8842      	ldrh	r2, [r0, #2]
 8001990:	4836      	ldr	r0, [pc, #216]	@ (8001a6c <.text_18>)
 8001992:	5a20      	ldrh	r0, [r4, r0]
 8001994:	0440      	lsls	r0, r0, #17
 8001996:	0f01      	lsrs	r1, r0, #28
 8001998:	7c20      	ldrb	r0, [r4, #16]
 800199a:	f004 fba8 	bl	80060ee <USBPD_PRL_PrepareExtendedTxChunkSending>
 800199e:	2035      	movs	r0, #53	@ 0x35
 80019a0:	7460      	strb	r0, [r4, #17]
 80019a2:	2700      	movs	r7, #0
 80019a4:	e053      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019a6:	6960      	ldr	r0, [r4, #20]
 80019a8:	0681      	lsls	r1, r0, #26
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	d001      	beq.n	80019b2 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80019ae:	2036      	movs	r0, #54	@ 0x36
 80019b0:	e000      	b.n	80019b4 <PE_SubStateMachine_ExtendedMessages+0x190>
 80019b2:	2003      	movs	r0, #3
 80019b4:	492a      	ldr	r1, [pc, #168]	@ (8001a60 <.text_15>)
 80019b6:	1866      	adds	r6, r4, r1
 80019b8:	9502      	str	r5, [sp, #8]
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	8870      	ldrh	r0, [r6, #2]
 80019be:	9000      	str	r0, [sp, #0]
 80019c0:	4826      	ldr	r0, [pc, #152]	@ (8001a5c <.text_14>)
 80019c2:	1823      	adds	r3, r4, r0
 80019c4:	3809      	subs	r0, #9
 80019c6:	1820      	adds	r0, r4, r0
 80019c8:	78c2      	ldrb	r2, [r0, #3]
 80019ca:	2030      	movs	r0, #48	@ 0x30
 80019cc:	5c21      	ldrb	r1, [r4, r0]
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7ff fefc 	bl	80017cc <PE_Send_ExtendedMessage>
 80019d4:	8035      	strh	r5, [r6, #0]
 80019d6:	e03a      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019d8:	83e2      	strh	r2, [r4, #30]
 80019da:	271b      	movs	r7, #27
 80019dc:	e004      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019de:	8be0      	ldrh	r0, [r4, #30]
 80019e0:	020b      	lsls	r3, r1, #8
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d102      	bne.n	80019ec <PE_SubStateMachine_ExtendedMessages+0x1c8>
 80019e6:	200f      	movs	r0, #15
 80019e8:	7460      	strb	r0, [r4, #17]
 80019ea:	e030      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019ec:	83e2      	strh	r2, [r4, #30]
 80019ee:	271b      	movs	r7, #27
 80019f0:	481a      	ldr	r0, [pc, #104]	@ (8001a5c <.text_14>)
 80019f2:	1825      	adds	r5, r4, r0
 80019f4:	0029      	movs	r1, r5
 80019f6:	7c20      	ldrb	r0, [r4, #16]
 80019f8:	f004 fba1 	bl	800613e <USBPD_PRL_PrepareChunkRequest>
 80019fc:	6860      	ldr	r0, [r4, #4]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	04c1      	lsls	r1, r0, #19
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	d012      	beq.n	8001a2c <PE_SubStateMachine_ExtendedMessages+0x208>
 8001a06:	2000      	movs	r0, #0
 8001a08:	9001      	str	r0, [sp, #4]
 8001a0a:	2006      	movs	r0, #6
 8001a0c:	9000      	str	r0, [sp, #0]
 8001a0e:	002b      	movs	r3, r5
 8001a10:	4816      	ldr	r0, [pc, #88]	@ (8001a6c <.text_18>)
 8001a12:	1820      	adds	r0, r4, r0
 8001a14:	7880      	ldrb	r0, [r0, #2]
 8001a16:	4669      	mov	r1, sp
 8001a18:	7a0a      	ldrb	r2, [r1, #8]
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	2030      	movs	r0, #48	@ 0x30
 8001a1e:	5c21      	ldrb	r1, [r4, r0]
 8001a20:	7c20      	ldrb	r0, [r4, #16]
 8001a22:	f003 fec3 	bl	80057ac <USBPD_PRL_SendMessage>
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d0e8      	beq.n	80019fc <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001a2a:	e002      	b.n	8001a32 <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	7460      	strb	r0, [r4, #17]
 8001a30:	2010      	movs	r0, #16
 8001a32:	2139      	movs	r1, #57	@ 0x39
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	0003      	movs	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2030      	movs	r0, #48	@ 0x30
 8001a3c:	5c21      	ldrb	r1, [r4, r0]
 8001a3e:	0020      	movs	r0, r4
 8001a40:	f000 f9b4 	bl	8001dac <PE_CheckSendMessageStatus>
 8001a44:	e003      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a46:	7466      	strb	r6, [r4, #17]
 8001a48:	2700      	movs	r7, #0
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <.text_15>)
 8001a4c:	5225      	strh	r5, [r4, r0]
 8001a4e:	0038      	movs	r0, r7
 8001a50:	b005      	add	sp, #20
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a54 <.text_12>:
 8001a54:	00000267 	.word	0x00000267

08001a58 <.text_13>:
 8001a58:	0000801b 	.word	0x0000801b

08001a5c <.text_14>:
 8001a5c:	00000263 	.word	0x00000263

08001a60 <.text_15>:
 8001a60:	0000048e 	.word	0x0000048e

08001a64 <.text_16>:
 8001a64:	00000387 	.word	0x00000387

08001a68 <.text_17>:
 8001a68:	00000385 	.word	0x00000385

08001a6c <.text_18>:
 8001a6c:	0000025a 	.word	0x0000025a

08001a70 <PE_ManageRXEvent>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	2130      	movs	r1, #48	@ 0x30
 8001a74:	5c41      	ldrb	r1, [r0, r1]
 8001a76:	2231      	movs	r2, #49	@ 0x31
 8001a78:	5481      	strb	r1, [r0, r2]
 8001a7a:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 8001a7c:	0bca      	lsrs	r2, r1, #15
 8001a7e:	d002      	beq.n	8001a86 <PE_ManageRXEvent+0x16>
 8001a80:	f7ff fdae 	bl	80015e0 <PE_Check_ExtendedMessage>
 8001a84:	bd01      	pop	{r0, pc}
 8001a86:	22f0      	movs	r2, #240	@ 0xf0
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	d102      	bne.n	8001a94 <PE_ManageRXEvent+0x24>
 8001a8e:	f000 f805 	bl	8001a9c <PE_Check_ControlMessage>
 8001a92:	bd01      	pop	{r0, pc}
 8001a94:	f000 f8e5 	bl	8001c62 <PE_Check_DataMessage>
 8001a98:	bd01      	pop	{r0, pc}
	...

08001a9c <PE_Check_ControlMessage>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	272a      	movs	r7, #42	@ 0x2a
 8001aa2:	2603      	movs	r6, #3
 8001aa4:	2501      	movs	r5, #1
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	2134      	movs	r1, #52	@ 0x34
 8001aaa:	5c61      	ldrb	r1, [r4, r1]
 8001aac:	06c9      	lsls	r1, r1, #27
 8001aae:	0ec9      	lsrs	r1, r1, #27
 8001ab0:	1e49      	subs	r1, r1, #1
 8001ab2:	2917      	cmp	r1, #23
 8001ab4:	d900      	bls.n	8001ab8 <PE_Check_ControlMessage+0x1c>
 8001ab6:	e0c7      	b.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac0 <PE_Check_ControlMessage+0x24>)
 8001aba:	5c52      	ldrb	r2, [r2, r1]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	4497      	add	pc, r2
 8001ac0:	c0c00bcb 	.word	0xc0c00bcb
 8001ac4:	5b22c020 	.word	0x5b22c020
 8001ac8:	c0413449 	.word	0xc0413449
 8001acc:	bec3c319 	.word	0xbec3c319
 8001ad0:	9fb7936f 	.word	0x9fb7936f
 8001ad4:	bac383b0 	.word	0xbac383b0
 8001ad8:	6860      	ldr	r0, [r4, #4]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	0880      	lsrs	r0, r0, #2
 8001ade:	4005      	ands	r5, r0
 8001ae0:	d000      	beq.n	8001ae4 <PE_Check_ControlMessage+0x48>
 8001ae2:	e0b9      	b.n	8001c58 <PE_Check_ControlMessage+0x1bc>
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	7720      	strb	r0, [r4, #28]
 8001ae8:	212b      	movs	r1, #43	@ 0x2b
 8001aea:	7c20      	ldrb	r0, [r4, #16]
 8001aec:	f7fe fcc8 	bl	8000480 <USBPD_PE_Notification>
 8001af0:	2098      	movs	r0, #152	@ 0x98
 8001af2:	e0a7      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001af4:	7726      	strb	r6, [r4, #28]
 8001af6:	2132      	movs	r1, #50	@ 0x32
 8001af8:	7c20      	ldrb	r0, [r4, #16]
 8001afa:	f7fe fcc1 	bl	8000480 <USBPD_PE_Notification>
 8001afe:	2010      	movs	r0, #16
 8001b00:	e0a0      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b02:	2133      	movs	r1, #51	@ 0x33
 8001b04:	e09c      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001b06:	2006      	movs	r0, #6
 8001b08:	7720      	strb	r0, [r4, #28]
 8001b0a:	6860      	ldr	r0, [r4, #4]
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	0881      	lsrs	r1, r0, #2
 8001b10:	4029      	ands	r1, r5
 8001b12:	d104      	bne.n	8001b1e <PE_Check_ControlMessage+0x82>
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	08c9      	lsrs	r1, r1, #3
 8001b1a:	4029      	ands	r1, r5
 8001b1c:	d039      	beq.n	8001b92 <PE_Check_ControlMessage+0xf6>
 8001b1e:	210c      	movs	r1, #12
 8001b20:	7c20      	ldrb	r0, [r4, #16]
 8001b22:	f7fe fcad 	bl	8000480 <USBPD_PE_Notification>
 8001b26:	204c      	movs	r0, #76	@ 0x4c
 8001b28:	e08c      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	6840      	ldr	r0, [r0, #4]
 8001b2e:	08c0      	lsrs	r0, r0, #3
 8001b30:	4028      	ands	r0, r5
 8001b32:	d00a      	beq.n	8001b4a <PE_Check_ControlMessage+0xae>
 8001b34:	2008      	movs	r0, #8
 8001b36:	7720      	strb	r0, [r4, #28]
 8001b38:	213c      	movs	r1, #60	@ 0x3c
 8001b3a:	7c20      	ldrb	r0, [r4, #16]
 8001b3c:	f7fe fca0 	bl	8000480 <USBPD_PE_Notification>
 8001b40:	2022      	movs	r0, #34	@ 0x22
 8001b42:	e07f      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b44:	68a0      	ldr	r0, [r4, #8]
 8001b46:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d07d      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b4c:	2011      	movs	r0, #17
 8001b4e:	7720      	strb	r0, [r4, #28]
 8001b50:	209d      	movs	r0, #157	@ 0x9d
 8001b52:	e077      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b54:	2123      	movs	r1, #35	@ 0x23
 8001b56:	7c20      	ldrb	r0, [r4, #16]
 8001b58:	f7fe fc92 	bl	8000480 <USBPD_PE_Notification>
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	05c0      	lsls	r0, r0, #23
 8001b60:	0f40      	lsrs	r0, r0, #29
 8001b62:	d001      	beq.n	8001b68 <PE_Check_ControlMessage+0xcc>
 8001b64:	200f      	movs	r0, #15
 8001b66:	e06d      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b68:	68a0      	ldr	r0, [r4, #8]
 8001b6a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d06b      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b70:	2010      	movs	r0, #16
 8001b72:	7720      	strb	r0, [r4, #28]
 8001b74:	2093      	movs	r0, #147	@ 0x93
 8001b76:	e065      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	0541      	lsls	r1, r0, #21
 8001b7e:	0f49      	lsrs	r1, r1, #29
 8001b80:	2903      	cmp	r1, #3
 8001b82:	d163      	bne.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b84:	0881      	lsrs	r1, r0, #2
 8001b86:	4029      	ands	r1, r5
 8001b88:	d004      	beq.n	8001b94 <PE_Check_ControlMessage+0xf8>
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	6849      	ldr	r1, [r1, #4]
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	4029      	ands	r1, r5
 8001b92:	d05b      	beq.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b94:	2007      	movs	r0, #7
 8001b96:	7720      	strb	r0, [r4, #28]
 8001b98:	201d      	movs	r0, #29
 8001b9a:	7460      	strb	r0, [r4, #17]
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	e04f      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	8901      	ldrh	r1, [r0, #8]
 8001ba4:	08c9      	lsrs	r1, r1, #3
 8001ba6:	4229      	tst	r1, r5
 8001ba8:	d053      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001baa:	6861      	ldr	r1, [r4, #4]
 8001bac:	6809      	ldr	r1, [r1, #0]
 8001bae:	0889      	lsrs	r1, r1, #2
 8001bb0:	4029      	ands	r1, r5
 8001bb2:	d103      	bne.n	8001bbc <PE_Check_ControlMessage+0x120>
 8001bb4:	6840      	ldr	r0, [r0, #4]
 8001bb6:	08c0      	lsrs	r0, r0, #3
 8001bb8:	4028      	ands	r0, r5
 8001bba:	d04a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	7720      	strb	r0, [r4, #28]
 8001bc0:	2063      	movs	r0, #99	@ 0x63
 8001bc2:	7460      	strb	r0, [r4, #17]
 8001bc4:	2146      	movs	r1, #70	@ 0x46
 8001bc6:	e03b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001bc8:	6860      	ldr	r0, [r4, #4]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	0880      	lsrs	r0, r0, #2
 8001bce:	4028      	ands	r0, r5
 8001bd0:	d004      	beq.n	8001bdc <PE_Check_ControlMessage+0x140>
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4028      	ands	r0, r5
 8001bda:	d03a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bdc:	205f      	movs	r0, #95	@ 0x5f
 8001bde:	7720      	strb	r0, [r4, #28]
 8001be0:	2064      	movs	r0, #100	@ 0x64
 8001be2:	7460      	strb	r0, [r4, #17]
 8001be4:	2160      	movs	r1, #96	@ 0x60
 8001be6:	e02b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	8909      	ldrh	r1, [r1, #8]
 8001bec:	0949      	lsrs	r1, r1, #5
 8001bee:	4229      	tst	r1, r5
 8001bf0:	d02f      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bf2:	7720      	strb	r0, [r4, #28]
 8001bf4:	214d      	movs	r1, #77	@ 0x4d
 8001bf6:	7c20      	ldrb	r0, [r4, #16]
 8001bf8:	f7fe fc42 	bl	8000480 <USBPD_PE_Notification>
 8001bfc:	2030      	movs	r0, #48	@ 0x30
 8001bfe:	e021      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c00:	6821      	ldr	r1, [r4, #0]
 8001c02:	8909      	ldrh	r1, [r1, #8]
 8001c04:	0889      	lsrs	r1, r1, #2
 8001c06:	4229      	tst	r1, r5
 8001c08:	d023      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c0a:	7720      	strb	r0, [r4, #28]
 8001c0c:	2149      	movs	r1, #73	@ 0x49
 8001c0e:	7c20      	ldrb	r0, [r4, #16]
 8001c10:	f7fe fc36 	bl	8000480 <USBPD_PE_Notification>
 8001c14:	6860      	ldr	r0, [r4, #4]
 8001c16:	6800      	ldr	r0, [r0, #0]
 8001c18:	0880      	lsrs	r0, r0, #2
 8001c1a:	4005      	ands	r5, r0
 8001c1c:	d011      	beq.n	8001c42 <PE_Check_ControlMessage+0x1a6>
 8001c1e:	202d      	movs	r0, #45	@ 0x2d
 8001c20:	e010      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	8900      	ldrh	r0, [r0, #8]
 8001c26:	09c0      	lsrs	r0, r0, #7
 8001c28:	4228      	tst	r0, r5
 8001c2a:	d012      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c2c:	202f      	movs	r0, #47	@ 0x2f
 8001c2e:	e009      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c30:	2009      	movs	r0, #9
 8001c32:	7720      	strb	r0, [r4, #28]
 8001c34:	e00d      	b.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c36:	200f      	movs	r0, #15
 8001c38:	7720      	strb	r0, [r4, #28]
 8001c3a:	204b      	movs	r0, #75	@ 0x4b
 8001c3c:	e002      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c3e:	2159      	movs	r1, #89	@ 0x59
 8001c40:	e00b      	b.n	8001c5a <.text_21>
 8001c42:	2011      	movs	r0, #17
 8001c44:	7460      	strb	r0, [r4, #17]
 8001c46:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c48:	6860      	ldr	r0, [r4, #4]
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	4006      	ands	r6, r0
 8001c4e:	2e02      	cmp	r6, #2
 8001c50:	d101      	bne.n	8001c56 <PE_Check_ControlMessage+0x1ba>
 8001c52:	7465      	strb	r5, [r4, #17]
 8001c54:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c56:	7467      	strb	r7, [r4, #17]
 8001c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c5a <.text_21>:
 8001c5a:	7c20      	ldrb	r0, [r4, #16]
 8001c5c:	f7fe fc10 	bl	8000480 <USBPD_PE_Notification>
 8001c60:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c62 <PE_Check_DataMessage>:
 8001c62:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001c64:	0004      	movs	r4, r0
 8001c66:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001c68:	2501      	movs	r5, #1
 8001c6a:	2603      	movs	r6, #3
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	06c1      	lsls	r1, r0, #27
 8001c70:	0ec9      	lsrs	r1, r1, #27
 8001c72:	2901      	cmp	r1, #1
 8001c74:	d029      	beq.n	8001cca <PE_Check_DataMessage+0x68>
 8001c76:	2902      	cmp	r1, #2
 8001c78:	d00b      	beq.n	8001c92 <PE_Check_DataMessage+0x30>
 8001c7a:	2903      	cmp	r1, #3
 8001c7c:	d03d      	beq.n	8001cfa <PE_Check_DataMessage+0x98>
 8001c7e:	2906      	cmp	r1, #6
 8001c80:	d079      	beq.n	8001d76 <PE_Check_DataMessage+0x114>
 8001c82:	2907      	cmp	r1, #7
 8001c84:	d100      	bne.n	8001c88 <PE_Check_DataMessage+0x26>
 8001c86:	e085      	b.n	8001d94 <PE_Check_DataMessage+0x132>
 8001c88:	290a      	cmp	r1, #10
 8001c8a:	d078      	beq.n	8001d7e <PE_Check_DataMessage+0x11c>
 8001c8c:	290f      	cmp	r1, #15
 8001c8e:	d06e      	beq.n	8001d6e <PE_Check_DataMessage+0x10c>
 8001c90:	e089      	b.n	8001da6 <PE_Check_DataMessage+0x144>
 8001c92:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001c94:	7881      	ldrb	r1, [r0, #2]
 8001c96:	78c2      	ldrb	r2, [r0, #3]
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	1889      	adds	r1, r1, r2
 8001c9c:	7902      	ldrb	r2, [r0, #4]
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	1889      	adds	r1, r1, r2
 8001ca2:	7940      	ldrb	r0, [r0, #5]
 8001ca4:	0600      	lsls	r0, r0, #24
 8001ca6:	1808      	adds	r0, r1, r0
 8001ca8:	9000      	str	r0, [sp, #0]
 8001caa:	6860      	ldr	r0, [r4, #4]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	0880      	lsrs	r0, r0, #2
 8001cb0:	4028      	ands	r0, r5
 8001cb2:	d07a      	beq.n	8001daa <PE_Check_DataMessage+0x148>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	466a      	mov	r2, sp
 8001cb8:	2106      	movs	r1, #6
 8001cba:	7c20      	ldrb	r0, [r4, #16]
 8001cbc:	68a6      	ldr	r6, [r4, #8]
 8001cbe:	69b6      	ldr	r6, [r6, #24]
 8001cc0:	47b0      	blx	r6
 8001cc2:	7725      	strb	r5, [r4, #28]
 8001cc4:	84a7      	strh	r7, [r4, #36]	@ 0x24
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	e06e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cca:	6861      	ldr	r1, [r4, #4]
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	0889      	lsrs	r1, r1, #2
 8001cd0:	400d      	ands	r5, r1
 8001cd2:	d16a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001cd4:	0980      	lsrs	r0, r0, #6
 8001cd6:	4006      	ands	r6, r0
 8001cd8:	0031      	movs	r1, r6
 8001cda:	7c20      	ldrb	r0, [r4, #16]
 8001cdc:	f7fe ff8a 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8001ce0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001ce2:	0440      	lsls	r0, r0, #17
 8001ce4:	0f40      	lsrs	r0, r0, #29
 8001ce6:	0083      	lsls	r3, r0, #2
 8001ce8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001cea:	1c82      	adds	r2, r0, #2
 8001cec:	2104      	movs	r1, #4
 8001cee:	7c20      	ldrb	r0, [r4, #16]
 8001cf0:	68a5      	ldr	r5, [r4, #8]
 8001cf2:	69ad      	ldr	r5, [r5, #24]
 8001cf4:	47a8      	blx	r5
 8001cf6:	2044      	movs	r0, #68	@ 0x44
 8001cf8:	e056      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cfa:	9701      	str	r7, [sp, #4]
 8001cfc:	9700      	str	r7, [sp, #0]
 8001cfe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001d00:	7881      	ldrb	r1, [r0, #2]
 8001d02:	78c2      	ldrb	r2, [r0, #3]
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	1889      	adds	r1, r1, r2
 8001d08:	7902      	ldrb	r2, [r0, #4]
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	1889      	adds	r1, r1, r2
 8001d0e:	7940      	ldrb	r0, [r0, #5]
 8001d10:	0600      	lsls	r0, r0, #24
 8001d12:	180d      	adds	r5, r1, r0
 8001d14:	466b      	mov	r3, sp
 8001d16:	aa01      	add	r2, sp, #4
 8001d18:	2103      	movs	r1, #3
 8001d1a:	7c20      	ldrb	r0, [r4, #16]
 8001d1c:	68a7      	ldr	r7, [r4, #8]
 8001d1e:	697f      	ldr	r7, [r7, #20]
 8001d20:	47b8      	blx	r7
 8001d22:	2104      	movs	r1, #4
 8001d24:	9800      	ldr	r0, [sp, #0]
 8001d26:	f7ff fb91 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d11d      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d2e:	6860      	ldr	r0, [r4, #4]
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	0540      	lsls	r0, r0, #21
 8001d34:	0f40      	lsrs	r0, r0, #29
 8001d36:	2803      	cmp	r0, #3
 8001d38:	d117      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d3a:	9801      	ldr	r0, [sp, #4]
 8001d3c:	4938      	ldr	r1, [pc, #224]	@ (8001e20 <.text_24>)
 8001d3e:	4288      	cmp	r0, r1
 8001d40:	d113      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d42:	0f28      	lsrs	r0, r5, #28
 8001d44:	2805      	cmp	r0, #5
 8001d46:	d00e      	beq.n	8001d66 <PE_Check_DataMessage+0x104>
 8001d48:	2808      	cmp	r0, #8
 8001d4a:	d00a      	beq.n	8001d62 <PE_Check_DataMessage+0x100>
 8001d4c:	2809      	cmp	r0, #9
 8001d4e:	d003      	beq.n	8001d58 <PE_Check_DataMessage+0xf6>
 8001d50:	280a      	cmp	r0, #10
 8001d52:	d12a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001d54:	2166      	movs	r1, #102	@ 0x66
 8001d56:	e000      	b.n	8001d5a <PE_Check_DataMessage+0xf8>
 8001d58:	2165      	movs	r1, #101	@ 0x65
 8001d5a:	7c20      	ldrb	r0, [r4, #16]
 8001d5c:	f7fe fb90 	bl	8000480 <USBPD_PE_Notification>
 8001d60:	e003      	b.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d62:	2029      	movs	r0, #41	@ 0x29
 8001d64:	e020      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d66:	2027      	movs	r0, #39	@ 0x27
 8001d68:	e01e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d6a:	7466      	strb	r6, [r4, #17]
 8001d6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f003 fabe 	bl	80052f0 <PE_Check_DataMessageVDM>
 8001d74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	8900      	ldrh	r0, [r0, #8]
 8001d7a:	0900      	lsrs	r0, r0, #4
 8001d7c:	4228      	tst	r0, r5
 8001d7e:	d010      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d80:	2304      	movs	r3, #4
 8001d82:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001d84:	1c82      	adds	r2, r0, #2
 8001d86:	210b      	movs	r1, #11
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	68a5      	ldr	r5, [r4, #8]
 8001d8c:	69ad      	ldr	r5, [r5, #24]
 8001d8e:	47a8      	blx	r5
 8001d90:	202c      	movs	r0, #44	@ 0x2c
 8001d92:	e009      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	8900      	ldrh	r0, [r0, #8]
 8001d98:	0a00      	lsrs	r0, r0, #8
 8001d9a:	4228      	tst	r0, r5
 8001d9c:	d001      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d9e:	203d      	movs	r0, #61	@ 0x3d
 8001da0:	e002      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001da2:	7465      	strb	r5, [r4, #17]
 8001da4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001da6:	2011      	movs	r0, #17
 8001da8:	7460      	strb	r0, [r4, #17]
 8001daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001dac <PE_CheckSendMessageStatus>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	000c      	movs	r4, r1
 8001db0:	2110      	movs	r1, #16
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d006      	beq.n	8001dc4 <PE_CheckSendMessageStatus+0x18>
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d00e      	beq.n	8001dd8 <PE_CheckSendMessageStatus+0x2c>
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d011      	beq.n	8001de2 <PE_CheckSendMessageStatus+0x36>
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d008      	beq.n	8001dd4 <PE_CheckSendMessageStatus+0x28>
 8001dc2:	e02a      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dc4:	9902      	ldr	r1, [sp, #8]
 8001dc6:	7441      	strb	r1, [r0, #17]
 8001dc8:	6941      	ldr	r1, [r0, #20]
 8001dca:	4a16      	ldr	r2, [pc, #88]	@ (8001e24 <.text_25>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	6142      	str	r2, [r0, #20]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	e022      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	e020      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd8:	6942      	ldr	r2, [r0, #20]
 8001dda:	024b      	lsls	r3, r1, #9
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	e01b      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d005      	beq.n	8001df2 <PE_CheckSendMessageStatus+0x46>
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d101      	bne.n	8001dee <PE_CheckSendMessageStatus+0x42>
 8001dea:	2299      	movs	r2, #153	@ 0x99
 8001dec:	e014      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001dee:	2107      	movs	r1, #7
 8001df0:	e013      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001df2:	6844      	ldr	r4, [r0, #4]
 8001df4:	6824      	ldr	r4, [r4, #0]
 8001df6:	0a24      	lsrs	r4, r4, #8
 8001df8:	4023      	ands	r3, r4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <PE_CheckSendMessageStatus+0x5a>
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d109      	bne.n	8001e16 <PE_CheckSendMessageStatus+0x6a>
 8001e02:	220f      	movs	r2, #15
 8001e04:	e008      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d1fb      	bne.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e0a:	6882      	ldr	r2, [r0, #8]
 8001e0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d0f7      	beq.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e12:	2292      	movs	r2, #146	@ 0x92
 8001e14:	e000      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e16:	2211      	movs	r2, #17
 8001e18:	7442      	strb	r2, [r0, #17]
 8001e1a:	0008      	movs	r0, r1
 8001e1c:	bd10      	pop	{r4, pc}
	...

08001e20 <.text_24>:
 8001e20:	00001388 	.word	0x00001388

08001e24 <.text_25>:
 8001e24:	ffffbfff 	.word	0xffffbfff

08001e28 <USBPD_PE_StateMachine_SNK>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	4828      	ldr	r0, [pc, #160]	@ (8001ed0 <USBPD_PE_StateMachine_SNK+0xa8>)
 8001e30:	00a1      	lsls	r1, r4, #2
 8001e32:	5845      	ldr	r5, [r0, r1]
 8001e34:	7c68      	ldrb	r0, [r5, #17]
 8001e36:	2848      	cmp	r0, #72	@ 0x48
 8001e38:	d133      	bne.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	f7fe fe72 	bl	8000b24 <PE_Reset_ZI>
 8001e40:	0028      	movs	r0, r5
 8001e42:	f7fe fea5 	bl	8000b90 <PE_Reset_Counter>
 8001e46:	6828      	ldr	r0, [r5, #0]
 8001e48:	7900      	ldrb	r0, [r0, #4]
 8001e4a:	0783      	lsls	r3, r0, #30
 8001e4c:	0f9b      	lsrs	r3, r3, #30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	7c28      	ldrb	r0, [r5, #16]
 8001e54:	f003 fc35 	bl	80056c2 <USBPD_PRL_SetHeader>
 8001e58:	6868      	ldr	r0, [r5, #4]
 8001e5a:	6801      	ldr	r1, [r0, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4391      	bics	r1, r2
 8001e60:	6001      	str	r1, [r0, #0]
 8001e62:	6868      	ldr	r0, [r5, #4]
 8001e64:	6801      	ldr	r1, [r0, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	4391      	bics	r1, r2
 8001e6a:	682a      	ldr	r2, [r5, #0]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	0792      	lsls	r2, r2, #30
 8001e70:	0f92      	lsrs	r2, r2, #30
 8001e72:	430a      	orrs	r2, r1
 8001e74:	6002      	str	r2, [r0, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	7c28      	ldrb	r0, [r5, #16]
 8001e7a:	f003 fc93 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8001e7e:	7c28      	ldrb	r0, [r5, #16]
 8001e80:	f003 fefc 	bl	8005c7c <USBPD_PRL_Reset>
 8001e84:	203e      	movs	r0, #62	@ 0x3e
 8001e86:	7468      	strb	r0, [r5, #17]
 8001e88:	7ca9      	ldrb	r1, [r5, #18]
 8001e8a:	293e      	cmp	r1, #62	@ 0x3e
 8001e8c:	d009      	beq.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e8e:	74a8      	strb	r0, [r5, #18]
 8001e90:	2000      	movs	r0, #0
 8001e92:	9000      	str	r0, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	223e      	movs	r2, #62	@ 0x3e
 8001e98:	7c29      	ldrb	r1, [r5, #16]
 8001e9a:	2004      	movs	r0, #4
 8001e9c:	4eb1      	ldr	r6, [pc, #708]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8001e9e:	6836      	ldr	r6, [r6, #0]
 8001ea0:	47b0      	blx	r6
 8001ea2:	6968      	ldr	r0, [r5, #20]
 8001ea4:	0341      	lsls	r1, r0, #13
 8001ea6:	0fc9      	lsrs	r1, r1, #31
 8001ea8:	d006      	beq.n	8001eb8 <USBPD_PE_StateMachine_SNK+0x90>
 8001eaa:	49af      	ldr	r1, [pc, #700]	@ (8002168 <__iar_annotation$$branch+0x8>)
 8001eac:	4001      	ands	r1, r0
 8001eae:	6169      	str	r1, [r5, #20]
 8001eb0:	2164      	movs	r1, #100	@ 0x64
 8001eb2:	7c28      	ldrb	r0, [r5, #16]
 8001eb4:	f7fe fae4 	bl	8000480 <USBPD_PE_Notification>
 8001eb8:	0028      	movs	r0, r5
 8001eba:	f7fe fd15 	bl	80008e8 <PE_Get_RxEvent>
 8001ebe:	4669      	mov	r1, sp
 8001ec0:	7308      	strb	r0, [r1, #12]
 8001ec2:	4668      	mov	r0, sp
 8001ec4:	7b00      	ldrb	r0, [r0, #12]
 8001ec6:	2803      	cmp	r0, #3
 8001ec8:	d104      	bne.n	8001ed4 <USBPD_PE_StateMachine_SNK+0xac>
 8001eca:	2001      	movs	r0, #1
 8001ecc:	b00d      	add	sp, #52	@ 0x34
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	2000023c 	.word	0x2000023c
 8001ed4:	4668      	mov	r0, sp
 8001ed6:	7344      	strb	r4, [r0, #13]
 8001ed8:	2402      	movs	r4, #2
 8001eda:	6868      	ldr	r0, [r5, #4]
 8001edc:	6800      	ldr	r0, [r0, #0]
 8001ede:	04c1      	lsls	r1, r0, #19
 8001ee0:	0fc9      	lsrs	r1, r1, #31
 8001ee2:	d100      	bne.n	8001ee6 <USBPD_PE_StateMachine_SNK+0xbe>
 8001ee4:	e148      	b.n	8002178 <__iar_annotation$$branch+0x18>
 8001ee6:	6968      	ldr	r0, [r5, #20]
 8001ee8:	0381      	lsls	r1, r0, #14
 8001eea:	0fc9      	lsrs	r1, r1, #31
 8001eec:	d014      	beq.n	8001f18 <USBPD_PE_StateMachine_SNK+0xf0>
 8001eee:	21a7      	movs	r1, #167	@ 0xa7
 8001ef0:	7469      	strb	r1, [r5, #17]
 8001ef2:	4a9e      	ldr	r2, [pc, #632]	@ (800216c <__iar_annotation$$branch+0xc>)
 8001ef4:	4002      	ands	r2, r0
 8001ef6:	616a      	str	r2, [r5, #20]
 8001ef8:	2000      	movs	r0, #0
 8001efa:	2232      	movs	r2, #50	@ 0x32
 8001efc:	54a8      	strb	r0, [r5, r2]
 8001efe:	7ca8      	ldrb	r0, [r5, #18]
 8001f00:	28a7      	cmp	r0, #167	@ 0xa7
 8001f02:	d02b      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f04:	74a9      	strb	r1, [r5, #18]
 8001f06:	2000      	movs	r0, #0
 8001f08:	9000      	str	r0, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	22a7      	movs	r2, #167	@ 0xa7
 8001f0e:	7c29      	ldrb	r1, [r5, #16]
 8001f10:	2004      	movs	r0, #4
 8001f12:	4e94      	ldr	r6, [pc, #592]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	47b0      	blx	r6
 8001f18:	2032      	movs	r0, #50	@ 0x32
 8001f1a:	5c28      	ldrb	r0, [r5, r0]
 8001f1c:	280f      	cmp	r0, #15
 8001f1e:	d001      	beq.n	8001f24 <USBPD_PE_StateMachine_SNK+0xfc>
 8001f20:	2814      	cmp	r0, #20
 8001f22:	d11b      	bne.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f24:	4668      	mov	r0, sp
 8001f26:	7b00      	ldrb	r0, [r0, #12]
 8001f28:	2814      	cmp	r0, #20
 8001f2a:	d005      	beq.n	8001f38 <USBPD_PE_StateMachine_SNK+0x110>
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	4669      	mov	r1, sp
 8001f30:	7308      	strb	r0, [r1, #12]
 8001f32:	0028      	movs	r0, r5
 8001f34:	f7fe fd0f 	bl	8000956 <PE_Clear_RxEvent>
 8001f38:	2032      	movs	r0, #50	@ 0x32
 8001f3a:	5c2a      	ldrb	r2, [r5, r0]
 8001f3c:	746a      	strb	r2, [r5, #17]
 8001f3e:	2000      	movs	r0, #0
 8001f40:	2132      	movs	r1, #50	@ 0x32
 8001f42:	5468      	strb	r0, [r5, r1]
 8001f44:	7ca8      	ldrb	r0, [r5, #18]
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d008      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f4a:	74aa      	strb	r2, [r5, #18]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	9000      	str	r0, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	7c29      	ldrb	r1, [r5, #16]
 8001f54:	2004      	movs	r0, #4
 8001f56:	4e83      	ldr	r6, [pc, #524]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8001f58:	6836      	ldr	r6, [r6, #0]
 8001f5a:	47b0      	blx	r6
 8001f5c:	4668      	mov	r0, sp
 8001f5e:	7b00      	ldrb	r0, [r0, #12]
 8001f60:	2811      	cmp	r0, #17
 8001f62:	d11f      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f64:	6868      	ldr	r0, [r5, #4]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	0701      	lsls	r1, r0, #28
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8001f6e:	0680      	lsls	r0, r0, #26
 8001f70:	0fc2      	lsrs	r2, r0, #31
 8001f72:	4291      	cmp	r1, r2
 8001f74:	d116      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f76:	2014      	movs	r0, #20
 8001f78:	4669      	mov	r1, sp
 8001f7a:	7308      	strb	r0, [r1, #12]
 8001f7c:	0028      	movs	r0, r5
 8001f7e:	f7fe fcea 	bl	8000956 <PE_Clear_RxEvent>
 8001f82:	2092      	movs	r0, #146	@ 0x92
 8001f84:	7468      	strb	r0, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	2892      	cmp	r0, #146	@ 0x92
 8001f8a:	d100      	bne.n	8001f8e <USBPD_PE_StateMachine_SNK+0x166>
 8001f8c:	e104      	b.n	8002198 <__iar_annotation$$branch+0x38>
 8001f8e:	2092      	movs	r0, #146	@ 0x92
 8001f90:	74a8      	strb	r0, [r5, #18]
 8001f92:	2000      	movs	r0, #0
 8001f94:	9000      	str	r0, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2292      	movs	r2, #146	@ 0x92
 8001f9a:	7c29      	ldrb	r1, [r5, #16]
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	4e71      	ldr	r6, [pc, #452]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8001fa0:	6836      	ldr	r6, [r6, #0]
 8001fa2:	47b0      	blx	r6
 8001fa4:	7c68      	ldrb	r0, [r5, #17]
 8001fa6:	4669      	mov	r1, sp
 8001fa8:	7008      	strb	r0, [r1, #0]
 8001faa:	4f71      	ldr	r7, [pc, #452]	@ (8002170 <__iar_annotation$$branch+0x10>)
 8001fac:	20f0      	movs	r0, #240	@ 0xf0
 8001fae:	0200      	lsls	r0, r0, #8
 8001fb0:	4e70      	ldr	r6, [pc, #448]	@ (8002174 <__iar_annotation$$branch+0x14>)
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	466a      	mov	r2, sp
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	2a00      	cmp	r2, #0
 8001fba:	d100      	bne.n	8001fbe <USBPD_PE_StateMachine_SNK+0x196>
 8001fbc:	e0e0      	b.n	8002180 <__iar_annotation$$branch+0x20>
 8001fbe:	1e52      	subs	r2, r2, #1
 8001fc0:	d040      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001fc2:	1e92      	subs	r2, r2, #2
 8001fc4:	2a01      	cmp	r2, #1
 8001fc6:	d800      	bhi.n	8001fca <USBPD_PE_StateMachine_SNK+0x1a2>
 8001fc8:	e323      	b.n	8002612 <__iar_annotation$$branch+0x4b2>
 8001fca:	1e92      	subs	r2, r2, #2
 8001fcc:	d100      	bne.n	8001fd0 <USBPD_PE_StateMachine_SNK+0x1a8>
 8001fce:	e1fb      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 8001fd0:	3a0a      	subs	r2, #10
 8001fd2:	d100      	bne.n	8001fd6 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001fd4:	e1fd      	b.n	80023d2 <__iar_annotation$$branch+0x272>
 8001fd6:	1e52      	subs	r2, r2, #1
 8001fd8:	d100      	bne.n	8001fdc <USBPD_PE_StateMachine_SNK+0x1b4>
 8001fda:	e299      	b.n	8002510 <__iar_annotation$$branch+0x3b0>
 8001fdc:	1e52      	subs	r2, r2, #1
 8001fde:	d100      	bne.n	8001fe2 <USBPD_PE_StateMachine_SNK+0x1ba>
 8001fe0:	e2a3      	b.n	800252a <__iar_annotation$$branch+0x3ca>
 8001fe2:	1ed2      	subs	r2, r2, #3
 8001fe4:	d100      	bne.n	8001fe8 <USBPD_PE_StateMachine_SNK+0x1c0>
 8001fe6:	e228      	b.n	800243a <__iar_annotation$$branch+0x2da>
 8001fe8:	1f12      	subs	r2, r2, #4
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d92a      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 8001fee:	1e92      	subs	r2, r2, #2
 8001ff0:	d100      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x1cc>
 8001ff2:	e2d2      	b.n	800259a <__iar_annotation$$branch+0x43a>
 8001ff4:	1ed2      	subs	r2, r2, #3
 8001ff6:	d025      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001ff8:	1e52      	subs	r2, r2, #1
 8001ffa:	d100      	bne.n	8001ffe <USBPD_PE_StateMachine_SNK+0x1d6>
 8001ffc:	e3c3      	b.n	8002786 <__iar_annotation$$branch+0x626>
 8001ffe:	1f12      	subs	r2, r2, #4
 8002000:	d100      	bne.n	8002004 <USBPD_PE_StateMachine_SNK+0x1dc>
 8002002:	e316      	b.n	8002632 <__iar_annotation$$branch+0x4d2>
 8002004:	1f52      	subs	r2, r2, #5
 8002006:	2a02      	cmp	r2, #2
 8002008:	d91c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800200a:	1ed2      	subs	r2, r2, #3
 800200c:	d100      	bne.n	8002010 <USBPD_PE_StateMachine_SNK+0x1e8>
 800200e:	e2f7      	b.n	8002600 <__iar_annotation$$branch+0x4a0>
 8002010:	1e52      	subs	r2, r2, #1
 8002012:	d101      	bne.n	8002018 <__iar_annotation$$branch+0x4>

08002014 <__iar_annotation$$branch>:
 8002014:	f000 fc39 	bl	800288a <__iar_annotation$$branch+0x72a>
 8002018:	1e52      	subs	r2, r2, #1
 800201a:	d013      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800201c:	1e92      	subs	r2, r2, #2
 800201e:	d101      	bne.n	8002024 <__iar_annotation$$branch+0x4>

08002020 <__iar_annotation$$branch>:
 8002020:	f000 fc80 	bl	8002924 <__iar_annotation$$branch+0x7c4>
 8002024:	1e52      	subs	r2, r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d90c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800202a:	1e92      	subs	r2, r2, #2
 800202c:	d001      	beq.n	8002032 <__iar_annotation$$branch+0x12>
 800202e:	1e92      	subs	r2, r2, #2
 8002030:	2a05      	cmp	r2, #5
 8002032:	d801      	bhi.n	8002038 <__iar_annotation$$branch+0x4>

08002034 <__iar_annotation$$branch>:
 8002034:	f000 fcbc 	bl	80029b0 <__iar_annotation$$branch+0x850>
 8002038:	1f92      	subs	r2, r2, #6
 800203a:	d101      	bne.n	8002040 <__iar_annotation$$branch+0x4>

0800203c <__iar_annotation$$branch>:
 800203c:	f000 fc86 	bl	800294c <__iar_annotation$$branch+0x7ec>
 8002040:	1e52      	subs	r2, r2, #1
 8002042:	2a03      	cmp	r2, #3
 8002044:	d801      	bhi.n	800204a <__iar_annotation$$branch+0x4>

08002046 <__iar_annotation$$branch>:
 8002046:	f000 fcb7 	bl	80029b8 <__iar_annotation$$branch+0x858>
 800204a:	1f12      	subs	r2, r2, #4
 800204c:	d100      	bne.n	8002050 <__iar_annotation$$branch+0xa>
 800204e:	e0af      	b.n	80021b0 <__iar_annotation$$branch+0x50>
 8002050:	1e92      	subs	r2, r2, #2
 8002052:	d100      	bne.n	8002056 <__iar_annotation$$branch+0x10>
 8002054:	e221      	b.n	800249a <__iar_annotation$$branch+0x33a>
 8002056:	1ed2      	subs	r2, r2, #3
 8002058:	d100      	bne.n	800205c <__iar_annotation$$branch+0x16>
 800205a:	e0c1      	b.n	80021e0 <__iar_annotation$$branch+0x80>
 800205c:	1e52      	subs	r2, r2, #1
 800205e:	d100      	bne.n	8002062 <__iar_annotation$$branch+0x1c>
 8002060:	e100      	b.n	8002264 <__iar_annotation$$branch+0x104>
 8002062:	1e52      	subs	r2, r2, #1
 8002064:	d100      	bne.n	8002068 <__iar_annotation$$branch+0x22>
 8002066:	e10f      	b.n	8002288 <__iar_annotation$$branch+0x128>
 8002068:	1e52      	subs	r2, r2, #1
 800206a:	d100      	bne.n	800206e <__iar_annotation$$branch+0x28>
 800206c:	e128      	b.n	80022c0 <__iar_annotation$$branch+0x160>
 800206e:	1e52      	subs	r2, r2, #1
 8002070:	d100      	bne.n	8002074 <__iar_annotation$$branch+0x2e>
 8002072:	e178      	b.n	8002366 <__iar_annotation$$branch+0x206>
 8002074:	1e92      	subs	r2, r2, #2
 8002076:	d0a6      	beq.n	8001fc6 <USBPD_PE_StateMachine_SNK+0x19e>
 8002078:	1e92      	subs	r2, r2, #2
 800207a:	d0e3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800207c:	1e52      	subs	r2, r2, #1
 800207e:	d101      	bne.n	8002084 <__iar_annotation$$branch+0x4>

08002080 <__iar_annotation$$branch>:
 8002080:	f000 fbe5 	bl	800284e <__iar_annotation$$branch+0x6ee>
 8002084:	1f12      	subs	r2, r2, #4
 8002086:	d100      	bne.n	800208a <__iar_annotation$$branch+0xa>
 8002088:	e26a      	b.n	8002560 <__iar_annotation$$branch+0x400>
 800208a:	1ed2      	subs	r2, r2, #3
 800208c:	d100      	bne.n	8002090 <__iar_annotation$$branch+0x10>
 800208e:	e334      	b.n	80026fa <__iar_annotation$$branch+0x59a>
 8002090:	1f52      	subs	r2, r2, #5
 8002092:	d100      	bne.n	8002096 <__iar_annotation$$branch+0x16>
 8002094:	e388      	b.n	80027a8 <__iar_annotation$$branch+0x648>
 8002096:	1e52      	subs	r2, r2, #1
 8002098:	d100      	bne.n	800209c <__iar_annotation$$branch+0x1c>
 800209a:	e2ff      	b.n	800269c <__iar_annotation$$branch+0x53c>
 800209c:	3a09      	subs	r2, #9
 800209e:	2a02      	cmp	r2, #2
 80020a0:	d9d0      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020a2:	1ed2      	subs	r2, r2, #3
 80020a4:	d101      	bne.n	80020aa <__iar_annotation$$branch+0x4>

080020a6 <__iar_annotation$$branch>:
 80020a6:	f000 fc01 	bl	80028ac <__iar_annotation$$branch+0x74c>
 80020aa:	1e52      	subs	r2, r2, #1
 80020ac:	d101      	bne.n	80020b2 <__iar_annotation$$branch+0x4>

080020ae <__iar_annotation$$branch>:
 80020ae:	f000 fc0f 	bl	80028d0 <__iar_annotation$$branch+0x770>
 80020b2:	1e52      	subs	r2, r2, #1
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d9c5      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020b8:	3a0d      	subs	r2, #13
 80020ba:	d0c3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020bc:	3a12      	subs	r2, #18
 80020be:	d101      	bne.n	80020c4 <__iar_annotation$$branch+0x4>

080020c0 <__iar_annotation$$branch>:
 80020c0:	f000 fc92 	bl	80029e8 <__iar_annotation$$branch+0x888>
 80020c4:	3a0c      	subs	r2, #12
 80020c6:	d067      	beq.n	8002198 <__iar_annotation$$branch+0x38>
 80020c8:	1e52      	subs	r2, r2, #1
 80020ca:	2a02      	cmp	r2, #2
 80020cc:	d9ba      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020ce:	1f52      	subs	r2, r2, #5
 80020d0:	d100      	bne.n	80020d4 <__iar_annotation$$branch+0x14>
 80020d2:	e271      	b.n	80025b8 <__iar_annotation$$branch+0x458>
 80020d4:	1e52      	subs	r2, r2, #1
 80020d6:	d0b5      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020d8:	1e52      	subs	r2, r2, #1
 80020da:	d100      	bne.n	80020de <__iar_annotation$$branch+0x1e>
 80020dc:	e174      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 80020de:	1e52      	subs	r2, r2, #1
 80020e0:	d100      	bne.n	80020e4 <__iar_annotation$$branch+0x24>
 80020e2:	e1be      	b.n	8002462 <__iar_annotation$$branch+0x302>
 80020e4:	1e52      	subs	r2, r2, #1
 80020e6:	2a08      	cmp	r2, #8
 80020e8:	d801      	bhi.n	80020ee <__iar_annotation$$branch+0x4>

080020ea <__iar_annotation$$branch>:
 80020ea:	f000 fc6a 	bl	80029c2 <__iar_annotation$$branch+0x862>
 80020ee:	3a0b      	subs	r2, #11
 80020f0:	d101      	bne.n	80020f6 <__iar_annotation$$branch+0x4>

080020f2 <__iar_annotation$$branch>:
 80020f2:	f000 fc7f 	bl	80029f4 <__iar_annotation$$branch+0x894>
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	0028      	movs	r0, r5
 80020fa:	f002 f9e3 	bl	80044c4 <PE_StateMachine_VDM>
 80020fe:	0004      	movs	r4, r0
 8002100:	7c6a      	ldrb	r2, [r5, #17]
 8002102:	7ca8      	ldrb	r0, [r5, #18]
 8002104:	4290      	cmp	r0, r2
 8002106:	d008      	beq.n	800211a <__iar_annotation$$branch+0x28>
 8002108:	74aa      	strb	r2, [r5, #18]
 800210a:	2000      	movs	r0, #0
 800210c:	9000      	str	r0, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	7c29      	ldrb	r1, [r5, #16]
 8002112:	2004      	movs	r0, #4
 8002114:	4e13      	ldr	r6, [pc, #76]	@ (8002164 <__iar_annotation$$branch+0x4>)
 8002116:	6836      	ldr	r6, [r6, #0]
 8002118:	47b0      	blx	r6
 800211a:	4e12      	ldr	r6, [pc, #72]	@ (8002164 <__iar_annotation$$branch+0x4>)
 800211c:	4668      	mov	r0, sp
 800211e:	7b00      	ldrb	r0, [r0, #12]
 8002120:	2814      	cmp	r0, #20
 8002122:	d101      	bne.n	8002128 <__iar_annotation$$branch+0x4>

08002124 <__iar_annotation$$branch>:
 8002124:	f000 fc73 	bl	8002a0e <__iar_annotation$$branch+0x8ae>
 8002128:	0028      	movs	r0, r5
 800212a:	f7fe fc5b 	bl	80009e4 <PE_Check_AMSConflict>
 800212e:	2815      	cmp	r0, #21
 8002130:	d109      	bne.n	8002146 <__iar_annotation$$branch+0x22>
 8002132:	4668      	mov	r0, sp
 8002134:	7b00      	ldrb	r0, [r0, #12]
 8002136:	2814      	cmp	r0, #20
 8002138:	d005      	beq.n	8002146 <__iar_annotation$$branch+0x22>
 800213a:	2014      	movs	r0, #20
 800213c:	4669      	mov	r1, sp
 800213e:	7308      	strb	r0, [r1, #12]
 8002140:	0028      	movs	r0, r5
 8002142:	f7fe fc08 	bl	8000956 <PE_Clear_RxEvent>
 8002146:	7c6a      	ldrb	r2, [r5, #17]
 8002148:	7ca8      	ldrb	r0, [r5, #18]
 800214a:	4290      	cmp	r0, r2
 800214c:	d007      	beq.n	800215e <__iar_annotation$$branch+0x3a>
 800214e:	74aa      	strb	r2, [r5, #18]
 8002150:	2000      	movs	r0, #0
 8002152:	9000      	str	r0, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	7c29      	ldrb	r1, [r5, #16]
 8002158:	2004      	movs	r0, #4
 800215a:	6834      	ldr	r4, [r6, #0]
 800215c:	47a0      	blx	r4
 800215e:	2400      	movs	r4, #0

08002160 <__iar_annotation$$branch>:
 8002160:	f000 fc74 	bl	8002a4c <__iar_annotation$$branch+0x8ec>
 8002164:	20000000 	.word	0x20000000
 8002168:	fffbffff 	.word	0xfffbffff
 800216c:	fffdffff 	.word	0xfffdffff
 8002170:	000081f4 	.word	0x000081f4
 8002174:	0000801b 	.word	0x0000801b
 8002178:	2400      	movs	r4, #0
 800217a:	43e4      	mvns	r4, r4
 800217c:	0020      	movs	r0, r4
 800217e:	e6a5      	b.n	8001ecc <USBPD_PE_StateMachine_SNK+0xa4>
 8002180:	6868      	ldr	r0, [r5, #4]
 8002182:	6801      	ldr	r1, [r0, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4391      	bics	r1, r2
 8002188:	6001      	str	r1, [r0, #0]
 800218a:	215f      	movs	r1, #95	@ 0x5f
 800218c:	7c28      	ldrb	r0, [r5, #16]
 800218e:	f7fe f977 	bl	8000480 <USBPD_PE_Notification>
 8002192:	2400      	movs	r4, #0
 8002194:	43e4      	mvns	r4, r4
 8002196:	e7b3      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002198:	6868      	ldr	r0, [r5, #4]
 800219a:	6801      	ldr	r1, [r0, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4391      	bics	r1, r2
 80021a0:	6001      	str	r1, [r0, #0]
 80021a2:	68a8      	ldr	r0, [r5, #8]
 80021a4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80021a6:	2900      	cmp	r1, #0
 80021a8:	d0f3      	beq.n	8002192 <__iar_annotation$$branch+0x32>
 80021aa:	7c28      	ldrb	r0, [r5, #16]
 80021ac:	4788      	blx	r1
 80021ae:	e7f0      	b.n	8002192 <__iar_annotation$$branch+0x32>
 80021b0:	6868      	ldr	r0, [r5, #4]
 80021b2:	6801      	ldr	r1, [r0, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	0b0b      	lsrs	r3, r1, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0a1      	beq.n	8002100 <__iar_annotation$$branch+0xe>
 80021bc:	078b      	lsls	r3, r1, #30
 80021be:	0f9b      	lsrs	r3, r3, #30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <__iar_annotation$$branch+0x68>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <__iar_annotation$$branch+0x6a>
 80021c8:	2320      	movs	r3, #32
 80021ca:	2420      	movs	r4, #32
 80021cc:	43a1      	bics	r1, r4
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	772a      	strb	r2, [r5, #28]
 80021d4:	83ef      	strh	r7, [r5, #30]
 80021d6:	24fa      	movs	r4, #250	@ 0xfa
 80021d8:	0064      	lsls	r4, r4, #1
 80021da:	2043      	movs	r0, #67	@ 0x43
 80021dc:	7468      	strb	r0, [r5, #17]
 80021de:	e78f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80021e0:	4668      	mov	r0, sp
 80021e2:	7b00      	ldrb	r0, [r0, #12]
 80021e4:	2811      	cmp	r0, #17
 80021e6:	d135      	bne.n	8002254 <__iar_annotation$$branch+0xf4>
 80021e8:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80021ea:	0bc2      	lsrs	r2, r0, #15
 80021ec:	d12c      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021ee:	2607      	movs	r6, #7
 80021f0:	0b02      	lsrs	r2, r0, #12
 80021f2:	4232      	tst	r2, r6
 80021f4:	d028      	beq.n	8002248 <__iar_annotation$$branch+0xe8>
 80021f6:	06c2      	lsls	r2, r0, #27
 80021f8:	0ed2      	lsrs	r2, r2, #27
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d124      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021fe:	2200      	movs	r2, #0
 8002200:	4bc1      	ldr	r3, [pc, #772]	@ (8002508 <__iar_annotation$$branch+0x3a8>)
 8002202:	18eb      	adds	r3, r5, r3
 8002204:	709a      	strb	r2, [r3, #2]
 8002206:	696a      	ldr	r2, [r5, #20]
 8002208:	4311      	orrs	r1, r2
 800220a:	6169      	str	r1, [r5, #20]
 800220c:	0600      	lsls	r0, r0, #24
 800220e:	0f81      	lsrs	r1, r0, #30
 8002210:	4668      	mov	r0, sp
 8002212:	7b40      	ldrb	r0, [r0, #13]
 8002214:	f7fe fcee 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8002218:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800221a:	0b00      	lsrs	r0, r0, #12
 800221c:	4006      	ands	r6, r0
 800221e:	00b3      	lsls	r3, r6, #2
 8002220:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8002222:	1c82      	adds	r2, r0, #2
 8002224:	2104      	movs	r1, #4
 8002226:	7c28      	ldrb	r0, [r5, #16]
 8002228:	68ae      	ldr	r6, [r5, #8]
 800222a:	69b6      	ldr	r6, [r6, #24]
 800222c:	47b0      	blx	r6
 800222e:	2001      	movs	r0, #1
 8002230:	7728      	strb	r0, [r5, #28]
 8002232:	6868      	ldr	r0, [r5, #4]
 8002234:	6801      	ldr	r1, [r0, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	4391      	bics	r1, r2
 800223a:	6001      	str	r1, [r0, #0]
 800223c:	2044      	movs	r0, #68	@ 0x44
 800223e:	7468      	strb	r0, [r5, #17]
 8002240:	4668      	mov	r0, sp
 8002242:	7b00      	ldrb	r0, [r0, #12]
 8002244:	2814      	cmp	r0, #20
 8002246:	d005      	beq.n	8002254 <__iar_annotation$$branch+0xf4>
 8002248:	2014      	movs	r0, #20
 800224a:	4669      	mov	r1, sp
 800224c:	7308      	strb	r0, [r1, #12]
 800224e:	0028      	movs	r0, r5
 8002250:	f7fe fb81 	bl	8000956 <PE_Clear_RxEvent>
 8002254:	8be8      	ldrh	r0, [r5, #30]
 8002256:	03a1      	lsls	r1, r4, #14
 8002258:	4288      	cmp	r0, r1
 800225a:	d102      	bne.n	8002262 <__iar_annotation$$branch+0x102>
 800225c:	200f      	movs	r0, #15
 800225e:	7468      	strb	r0, [r5, #17]
 8002260:	2400      	movs	r4, #0
 8002262:	e74d      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002264:	466a      	mov	r2, sp
 8002266:	0029      	movs	r1, r5
 8002268:	3118      	adds	r1, #24
 800226a:	7c28      	ldrb	r0, [r5, #16]
 800226c:	68ab      	ldr	r3, [r5, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4798      	blx	r3
 8002272:	6968      	ldr	r0, [r5, #20]
 8002274:	2118      	movs	r1, #24
 8002276:	4388      	bics	r0, r1
 8002278:	9900      	ldr	r1, [sp, #0]
 800227a:	00c9      	lsls	r1, r1, #3
 800227c:	2218      	movs	r2, #24
 800227e:	400a      	ands	r2, r1
 8002280:	4302      	orrs	r2, r0
 8002282:	616a      	str	r2, [r5, #20]
 8002284:	2045      	movs	r0, #69	@ 0x45
 8002286:	e7ea      	b.n	800225e <__iar_annotation$$branch+0xfe>
 8002288:	6968      	ldr	r0, [r5, #20]
 800228a:	0401      	lsls	r1, r0, #16
 800228c:	0fc9      	lsrs	r1, r1, #31
 800228e:	d001      	beq.n	8002294 <__iar_annotation$$branch+0x134>
 8002290:	2002      	movs	r0, #2
 8002292:	e000      	b.n	8002296 <__iar_annotation$$branch+0x136>
 8002294:	2000      	movs	r0, #0
 8002296:	9002      	str	r0, [sp, #8]
 8002298:	2046      	movs	r0, #70	@ 0x46
 800229a:	9001      	str	r0, [sp, #4]
 800229c:	2001      	movs	r0, #1
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	002b      	movs	r3, r5
 80022a2:	3318      	adds	r3, #24
 80022a4:	2202      	movs	r2, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	f7ff f95c 	bl	8001566 <PE_Send_DataMessage>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d105      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 80022b2:	6968      	ldr	r0, [r5, #20]
 80022b4:	4995      	ldr	r1, [pc, #596]	@ (800250c <__iar_annotation$$branch+0x3ac>)
 80022b6:	4001      	ands	r1, r0
 80022b8:	6169      	str	r1, [r5, #20]
 80022ba:	83ee      	strh	r6, [r5, #30]
 80022bc:	241b      	movs	r4, #27
 80022be:	e71f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80022c0:	4669      	mov	r1, sp
 80022c2:	7b09      	ldrb	r1, [r1, #12]
 80022c4:	2911      	cmp	r1, #17
 80022c6:	d148      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022c8:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80022ca:	4201      	tst	r1, r0
 80022cc:	d145      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022ce:	20fa      	movs	r0, #250	@ 0xfa
 80022d0:	0040      	lsls	r0, r0, #1
 80022d2:	261f      	movs	r6, #31
 80022d4:	221f      	movs	r2, #31
 80022d6:	400a      	ands	r2, r1
 80022d8:	1e92      	subs	r2, r2, #2
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d917      	bls.n	800230e <__iar_annotation$$branch+0x1ae>
 80022de:	1e92      	subs	r2, r2, #2
 80022e0:	d001      	beq.n	80022e6 <__iar_annotation$$branch+0x186>
 80022e2:	3a08      	subs	r2, #8
 80022e4:	d125      	bne.n	8002332 <__iar_annotation$$branch+0x1d2>
 80022e6:	686a      	ldr	r2, [r5, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	0f52      	lsrs	r2, r2, #29
 80022ee:	2a03      	cmp	r2, #3
 80022f0:	d004      	beq.n	80022fc <__iar_annotation$$branch+0x19c>
 80022f2:	2143      	movs	r1, #67	@ 0x43
 80022f4:	7469      	strb	r1, [r5, #17]
 80022f6:	83ef      	strh	r7, [r5, #30]
 80022f8:	0004      	movs	r4, r0
 80022fa:	e014      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 80022fc:	4031      	ands	r1, r6
 80022fe:	290c      	cmp	r1, #12
 8002300:	d101      	bne.n	8002306 <__iar_annotation$$branch+0x1a6>
 8002302:	2049      	movs	r0, #73	@ 0x49
 8002304:	e000      	b.n	8002308 <__iar_annotation$$branch+0x1a8>
 8002306:	2003      	movs	r0, #3
 8002308:	7468      	strb	r0, [r5, #17]
 800230a:	2400      	movs	r4, #0
 800230c:	e00b      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 800230e:	83ef      	strh	r7, [r5, #30]
 8002310:	0004      	movs	r4, r0
 8002312:	2104      	movs	r1, #4
 8002314:	0028      	movs	r0, r5
 8002316:	f7ff f846 	bl	80013a6 <PE_SetPowerNegotiation>
 800231a:	2047      	movs	r0, #71	@ 0x47
 800231c:	7468      	strb	r0, [r5, #17]
 800231e:	4668      	mov	r0, sp
 8002320:	7b00      	ldrb	r0, [r0, #12]
 8002322:	2814      	cmp	r0, #20
 8002324:	d005      	beq.n	8002332 <__iar_annotation$$branch+0x1d2>
 8002326:	2014      	movs	r0, #20
 8002328:	4669      	mov	r1, sp
 800232a:	7308      	strb	r0, [r1, #12]
 800232c:	0028      	movs	r0, r5
 800232e:	f7fe fb12 	bl	8000956 <PE_Clear_RxEvent>
 8002332:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002334:	4006      	ands	r6, r0
 8002336:	2e02      	cmp	r6, #2
 8002338:	d009      	beq.n	800234e <__iar_annotation$$branch+0x1ee>
 800233a:	2e03      	cmp	r6, #3
 800233c:	d009      	beq.n	8002352 <__iar_annotation$$branch+0x1f2>
 800233e:	2e04      	cmp	r6, #4
 8002340:	d003      	beq.n	800234a <__iar_annotation$$branch+0x1ea>
 8002342:	2e0c      	cmp	r6, #12
 8002344:	d109      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002346:	2103      	movs	r1, #3
 8002348:	e004      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234a:	2102      	movs	r1, #2
 800234c:	e002      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234e:	2104      	movs	r1, #4
 8002350:	e000      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 8002352:	2101      	movs	r1, #1
 8002354:	7c28      	ldrb	r0, [r5, #16]
 8002356:	f7fe f893 	bl	8000480 <USBPD_PE_Notification>
 800235a:	8be8      	ldrh	r0, [r5, #30]
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0209      	lsls	r1, r1, #8
 8002360:	4288      	cmp	r0, r1
 8002362:	d1ac      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 8002364:	e77a      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002366:	4668      	mov	r0, sp
 8002368:	7b00      	ldrb	r0, [r0, #12]
 800236a:	2811      	cmp	r0, #17
 800236c:	d1f5      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 800236e:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002370:	499f      	ldr	r1, [pc, #636]	@ (80025f0 <__iar_annotation$$branch+0x490>)
 8002372:	4001      	ands	r1, r0
 8002374:	2906      	cmp	r1, #6
 8002376:	d1f0      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002378:	2014      	movs	r0, #20
 800237a:	4669      	mov	r1, sp
 800237c:	7308      	strb	r0, [r1, #12]
 800237e:	0028      	movs	r0, r5
 8002380:	f7fe fae9 	bl	8000956 <PE_Clear_RxEvent>
 8002384:	2103      	movs	r1, #3
 8002386:	0028      	movs	r0, r5
 8002388:	f7ff f80d 	bl	80013a6 <PE_SetPowerNegotiation>
 800238c:	2110      	movs	r1, #16
 800238e:	7c28      	ldrb	r0, [r5, #16]
 8002390:	f7fe f876 	bl	8000480 <USBPD_PE_Notification>
 8002394:	6868      	ldr	r0, [r5, #4]
 8002396:	6800      	ldr	r0, [r0, #0]
 8002398:	0401      	lsls	r1, r0, #16
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	d002      	beq.n	80023a4 <__iar_annotation$$branch+0x244>
 800239e:	6828      	ldr	r0, [r5, #0]
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	e000      	b.n	80023a6 <__iar_annotation$$branch+0x246>
 80023a4:	2101      	movs	r1, #1
 80023a6:	4668      	mov	r0, sp
 80023a8:	7b40      	ldrb	r0, [r0, #13]
 80023aa:	f003 f9fb 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80023ae:	2000      	movs	r0, #0
 80023b0:	84a8      	strh	r0, [r5, #36]	@ 0x24
 80023b2:	2003      	movs	r0, #3
 80023b4:	6969      	ldr	r1, [r5, #20]
 80023b6:	08c9      	lsrs	r1, r1, #3
 80023b8:	4001      	ands	r1, r0
 80023ba:	2903      	cmp	r1, #3
 80023bc:	d101      	bne.n	80023c2 <__iar_annotation$$branch+0x262>
 80023be:	498d      	ldr	r1, [pc, #564]	@ (80025f4 <__iar_annotation$$branch+0x494>)
 80023c0:	84a9      	strh	r1, [r5, #36]	@ 0x24
 80023c2:	7468      	strb	r0, [r5, #17]
 80023c4:	2400      	movs	r4, #0
 80023c6:	e7c8      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 80023c8:	a903      	add	r1, sp, #12
 80023ca:	0028      	movs	r0, r5
 80023cc:	f001 fbac 	bl	8003b28 <PE_StateMachine_VDMCable>
 80023d0:	e695      	b.n	80020fe <__iar_annotation$$branch+0xc>
 80023d2:	2601      	movs	r6, #1
 80023d4:	6868      	ldr	r0, [r5, #4]
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	0bc0      	lsrs	r0, r0, #15
 80023da:	4030      	ands	r0, r6
 80023dc:	d006      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023de:	68a8      	ldr	r0, [r5, #8]
 80023e0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d002      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023e6:	2100      	movs	r1, #0
 80023e8:	7c28      	ldrb	r0, [r5, #16]
 80023ea:	4790      	blx	r2
 80023ec:	6868      	ldr	r0, [r5, #4]
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4391      	bics	r1, r2
 80023f4:	6001      	str	r1, [r0, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	0028      	movs	r0, r5
 80023fa:	f7fe ffd4 	bl	80013a6 <PE_SetPowerNegotiation>
 80023fe:	4842      	ldr	r0, [pc, #264]	@ (8002508 <__iar_annotation$$branch+0x3a8>)
 8002400:	1829      	adds	r1, r5, r0
 8002402:	7888      	ldrb	r0, [r1, #2]
 8002404:	2803      	cmp	r0, #3
 8002406:	d309      	bcc.n	800241c <__iar_annotation$$branch+0x2bc>
 8002408:	6968      	ldr	r0, [r5, #20]
 800240a:	0880      	lsrs	r0, r0, #2
 800240c:	4006      	ands	r6, r0
 800240e:	d003      	beq.n	8002418 <__iar_annotation$$branch+0x2b8>
 8002410:	68a8      	ldr	r0, [r5, #8]
 8002412:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002414:	2800      	cmp	r0, #0
 8002416:	d171      	bne.n	80024fc <__iar_annotation$$branch+0x39c>
 8002418:	2000      	movs	r0, #0
 800241a:	e6df      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 800241c:	1c40      	adds	r0, r0, #1
 800241e:	7088      	strb	r0, [r1, #2]
 8002420:	2105      	movs	r1, #5
 8002422:	0028      	movs	r0, r5
 8002424:	f7fe fa32 	bl	800088c <PE_Send_RESET>
 8002428:	4873      	ldr	r0, [pc, #460]	@ (80025f8 <__iar_annotation$$branch+0x498>)
 800242a:	83e8      	strh	r0, [r5, #30]
 800242c:	2201      	movs	r2, #1
 800242e:	2101      	movs	r1, #1
 8002430:	0028      	movs	r0, r5
 8002432:	f7fe ffaf 	bl	8001394 <PE_CallHardResetCallback>
 8002436:	209b      	movs	r0, #155	@ 0x9b
 8002438:	e711      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800243a:	6868      	ldr	r0, [r5, #4]
 800243c:	6800      	ldr	r0, [r0, #0]
 800243e:	0401      	lsls	r1, r0, #16
 8002440:	0fc9      	lsrs	r1, r1, #31
 8002442:	d006      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 8002444:	68a8      	ldr	r0, [r5, #8]
 8002446:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002448:	2a00      	cmp	r2, #0
 800244a:	d002      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 800244c:	2100      	movs	r1, #0
 800244e:	7c28      	ldrb	r0, [r5, #16]
 8002450:	4790      	blx	r2
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	0028      	movs	r0, r5
 8002458:	f7fe ff9c 	bl	8001394 <PE_CallHardResetCallback>
 800245c:	4866      	ldr	r0, [pc, #408]	@ (80025f8 <__iar_annotation$$branch+0x498>)
 800245e:	83e8      	strh	r0, [r5, #30]
 8002460:	e7e9      	b.n	8002436 <__iar_annotation$$branch+0x2d6>
 8002462:	2100      	movs	r1, #0
 8002464:	4668      	mov	r0, sp
 8002466:	7b40      	ldrb	r0, [r0, #13]
 8002468:	68aa      	ldr	r2, [r5, #8]
 800246a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800246c:	4790      	blx	r2
 800246e:	2801      	cmp	r0, #1
 8002470:	d10d      	bne.n	800248e <__iar_annotation$$branch+0x32e>
 8002472:	4862      	ldr	r0, [pc, #392]	@ (80025fc <__iar_annotation$$branch+0x49c>)
 8002474:	83e8      	strh	r0, [r5, #30]
 8002476:	2169      	movs	r1, #105	@ 0x69
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe f800 	bl	8000480 <USBPD_PE_Notification>
 8002480:	2040      	movs	r0, #64	@ 0x40
 8002482:	7468      	strb	r0, [r5, #17]
 8002484:	2400      	movs	r4, #0
 8002486:	2113      	movs	r1, #19
 8002488:	7c28      	ldrb	r0, [r5, #16]
 800248a:	f7fd fff9 	bl	8000480 <USBPD_PE_Notification>
 800248e:	8be8      	ldrh	r0, [r5, #30]
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	0209      	lsls	r1, r1, #8
 8002494:	4288      	cmp	r0, r1
 8002496:	d135      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002498:	e01e      	b.n	80024d8 <__iar_annotation$$branch+0x378>
 800249a:	2101      	movs	r1, #1
 800249c:	4668      	mov	r0, sp
 800249e:	7b40      	ldrb	r0, [r0, #13]
 80024a0:	68aa      	ldr	r2, [r5, #8]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024a4:	4790      	blx	r2
 80024a6:	2801      	cmp	r0, #1
 80024a8:	d111      	bne.n	80024ce <__iar_annotation$$branch+0x36e>
 80024aa:	0028      	movs	r0, r5
 80024ac:	f7fe fb01 	bl	8000ab2 <PE_Reset_HardReset>
 80024b0:	2205      	movs	r2, #5
 80024b2:	2100      	movs	r1, #0
 80024b4:	0028      	movs	r0, r5
 80024b6:	f7fe ff6d 	bl	8001394 <PE_CallHardResetCallback>
 80024ba:	2168      	movs	r1, #104	@ 0x68
 80024bc:	4668      	mov	r0, sp
 80024be:	7b40      	ldrb	r0, [r0, #13]
 80024c0:	f7fd ffde 	bl	8000480 <USBPD_PE_Notification>
 80024c4:	83ef      	strh	r7, [r5, #30]
 80024c6:	24fa      	movs	r4, #250	@ 0xfa
 80024c8:	0064      	lsls	r4, r4, #1
 80024ca:	2043      	movs	r0, #67	@ 0x43
 80024cc:	7468      	strb	r0, [r5, #17]
 80024ce:	8be8      	ldrh	r0, [r5, #30]
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	4288      	cmp	r0, r1
 80024d6:	d115      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 80024d8:	2206      	movs	r2, #6
 80024da:	2100      	movs	r1, #0
 80024dc:	0028      	movs	r0, r5
 80024de:	f7fe ff59 	bl	8001394 <PE_CallHardResetCallback>
 80024e2:	4809      	ldr	r0, [pc, #36]	@ (8002508 <__iar_annotation$$branch+0x3a8>)
 80024e4:	1828      	adds	r0, r5, r0
 80024e6:	7880      	ldrb	r0, [r0, #2]
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d200      	bcs.n	80024ee <__iar_annotation$$branch+0x38e>
 80024ec:	e6b6      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80024ee:	6968      	ldr	r0, [r5, #20]
 80024f0:	0741      	lsls	r1, r0, #29
 80024f2:	0fc9      	lsrs	r1, r1, #31
 80024f4:	d004      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024f6:	68a8      	ldr	r0, [r5, #8]
 80024f8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d000      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024fe:	e0fa      	b.n	80026f6 <__iar_annotation$$branch+0x596>
 8002500:	2400      	movs	r4, #0
 8002502:	746c      	strb	r4, [r5, #17]
 8002504:	e5fc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002506:	bf00      	nop
 8002508:	0000025e 	.word	0x0000025e
 800250c:	ffff7fff 	.word	0xffff7fff
 8002510:	2000      	movs	r0, #0
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	2303      	movs	r3, #3
 8002516:	2203      	movs	r2, #3
 8002518:	2100      	movs	r1, #0
 800251a:	0028      	movs	r0, r5
 800251c:	f7fe fff8 	bl	8001510 <PE_Send_CtrlMessage>
 8002520:	2800      	cmp	r0, #0
 8002522:	d1ef      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002524:	2001      	movs	r0, #1
 8002526:	7728      	strb	r0, [r5, #28]
 8002528:	e654      	b.n	80021d4 <__iar_annotation$$branch+0x74>
 800252a:	6868      	ldr	r0, [r5, #4]
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	0540      	lsls	r0, r0, #21
 8002530:	0f40      	lsrs	r0, r0, #29
 8002532:	2804      	cmp	r0, #4
 8002534:	d100      	bne.n	8002538 <__iar_annotation$$branch+0x3d8>
 8002536:	e691      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002538:	2000      	movs	r0, #0
 800253a:	9000      	str	r0, [sp, #0]
 800253c:	2350      	movs	r3, #80	@ 0x50
 800253e:	220d      	movs	r2, #13
 8002540:	2031      	movs	r0, #49	@ 0x31
 8002542:	5c29      	ldrb	r1, [r5, r0]
 8002544:	0028      	movs	r0, r5
 8002546:	f7fe ffe3 	bl	8001510 <PE_Send_CtrlMessage>
 800254a:	2800      	cmp	r0, #0
 800254c:	d107      	bne.n	800255e <__iar_annotation$$branch+0x3fe>
 800254e:	2003      	movs	r0, #3
 8002550:	7728      	strb	r0, [r5, #28]
 8002552:	83ee      	strh	r6, [r5, #30]
 8002554:	241b      	movs	r4, #27
 8002556:	2130      	movs	r1, #48	@ 0x30
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	f7fd ff91 	bl	8000480 <USBPD_PE_Notification>
 800255e:	e5cf      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002560:	4668      	mov	r0, sp
 8002562:	7b00      	ldrb	r0, [r0, #12]
 8002564:	2814      	cmp	r0, #20
 8002566:	d017      	beq.n	8002598 <__iar_annotation$$branch+0x438>
 8002568:	2030      	movs	r0, #48	@ 0x30
 800256a:	5c28      	ldrb	r0, [r5, r0]
 800256c:	2131      	movs	r1, #49	@ 0x31
 800256e:	5c69      	ldrb	r1, [r5, r1]
 8002570:	4288      	cmp	r0, r1
 8002572:	d111      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 8002574:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002576:	491e      	ldr	r1, [pc, #120]	@ (80025f0 <__iar_annotation$$branch+0x490>)
 8002578:	4001      	ands	r1, r0
 800257a:	2903      	cmp	r1, #3
 800257c:	d10c      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 800257e:	2001      	movs	r0, #1
 8002580:	7728      	strb	r0, [r5, #28]
 8002582:	83ef      	strh	r7, [r5, #30]
 8002584:	24fa      	movs	r4, #250	@ 0xfa
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	2043      	movs	r0, #67	@ 0x43
 800258a:	7468      	strb	r0, [r5, #17]
 800258c:	2014      	movs	r0, #20
 800258e:	4669      	mov	r1, sp
 8002590:	7308      	strb	r0, [r1, #12]
 8002592:	0028      	movs	r0, r5
 8002594:	f7fe f9df 	bl	8000956 <PE_Clear_RxEvent>
 8002598:	e6df      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 800259a:	9400      	str	r4, [sp, #0]
 800259c:	2343      	movs	r3, #67	@ 0x43
 800259e:	2207      	movs	r2, #7
 80025a0:	2100      	movs	r1, #0
 80025a2:	0028      	movs	r0, r5
 80025a4:	f7fe ffb4 	bl	8001510 <PE_Send_CtrlMessage>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d11f      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ac:	2006      	movs	r0, #6
 80025ae:	7728      	strb	r0, [r5, #28]
 80025b0:	83ee      	strh	r6, [r5, #30]
 80025b2:	241b      	movs	r4, #27
 80025b4:	210b      	movs	r1, #11
 80025b6:	e7cf      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80025b8:	4668      	mov	r0, sp
 80025ba:	7b00      	ldrb	r0, [r0, #12]
 80025bc:	2811      	cmp	r0, #17
 80025be:	d115      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025c0:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80025c2:	490b      	ldr	r1, [pc, #44]	@ (80025f0 <__iar_annotation$$branch+0x490>)
 80025c4:	4001      	ands	r1, r0
 80025c6:	2906      	cmp	r1, #6
 80025c8:	d110      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ca:	212c      	movs	r1, #44	@ 0x2c
 80025cc:	7c28      	ldrb	r0, [r5, #16]
 80025ce:	f7fd ff57 	bl	8000480 <USBPD_PE_Notification>
 80025d2:	2003      	movs	r0, #3
 80025d4:	7468      	strb	r0, [r5, #17]
 80025d6:	2400      	movs	r4, #0
 80025d8:	4668      	mov	r0, sp
 80025da:	7b00      	ldrb	r0, [r0, #12]
 80025dc:	2814      	cmp	r0, #20
 80025de:	d005      	beq.n	80025ec <__iar_annotation$$branch+0x48c>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe f9b5 	bl	8000956 <PE_Clear_RxEvent>
 80025ec:	e588      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80025ee:	bf00      	nop
 80025f0:	0000f01f 	.word	0x0000f01f
 80025f4:	0000a328 	.word	0x0000a328
 80025f8:	000083e8 	.word	0x000083e8
 80025fc:	000088e3 	.word	0x000088e3
 8002600:	2000      	movs	r0, #0
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	2303      	movs	r3, #3
 8002606:	2204      	movs	r2, #4
 8002608:	2100      	movs	r1, #0
 800260a:	0028      	movs	r0, r5
 800260c:	f7fe ff80 	bl	8001510 <PE_Send_CtrlMessage>
 8002610:	e576      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002612:	4668      	mov	r0, sp
 8002614:	7800      	ldrb	r0, [r0, #0]
 8002616:	2804      	cmp	r0, #4
 8002618:	d006      	beq.n	8002628 <__iar_annotation$$branch+0x4c8>
 800261a:	2000      	movs	r0, #0
 800261c:	7728      	strb	r0, [r5, #28]
 800261e:	7469      	strb	r1, [r5, #17]
 8002620:	2120      	movs	r1, #32
 8002622:	7c28      	ldrb	r0, [r5, #16]
 8002624:	f7fd ff2c 	bl	8000480 <USBPD_PE_Notification>
 8002628:	a903      	add	r1, sp, #12
 800262a:	0028      	movs	r0, r5
 800262c:	f000 fa1a 	bl	8002a64 <PE_StateMachine_SNK_ReadyWait>
 8002630:	e565      	b.n	80020fe <__iar_annotation$$branch+0xc>
 8002632:	68a8      	ldr	r0, [r5, #8]
 8002634:	6881      	ldr	r1, [r0, #8]
 8002636:	2900      	cmp	r1, #0
 8002638:	d02e      	beq.n	8002698 <__iar_annotation$$branch+0x538>
 800263a:	4668      	mov	r0, sp
 800263c:	7b40      	ldrb	r0, [r0, #13]
 800263e:	4788      	blx	r1
 8002640:	280a      	cmp	r0, #10
 8002642:	d002      	beq.n	800264a <__iar_annotation$$branch+0x4ea>
 8002644:	280d      	cmp	r0, #13
 8002646:	d022      	beq.n	800268e <__iar_annotation$$branch+0x52e>
 8002648:	e026      	b.n	8002698 <__iar_annotation$$branch+0x538>
 800264a:	2201      	movs	r2, #1
 800264c:	2100      	movs	r1, #0
 800264e:	7c28      	ldrb	r0, [r5, #16]
 8002650:	68ab      	ldr	r3, [r5, #8]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	4798      	blx	r3
 8002656:	2000      	movs	r0, #0
 8002658:	9000      	str	r0, [sp, #0]
 800265a:	2359      	movs	r3, #89	@ 0x59
 800265c:	2203      	movs	r2, #3
 800265e:	2100      	movs	r1, #0
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ff55 	bl	8001510 <PE_Send_CtrlMessage>
 8002666:	2800      	cmp	r0, #0
 8002668:	d110      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 800266a:	2008      	movs	r0, #8
 800266c:	7728      	strb	r0, [r5, #28]
 800266e:	6868      	ldr	r0, [r5, #4]
 8002670:	6801      	ldr	r1, [r0, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	430a      	orrs	r2, r1
 8002676:	6002      	str	r2, [r0, #0]
 8002678:	2206      	movs	r2, #6
 800267a:	2100      	movs	r1, #0
 800267c:	7c28      	ldrb	r0, [r5, #16]
 800267e:	68ab      	ldr	r3, [r5, #8]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002682:	4798      	blx	r3
 8002684:	48b0      	ldr	r0, [pc, #704]	@ (8002948 <__iar_annotation$$branch+0x7e8>)
 8002686:	83e8      	strh	r0, [r5, #30]
 8002688:	24e1      	movs	r4, #225	@ 0xe1
 800268a:	00a4      	lsls	r4, r4, #2
 800268c:	e538      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800268e:	2000      	movs	r0, #0
 8002690:	9000      	str	r0, [sp, #0]
 8002692:	2303      	movs	r3, #3
 8002694:	220c      	movs	r2, #12
 8002696:	e7b7      	b.n	8002608 <__iar_annotation$$branch+0x4a8>
 8002698:	202a      	movs	r0, #42	@ 0x2a
 800269a:	e5e0      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800269c:	4668      	mov	r0, sp
 800269e:	7b00      	ldrb	r0, [r0, #12]
 80026a0:	2811      	cmp	r0, #17
 80026a2:	d119      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026a4:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80026a6:	49c1      	ldr	r1, [pc, #772]	@ (80029ac <__iar_annotation$$branch+0x84c>)
 80026a8:	4001      	ands	r1, r0
 80026aa:	2906      	cmp	r1, #6
 80026ac:	d114      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026ae:	7f28      	ldrb	r0, [r5, #28]
 80026b0:	2809      	cmp	r0, #9
 80026b2:	d005      	beq.n	80026c0 <__iar_annotation$$branch+0x560>
 80026b4:	2209      	movs	r2, #9
 80026b6:	2100      	movs	r1, #0
 80026b8:	7c28      	ldrb	r0, [r5, #16]
 80026ba:	68ab      	ldr	r3, [r5, #8]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	4798      	blx	r3
 80026c0:	2053      	movs	r0, #83	@ 0x53
 80026c2:	7468      	strb	r0, [r5, #17]
 80026c4:	4668      	mov	r0, sp
 80026c6:	7b00      	ldrb	r0, [r0, #12]
 80026c8:	2814      	cmp	r0, #20
 80026ca:	d005      	beq.n	80026d8 <__iar_annotation$$branch+0x578>
 80026cc:	2014      	movs	r0, #20
 80026ce:	4669      	mov	r1, sp
 80026d0:	7308      	strb	r0, [r1, #12]
 80026d2:	0028      	movs	r0, r5
 80026d4:	f7fe f93f 	bl	8000956 <PE_Clear_RxEvent>
 80026d8:	8be8      	ldrh	r0, [r5, #30]
 80026da:	03a1      	lsls	r1, r4, #14
 80026dc:	4288      	cmp	r0, r1
 80026de:	d1d5      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 80026e0:	220f      	movs	r2, #15
 80026e2:	2100      	movs	r1, #0
 80026e4:	7c28      	ldrb	r0, [r5, #16]
 80026e6:	68ab      	ldr	r3, [r5, #8]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	4798      	blx	r3
 80026ec:	68a8      	ldr	r0, [r5, #8]
 80026ee:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d100      	bne.n	80026f6 <__iar_annotation$$branch+0x596>
 80026f4:	e5b2      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80026f6:	2092      	movs	r0, #146	@ 0x92
 80026f8:	e5b1      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80026fa:	0028      	movs	r0, r5
 80026fc:	f7fe fe53 	bl	80013a6 <PE_SetPowerNegotiation>
 8002700:	220a      	movs	r2, #10
 8002702:	2100      	movs	r1, #0
 8002704:	7c28      	ldrb	r0, [r5, #16]
 8002706:	68ab      	ldr	r3, [r5, #8]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	4798      	blx	r3
 800270c:	6868      	ldr	r0, [r5, #4]
 800270e:	7800      	ldrb	r0, [r0, #0]
 8002710:	0780      	lsls	r0, r0, #30
 8002712:	0f80      	lsrs	r0, r0, #30
 8002714:	2802      	cmp	r0, #2
 8002716:	d102      	bne.n	800271e <__iar_annotation$$branch+0x5be>
 8002718:	7c28      	ldrb	r0, [r5, #16]
 800271a:	f003 f820 	bl	800575e <USBPD_PRL_SRCSetSinkNG>
 800271e:	2101      	movs	r1, #1
 8002720:	0028      	movs	r0, r5
 8002722:	f7fe f8d3 	bl	80008cc <PE_ChangePowerRole>
 8002726:	7f28      	ldrb	r0, [r5, #28]
 8002728:	2809      	cmp	r0, #9
 800272a:	d005      	beq.n	8002738 <__iar_annotation$$branch+0x5d8>
 800272c:	220b      	movs	r2, #11
 800272e:	2101      	movs	r1, #1
 8002730:	7c28      	ldrb	r0, [r5, #16]
 8002732:	68ab      	ldr	r3, [r5, #8]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	4798      	blx	r3
 8002738:	2000      	movs	r0, #0
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	235b      	movs	r3, #91	@ 0x5b
 800273e:	2206      	movs	r2, #6
 8002740:	2100      	movs	r1, #0
 8002742:	0028      	movs	r0, r5
 8002744:	f7fe fee4 	bl	8001510 <PE_Send_CtrlMessage>
 8002748:	2800      	cmp	r0, #0
 800274a:	d108      	bne.n	800275e <__iar_annotation$$branch+0x5fe>
 800274c:	220c      	movs	r2, #12
 800274e:	2100      	movs	r1, #0
 8002750:	7c28      	ldrb	r0, [r5, #16]
 8002752:	68ab      	ldr	r3, [r5, #8]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	4798      	blx	r3
 8002758:	48c1      	ldr	r0, [pc, #772]	@ (8002a60 <.text_3>)
 800275a:	83e8      	strh	r0, [r5, #30]
 800275c:	2414      	movs	r4, #20
 800275e:	7c68      	ldrb	r0, [r5, #17]
 8002760:	285b      	cmp	r0, #91	@ 0x5b
 8002762:	d00f      	beq.n	8002784 <__iar_annotation$$branch+0x624>
 8002764:	2100      	movs	r1, #0
 8002766:	0028      	movs	r0, r5
 8002768:	f7fe f8b0 	bl	80008cc <PE_ChangePowerRole>
 800276c:	2206      	movs	r2, #6
 800276e:	2101      	movs	r1, #1
 8002770:	7c28      	ldrb	r0, [r5, #16]
 8002772:	68ab      	ldr	r3, [r5, #8]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	4798      	blx	r3
 8002778:	2207      	movs	r2, #7
 800277a:	2100      	movs	r1, #0
 800277c:	7c28      	ldrb	r0, [r5, #16]
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	4798      	blx	r3
 8002784:	e4bc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	2358      	movs	r3, #88	@ 0x58
 800278a:	220a      	movs	r2, #10
 800278c:	2100      	movs	r1, #0
 800278e:	0028      	movs	r0, r5
 8002790:	f7fe febe 	bl	8001510 <PE_Send_CtrlMessage>
 8002794:	2800      	cmp	r0, #0
 8002796:	d105      	bne.n	80027a4 <__iar_annotation$$branch+0x644>
 8002798:	2008      	movs	r0, #8
 800279a:	7728      	strb	r0, [r5, #28]
 800279c:	83ee      	strh	r6, [r5, #30]
 800279e:	241b      	movs	r4, #27
 80027a0:	2202      	movs	r2, #2
 80027a2:	e7ea      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a4:	220f      	movs	r2, #15
 80027a6:	e7e8      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a8:	4669      	mov	r1, sp
 80027aa:	7b09      	ldrb	r1, [r1, #12]
 80027ac:	2911      	cmp	r1, #17
 80027ae:	d10c      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b0:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80027b2:	4201      	tst	r1, r0
 80027b4:	d109      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b6:	06c8      	lsls	r0, r1, #27
 80027b8:	0ec0      	lsrs	r0, r0, #27
 80027ba:	2803      	cmp	r0, #3
 80027bc:	d006      	beq.n	80027cc <__iar_annotation$$branch+0x66c>
 80027be:	2804      	cmp	r0, #4
 80027c0:	d02d      	beq.n	800281e <__iar_annotation$$branch+0x6be>
 80027c2:	280c      	cmp	r0, #12
 80027c4:	d029      	beq.n	800281a <__iar_annotation$$branch+0x6ba>
 80027c6:	2810      	cmp	r0, #16
 80027c8:	d032      	beq.n	8002830 <__iar_annotation$$branch+0x6d0>
 80027ca:	e0a5      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 80027cc:	6868      	ldr	r0, [r5, #4]
 80027ce:	6801      	ldr	r1, [r0, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	430a      	orrs	r2, r1
 80027d4:	6002      	str	r2, [r0, #0]
 80027d6:	485c      	ldr	r0, [pc, #368]	@ (8002948 <__iar_annotation$$branch+0x7e8>)
 80027d8:	83e8      	strh	r0, [r5, #30]
 80027da:	24e1      	movs	r4, #225	@ 0xe1
 80027dc:	00a4      	lsls	r4, r4, #2
 80027de:	7f28      	ldrb	r0, [r5, #28]
 80027e0:	2809      	cmp	r0, #9
 80027e2:	d005      	beq.n	80027f0 <__iar_annotation$$branch+0x690>
 80027e4:	2206      	movs	r2, #6
 80027e6:	2100      	movs	r1, #0
 80027e8:	7c28      	ldrb	r0, [r5, #16]
 80027ea:	68ab      	ldr	r3, [r5, #8]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	4798      	blx	r3
 80027f0:	2104      	movs	r1, #4
 80027f2:	0028      	movs	r0, r5
 80027f4:	f7fe fdd7 	bl	80013a6 <PE_SetPowerNegotiation>
 80027f8:	213a      	movs	r1, #58	@ 0x3a
 80027fa:	7c28      	ldrb	r0, [r5, #16]
 80027fc:	f7fd fe40 	bl	8000480 <USBPD_PE_Notification>
 8002800:	4668      	mov	r0, sp
 8002802:	7b00      	ldrb	r0, [r0, #12]
 8002804:	2814      	cmp	r0, #20
 8002806:	d005      	beq.n	8002814 <__iar_annotation$$branch+0x6b4>
 8002808:	2014      	movs	r0, #20
 800280a:	4669      	mov	r1, sp
 800280c:	7308      	strb	r0, [r1, #12]
 800280e:	0028      	movs	r0, r5
 8002810:	f7fe f8a1 	bl	8000956 <PE_Clear_RxEvent>
 8002814:	2059      	movs	r0, #89	@ 0x59
 8002816:	7468      	strb	r0, [r5, #17]
 8002818:	e07e      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 800281a:	213b      	movs	r1, #59	@ 0x3b
 800281c:	e000      	b.n	8002820 <__iar_annotation$$branch+0x6c0>
 800281e:	2116      	movs	r1, #22
 8002820:	7c28      	ldrb	r0, [r5, #16]
 8002822:	f7fd fe2d 	bl	8000480 <USBPD_PE_Notification>
 8002826:	4668      	mov	r0, sp
 8002828:	7b00      	ldrb	r0, [r0, #12]
 800282a:	2814      	cmp	r0, #20
 800282c:	d108      	bne.n	8002840 <__iar_annotation$$branch+0x6e0>
 800282e:	e070      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002830:	2117      	movs	r1, #23
 8002832:	7c28      	ldrb	r0, [r5, #16]
 8002834:	f7fd fe24 	bl	8000480 <USBPD_PE_Notification>
 8002838:	4668      	mov	r0, sp
 800283a:	7b00      	ldrb	r0, [r0, #12]
 800283c:	2814      	cmp	r0, #20
 800283e:	d068      	beq.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002840:	2014      	movs	r0, #20
 8002842:	4669      	mov	r1, sp
 8002844:	7308      	strb	r0, [r1, #12]
 8002846:	0028      	movs	r0, r5
 8002848:	f7fe f885 	bl	8000956 <PE_Clear_RxEvent>
 800284c:	e061      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 800284e:	2000      	movs	r0, #0
 8002850:	9004      	str	r0, [sp, #16]
 8002852:	ab04      	add	r3, sp, #16
 8002854:	aa05      	add	r2, sp, #20
 8002856:	2100      	movs	r1, #0
 8002858:	7c28      	ldrb	r0, [r5, #16]
 800285a:	68ae      	ldr	r6, [r5, #8]
 800285c:	6976      	ldr	r6, [r6, #20]
 800285e:	47b0      	blx	r6
 8002860:	2104      	movs	r1, #4
 8002862:	9804      	ldr	r0, [sp, #16]
 8002864:	f7fe fdf2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8002868:	2800      	cmp	r0, #0
 800286a:	d001      	beq.n	8002870 <__iar_annotation$$branch+0x710>
 800286c:	2003      	movs	r0, #3
 800286e:	e4b5      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 8002870:	9002      	str	r0, [sp, #8]
 8002872:	2003      	movs	r0, #3
 8002874:	9001      	str	r0, [sp, #4]
 8002876:	9804      	ldr	r0, [sp, #16]
 8002878:	0880      	lsrs	r0, r0, #2
 800287a:	9000      	str	r0, [sp, #0]
 800287c:	ab05      	add	r3, sp, #20
 800287e:	2201      	movs	r2, #1
 8002880:	2100      	movs	r1, #0
 8002882:	0028      	movs	r0, r5
 8002884:	f7fe fe6f 	bl	8001566 <PE_Send_DataMessage>
 8002888:	e43a      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800288a:	2000      	movs	r0, #0
 800288c:	9002      	str	r0, [sp, #8]
 800288e:	2003      	movs	r0, #3
 8002890:	9001      	str	r0, [sp, #4]
 8002892:	2001      	movs	r0, #1
 8002894:	9000      	str	r0, [sp, #0]
 8002896:	002b      	movs	r3, r5
 8002898:	332c      	adds	r3, #44	@ 0x2c
 800289a:	2206      	movs	r2, #6
 800289c:	2100      	movs	r1, #0
 800289e:	0028      	movs	r0, r5
 80028a0:	f7fe fe61 	bl	8001566 <PE_Send_DataMessage>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1ef      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028a8:	215d      	movs	r1, #93	@ 0x5d
 80028aa:	e655      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	2366      	movs	r3, #102	@ 0x66
 80028b0:	2214      	movs	r2, #20
 80028b2:	2100      	movs	r1, #0
 80028b4:	0028      	movs	r0, r5
 80028b6:	f7fe fe2b 	bl	8001510 <PE_Send_CtrlMessage>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d1e4      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028be:	83ee      	strh	r6, [r5, #30]
 80028c0:	241b      	movs	r4, #27
 80028c2:	214a      	movs	r1, #74	@ 0x4a
 80028c4:	7c28      	ldrb	r0, [r5, #16]
 80028c6:	f7fd fddb 	bl	8000480 <USBPD_PE_Notification>
 80028ca:	200b      	movs	r0, #11
 80028cc:	7728      	strb	r0, [r5, #28]
 80028ce:	e7db      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80028d0:	4668      	mov	r0, sp
 80028d2:	7b00      	ldrb	r0, [r0, #12]
 80028d4:	2811      	cmp	r0, #17
 80028d6:	d11f      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028d8:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80028da:	0bc1      	lsrs	r1, r0, #15
 80028dc:	d01c      	beq.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028de:	06c0      	lsls	r0, r0, #27
 80028e0:	0ec0      	lsrs	r0, r0, #27
 80028e2:	280c      	cmp	r0, #12
 80028e4:	d118      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028e6:	2304      	movs	r3, #4
 80028e8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80028ea:	1d02      	adds	r2, r0, #4
 80028ec:	210a      	movs	r1, #10
 80028ee:	7c28      	ldrb	r0, [r5, #16]
 80028f0:	68ac      	ldr	r4, [r5, #8]
 80028f2:	69a4      	ldr	r4, [r4, #24]
 80028f4:	47a0      	blx	r4
 80028f6:	4668      	mov	r0, sp
 80028f8:	7b00      	ldrb	r0, [r0, #12]
 80028fa:	2814      	cmp	r0, #20
 80028fc:	d005      	beq.n	800290a <__iar_annotation$$branch+0x7aa>
 80028fe:	2014      	movs	r0, #20
 8002900:	4669      	mov	r1, sp
 8002902:	7308      	strb	r0, [r1, #12]
 8002904:	0028      	movs	r0, r5
 8002906:	f7fe f826 	bl	8000956 <PE_Clear_RxEvent>
 800290a:	214b      	movs	r1, #75	@ 0x4b
 800290c:	7c28      	ldrb	r0, [r5, #16]
 800290e:	f7fd fdb7 	bl	8000480 <USBPD_PE_Notification>
 8002912:	2003      	movs	r0, #3
 8002914:	7468      	strb	r0, [r5, #17]
 8002916:	2400      	movs	r4, #0
 8002918:	8be8      	ldrh	r0, [r5, #30]
 800291a:	2180      	movs	r1, #128	@ 0x80
 800291c:	0209      	lsls	r1, r1, #8
 800291e:	4288      	cmp	r0, r1
 8002920:	d1b2      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 8002922:	e041      	b.n	80029a8 <__iar_annotation$$branch+0x848>
 8002924:	4895      	ldr	r0, [pc, #596]	@ (8002b7c <.text_5>)
 8002926:	182f      	adds	r7, r5, r0
 8002928:	9400      	str	r4, [sp, #0]
 800292a:	2339      	movs	r3, #57	@ 0x39
 800292c:	783a      	ldrb	r2, [r7, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	0028      	movs	r0, r5
 8002932:	f7fe fded 	bl	8001510 <PE_Send_CtrlMessage>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1a6      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 800293a:	7878      	ldrb	r0, [r7, #1]
 800293c:	7728      	strb	r0, [r5, #28]
 800293e:	2144      	movs	r1, #68	@ 0x44
 8002940:	7c28      	ldrb	r0, [r5, #16]
 8002942:	f7fd fd9d 	bl	8000480 <USBPD_PE_Notification>
 8002946:	e4b8      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002948:	00008384 	.word	0x00008384
 800294c:	4668      	mov	r0, sp
 800294e:	7b00      	ldrb	r0, [r0, #12]
 8002950:	2814      	cmp	r0, #20
 8002952:	d024      	beq.n	800299e <__iar_annotation$$branch+0x83e>
 8002954:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002956:	0bc0      	lsrs	r0, r0, #15
 8002958:	d00e      	beq.n	8002978 <__iar_annotation$$branch+0x818>
 800295a:	0028      	movs	r0, r5
 800295c:	f7fe fe40 	bl	80015e0 <PE_Check_ExtendedMessage>
 8002960:	4668      	mov	r0, sp
 8002962:	7b00      	ldrb	r0, [r0, #12]
 8002964:	2814      	cmp	r0, #20
 8002966:	d005      	beq.n	8002974 <__iar_annotation$$branch+0x814>
 8002968:	2014      	movs	r0, #20
 800296a:	4669      	mov	r1, sp
 800296c:	7308      	strb	r0, [r1, #12]
 800296e:	0028      	movs	r0, r5
 8002970:	f7fd fff1 	bl	8000956 <PE_Clear_RxEvent>
 8002974:	2000      	movs	r0, #0
 8002976:	83e8      	strh	r0, [r5, #30]
 8002978:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800297a:	490c      	ldr	r1, [pc, #48]	@ (80029ac <__iar_annotation$$branch+0x84c>)
 800297c:	4001      	ands	r1, r0
 800297e:	2910      	cmp	r1, #16
 8002980:	d10d      	bne.n	800299e <__iar_annotation$$branch+0x83e>
 8002982:	2003      	movs	r0, #3
 8002984:	7468      	strb	r0, [r5, #17]
 8002986:	2400      	movs	r4, #0
 8002988:	4668      	mov	r0, sp
 800298a:	7b00      	ldrb	r0, [r0, #12]
 800298c:	2814      	cmp	r0, #20
 800298e:	d005      	beq.n	800299c <__iar_annotation$$branch+0x83c>
 8002990:	2014      	movs	r0, #20
 8002992:	4669      	mov	r1, sp
 8002994:	7308      	strb	r0, [r1, #12]
 8002996:	0028      	movs	r0, r5
 8002998:	f7fd ffdd 	bl	8000956 <PE_Clear_RxEvent>
 800299c:	83ec      	strh	r4, [r5, #30]
 800299e:	8be8      	ldrh	r0, [r5, #30]
 80029a0:	2180      	movs	r1, #128	@ 0x80
 80029a2:	0209      	lsls	r1, r1, #8
 80029a4:	4288      	cmp	r0, r1
 80029a6:	d11c      	bne.n	80029e2 <__iar_annotation$$branch+0x882>
 80029a8:	2003      	movs	r0, #3
 80029aa:	e458      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80029ac:	0000f01f 	.word	0x0000f01f
 80029b0:	0028      	movs	r0, r5
 80029b2:	f7fe ff37 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80029b6:	e63b      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029b8:	a903      	add	r1, sp, #12
 80029ba:	0028      	movs	r0, r5
 80029bc:	f7fe f9d4 	bl	8000d68 <PE_SubStateMachine_Generic>
 80029c0:	e636      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029c2:	a903      	add	r1, sp, #12
 80029c4:	0028      	movs	r0, r5
 80029c6:	f001 f9ef 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80029ca:	0004      	movs	r4, r0
 80029cc:	6868      	ldr	r0, [r5, #4]
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	0401      	lsls	r1, r0, #16
 80029d2:	0fc9      	lsrs	r1, r1, #31
 80029d4:	d006      	beq.n	80029e4 <__iar_annotation$$branch+0x884>
 80029d6:	6828      	ldr	r0, [r5, #0]
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	4668      	mov	r0, sp
 80029dc:	7b40      	ldrb	r0, [r0, #13]
 80029de:	f002 fee1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80029e2:	e751      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029e4:	2101      	movs	r1, #1
 80029e6:	e7f8      	b.n	80029da <__iar_annotation$$branch+0x87a>
 80029e8:	4668      	mov	r0, sp
 80029ea:	7b01      	ldrb	r1, [r0, #12]
 80029ec:	0028      	movs	r0, r5
 80029ee:	f002 fc3b 	bl	8005268 <PE_StateMachine_UVDM>
 80029f2:	e749      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029f4:	2000      	movs	r0, #0
 80029f6:	9000      	str	r0, [sp, #0]
 80029f8:	2358      	movs	r3, #88	@ 0x58
 80029fa:	2213      	movs	r2, #19
 80029fc:	2100      	movs	r1, #0
 80029fe:	0028      	movs	r0, r5
 8002a00:	f7fe fd86 	bl	8001510 <PE_Send_CtrlMessage>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1f4      	bne.n	80029f2 <__iar_annotation$$branch+0x892>
 8002a08:	2009      	movs	r0, #9
 8002a0a:	7728      	strb	r0, [r5, #28]
 8002a0c:	e455      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002a0e:	6968      	ldr	r0, [r5, #20]
 8002a10:	2701      	movs	r7, #1
 8002a12:	0b41      	lsrs	r1, r0, #13
 8002a14:	4039      	ands	r1, r7
 8002a16:	d019      	beq.n	8002a4c <__iar_annotation$$branch+0x8ec>
 8002a18:	0b80      	lsrs	r0, r0, #14
 8002a1a:	4038      	ands	r0, r7
 8002a1c:	d007      	beq.n	8002a2e <__iar_annotation$$branch+0x8ce>
 8002a1e:	215b      	movs	r1, #91	@ 0x5b
 8002a20:	7c28      	ldrb	r0, [r5, #16]
 8002a22:	f7fd fd2d 	bl	8000480 <USBPD_PE_Notification>
 8002a26:	6968      	ldr	r0, [r5, #20]
 8002a28:	4955      	ldr	r1, [pc, #340]	@ (8002b80 <.text_6>)
 8002a2a:	4001      	ands	r1, r0
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	2003      	movs	r0, #3
 8002a30:	7468      	strb	r0, [r5, #17]
 8002a32:	7ca9      	ldrb	r1, [r5, #18]
 8002a34:	2903      	cmp	r1, #3
 8002a36:	d008      	beq.n	8002a4a <__iar_annotation$$branch+0x8ea>
 8002a38:	74a8      	strb	r0, [r5, #18]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2203      	movs	r2, #3
 8002a42:	7c29      	ldrb	r1, [r5, #16]
 8002a44:	2004      	movs	r0, #4
 8002a46:	6834      	ldr	r4, [r6, #0]
 8002a48:	47a0      	blx	r4
 8002a4a:	2401      	movs	r4, #1
 8002a4c:	6968      	ldr	r0, [r5, #20]
 8002a4e:	494d      	ldr	r1, [pc, #308]	@ (8002b84 <.text_7>)
 8002a50:	4001      	ands	r1, r0
 8002a52:	6169      	str	r1, [r5, #20]
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	d101      	bne.n	8002a5c <__iar_annotation$$branch>

08002a58 <__iar_annotation$$branch>:
 8002a58:	f7ff fa3e 	bl	8001ed8 <USBPD_PE_StateMachine_SNK+0xb0>

08002a5c <__iar_annotation$$branch>:
 8002a5c:	f7ff fb8e 	bl	800217c <__iar_annotation$$branch+0x1c>

08002a60 <.text_3>:
 8002a60:	00008014 	.word	0x00008014

08002a64 <PE_StateMachine_SNK_ReadyWait>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0004      	movs	r4, r0
 8002a68:	000e      	movs	r6, r1
 8002a6a:	2702      	movs	r7, #2
 8002a6c:	7830      	ldrb	r0, [r6, #0]
 8002a6e:	2814      	cmp	r0, #20
 8002a70:	d00b      	beq.n	8002a8a <PE_StateMachine_SNK_ReadyWait+0x26>
 8002a72:	0020      	movs	r0, r4
 8002a74:	f7fe fffc 	bl	8001a70 <PE_ManageRXEvent>
 8002a78:	7830      	ldrb	r0, [r6, #0]
 8002a7a:	2814      	cmp	r0, #20
 8002a7c:	d07b      	beq.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a7e:	2014      	movs	r0, #20
 8002a80:	7030      	strb	r0, [r6, #0]
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7fd ff67 	bl	8000956 <PE_Clear_RxEvent>
 8002a88:	e075      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a8a:	6961      	ldr	r1, [r4, #20]
 8002a8c:	0cc8      	lsrs	r0, r1, #19
 8002a8e:	03be      	lsls	r6, r7, #14
 8002a90:	2700      	movs	r7, #0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d021      	beq.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x76>
 8002a96:	8c21      	ldrh	r1, [r4, #32]
 8002a98:	42b1      	cmp	r1, r6
 8002a9a:	d111      	bne.n	8002ac0 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002a9c:	200f      	movs	r0, #15
 8002a9e:	7460      	strb	r0, [r4, #17]
 8002aa0:	9700      	str	r7, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2270      	movs	r2, #112	@ 0x70
 8002aa6:	7c21      	ldrb	r1, [r4, #16]
 8002aa8:	2009      	movs	r0, #9
 8002aaa:	4d37      	ldr	r5, [pc, #220]	@ (8002b88 <.text_8>)
 8002aac:	682d      	ldr	r5, [r5, #0]
 8002aae:	47a8      	blx	r5
 8002ab0:	2098      	movs	r0, #152	@ 0x98
 8002ab2:	0080      	lsls	r0, r0, #2
 8002ab4:	5c20      	ldrb	r0, [r4, r0]
 8002ab6:	1c40      	adds	r0, r0, #1
 8002ab8:	2198      	movs	r1, #152	@ 0x98
 8002aba:	0089      	lsls	r1, r1, #2
 8002abc:	5460      	strb	r0, [r4, r1]
 8002abe:	e05a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ac0:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002ac2:	0509      	lsls	r1, r1, #20
 8002ac4:	0f49      	lsrs	r1, r1, #29
 8002ac6:	180a      	adds	r2, r1, r0
 8002ac8:	2333      	movs	r3, #51	@ 0x33
 8002aca:	435a      	muls	r2, r3
 8002acc:	4316      	orrs	r6, r2
 8002ace:	8426      	strh	r6, [r4, #32]
 8002ad0:	180f      	adds	r7, r1, r0
 8002ad2:	2033      	movs	r0, #51	@ 0x33
 8002ad4:	4347      	muls	r7, r0
 8002ad6:	b2bf      	uxth	r7, r7
 8002ad8:	e04d      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ada:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8002adc:	42b0      	cmp	r0, r6
 8002ade:	d104      	bne.n	8002aea <PE_StateMachine_SNK_ReadyWait+0x86>
 8002ae0:	2045      	movs	r0, #69	@ 0x45
 8002ae2:	7460      	strb	r0, [r4, #17]
 8002ae4:	430e      	orrs	r6, r1
 8002ae6:	6166      	str	r6, [r4, #20]
 8002ae8:	e045      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002aea:	7c20      	ldrb	r0, [r4, #16]
 8002aec:	f7fd ff58 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d128      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002af4:	2032      	movs	r0, #50	@ 0x32
 8002af6:	5c20      	ldrb	r0, [r4, r0]
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d024      	beq.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	2203      	movs	r2, #3
 8002b04:	4002      	ands	r2, r0
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d007      	beq.n	8002b1a <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002b0a:	4001      	ands	r1, r0
 8002b0c:	2902      	cmp	r1, #2
 8002b0e:	d11a      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b10:	7c20      	ldrb	r0, [r4, #16]
 8002b12:	f002 fe3b 	bl	800578c <USBPD_PRL_IsResistor_SinkTxOK>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d115      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b1a:	2033      	movs	r0, #51	@ 0x33
 8002b1c:	5c20      	ldrb	r0, [r4, r0]
 8002b1e:	2131      	movs	r1, #49	@ 0x31
 8002b20:	5460      	strb	r0, [r4, r1]
 8002b22:	2032      	movs	r0, #50	@ 0x32
 8002b24:	5c20      	ldrb	r0, [r4, r0]
 8002b26:	7460      	strb	r0, [r4, #17]
 8002b28:	2845      	cmp	r0, #69	@ 0x45
 8002b2a:	d102      	bne.n	8002b32 <PE_StateMachine_SNK_ReadyWait+0xce>
 8002b2c:	6960      	ldr	r0, [r4, #20]
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	6166      	str	r6, [r4, #20]
 8002b32:	2132      	movs	r1, #50	@ 0x32
 8002b34:	5467      	strb	r7, [r4, r1]
 8002b36:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002b38:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002b3a:	6960      	ldr	r0, [r4, #20]
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	01c9      	lsls	r1, r1, #7
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6161      	str	r1, [r4, #20]
 8002b44:	e017      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b46:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002b48:	42b0      	cmp	r0, r6
 8002b4a:	d109      	bne.n	8002b60 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002b4c:	8467      	strh	r7, [r4, #34]	@ 0x22
 8002b4e:	2098      	movs	r0, #152	@ 0x98
 8002b50:	0080      	lsls	r0, r0, #2
 8002b52:	1820      	adds	r0, r4, r0
 8002b54:	7881      	ldrb	r1, [r0, #2]
 8002b56:	1c49      	adds	r1, r1, #1
 8002b58:	7081      	strb	r1, [r0, #2]
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	7460      	strb	r0, [r4, #17]
 8002b5e:	e00a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7fe fc47 	bl	80013f4 <PE_CalculateMinTiming>
 8002b66:	2132      	movs	r1, #50	@ 0x32
 8002b68:	5c61      	ldrb	r1, [r4, r1]
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d002      	beq.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d300      	bcc.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b72:	2002      	movs	r0, #2
 8002b74:	0007      	movs	r7, r0
 8002b76:	0038      	movs	r0, r7
 8002b78:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002b7c <.text_5>:
 8002b7c:	0000025e 	.word	0x0000025e

08002b80 <.text_6>:
 8002b80:	ffffbfff 	.word	0xffffbfff

08002b84 <.text_7>:
 8002b84:	ffffdfff 	.word	0xffffdfff

08002b88 <.text_8>:
 8002b88:	20000000 	.word	0x20000000

08002b8c <USBPD_PE_StateMachine_SRC>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	0005      	movs	r5, r0
 8002b92:	4829      	ldr	r0, [pc, #164]	@ (8002c38 <USBPD_PE_StateMachine_SRC+0xac>)
 8002b94:	00a9      	lsls	r1, r5, #2
 8002b96:	5844      	ldr	r4, [r0, r1]
 8002b98:	7c60      	ldrb	r0, [r4, #17]
 8002b9a:	2848      	cmp	r0, #72	@ 0x48
 8002b9c:	d134      	bne.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f7fd ffc0 	bl	8000b24 <PE_Reset_ZI>
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	f7fd fff3 	bl	8000b90 <PE_Reset_Counter>
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	7900      	ldrb	r0, [r0, #4]
 8002bae:	0783      	lsls	r3, r0, #30
 8002bb0:	0f9b      	lsrs	r3, r3, #30
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	7c20      	ldrb	r0, [r4, #16]
 8002bb8:	f002 fd83 	bl	80056c2 <USBPD_PRL_SetHeader>
 8002bbc:	6860      	ldr	r0, [r4, #4]
 8002bbe:	6801      	ldr	r1, [r0, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	6002      	str	r2, [r0, #0]
 8002bc6:	6860      	ldr	r0, [r4, #4]
 8002bc8:	6801      	ldr	r1, [r0, #0]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4391      	bics	r1, r2
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	7912      	ldrb	r2, [r2, #4]
 8002bd2:	0792      	lsls	r2, r2, #30
 8002bd4:	0f92      	lsrs	r2, r2, #30
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	6002      	str	r2, [r0, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	7c20      	ldrb	r0, [r4, #16]
 8002bde:	f002 fde1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002be2:	7c20      	ldrb	r0, [r4, #16]
 8002be4:	f003 f84a 	bl	8005c7c <USBPD_PRL_Reset>
 8002be8:	2002      	movs	r0, #2
 8002bea:	7460      	strb	r0, [r4, #17]
 8002bec:	7ca0      	ldrb	r0, [r4, #18]
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d00a      	beq.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	74a0      	strb	r0, [r4, #18]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	7c21      	ldrb	r1, [r4, #16]
 8002c00:	2004      	movs	r0, #4
 8002c02:	4eca      	ldr	r6, [pc, #808]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002c04:	6836      	ldr	r6, [r6, #0]
 8002c06:	47b0      	blx	r6
 8002c08:	6960      	ldr	r0, [r4, #20]
 8002c0a:	0341      	lsls	r1, r0, #13
 8002c0c:	0fc9      	lsrs	r1, r1, #31
 8002c0e:	d006      	beq.n	8002c1e <USBPD_PE_StateMachine_SRC+0x92>
 8002c10:	49c7      	ldr	r1, [pc, #796]	@ (8002f30 <__iar_annotation$$branch+0x70>)
 8002c12:	4001      	ands	r1, r0
 8002c14:	6161      	str	r1, [r4, #20]
 8002c16:	2164      	movs	r1, #100	@ 0x64
 8002c18:	7c20      	ldrb	r0, [r4, #16]
 8002c1a:	f7fd fc31 	bl	8000480 <USBPD_PE_Notification>
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f7fd fe62 	bl	80008e8 <PE_Get_RxEvent>
 8002c24:	4669      	mov	r1, sp
 8002c26:	7308      	strb	r0, [r1, #12]
 8002c28:	4668      	mov	r0, sp
 8002c2a:	7b00      	ldrb	r0, [r0, #12]
 8002c2c:	2803      	cmp	r0, #3
 8002c2e:	d105      	bne.n	8002c3c <USBPD_PE_StateMachine_SRC+0xb0>
 8002c30:	2001      	movs	r0, #1
 8002c32:	b007      	add	sp, #28
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000023c 	.word	0x2000023c
 8002c3c:	4668      	mov	r0, sp
 8002c3e:	7345      	strb	r5, [r0, #13]
 8002c40:	6860      	ldr	r0, [r4, #4]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	04c1      	lsls	r1, r0, #19
 8002c46:	0fc9      	lsrs	r1, r1, #31
 8002c48:	d100      	bne.n	8002c4c <USBPD_PE_StateMachine_SRC+0xc0>
 8002c4a:	e13b      	b.n	8002ec4 <__iar_annotation$$branch+0x4>
 8002c4c:	6960      	ldr	r0, [r4, #20]
 8002c4e:	0381      	lsls	r1, r0, #14
 8002c50:	0fc9      	lsrs	r1, r1, #31
 8002c52:	d100      	bne.n	8002c56 <USBPD_PE_StateMachine_SRC+0xca>
 8002c54:	e144      	b.n	8002ee0 <__iar_annotation$$branch+0x20>
 8002c56:	4668      	mov	r0, sp
 8002c58:	7b40      	ldrb	r0, [r0, #13]
 8002c5a:	f002 fd9b 	bl	8005794 <USBPD_PRL_FastRoleSwapSignalling>
 8002c5e:	20a6      	movs	r0, #166	@ 0xa6
 8002c60:	7460      	strb	r0, [r4, #17]
 8002c62:	2109      	movs	r1, #9
 8002c64:	7721      	strb	r1, [r4, #28]
 8002c66:	2100      	movs	r1, #0
 8002c68:	2232      	movs	r2, #50	@ 0x32
 8002c6a:	54a1      	strb	r1, [r4, r2]
 8002c6c:	6961      	ldr	r1, [r4, #20]
 8002c6e:	4ab1      	ldr	r2, [pc, #708]	@ (8002f34 <__iar_annotation$$branch+0x74>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	6162      	str	r2, [r4, #20]
 8002c74:	49b0      	ldr	r1, [pc, #704]	@ (8002f38 <__iar_annotation$$branch+0x78>)
 8002c76:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8002c78:	7ca1      	ldrb	r1, [r4, #18]
 8002c7a:	29a6      	cmp	r1, #166	@ 0xa6
 8002c7c:	d000      	beq.n	8002c80 <USBPD_PE_StateMachine_SRC+0xf4>
 8002c7e:	e125      	b.n	8002ecc <__iar_annotation$$branch+0xc>
 8002c80:	2502      	movs	r5, #2
 8002c82:	4668      	mov	r0, sp
 8002c84:	7b00      	ldrb	r0, [r0, #12]
 8002c86:	2811      	cmp	r0, #17
 8002c88:	d11f      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c8a:	6860      	ldr	r0, [r4, #4]
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	0701      	lsls	r1, r0, #28
 8002c90:	0fc9      	lsrs	r1, r1, #31
 8002c92:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8002c94:	0680      	lsls	r0, r0, #26
 8002c96:	0fc2      	lsrs	r2, r0, #31
 8002c98:	4291      	cmp	r1, r2
 8002c9a:	d116      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c9c:	2014      	movs	r0, #20
 8002c9e:	4669      	mov	r1, sp
 8002ca0:	7308      	strb	r0, [r1, #12]
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	f7fd fe57 	bl	8000956 <PE_Clear_RxEvent>
 8002ca8:	2092      	movs	r0, #146	@ 0x92
 8002caa:	7460      	strb	r0, [r4, #17]
 8002cac:	7ca0      	ldrb	r0, [r4, #18]
 8002cae:	2892      	cmp	r0, #146	@ 0x92
 8002cb0:	d100      	bne.n	8002cb4 <USBPD_PE_StateMachine_SRC+0x128>
 8002cb2:	e155      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002cb4:	2092      	movs	r0, #146	@ 0x92
 8002cb6:	74a0      	strb	r0, [r4, #18]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2292      	movs	r2, #146	@ 0x92
 8002cc0:	7c21      	ldrb	r1, [r4, #16]
 8002cc2:	2004      	movs	r0, #4
 8002cc4:	4e99      	ldr	r6, [pc, #612]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002cc6:	6836      	ldr	r6, [r6, #0]
 8002cc8:	47b0      	blx	r6
 8002cca:	7c60      	ldrb	r0, [r4, #17]
 8002ccc:	499b      	ldr	r1, [pc, #620]	@ (8002f3c <__iar_annotation$$branch+0x7c>)
 8002cce:	1866      	adds	r6, r4, r1
 8002cd0:	4f9b      	ldr	r7, [pc, #620]	@ (8002f40 <__iar_annotation$$branch+0x80>)
 8002cd2:	499c      	ldr	r1, [pc, #624]	@ (8002f44 <__iar_annotation$$branch+0x84>)
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <USBPD_PE_StateMachine_SRC+0x14e>
 8002cd8:	e136      	b.n	8002f48 <__iar_annotation$$branch+0x88>
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	d067      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002cde:	1e52      	subs	r2, r2, #1
 8002ce0:	d100      	bne.n	8002ce4 <USBPD_PE_StateMachine_SRC+0x158>
 8002ce2:	e149      	b.n	8002f78 <__iar_annotation$$branch+0xb8>
 8002ce4:	1e52      	subs	r2, r2, #1
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d801      	bhi.n	8002cee <__iar_annotation$$branch+0x4>

08002cea <__iar_annotation$$branch>:
 8002cea:	f000 fd90 	bl	800380e <__iar_annotation$$branch+0x94e>
 8002cee:	1e92      	subs	r2, r2, #2
 8002cf0:	d100      	bne.n	8002cf4 <__iar_annotation$$branch+0xa>
 8002cf2:	e189      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002cf4:	1e52      	subs	r2, r2, #1
 8002cf6:	d100      	bne.n	8002cfa <__iar_annotation$$branch+0x10>
 8002cf8:	e18b      	b.n	8003012 <__iar_annotation$$branch+0x152>
 8002cfa:	1e52      	subs	r2, r2, #1
 8002cfc:	d100      	bne.n	8002d00 <__iar_annotation$$branch+0x16>
 8002cfe:	e190      	b.n	8003022 <__iar_annotation$$branch+0x162>
 8002d00:	1e52      	subs	r2, r2, #1
 8002d02:	d100      	bne.n	8002d06 <__iar_annotation$$branch+0x1c>
 8002d04:	e1e1      	b.n	80030ca <__iar_annotation$$branch+0x20a>
 8002d06:	1e52      	subs	r2, r2, #1
 8002d08:	d100      	bne.n	8002d0c <__iar_annotation$$branch+0x22>
 8002d0a:	e223      	b.n	8003154 <__iar_annotation$$branch+0x294>
 8002d0c:	1ed2      	subs	r2, r2, #3
 8002d0e:	d100      	bne.n	8002d12 <__iar_annotation$$branch+0x28>
 8002d10:	e276      	b.n	8003200 <__iar_annotation$$branch+0x340>
 8002d12:	1e52      	subs	r2, r2, #1
 8002d14:	d100      	bne.n	8002d18 <__iar_annotation$$branch+0x2e>
 8002d16:	e286      	b.n	8003226 <__iar_annotation$$branch+0x366>
 8002d18:	1e52      	subs	r2, r2, #1
 8002d1a:	d100      	bne.n	8002d1e <__iar_annotation$$branch+0x34>
 8002d1c:	e11d      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002d1e:	1e52      	subs	r2, r2, #1
 8002d20:	d100      	bne.n	8002d24 <__iar_annotation$$branch+0x3a>
 8002d22:	e30d      	b.n	8003340 <__iar_annotation$$branch+0x480>
 8002d24:	1e52      	subs	r2, r2, #1
 8002d26:	d100      	bne.n	8002d2a <__iar_annotation$$branch+0x40>
 8002d28:	e2c6      	b.n	80032b8 <__iar_annotation$$branch+0x3f8>
 8002d2a:	1e52      	subs	r2, r2, #1
 8002d2c:	d100      	bne.n	8002d30 <__iar_annotation$$branch+0x46>
 8002d2e:	e2cc      	b.n	80032ca <__iar_annotation$$branch+0x40a>
 8002d30:	1e52      	subs	r2, r2, #1
 8002d32:	d100      	bne.n	8002d36 <__iar_annotation$$branch+0x4c>
 8002d34:	e2d8      	b.n	80032e8 <__iar_annotation$$branch+0x428>
 8002d36:	1e52      	subs	r2, r2, #1
 8002d38:	d100      	bne.n	8002d3c <__iar_annotation$$branch+0x52>
 8002d3a:	e389      	b.n	8003450 <__iar_annotation$$branch+0x590>
 8002d3c:	1e52      	subs	r2, r2, #1
 8002d3e:	d100      	bne.n	8002d42 <__iar_annotation$$branch+0x58>
 8002d40:	e32b      	b.n	800339a <__iar_annotation$$branch+0x4da>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	d100      	bne.n	8002d48 <__iar_annotation$$branch+0x5e>
 8002d46:	e332      	b.n	80033ae <__iar_annotation$$branch+0x4ee>
 8002d48:	1e52      	subs	r2, r2, #1
 8002d4a:	d100      	bne.n	8002d4e <__iar_annotation$$branch+0x64>
 8002d4c:	e1d5      	b.n	80030fa <__iar_annotation$$branch+0x23a>
 8002d4e:	1e52      	subs	r2, r2, #1
 8002d50:	d100      	bne.n	8002d54 <__iar_annotation$$branch+0x6a>
 8002d52:	e34c      	b.n	80033ee <__iar_annotation$$branch+0x52e>
 8002d54:	1e52      	subs	r2, r2, #1
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d929      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002d5a:	1e92      	subs	r2, r2, #2
 8002d5c:	d100      	bne.n	8002d60 <__iar_annotation$$branch+0x76>
 8002d5e:	e3a3      	b.n	80034a8 <__iar_annotation$$branch+0x5e8>
 8002d60:	1e52      	subs	r2, r2, #1
 8002d62:	d100      	bne.n	8002d66 <__iar_annotation$$branch+0x7c>
 8002d64:	e3b0      	b.n	80034c8 <__iar_annotation$$branch+0x608>
 8002d66:	1e92      	subs	r2, r2, #2
 8002d68:	d021      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002d6a:	1e52      	subs	r2, r2, #1
 8002d6c:	d101      	bne.n	8002d72 <__iar_annotation$$branch+0x4>

08002d6e <__iar_annotation$$branch>:
 8002d6e:	f000 fc88 	bl	8003682 <__iar_annotation$$branch+0x7c2>
 8002d72:	1e52      	subs	r2, r2, #1
 8002d74:	d101      	bne.n	8002d7a <__iar_annotation$$branch+0x4>

08002d76 <__iar_annotation$$branch>:
 8002d76:	f000 fc9a 	bl	80036ae <__iar_annotation$$branch+0x7ee>
 8002d7a:	1e52      	subs	r2, r2, #1
 8002d7c:	d101      	bne.n	8002d82 <__iar_annotation$$branch+0x4>

08002d7e <__iar_annotation$$branch>:
 8002d7e:	f000 fce6 	bl	800374e <__iar_annotation$$branch+0x88e>
 8002d82:	1e52      	subs	r2, r2, #1
 8002d84:	d101      	bne.n	8002d8a <__iar_annotation$$branch+0x4>

08002d86 <__iar_annotation$$branch>:
 8002d86:	f000 fd0f 	bl	80037a8 <__iar_annotation$$branch+0x8e8>
 8002d8a:	1e52      	subs	r2, r2, #1
 8002d8c:	d101      	bne.n	8002d92 <__iar_annotation$$branch+0x4>

08002d8e <__iar_annotation$$branch>:
 8002d8e:	f000 fbe5 	bl	800355c <__iar_annotation$$branch+0x69c>
 8002d92:	1e92      	subs	r2, r2, #2
 8002d94:	d101      	bne.n	8002d9a <__iar_annotation$$branch+0x4>

08002d96 <__iar_annotation$$branch>:
 8002d96:	f000 fc0a 	bl	80035ae <__iar_annotation$$branch+0x6ee>
 8002d9a:	1e52      	subs	r2, r2, #1
 8002d9c:	d101      	bne.n	8002da2 <__iar_annotation$$branch+0x4>

08002d9e <__iar_annotation$$branch>:
 8002d9e:	f000 fc2e 	bl	80035fe <__iar_annotation$$branch+0x73e>
 8002da2:	1e52      	subs	r2, r2, #1
 8002da4:	d101      	bne.n	8002daa <__iar_annotation$$branch+0x4>

08002da6 <__iar_annotation$$branch>:
 8002da6:	f000 fc49 	bl	800363c <__iar_annotation$$branch+0x77c>
 8002daa:	1e52      	subs	r2, r2, #1
 8002dac:	2a02      	cmp	r2, #2
 8002dae:	d801      	bhi.n	8002db4 <__iar_annotation$$branch+0x4>

08002db0 <__iar_annotation$$branch>:
 8002db0:	f000 fe1b 	bl	80039ea <__iar_annotation$$branch+0x106>
 8002db4:	1ed2      	subs	r2, r2, #3
 8002db6:	d101      	bne.n	8002dbc <__iar_annotation$$branch+0x4>

08002db8 <__iar_annotation$$branch>:
 8002db8:	f000 fbf4 	bl	80035a4 <__iar_annotation$$branch+0x6e4>
 8002dbc:	1e52      	subs	r2, r2, #1
 8002dbe:	d101      	bne.n	8002dc4 <__iar_annotation$$branch+0x4>

08002dc0 <__iar_annotation$$branch>:
 8002dc0:	f000 fd96 	bl	80038f0 <__iar_annotation$$branch+0xc>
 8002dc4:	1e52      	subs	r2, r2, #1
 8002dc6:	d0f2      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dc8:	1e52      	subs	r2, r2, #1
 8002dca:	d101      	bne.n	8002dd0 <__iar_annotation$$branch+0x4>

08002dcc <__iar_annotation$$branch>:
 8002dcc:	f000 fda1 	bl	8003912 <__iar_annotation$$branch+0x2e>
 8002dd0:	1e52      	subs	r2, r2, #1
 8002dd2:	d101      	bne.n	8002dd8 <__iar_annotation$$branch+0x4>

08002dd4 <__iar_annotation$$branch>:
 8002dd4:	f000 fdcf 	bl	8003976 <__iar_annotation$$branch+0x92>
 8002dd8:	1e52      	subs	r2, r2, #1
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	d9e7      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dde:	1e92      	subs	r2, r2, #2
 8002de0:	d001      	beq.n	8002de6 <__iar_annotation$$branch+0x12>
 8002de2:	1e92      	subs	r2, r2, #2
 8002de4:	2a05      	cmp	r2, #5
 8002de6:	d801      	bhi.n	8002dec <__iar_annotation$$branch+0x4>

08002de8 <__iar_annotation$$branch>:
 8002de8:	f000 fdfb 	bl	80039e2 <__iar_annotation$$branch+0xfe>
 8002dec:	1f92      	subs	r2, r2, #6
 8002dee:	d101      	bne.n	8002df4 <__iar_annotation$$branch+0x4>

08002df0 <__iar_annotation$$branch>:
 8002df0:	f000 fdd2 	bl	8003998 <__iar_annotation$$branch+0xb4>
 8002df4:	1e52      	subs	r2, r2, #1
 8002df6:	2a03      	cmp	r2, #3
 8002df8:	d9d9      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfa:	3a11      	subs	r2, #17
 8002dfc:	d0d7      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfe:	1e52      	subs	r2, r2, #1
 8002e00:	d100      	bne.n	8002e04 <__iar_annotation$$branch+0x14>
 8002e02:	e150      	b.n	80030a6 <__iar_annotation$$branch+0x1e6>
 8002e04:	3a0f      	subs	r2, #15
 8002e06:	d101      	bne.n	8002e0c <__iar_annotation$$branch+0x4>

08002e08 <__iar_annotation$$branch>:
 8002e08:	f000 fce9 	bl	80037de <__iar_annotation$$branch+0x91e>
 8002e0c:	1fd2      	subs	r2, r2, #7
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	d9cd      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e12:	1f52      	subs	r2, r2, #5
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d9ca      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e18:	3a0d      	subs	r2, #13
 8002e1a:	d0c8      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e1c:	3a12      	subs	r2, #18
 8002e1e:	d101      	bne.n	8002e24 <__iar_annotation$$branch+0x4>

08002e20 <__iar_annotation$$branch>:
 8002e20:	f000 fe18 	bl	8003a54 <__iar_annotation$$branch+0x62>
 8002e24:	3a0c      	subs	r2, #12
 8002e26:	d100      	bne.n	8002e2a <__iar_annotation$$branch+0xa>
 8002e28:	e09a      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002e2a:	1e52      	subs	r2, r2, #1
 8002e2c:	2a02      	cmp	r2, #2
 8002e2e:	d9be      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e30:	1ed2      	subs	r2, r2, #3
 8002e32:	d100      	bne.n	8002e36 <__iar_annotation$$branch+0x16>
 8002e34:	e213      	b.n	800325e <__iar_annotation$$branch+0x39e>
 8002e36:	1e52      	subs	r2, r2, #1
 8002e38:	d100      	bne.n	8002e3c <__iar_annotation$$branch+0x1c>
 8002e3a:	e229      	b.n	8003290 <__iar_annotation$$branch+0x3d0>
 8002e3c:	1e92      	subs	r2, r2, #2
 8002e3e:	d0b6      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e40:	1e52      	subs	r2, r2, #1
 8002e42:	d100      	bne.n	8002e46 <__iar_annotation$$branch+0x26>
 8002e44:	e0e0      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002e46:	1e92      	subs	r2, r2, #2
 8002e48:	2a08      	cmp	r2, #8
 8002e4a:	d801      	bhi.n	8002e50 <__iar_annotation$$branch+0x4>

08002e4c <__iar_annotation$$branch>:
 8002e4c:	f000 fdd3 	bl	80039f6 <__iar_annotation$$branch+0x4>
 8002e50:	3a0a      	subs	r2, #10
 8002e52:	d101      	bne.n	8002e58 <__iar_annotation$$branch+0x4>

08002e54 <__iar_annotation$$branch>:
 8002e54:	f000 fde2 	bl	8003a1c <__iar_annotation$$branch+0x2a>
 8002e58:	a903      	add	r1, sp, #12
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	f001 fb32 	bl	80044c4 <PE_StateMachine_VDM>
 8002e60:	0005      	movs	r5, r0
 8002e62:	7c62      	ldrb	r2, [r4, #17]
 8002e64:	4e31      	ldr	r6, [pc, #196]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002e66:	7ca0      	ldrb	r0, [r4, #18]
 8002e68:	4290      	cmp	r0, r2
 8002e6a:	d007      	beq.n	8002e7c <__iar_annotation$$branch+0x28>
 8002e6c:	74a2      	strb	r2, [r4, #18]
 8002e6e:	2000      	movs	r0, #0
 8002e70:	9000      	str	r0, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	7c21      	ldrb	r1, [r4, #16]
 8002e76:	2004      	movs	r0, #4
 8002e78:	6837      	ldr	r7, [r6, #0]
 8002e7a:	47b8      	blx	r7
 8002e7c:	4668      	mov	r0, sp
 8002e7e:	7b00      	ldrb	r0, [r0, #12]
 8002e80:	2814      	cmp	r0, #20
 8002e82:	d101      	bne.n	8002e88 <__iar_annotation$$branch+0x4>

08002e84 <__iar_annotation$$branch>:
 8002e84:	f000 fdec 	bl	8003a60 <__iar_annotation$$branch+0x6e>
 8002e88:	0020      	movs	r0, r4
 8002e8a:	f7fd fdab 	bl	80009e4 <PE_Check_AMSConflict>
 8002e8e:	2815      	cmp	r0, #21
 8002e90:	d109      	bne.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e92:	4668      	mov	r0, sp
 8002e94:	7b00      	ldrb	r0, [r0, #12]
 8002e96:	2814      	cmp	r0, #20
 8002e98:	d005      	beq.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e9a:	2014      	movs	r0, #20
 8002e9c:	4669      	mov	r1, sp
 8002e9e:	7308      	strb	r0, [r1, #12]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f7fd fd58 	bl	8000956 <PE_Clear_RxEvent>
 8002ea6:	7c62      	ldrb	r2, [r4, #17]
 8002ea8:	7ca0      	ldrb	r0, [r4, #18]
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d007      	beq.n	8002ebe <__iar_annotation$$branch+0x3a>
 8002eae:	74a2      	strb	r2, [r4, #18]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	9000      	str	r0, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	7c21      	ldrb	r1, [r4, #16]
 8002eb8:	2004      	movs	r0, #4
 8002eba:	6835      	ldr	r5, [r6, #0]
 8002ebc:	47a8      	blx	r5
 8002ebe:	2500      	movs	r5, #0

08002ec0 <__iar_annotation$$branch>:
 8002ec0:	f000 fded 	bl	8003a9e <__iar_annotation$$branch+0xac>
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	43ed      	mvns	r5, r5
 8002ec8:	0028      	movs	r0, r5
 8002eca:	e6b2      	b.n	8002c32 <USBPD_PE_StateMachine_SRC+0xa6>
 8002ecc:	74a0      	strb	r0, [r4, #18]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	9000      	str	r0, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	22a6      	movs	r2, #166	@ 0xa6
 8002ed6:	7c21      	ldrb	r1, [r4, #16]
 8002ed8:	2004      	movs	r0, #4
 8002eda:	4d14      	ldr	r5, [pc, #80]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002edc:	682d      	ldr	r5, [r5, #0]
 8002ede:	47a8      	blx	r5
 8002ee0:	2502      	movs	r5, #2
 8002ee2:	2032      	movs	r0, #50	@ 0x32
 8002ee4:	5c20      	ldrb	r0, [r4, r0]
 8002ee6:	280f      	cmp	r0, #15
 8002ee8:	d001      	beq.n	8002eee <__iar_annotation$$branch+0x2e>
 8002eea:	2814      	cmp	r0, #20
 8002eec:	d11c      	bne.n	8002f28 <__iar_annotation$$branch+0x68>
 8002eee:	4668      	mov	r0, sp
 8002ef0:	7b00      	ldrb	r0, [r0, #12]
 8002ef2:	2814      	cmp	r0, #20
 8002ef4:	d005      	beq.n	8002f02 <__iar_annotation$$branch+0x42>
 8002ef6:	2014      	movs	r0, #20
 8002ef8:	4669      	mov	r1, sp
 8002efa:	7308      	strb	r0, [r1, #12]
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7fd fd2a 	bl	8000956 <PE_Clear_RxEvent>
 8002f02:	2032      	movs	r0, #50	@ 0x32
 8002f04:	5c22      	ldrb	r2, [r4, r0]
 8002f06:	7462      	strb	r2, [r4, #17]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	2332      	movs	r3, #50	@ 0x32
 8002f0c:	54e0      	strb	r0, [r4, r3]
 8002f0e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002f10:	7ca0      	ldrb	r0, [r4, #18]
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d008      	beq.n	8002f28 <__iar_annotation$$branch+0x68>
 8002f16:	74a2      	strb	r2, [r4, #18]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	9000      	str	r0, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	7c21      	ldrb	r1, [r4, #16]
 8002f20:	2004      	movs	r0, #4
 8002f22:	4e02      	ldr	r6, [pc, #8]	@ (8002f2c <__iar_annotation$$branch+0x6c>)
 8002f24:	6836      	ldr	r6, [r6, #0]
 8002f26:	47b0      	blx	r6
 8002f28:	e6ab      	b.n	8002c82 <USBPD_PE_StateMachine_SRC+0xf6>
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	fffbffff 	.word	0xfffbffff
 8002f34:	fffdffff 	.word	0xfffdffff
 8002f38:	00008011 	.word	0x00008011
 8002f3c:	0000025e 	.word	0x0000025e
 8002f40:	0000801b 	.word	0x0000801b
 8002f44:	0000f01f 	.word	0x0000f01f
 8002f48:	6860      	ldr	r0, [r4, #4]
 8002f4a:	6801      	ldr	r1, [r0, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4391      	bics	r1, r2
 8002f50:	6001      	str	r1, [r0, #0]
 8002f52:	215f      	movs	r1, #95	@ 0x5f
 8002f54:	7c20      	ldrb	r0, [r4, #16]
 8002f56:	f7fd fa93 	bl	8000480 <USBPD_PE_Notification>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	43ed      	mvns	r5, r5
 8002f5e:	e780      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	4391      	bics	r1, r2
 8002f68:	6001      	str	r1, [r0, #0]
 8002f6a:	68a0      	ldr	r0, [r4, #8]
 8002f6c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d0f3      	beq.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f72:	7c20      	ldrb	r0, [r4, #16]
 8002f74:	4788      	blx	r1
 8002f76:	e7f0      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	6860      	ldr	r0, [r4, #4]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	0bc0      	lsrs	r0, r0, #15
 8002f80:	4038      	ands	r0, r7
 8002f82:	d002      	beq.n	8002f8a <__iar_annotation$$branch+0xca>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	e000      	b.n	8002f8c <__iar_annotation$$branch+0xcc>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4668      	mov	r0, sp
 8002f8e:	7b40      	ldrb	r0, [r0, #13]
 8002f90:	f002 fc08 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002f94:	6860      	ldr	r0, [r4, #4]
 8002f96:	6801      	ldr	r1, [r0, #0]
 8002f98:	0b0a      	lsrs	r2, r1, #12
 8002f9a:	403a      	ands	r2, r7
 8002f9c:	d02f      	beq.n	8002ffe <__iar_annotation$$branch+0x13e>
 8002f9e:	078a      	lsls	r2, r1, #30
 8002fa0:	0f92      	lsrs	r2, r2, #30
 8002fa2:	2a01      	cmp	r2, #1
 8002fa4:	d101      	bne.n	8002faa <__iar_annotation$$branch+0xea>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	e000      	b.n	8002fac <__iar_annotation$$branch+0xec>
 8002faa:	2220      	movs	r2, #32
 8002fac:	2320      	movs	r3, #32
 8002fae:	4399      	bics	r1, r3
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	6002      	str	r2, [r0, #0]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	70f0      	strb	r0, [r6, #3]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7fe f9f3 	bl	80013a6 <PE_SetPowerNegotiation>
 8002fc0:	6860      	ldr	r0, [r4, #4]
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	0901      	lsrs	r1, r0, #4
 8002fc6:	4039      	ands	r1, r7
 8002fc8:	d005      	beq.n	8002fd6 <__iar_annotation$$branch+0x116>
 8002fca:	48ae      	ldr	r0, [pc, #696]	@ (8003284 <__iar_annotation$$branch+0x3c4>)
 8002fcc:	83e0      	strh	r0, [r4, #30]
 8002fce:	2514      	movs	r5, #20
 8002fd0:	2006      	movs	r0, #6
 8002fd2:	7460      	strb	r0, [r4, #17]
 8002fd4:	e745      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002fd6:	0bc0      	lsrs	r0, r0, #15
 8002fd8:	4007      	ands	r7, r0
 8002fda:	d00a      	beq.n	8002ff2 <__iar_annotation$$branch+0x132>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	7800      	ldrb	r0, [r0, #0]
 8002fe0:	0780      	lsls	r0, r0, #30
 8002fe2:	d400      	bmi.n	8002fe6 <__iar_annotation$$branch+0x126>
 8002fe4:	e087      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fe6:	7930      	ldrb	r0, [r6, #4]
 8002fe8:	2814      	cmp	r0, #20
 8002fea:	d300      	bcc.n	8002fee <__iar_annotation$$branch+0x12e>
 8002fec:	e083      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d100      	bne.n	8002ff6 <__iar_annotation$$branch+0x136>
 8002ff4:	e07f      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002ff6:	1c40      	adds	r0, r0, #1
 8002ff8:	7130      	strb	r0, [r6, #4]
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	e7e9      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8002ffe:	2121      	movs	r1, #33	@ 0x21
 8003000:	7c20      	ldrb	r0, [r4, #16]
 8003002:	f7fd fa3d 	bl	8000480 <USBPD_PE_Notification>
 8003006:	e04c      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003008:	a903      	add	r1, sp, #12
 800300a:	0020      	movs	r0, r4
 800300c:	f000 fd8c 	bl	8003b28 <PE_StateMachine_VDMCable>
 8003010:	e726      	b.n	8002e60 <__iar_annotation$$branch+0xc>
 8003012:	8be0      	ldrh	r0, [r4, #30]
 8003014:	03a9      	lsls	r1, r5, #14
 8003016:	4288      	cmp	r0, r1
 8003018:	d102      	bne.n	8003020 <__iar_annotation$$branch+0x160>
 800301a:	2007      	movs	r0, #7
 800301c:	7460      	strb	r0, [r4, #17]
 800301e:	2500      	movs	r5, #0
 8003020:	e71f      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	0740      	lsls	r0, r0, #29
 8003026:	0fc1      	lsrs	r1, r0, #31
 8003028:	0020      	movs	r0, r4
 800302a:	f000 fd45 	bl	8003ab8 <PE_Send_SRCCapabilities>
 800302e:	2805      	cmp	r0, #5
 8003030:	d002      	beq.n	8003038 <__iar_annotation$$branch+0x178>
 8003032:	2809      	cmp	r0, #9
 8003034:	d0f4      	beq.n	8003020 <__iar_annotation$$branch+0x160>
 8003036:	e011      	b.n	800305c <__iar_annotation$$branch+0x19c>
 8003038:	2001      	movs	r0, #1
 800303a:	7720      	strb	r0, [r4, #28]
 800303c:	6960      	ldr	r0, [r4, #20]
 800303e:	2104      	movs	r1, #4
 8003040:	4301      	orrs	r1, r0
 8003042:	6161      	str	r1, [r4, #20]
 8003044:	2000      	movs	r0, #0
 8003046:	70f0      	strb	r0, [r6, #3]
 8003048:	70b0      	strb	r0, [r6, #2]
 800304a:	83e7      	strh	r7, [r4, #30]
 800304c:	251b      	movs	r5, #27
 800304e:	2016      	movs	r0, #22
 8003050:	7460      	strb	r0, [r4, #17]
 8003052:	210f      	movs	r1, #15
 8003054:	7c20      	ldrb	r0, [r4, #16]
 8003056:	f7fd fa13 	bl	8000480 <USBPD_PE_Notification>
 800305a:	e702      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800305c:	6960      	ldr	r0, [r4, #20]
 800305e:	0741      	lsls	r1, r0, #29
 8003060:	0fc9      	lsrs	r1, r1, #31
 8003062:	d10f      	bne.n	8003084 <__iar_annotation$$branch+0x1c4>
 8003064:	78f0      	ldrb	r0, [r6, #3]
 8003066:	2833      	cmp	r0, #51	@ 0x33
 8003068:	d217      	bcs.n	800309a <__iar_annotation$$branch+0x1da>
 800306a:	4887      	ldr	r0, [pc, #540]	@ (8003288 <__iar_annotation$$branch+0x3c8>)
 800306c:	83e0      	strh	r0, [r4, #30]
 800306e:	2596      	movs	r5, #150	@ 0x96
 8003070:	2008      	movs	r0, #8
 8003072:	7460      	strb	r0, [r4, #17]
 8003074:	4885      	ldr	r0, [pc, #532]	@ (800328c <__iar_annotation$$branch+0x3cc>)
 8003076:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003078:	4201      	tst	r1, r0
 800307a:	d002      	beq.n	8003082 <__iar_annotation$$branch+0x1c2>
 800307c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 800307e:	0005      	movs	r5, r0
 8003080:	400d      	ands	r5, r1
 8003082:	e6ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003084:	6860      	ldr	r0, [r4, #4]
 8003086:	7800      	ldrb	r0, [r0, #0]
 8003088:	0780      	lsls	r0, r0, #30
 800308a:	0f80      	lsrs	r0, r0, #30
 800308c:	2802      	cmp	r0, #2
 800308e:	d102      	bne.n	8003096 <__iar_annotation$$branch+0x1d6>
 8003090:	7c20      	ldrb	r0, [r4, #16]
 8003092:	f002 fb68 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003096:	2011      	movs	r0, #17
 8003098:	e7c0      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800309a:	2121      	movs	r1, #33	@ 0x21
 800309c:	7c20      	ldrb	r0, [r4, #16]
 800309e:	f7fd f9ef 	bl	8000480 <USBPD_PE_Notification>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e795      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030a6:	2100      	movs	r1, #0
 80030a8:	0020      	movs	r0, r4
 80030aa:	f000 fd05 	bl	8003ab8 <PE_Send_SRCCapabilities>
 80030ae:	2805      	cmp	r0, #5
 80030b0:	d107      	bne.n	80030c2 <__iar_annotation$$branch+0x202>
 80030b2:	2104      	movs	r1, #4
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7fe f976 	bl	80013a6 <PE_SetPowerNegotiation>
 80030ba:	2001      	movs	r0, #1
 80030bc:	7720      	strb	r0, [r4, #28]
 80030be:	83e7      	strh	r7, [r4, #30]
 80030c0:	e7c5      	b.n	800304e <__iar_annotation$$branch+0x18e>
 80030c2:	2000      	movs	r0, #0
 80030c4:	7720      	strb	r0, [r4, #28]
 80030c6:	2011      	movs	r0, #17
 80030c8:	e783      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030ca:	03a8      	lsls	r0, r5, #14
 80030cc:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80030ce:	4281      	cmp	r1, r0
 80030d0:	d106      	bne.n	80030e0 <__iar_annotation$$branch+0x220>
 80030d2:	2100      	movs	r1, #0
 80030d4:	8461      	strh	r1, [r4, #34]	@ 0x22
 80030d6:	7931      	ldrb	r1, [r6, #4]
 80030d8:	1c49      	adds	r1, r1, #1
 80030da:	7131      	strb	r1, [r6, #4]
 80030dc:	2105      	movs	r1, #5
 80030de:	7461      	strb	r1, [r4, #17]
 80030e0:	8be1      	ldrh	r1, [r4, #30]
 80030e2:	4281      	cmp	r1, r0
 80030e4:	d1cd      	bne.n	8003082 <__iar_annotation$$branch+0x1c2>
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	6840      	ldr	r0, [r0, #4]
 80030ea:	0601      	lsls	r1, r0, #24
 80030ec:	0fc9      	lsrs	r1, r1, #31
 80030ee:	d002      	beq.n	80030f6 <__iar_annotation$$branch+0x236>
 80030f0:	78f0      	ldrb	r0, [r6, #3]
 80030f2:	1c40      	adds	r0, r0, #1
 80030f4:	70f0      	strb	r0, [r6, #3]
 80030f6:	2007      	movs	r0, #7
 80030f8:	e76b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2811      	cmp	r0, #17
 8003100:	d109      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003102:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003104:	0bc1      	lsrs	r1, r0, #15
 8003106:	d106      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003108:	0b01      	lsrs	r1, r0, #12
 800310a:	0749      	lsls	r1, r1, #29
 800310c:	d100      	bne.n	8003110 <__iar_annotation$$branch+0x250>
 800310e:	e111      	b.n	8003334 <__iar_annotation$$branch+0x474>
 8003110:	06c0      	lsls	r0, r0, #27
 8003112:	0ec0      	lsrs	r0, r0, #27
 8003114:	2802      	cmp	r0, #2
 8003116:	d000      	beq.n	800311a <__iar_annotation$$branch+0x25a>
 8003118:	e10c      	b.n	8003334 <__iar_annotation$$branch+0x474>
 800311a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800311c:	7881      	ldrb	r1, [r0, #2]
 800311e:	78c2      	ldrb	r2, [r0, #3]
 8003120:	0212      	lsls	r2, r2, #8
 8003122:	1889      	adds	r1, r1, r2
 8003124:	7902      	ldrb	r2, [r0, #4]
 8003126:	0412      	lsls	r2, r2, #16
 8003128:	1889      	adds	r1, r1, r2
 800312a:	7940      	ldrb	r0, [r0, #5]
 800312c:	0600      	lsls	r0, r0, #24
 800312e:	1808      	adds	r0, r1, r0
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003134:	0600      	lsls	r0, r0, #24
 8003136:	0f81      	lsrs	r1, r0, #30
 8003138:	7c20      	ldrb	r0, [r4, #16]
 800313a:	f7fd fd5b 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 800313e:	2304      	movs	r3, #4
 8003140:	466a      	mov	r2, sp
 8003142:	2106      	movs	r1, #6
 8003144:	7c20      	ldrb	r0, [r4, #16]
 8003146:	68a5      	ldr	r5, [r4, #8]
 8003148:	69ad      	ldr	r5, [r5, #24]
 800314a:	47a8      	blx	r5
 800314c:	2009      	movs	r0, #9
 800314e:	7460      	strb	r0, [r4, #17]
 8003150:	2500      	movs	r5, #0
 8003152:	e0e5      	b.n	8003320 <__iar_annotation$$branch+0x460>
 8003154:	2702      	movs	r7, #2
 8003156:	2507      	movs	r5, #7
 8003158:	a901      	add	r1, sp, #4
 800315a:	7c20      	ldrb	r0, [r4, #16]
 800315c:	68a2      	ldr	r2, [r4, #8]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	4790      	blx	r2
 8003162:	280a      	cmp	r0, #10
 8003164:	d010      	beq.n	8003188 <__iar_annotation$$branch+0x2c8>
 8003166:	280b      	cmp	r0, #11
 8003168:	d035      	beq.n	80031d6 <__iar_annotation$$branch+0x316>
 800316a:	280d      	cmp	r0, #13
 800316c:	6860      	ldr	r0, [r4, #4]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	d136      	bne.n	80031e0 <__iar_annotation$$branch+0x320>
 8003172:	0a00      	lsrs	r0, r0, #8
 8003174:	4005      	ands	r5, r0
 8003176:	2d03      	cmp	r5, #3
 8003178:	d101      	bne.n	800317e <__iar_annotation$$branch+0x2be>
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <__iar_annotation$$branch+0x2c0>
 800317e:	230e      	movs	r3, #14
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	220c      	movs	r2, #12
 8003186:	e035      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 8003188:	48a9      	ldr	r0, [pc, #676]	@ (8003430 <__iar_annotation$$branch+0x570>)
 800318a:	83e0      	strh	r0, [r4, #30]
 800318c:	271e      	movs	r7, #30
 800318e:	6860      	ldr	r0, [r4, #4]
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	0a00      	lsrs	r0, r0, #8
 8003194:	4005      	ands	r5, r0
 8003196:	2d01      	cmp	r5, #1
 8003198:	d00b      	beq.n	80031b2 <__iar_annotation$$branch+0x2f2>
 800319a:	9801      	ldr	r0, [sp, #4]
 800319c:	2803      	cmp	r0, #3
 800319e:	d108      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	06c0      	lsls	r0, r0, #27
 80031a4:	0f80      	lsrs	r0, r0, #30
 80031a6:	2803      	cmp	r0, #3
 80031a8:	d103      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031aa:	2080      	movs	r0, #128	@ 0x80
 80031ac:	0200      	lsls	r0, r0, #8
 80031ae:	83e0      	strh	r0, [r4, #30]
 80031b0:	2700      	movs	r7, #0
 80031b2:	2000      	movs	r0, #0
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	230c      	movs	r3, #12
 80031b8:	2203      	movs	r2, #3
 80031ba:	2100      	movs	r1, #0
 80031bc:	0020      	movs	r0, r4
 80031be:	f7fe f9a7 	bl	8001510 <PE_Send_CtrlMessage>
 80031c2:	6960      	ldr	r0, [r4, #20]
 80031c4:	2118      	movs	r1, #24
 80031c6:	4388      	bics	r0, r1
 80031c8:	9901      	ldr	r1, [sp, #4]
 80031ca:	00c9      	lsls	r1, r1, #3
 80031cc:	2218      	movs	r2, #24
 80031ce:	400a      	ands	r2, r1
 80031d0:	4302      	orrs	r2, r0
 80031d2:	6162      	str	r2, [r4, #20]
 80031d4:	e012      	b.n	80031fc <__iar_annotation$$branch+0x33c>
 80031d6:	2000      	movs	r0, #0
 80031d8:	9000      	str	r0, [sp, #0]
 80031da:	230c      	movs	r3, #12
 80031dc:	2202      	movs	r2, #2
 80031de:	e009      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 80031e0:	0a00      	lsrs	r0, r0, #8
 80031e2:	4005      	ands	r5, r0
 80031e4:	2d03      	cmp	r5, #3
 80031e6:	d101      	bne.n	80031ec <__iar_annotation$$branch+0x32c>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e000      	b.n	80031ee <__iar_annotation$$branch+0x32e>
 80031ec:	230e      	movs	r3, #14
 80031ee:	2000      	movs	r0, #0
 80031f0:	9000      	str	r0, [sp, #0]
 80031f2:	2204      	movs	r2, #4
 80031f4:	2100      	movs	r1, #0
 80031f6:	0020      	movs	r0, r4
 80031f8:	f7fe f98a 	bl	8001510 <PE_Send_CtrlMessage>
 80031fc:	003d      	movs	r5, r7
 80031fe:	e630      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003200:	8be0      	ldrh	r0, [r4, #30]
 8003202:	03a9      	lsls	r1, r5, #14
 8003204:	4288      	cmp	r0, r1
 8003206:	d1fa      	bne.n	80031fe <__iar_annotation$$branch+0x33e>
 8003208:	2104      	movs	r1, #4
 800320a:	0020      	movs	r0, r4
 800320c:	f7fe f8cb 	bl	80013a6 <PE_SetPowerNegotiation>
 8003210:	68a0      	ldr	r0, [r4, #8]
 8003212:	6801      	ldr	r1, [r0, #0]
 8003214:	2900      	cmp	r1, #0
 8003216:	d0f2      	beq.n	80031fe <__iar_annotation$$branch+0x33e>
 8003218:	7c20      	ldrb	r0, [r4, #16]
 800321a:	4788      	blx	r1
 800321c:	2800      	cmp	r0, #0
 800321e:	d000      	beq.n	8003222 <__iar_annotation$$branch+0x362>
 8003220:	e2db      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003222:	200d      	movs	r0, #13
 8003224:	e6d5      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8003226:	2000      	movs	r0, #0
 8003228:	9000      	str	r0, [sp, #0]
 800322a:	2303      	movs	r3, #3
 800322c:	2206      	movs	r2, #6
 800322e:	2100      	movs	r1, #0
 8003230:	0020      	movs	r0, r4
 8003232:	f7fe f96d 	bl	8001510 <PE_Send_CtrlMessage>
 8003236:	2800      	cmp	r0, #0
 8003238:	d110      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 800323a:	2103      	movs	r1, #3
 800323c:	0020      	movs	r0, r4
 800323e:	f7fe f8b2 	bl	80013a6 <PE_SetPowerNegotiation>
 8003242:	2110      	movs	r1, #16
 8003244:	7c20      	ldrb	r0, [r4, #16]
 8003246:	f7fd f91b 	bl	8000480 <USBPD_PE_Notification>
 800324a:	2000      	movs	r0, #0
 800324c:	84a0      	strh	r0, [r4, #36]	@ 0x24
 800324e:	6960      	ldr	r0, [r4, #20]
 8003250:	06c0      	lsls	r0, r0, #27
 8003252:	0f80      	lsrs	r0, r0, #30
 8003254:	2803      	cmp	r0, #3
 8003256:	d101      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003258:	4876      	ldr	r0, [pc, #472]	@ (8003434 <__iar_annotation$$branch+0x574>)
 800325a:	84a0      	strh	r0, [r4, #36]	@ 0x24
 800325c:	e601      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800325e:	2001      	movs	r0, #1
 8003260:	9000      	str	r0, [sp, #0]
 8003262:	2397      	movs	r3, #151	@ 0x97
 8003264:	2202      	movs	r2, #2
 8003266:	2100      	movs	r1, #0
 8003268:	0020      	movs	r0, r4
 800326a:	f7fe f951 	bl	8001510 <PE_Send_CtrlMessage>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1f4      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003272:	7725      	strb	r5, [r4, #28]
 8003274:	2129      	movs	r1, #41	@ 0x29
 8003276:	7c20      	ldrb	r0, [r4, #16]
 8003278:	f7fd f902 	bl	8000480 <USBPD_PE_Notification>
 800327c:	486e      	ldr	r0, [pc, #440]	@ (8003438 <__iar_annotation$$branch+0x578>)
 800327e:	83e0      	strh	r0, [r4, #30]
 8003280:	4d6e      	ldr	r5, [pc, #440]	@ (800343c <__iar_annotation$$branch+0x57c>)
 8003282:	e5ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003284:	00008014 	.word	0x00008014
 8003288:	00008096 	.word	0x00008096
 800328c:	00007fff 	.word	0x00007fff
 8003290:	8be0      	ldrh	r0, [r4, #30]
 8003292:	03a9      	lsls	r1, r5, #14
 8003294:	4288      	cmp	r0, r1
 8003296:	d1f4      	bne.n	8003282 <__iar_annotation$$branch+0x3c2>
 8003298:	212a      	movs	r1, #42	@ 0x2a
 800329a:	7c20      	ldrb	r0, [r4, #16]
 800329c:	f7fd f8f0 	bl	8000480 <USBPD_PE_Notification>
 80032a0:	2000      	movs	r0, #0
 80032a2:	9000      	str	r0, [sp, #0]
 80032a4:	2303      	movs	r3, #3
 80032a6:	2206      	movs	r2, #6
 80032a8:	2100      	movs	r1, #0
 80032aa:	0020      	movs	r0, r4
 80032ac:	f7fe f930 	bl	8001510 <PE_Send_CtrlMessage>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d109      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032b4:	212e      	movs	r1, #46	@ 0x2e
 80032b6:	e6cd      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032b8:	2000      	movs	r0, #0
 80032ba:	9000      	str	r0, [sp, #0]
 80032bc:	2307      	movs	r3, #7
 80032be:	2203      	movs	r2, #3
 80032c0:	2100      	movs	r1, #0
 80032c2:	0020      	movs	r0, r4
 80032c4:	f7fe f924 	bl	8001510 <PE_Send_CtrlMessage>
 80032c8:	e5cb      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80032ca:	2000      	movs	r0, #0
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	2312      	movs	r3, #18
 80032d0:	220d      	movs	r2, #13
 80032d2:	2031      	movs	r0, #49	@ 0x31
 80032d4:	5c21      	ldrb	r1, [r4, r0]
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7fe f91a 	bl	8001510 <PE_Send_CtrlMessage>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d1f3      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032e0:	83e7      	strh	r7, [r4, #30]
 80032e2:	251b      	movs	r5, #27
 80032e4:	2130      	movs	r1, #48	@ 0x30
 80032e6:	e6b5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032e8:	4668      	mov	r0, sp
 80032ea:	7b00      	ldrb	r0, [r0, #12]
 80032ec:	2814      	cmp	r0, #20
 80032ee:	d021      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 80032f0:	2030      	movs	r0, #48	@ 0x30
 80032f2:	5c20      	ldrb	r0, [r4, r0]
 80032f4:	2231      	movs	r2, #49	@ 0x31
 80032f6:	5ca2      	ldrb	r2, [r4, r2]
 80032f8:	4290      	cmp	r0, r2
 80032fa:	d11b      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 80032fc:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80032fe:	4001      	ands	r1, r0
 8003300:	2903      	cmp	r1, #3
 8003302:	d117      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 8003304:	2131      	movs	r1, #49	@ 0x31
 8003306:	7c20      	ldrb	r0, [r4, #16]
 8003308:	f7fd f8ba 	bl	8000480 <USBPD_PE_Notification>
 800330c:	2030      	movs	r0, #48	@ 0x30
 800330e:	5c20      	ldrb	r0, [r4, r0]
 8003310:	2800      	cmp	r0, #0
 8003312:	d102      	bne.n	800331a <__iar_annotation$$branch+0x45a>
 8003314:	2007      	movs	r0, #7
 8003316:	7460      	strb	r0, [r4, #17]
 8003318:	e002      	b.n	8003320 <__iar_annotation$$branch+0x460>
 800331a:	2003      	movs	r0, #3
 800331c:	7460      	strb	r0, [r4, #17]
 800331e:	2500      	movs	r5, #0
 8003320:	4668      	mov	r0, sp
 8003322:	7b00      	ldrb	r0, [r0, #12]
 8003324:	2814      	cmp	r0, #20
 8003326:	d005      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 8003328:	2014      	movs	r0, #20
 800332a:	4669      	mov	r1, sp
 800332c:	7308      	strb	r0, [r1, #12]
 800332e:	0020      	movs	r0, r4
 8003330:	f7fd fb11 	bl	8000956 <PE_Clear_RxEvent>
 8003334:	8be0      	ldrh	r0, [r4, #30]
 8003336:	2180      	movs	r1, #128	@ 0x80
 8003338:	0209      	lsls	r1, r1, #8
 800333a:	4288      	cmp	r0, r1
 800333c:	d1c4      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 800333e:	e24c      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	7800      	ldrb	r0, [r0, #0]
 8003344:	0780      	lsls	r0, r0, #30
 8003346:	0f80      	lsrs	r0, r0, #30
 8003348:	2802      	cmp	r0, #2
 800334a:	d102      	bne.n	8003352 <__iar_annotation$$branch+0x492>
 800334c:	7c20      	ldrb	r0, [r4, #16]
 800334e:	f002 fa0a 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003352:	2105      	movs	r1, #5
 8003354:	0020      	movs	r0, r4
 8003356:	f7fd fa99 	bl	800088c <PE_Send_RESET>
 800335a:	6860      	ldr	r0, [r4, #4]
 800335c:	6801      	ldr	r1, [r0, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4391      	bics	r1, r2
 8003362:	6001      	str	r1, [r0, #0]
 8003364:	78b0      	ldrb	r0, [r6, #2]
 8003366:	1c40      	adds	r0, r0, #1
 8003368:	70b0      	strb	r0, [r6, #2]
 800336a:	6961      	ldr	r1, [r4, #20]
 800336c:	4834      	ldr	r0, [pc, #208]	@ (8003440 <__iar_annotation$$branch+0x580>)
 800336e:	4008      	ands	r0, r1
 8003370:	6160      	str	r0, [r4, #20]
 8003372:	2100      	movs	r1, #0
 8003374:	2232      	movs	r2, #50	@ 0x32
 8003376:	54a1      	strb	r1, [r4, r2]
 8003378:	4932      	ldr	r1, [pc, #200]	@ (8003444 <__iar_annotation$$branch+0x584>)
 800337a:	4001      	ands	r1, r0
 800337c:	6161      	str	r1, [r4, #20]
 800337e:	2202      	movs	r2, #2
 8003380:	2101      	movs	r1, #1
 8003382:	0020      	movs	r0, r4
 8003384:	f7fe f806 	bl	8001394 <PE_CallHardResetCallback>
 8003388:	2169      	movs	r1, #105	@ 0x69
 800338a:	4668      	mov	r0, sp
 800338c:	7b40      	ldrb	r0, [r0, #13]
 800338e:	f7fd f877 	bl	8000480 <USBPD_PE_Notification>
 8003392:	83e7      	strh	r7, [r4, #30]
 8003394:	251b      	movs	r5, #27
 8003396:	2015      	movs	r0, #21
 8003398:	e61b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	7800      	ldrb	r0, [r0, #0]
 800339e:	0780      	lsls	r0, r0, #30
 80033a0:	0f80      	lsrs	r0, r0, #30
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d1f0      	bne.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033a6:	7c20      	ldrb	r0, [r4, #16]
 80033a8:	f002 f9dd 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 80033ac:	e7ec      	b.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033ae:	8be0      	ldrh	r0, [r4, #30]
 80033b0:	03a9      	lsls	r1, r5, #14
 80033b2:	4288      	cmp	r0, r1
 80033b4:	d11a      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 80033b6:	6960      	ldr	r0, [r4, #20]
 80033b8:	78b1      	ldrb	r1, [r6, #2]
 80033ba:	2903      	cmp	r1, #3
 80033bc:	d303      	bcc.n	80033c6 <__iar_annotation$$branch+0x506>
 80033be:	0741      	lsls	r1, r0, #29
 80033c0:	0fc9      	lsrs	r1, r1, #31
 80033c2:	d130      	bne.n	8003426 <__iar_annotation$$branch+0x566>
 80033c4:	e66d      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 80033c6:	4920      	ldr	r1, [pc, #128]	@ (8003448 <__iar_annotation$$branch+0x588>)
 80033c8:	83e1      	strh	r1, [r4, #30]
 80033ca:	2117      	movs	r1, #23
 80033cc:	7461      	strb	r1, [r4, #17]
 80033ce:	2500      	movs	r5, #0
 80033d0:	0540      	lsls	r0, r0, #21
 80033d2:	0f80      	lsrs	r0, r0, #30
 80033d4:	1e42      	subs	r2, r0, #1
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	0fd2      	lsrs	r2, r2, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	0020      	movs	r0, r4
 80033de:	f7fd ffd9 	bl	8001394 <PE_CallHardResetCallback>
 80033e2:	2203      	movs	r2, #3
 80033e4:	2101      	movs	r1, #1
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7fd ffd4 	bl	8001394 <PE_CallHardResetCallback>
 80033ec:	e539      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80033ee:	2100      	movs	r1, #0
 80033f0:	4668      	mov	r0, sp
 80033f2:	7b40      	ldrb	r0, [r0, #13]
 80033f4:	68a2      	ldr	r2, [r4, #8]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033f8:	4790      	blx	r2
 80033fa:	2801      	cmp	r0, #1
 80033fc:	d105      	bne.n	800340a <__iar_annotation$$branch+0x54a>
 80033fe:	4813      	ldr	r0, [pc, #76]	@ (800344c <__iar_annotation$$branch+0x58c>)
 8003400:	83e0      	strh	r0, [r4, #30]
 8003402:	25c8      	movs	r5, #200	@ 0xc8
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	2013      	movs	r0, #19
 8003408:	7460      	strb	r0, [r4, #17]
 800340a:	8be0      	ldrh	r0, [r4, #30]
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	0209      	lsls	r1, r1, #8
 8003410:	4288      	cmp	r0, r1
 8003412:	d1eb      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 8003414:	2206      	movs	r2, #6
 8003416:	2101      	movs	r1, #1
 8003418:	0020      	movs	r0, r4
 800341a:	f7fd ffbb 	bl	8001394 <PE_CallHardResetCallback>
 800341e:	6960      	ldr	r0, [r4, #20]
 8003420:	0741      	lsls	r1, r0, #29
 8003422:	0fc9      	lsrs	r1, r1, #31
 8003424:	d003      	beq.n	800342e <__iar_annotation$$branch+0x56e>
 8003426:	68a0      	ldr	r0, [r4, #8]
 8003428:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800342a:	2800      	cmp	r0, #0
 800342c:	d137      	bne.n	800349e <__iar_annotation$$branch+0x5de>
 800342e:	e638      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003430:	0000801e 	.word	0x0000801e
 8003434:	0000b6b0 	.word	0x0000b6b0
 8003438:	00008226 	.word	0x00008226
 800343c:	00000226 	.word	0x00000226
 8003440:	fffff9ff 	.word	0xfffff9ff
 8003444:	fffffe3f 	.word	0xfffffe3f
 8003448:	0000828a 	.word	0x0000828a
 800344c:	00008320 	.word	0x00008320
 8003450:	8be0      	ldrh	r0, [r4, #30]
 8003452:	03a9      	lsls	r1, r5, #14
 8003454:	4288      	cmp	r0, r1
 8003456:	d126      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 8003458:	2204      	movs	r2, #4
 800345a:	2101      	movs	r1, #1
 800345c:	0020      	movs	r0, r4
 800345e:	f7fd ff99 	bl	8001394 <PE_CallHardResetCallback>
 8003462:	2101      	movs	r1, #1
 8003464:	4668      	mov	r0, sp
 8003466:	7b40      	ldrb	r0, [r0, #13]
 8003468:	68a2      	ldr	r2, [r4, #8]
 800346a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800346c:	4790      	blx	r2
 800346e:	2801      	cmp	r0, #1
 8003470:	d10d      	bne.n	800348e <__iar_annotation$$branch+0x5ce>
 8003472:	0020      	movs	r0, r4
 8003474:	f7fd fb1d 	bl	8000ab2 <PE_Reset_HardReset>
 8003478:	2168      	movs	r1, #104	@ 0x68
 800347a:	4668      	mov	r0, sp
 800347c:	7b40      	ldrb	r0, [r0, #13]
 800347e:	f7fc ffff 	bl	8000480 <USBPD_PE_Notification>
 8003482:	2205      	movs	r2, #5
 8003484:	2101      	movs	r1, #1
 8003486:	0020      	movs	r0, r4
 8003488:	f7fd ff84 	bl	8001394 <PE_CallHardResetCallback>
 800348c:	e633      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 800348e:	2206      	movs	r2, #6
 8003490:	2101      	movs	r1, #1
 8003492:	0020      	movs	r0, r4
 8003494:	f7fd ff7e 	bl	8001394 <PE_CallHardResetCallback>
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <__iar_annotation$$branch+0x5e2>
 80034a0:	e2d6      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80034a2:	2500      	movs	r5, #0
 80034a4:	7465      	strb	r5, [r4, #17]
 80034a6:	e4dc      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80034a8:	2001      	movs	r0, #1
 80034aa:	9000      	str	r0, [sp, #0]
 80034ac:	231b      	movs	r3, #27
 80034ae:	2207      	movs	r2, #7
 80034b0:	2100      	movs	r1, #0
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7fe f82c 	bl	8001510 <PE_Send_CtrlMessage>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f4      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 80034bc:	2006      	movs	r0, #6
 80034be:	7720      	strb	r0, [r4, #28]
 80034c0:	83e7      	strh	r7, [r4, #30]
 80034c2:	251b      	movs	r5, #27
 80034c4:	210b      	movs	r1, #11
 80034c6:	e5c5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80034c8:	4668      	mov	r0, sp
 80034ca:	7b00      	ldrb	r0, [r0, #12]
 80034cc:	2811      	cmp	r0, #17
 80034ce:	d13e      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 80034d0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80034d2:	0bc1      	lsrs	r1, r0, #15
 80034d4:	d11f      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034d6:	0441      	lsls	r1, r0, #17
 80034d8:	0f49      	lsrs	r1, r1, #29
 80034da:	d01c      	beq.n	8003516 <__iar_annotation$$branch+0x656>
 80034dc:	06c0      	lsls	r0, r0, #27
 80034de:	0ec0      	lsrs	r0, r0, #27
 80034e0:	2801      	cmp	r0, #1
 80034e2:	d118      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80034e8:	1c82      	adds	r2, r0, #2
 80034ea:	2104      	movs	r1, #4
 80034ec:	7c20      	ldrb	r0, [r4, #16]
 80034ee:	68a5      	ldr	r5, [r4, #8]
 80034f0:	69ad      	ldr	r5, [r5, #24]
 80034f2:	47a8      	blx	r5
 80034f4:	2003      	movs	r0, #3
 80034f6:	7460      	strb	r0, [r4, #17]
 80034f8:	2500      	movs	r5, #0
 80034fa:	4668      	mov	r0, sp
 80034fc:	7b00      	ldrb	r0, [r0, #12]
 80034fe:	2814      	cmp	r0, #20
 8003500:	d005      	beq.n	800350e <__iar_annotation$$branch+0x64e>
 8003502:	2014      	movs	r0, #20
 8003504:	4669      	mov	r1, sp
 8003506:	7308      	strb	r0, [r1, #12]
 8003508:	0020      	movs	r0, r4
 800350a:	f7fd fa24 	bl	8000956 <PE_Clear_RxEvent>
 800350e:	210d      	movs	r1, #13
 8003510:	7c20      	ldrb	r0, [r4, #16]
 8003512:	f7fc ffb5 	bl	8000480 <USBPD_PE_Notification>
 8003516:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003518:	21f0      	movs	r1, #240	@ 0xf0
 800351a:	0209      	lsls	r1, r1, #8
 800351c:	4001      	ands	r1, r0
 800351e:	d116      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 8003520:	06c0      	lsls	r0, r0, #27
 8003522:	0ec0      	lsrs	r0, r0, #27
 8003524:	2804      	cmp	r0, #4
 8003526:	d001      	beq.n	800352c <__iar_annotation$$branch+0x66c>
 8003528:	2810      	cmp	r0, #16
 800352a:	d110      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 800352c:	2003      	movs	r0, #3
 800352e:	7460      	strb	r0, [r4, #17]
 8003530:	2500      	movs	r5, #0
 8003532:	4668      	mov	r0, sp
 8003534:	7b00      	ldrb	r0, [r0, #12]
 8003536:	2814      	cmp	r0, #20
 8003538:	d005      	beq.n	8003546 <__iar_annotation$$branch+0x686>
 800353a:	2014      	movs	r0, #20
 800353c:	4669      	mov	r1, sp
 800353e:	7308      	strb	r0, [r1, #12]
 8003540:	0020      	movs	r0, r4
 8003542:	f7fd fa08 	bl	8000956 <PE_Clear_RxEvent>
 8003546:	210e      	movs	r1, #14
 8003548:	7c20      	ldrb	r0, [r4, #16]
 800354a:	f7fc ff99 	bl	8000480 <USBPD_PE_Notification>
 800354e:	8be0      	ldrh	r0, [r4, #30]
 8003550:	2180      	movs	r1, #128	@ 0x80
 8003552:	0209      	lsls	r1, r1, #8
 8003554:	4288      	cmp	r0, r1
 8003556:	d11f      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003558:	2003      	movs	r0, #3
 800355a:	e55f      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800355c:	68a0      	ldr	r0, [r4, #8]
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	2900      	cmp	r1, #0
 8003562:	d01f      	beq.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003564:	7c20      	ldrb	r0, [r4, #16]
 8003566:	4788      	blx	r1
 8003568:	280a      	cmp	r0, #10
 800356a:	d002      	beq.n	8003572 <__iar_annotation$$branch+0x6b2>
 800356c:	280d      	cmp	r0, #13
 800356e:	d014      	beq.n	800359a <__iar_annotation$$branch+0x6da>
 8003570:	e018      	b.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003572:	1cf8      	adds	r0, r7, #3
 8003574:	83e0      	strh	r0, [r4, #30]
 8003576:	251e      	movs	r5, #30
 8003578:	2000      	movs	r0, #0
 800357a:	9000      	str	r0, [sp, #0]
 800357c:	2324      	movs	r3, #36	@ 0x24
 800357e:	2203      	movs	r2, #3
 8003580:	2100      	movs	r1, #0
 8003582:	0020      	movs	r0, r4
 8003584:	f7fd ffc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003588:	2800      	cmp	r0, #0
 800358a:	d105      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 800358c:	2201      	movs	r2, #1
 800358e:	2101      	movs	r1, #1
 8003590:	7c20      	ldrb	r0, [r4, #16]
 8003592:	68a3      	ldr	r3, [r4, #8]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	4798      	blx	r3
 8003598:	e463      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800359a:	2000      	movs	r0, #0
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	2303      	movs	r3, #3
 80035a0:	220c      	movs	r2, #12
 80035a2:	e68d      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035a4:	2000      	movs	r0, #0
 80035a6:	9000      	str	r0, [sp, #0]
 80035a8:	2303      	movs	r3, #3
 80035aa:	2204      	movs	r2, #4
 80035ac:	e688      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035ae:	8be0      	ldrh	r0, [r4, #30]
 80035b0:	03a9      	lsls	r1, r5, #14
 80035b2:	4288      	cmp	r0, r1
 80035b4:	d1f0      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035b6:	2104      	movs	r1, #4
 80035b8:	0020      	movs	r0, r4
 80035ba:	f7fd fef4 	bl	80013a6 <PE_SetPowerNegotiation>
 80035be:	6860      	ldr	r0, [r4, #4]
 80035c0:	6801      	ldr	r1, [r0, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	430a      	orrs	r2, r1
 80035c6:	6002      	str	r2, [r0, #0]
 80035c8:	2206      	movs	r2, #6
 80035ca:	2101      	movs	r1, #1
 80035cc:	7c20      	ldrb	r0, [r4, #16]
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	4798      	blx	r3
 80035d4:	2207      	movs	r2, #7
 80035d6:	2101      	movs	r1, #1
 80035d8:	7c20      	ldrb	r0, [r4, #16]
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	4798      	blx	r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	7c20      	ldrb	r0, [r4, #16]
 80035e4:	f002 f889 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80035e8:	2000      	movs	r0, #0
 80035ea:	9000      	str	r0, [sp, #0]
 80035ec:	2325      	movs	r3, #37	@ 0x25
 80035ee:	2206      	movs	r2, #6
 80035f0:	2100      	movs	r1, #0
 80035f2:	0020      	movs	r0, r4
 80035f4:	f7fd ff8c 	bl	8001510 <PE_Send_CtrlMessage>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1cd      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035fc:	e0c9      	b.n	8003792 <__iar_annotation$$branch+0x8d2>
 80035fe:	4668      	mov	r0, sp
 8003600:	7b00      	ldrb	r0, [r0, #12]
 8003602:	2811      	cmp	r0, #17
 8003604:	d10b      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 8003606:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003608:	4001      	ands	r1, r0
 800360a:	2906      	cmp	r1, #6
 800360c:	d107      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 800360e:	2014      	movs	r0, #20
 8003610:	4669      	mov	r1, sp
 8003612:	7308      	strb	r0, [r1, #12]
 8003614:	0020      	movs	r0, r4
 8003616:	f7fd f99e 	bl	8000956 <PE_Clear_RxEvent>
 800361a:	2026      	movs	r0, #38	@ 0x26
 800361c:	7460      	strb	r0, [r4, #17]
 800361e:	8be0      	ldrh	r0, [r4, #30]
 8003620:	03a9      	lsls	r1, r5, #14
 8003622:	4288      	cmp	r0, r1
 8003624:	d1b8      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800362a:	2800      	cmp	r0, #0
 800362c:	d000      	beq.n	8003630 <__iar_annotation$$branch+0x770>
 800362e:	e20f      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 8003630:	220a      	movs	r2, #10
 8003632:	2101      	movs	r1, #1
 8003634:	7c20      	ldrb	r0, [r4, #16]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	4798      	blx	r3
 800363a:	e0ce      	b.n	80037da <__iar_annotation$$branch+0x91a>
 800363c:	2100      	movs	r1, #0
 800363e:	0020      	movs	r0, r4
 8003640:	f7fd f944 	bl	80008cc <PE_ChangePowerRole>
 8003644:	220d      	movs	r2, #13
 8003646:	2100      	movs	r1, #0
 8003648:	7c20      	ldrb	r0, [r4, #16]
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	4798      	blx	r3
 8003650:	2114      	movs	r1, #20
 8003652:	7c20      	ldrb	r0, [r4, #16]
 8003654:	f7fc ff14 	bl	8000480 <USBPD_PE_Notification>
 8003658:	220e      	movs	r2, #14
 800365a:	2100      	movs	r1, #0
 800365c:	7c20      	ldrb	r0, [r4, #16]
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	4798      	blx	r3
 8003664:	6860      	ldr	r0, [r4, #4]
 8003666:	7800      	ldrb	r0, [r0, #0]
 8003668:	0780      	lsls	r0, r0, #30
 800366a:	0f80      	lsrs	r0, r0, #30
 800366c:	2801      	cmp	r0, #1
 800366e:	d104      	bne.n	800367a <__iar_annotation$$branch+0x7ba>
 8003670:	2101      	movs	r1, #1
 8003672:	4668      	mov	r0, sp
 8003674:	7b40      	ldrb	r0, [r0, #13]
 8003676:	f002 f895 	bl	80057a4 <USBPD_PRL_SOPCapability>
 800367a:	0020      	movs	r0, r4
 800367c:	f7fd fa90 	bl	8000ba0 <PE_Reset_StateMachine>
 8003680:	e4cd      	b.n	800301e <__iar_annotation$$branch+0x15e>
 8003682:	2001      	movs	r0, #1
 8003684:	9000      	str	r0, [sp, #0]
 8003686:	231f      	movs	r3, #31
 8003688:	220a      	movs	r2, #10
 800368a:	2100      	movs	r1, #0
 800368c:	0020      	movs	r0, r4
 800368e:	f7fd ff3f 	bl	8001510 <PE_Send_CtrlMessage>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1c6      	bne.n	8003624 <__iar_annotation$$branch+0x764>
 8003696:	2008      	movs	r0, #8
 8003698:	7720      	strb	r0, [r4, #28]
 800369a:	83e7      	strh	r7, [r4, #30]
 800369c:	251b      	movs	r5, #27
 800369e:	2202      	movs	r2, #2
 80036a0:	2101      	movs	r1, #1
 80036a2:	7c20      	ldrb	r0, [r4, #16]
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	4798      	blx	r3
 80036aa:	2139      	movs	r1, #57	@ 0x39
 80036ac:	e4d2      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80036ae:	4668      	mov	r0, sp
 80036b0:	7b00      	ldrb	r0, [r0, #12]
 80036b2:	2811      	cmp	r0, #17
 80036b4:	d145      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036b6:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80036b8:	391f      	subs	r1, #31
 80036ba:	4001      	ands	r1, r0
 80036bc:	d141      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036be:	06c0      	lsls	r0, r0, #27
 80036c0:	0ec0      	lsrs	r0, r0, #27
 80036c2:	2803      	cmp	r0, #3
 80036c4:	d006      	beq.n	80036d4 <__iar_annotation$$branch+0x814>
 80036c6:	2804      	cmp	r0, #4
 80036c8:	d012      	beq.n	80036f0 <__iar_annotation$$branch+0x830>
 80036ca:	280c      	cmp	r0, #12
 80036cc:	d008      	beq.n	80036e0 <__iar_annotation$$branch+0x820>
 80036ce:	2810      	cmp	r0, #16
 80036d0:	d020      	beq.n	8003714 <__iar_annotation$$branch+0x854>
 80036d2:	e036      	b.n	8003742 <__iar_annotation$$branch+0x882>
 80036d4:	213a      	movs	r1, #58	@ 0x3a
 80036d6:	7c20      	ldrb	r0, [r4, #16]
 80036d8:	f7fc fed2 	bl	8000480 <USBPD_PE_Notification>
 80036dc:	2020      	movs	r0, #32
 80036de:	e012      	b.n	8003706 <__iar_annotation$$branch+0x846>
 80036e0:	2205      	movs	r2, #5
 80036e2:	2101      	movs	r1, #1
 80036e4:	7c20      	ldrb	r0, [r4, #16]
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	4798      	blx	r3
 80036ec:	213b      	movs	r1, #59	@ 0x3b
 80036ee:	e006      	b.n	80036fe <__iar_annotation$$branch+0x83e>
 80036f0:	2204      	movs	r2, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	7c20      	ldrb	r0, [r4, #16]
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	4798      	blx	r3
 80036fc:	2116      	movs	r1, #22
 80036fe:	7c20      	ldrb	r0, [r4, #16]
 8003700:	f7fc febe 	bl	8000480 <USBPD_PE_Notification>
 8003704:	2003      	movs	r0, #3
 8003706:	7460      	strb	r0, [r4, #17]
 8003708:	2500      	movs	r5, #0
 800370a:	4668      	mov	r0, sp
 800370c:	7b00      	ldrb	r0, [r0, #12]
 800370e:	2814      	cmp	r0, #20
 8003710:	d111      	bne.n	8003736 <__iar_annotation$$branch+0x876>
 8003712:	e016      	b.n	8003742 <__iar_annotation$$branch+0x882>
 8003714:	2204      	movs	r2, #4
 8003716:	2101      	movs	r1, #1
 8003718:	7c20      	ldrb	r0, [r4, #16]
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	4798      	blx	r3
 8003720:	2117      	movs	r1, #23
 8003722:	7c20      	ldrb	r0, [r4, #16]
 8003724:	f7fc feac 	bl	8000480 <USBPD_PE_Notification>
 8003728:	2003      	movs	r0, #3
 800372a:	7460      	strb	r0, [r4, #17]
 800372c:	2500      	movs	r5, #0
 800372e:	4668      	mov	r0, sp
 8003730:	7b00      	ldrb	r0, [r0, #12]
 8003732:	2814      	cmp	r0, #20
 8003734:	d005      	beq.n	8003742 <__iar_annotation$$branch+0x882>
 8003736:	2014      	movs	r0, #20
 8003738:	4669      	mov	r1, sp
 800373a:	7308      	strb	r0, [r1, #12]
 800373c:	0020      	movs	r0, r4
 800373e:	f7fd f90a 	bl	8000956 <PE_Clear_RxEvent>
 8003742:	8be0      	ldrh	r0, [r4, #30]
 8003744:	2180      	movs	r1, #128	@ 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	4288      	cmp	r0, r1
 800374a:	d12c      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 800374c:	e704      	b.n	8003558 <__iar_annotation$$branch+0x698>
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	430a      	orrs	r2, r1
 8003756:	6002      	str	r2, [r0, #0]
 8003758:	7f20      	ldrb	r0, [r4, #28]
 800375a:	2809      	cmp	r0, #9
 800375c:	d005      	beq.n	800376a <__iar_annotation$$branch+0x8aa>
 800375e:	2206      	movs	r2, #6
 8003760:	2101      	movs	r1, #1
 8003762:	7c20      	ldrb	r0, [r4, #16]
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	4798      	blx	r3
 800376a:	2207      	movs	r2, #7
 800376c:	2101      	movs	r1, #1
 800376e:	7c20      	ldrb	r0, [r4, #16]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	4798      	blx	r3
 8003776:	2100      	movs	r1, #0
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f001 ffbe 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 800377e:	2000      	movs	r0, #0
 8003780:	9000      	str	r0, [sp, #0]
 8003782:	2321      	movs	r3, #33	@ 0x21
 8003784:	2206      	movs	r2, #6
 8003786:	2100      	movs	r1, #0
 8003788:	0020      	movs	r0, r4
 800378a:	f7fd fec1 	bl	8001510 <PE_Send_CtrlMessage>
 800378e:	2800      	cmp	r0, #0
 8003790:	d109      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 8003792:	2208      	movs	r2, #8
 8003794:	2101      	movs	r1, #1
 8003796:	7c20      	ldrb	r0, [r4, #16]
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	4798      	blx	r3
 800379e:	48c5      	ldr	r0, [pc, #788]	@ (8003ab4 <.text_3>)
 80037a0:	83e0      	strh	r0, [r4, #30]
 80037a2:	25eb      	movs	r5, #235	@ 0xeb
 80037a4:	006d      	lsls	r5, r5, #1
 80037a6:	e6f7      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80037a8:	4668      	mov	r0, sp
 80037aa:	7b00      	ldrb	r0, [r0, #12]
 80037ac:	2811      	cmp	r0, #17
 80037ae:	d10b      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80037b2:	4001      	ands	r1, r0
 80037b4:	2906      	cmp	r1, #6
 80037b6:	d107      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b8:	2026      	movs	r0, #38	@ 0x26
 80037ba:	7460      	strb	r0, [r4, #17]
 80037bc:	2014      	movs	r0, #20
 80037be:	4669      	mov	r1, sp
 80037c0:	7308      	strb	r0, [r1, #12]
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fd f8c7 	bl	8000956 <PE_Clear_RxEvent>
 80037c8:	8be0      	ldrh	r0, [r4, #30]
 80037ca:	03a9      	lsls	r1, r5, #14
 80037cc:	4288      	cmp	r0, r1
 80037ce:	d1ea      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037d0:	68a0      	ldr	r0, [r4, #8]
 80037d2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d000      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80037d8:	e13a      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80037da:	200f      	movs	r0, #15
 80037dc:	e6bd      	b.n	800355a <__iar_annotation$$branch+0x69a>
 80037de:	8be0      	ldrh	r0, [r4, #30]
 80037e0:	03a9      	lsls	r1, r5, #14
 80037e2:	4288      	cmp	r0, r1
 80037e4:	d1df      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037e6:	220e      	movs	r2, #14
 80037e8:	2101      	movs	r1, #1
 80037ea:	7c20      	ldrb	r0, [r4, #16]
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	4798      	blx	r3
 80037f2:	6860      	ldr	r0, [r4, #4]
 80037f4:	7800      	ldrb	r0, [r0, #0]
 80037f6:	0780      	lsls	r0, r0, #30
 80037f8:	0f80      	lsrs	r0, r0, #30
 80037fa:	2802      	cmp	r0, #2
 80037fc:	d102      	bne.n	8003804 <__iar_annotation$$branch+0x944>
 80037fe:	7c20      	ldrb	r0, [r4, #16]
 8003800:	f001 ffb1 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003804:	0020      	movs	r0, r4
 8003806:	f7fd f9cb 	bl	8000ba0 <PE_Reset_StateMachine>
 800380a:	2115      	movs	r1, #21
 800380c:	e74e      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 800380e:	2803      	cmp	r0, #3
 8003810:	d110      	bne.n	8003834 <__iar_annotation$$branch+0x974>
 8003812:	2000      	movs	r0, #0
 8003814:	7720      	strb	r0, [r4, #28]
 8003816:	6860      	ldr	r0, [r4, #4]
 8003818:	7800      	ldrb	r0, [r0, #0]
 800381a:	0780      	lsls	r0, r0, #30
 800381c:	0f80      	lsrs	r0, r0, #30
 800381e:	2802      	cmp	r0, #2
 8003820:	d102      	bne.n	8003828 <__iar_annotation$$branch+0x968>
 8003822:	7c20      	ldrb	r0, [r4, #16]
 8003824:	f001 ff9f 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003828:	2004      	movs	r0, #4
 800382a:	7460      	strb	r0, [r4, #17]
 800382c:	2167      	movs	r1, #103	@ 0x67
 800382e:	7c20      	ldrb	r0, [r4, #16]
 8003830:	f7fc fe26 	bl	8000480 <USBPD_PE_Notification>
 8003834:	4668      	mov	r0, sp
 8003836:	7b00      	ldrb	r0, [r0, #12]
 8003838:	2814      	cmp	r0, #20
 800383a:	d00d      	beq.n	8003858 <__iar_annotation$$branch+0x998>
 800383c:	0020      	movs	r0, r4
 800383e:	f7fe f917 	bl	8001a70 <PE_ManageRXEvent>
 8003842:	4668      	mov	r0, sp
 8003844:	7b00      	ldrb	r0, [r0, #12]
 8003846:	2814      	cmp	r0, #20
 8003848:	d005      	beq.n	8003856 <__iar_annotation$$branch+0x996>
 800384a:	2014      	movs	r0, #20
 800384c:	4669      	mov	r1, sp
 800384e:	7308      	strb	r0, [r1, #12]
 8003850:	0020      	movs	r0, r4
 8003852:	f7fd f880 	bl	8000956 <PE_Clear_RxEvent>
 8003856:	e69f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	0cc0      	lsrs	r0, r0, #19
 800385c:	03ad      	lsls	r5, r5, #14
 800385e:	2800      	cmp	r0, #0
 8003860:	d01e      	beq.n	80038a0 <__iar_annotation$$branch+0x9e0>
 8003862:	8c21      	ldrh	r1, [r4, #32]
 8003864:	42a9      	cmp	r1, r5
 8003866:	d10e      	bne.n	8003886 <__iar_annotation$$branch+0x9c6>
 8003868:	200f      	movs	r0, #15
 800386a:	7460      	strb	r0, [r4, #17]
 800386c:	2000      	movs	r0, #0
 800386e:	9000      	str	r0, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	2270      	movs	r2, #112	@ 0x70
 8003874:	7c21      	ldrb	r1, [r4, #16]
 8003876:	2009      	movs	r0, #9
 8003878:	4da5      	ldr	r5, [pc, #660]	@ (8003b10 <.text_5>)
 800387a:	682d      	ldr	r5, [r5, #0]
 800387c:	47a8      	blx	r5
 800387e:	78b0      	ldrb	r0, [r6, #2]
 8003880:	1c40      	adds	r0, r0, #1
 8003882:	70b0      	strb	r0, [r6, #2]
 8003884:	e6fc      	b.n	8003680 <__iar_annotation$$branch+0x7c0>
 8003886:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003888:	0509      	lsls	r1, r1, #20
 800388a:	0f49      	lsrs	r1, r1, #29
 800388c:	180a      	adds	r2, r1, r0
 800388e:	2333      	movs	r3, #51	@ 0x33
 8003890:	435a      	muls	r2, r3
 8003892:	4315      	orrs	r5, r2
 8003894:	8425      	strh	r5, [r4, #32]
 8003896:	180d      	adds	r5, r1, r0
 8003898:	2033      	movs	r0, #51	@ 0x33
 800389a:	4345      	muls	r5, r0
 800389c:	b2ad      	uxth	r5, r5
 800389e:	e67b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038a0:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 80038a2:	42a8      	cmp	r0, r5
 80038a4:	d099      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80038a6:	7c20      	ldrb	r0, [r4, #16]
 80038a8:	f7fd f87a 	bl	80009a0 <PE_PRL_Control_RxEvent>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d113      	bne.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b0:	2032      	movs	r0, #50	@ 0x32
 80038b2:	5c20      	ldrb	r0, [r4, r0]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d00f      	beq.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b8:	2133      	movs	r1, #51	@ 0x33
 80038ba:	5c61      	ldrb	r1, [r4, r1]
 80038bc:	2231      	movs	r2, #49	@ 0x31
 80038be:	54a1      	strb	r1, [r4, r2]
 80038c0:	7460      	strb	r0, [r4, #17]
 80038c2:	2500      	movs	r5, #0
 80038c4:	2132      	movs	r1, #50	@ 0x32
 80038c6:	5465      	strb	r5, [r4, r1]
 80038c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80038ca:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80038cc:	6960      	ldr	r0, [r4, #20]
 80038ce:	2180      	movs	r1, #128	@ 0x80
 80038d0:	01c9      	lsls	r1, r1, #7
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6161      	str	r1, [r4, #20]
 80038d6:	e65f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038d8:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80038da:	42a8      	cmp	r0, r5
 80038dc:	d104      	bne.n	80038e8 <__iar_annotation$$branch+0x4>
 80038de:	2500      	movs	r5, #0
 80038e0:	8465      	strh	r5, [r4, #34]	@ 0x22
 80038e2:	7930      	ldrb	r0, [r6, #4]

080038e4 <__iar_annotation$$branch>:
 80038e4:	f7ff fb87 	bl	8002ff6 <__iar_annotation$$branch+0x136>
 80038e8:	0020      	movs	r0, r4
 80038ea:	f7fd fd83 	bl	80013f4 <PE_CalculateMinTiming>
 80038ee:	e080      	b.n	80039f2 <__iar_annotation$$branch>
 80038f0:	2000      	movs	r0, #0
 80038f2:	9002      	str	r0, [sp, #8]
 80038f4:	2003      	movs	r0, #3
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2001      	movs	r0, #1
 80038fa:	9000      	str	r0, [sp, #0]
 80038fc:	0023      	movs	r3, r4
 80038fe:	332c      	adds	r3, #44	@ 0x2c
 8003900:	2206      	movs	r2, #6
 8003902:	2100      	movs	r1, #0
 8003904:	0020      	movs	r0, r4
 8003906:	f7fd fe2e 	bl	8001566 <PE_Send_DataMessage>
 800390a:	2800      	cmp	r0, #0
 800390c:	d1e3      	bne.n	80038d6 <__iar_annotation$$branch+0xa16>
 800390e:	215d      	movs	r1, #93	@ 0x5d
 8003910:	e6cc      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003912:	2000      	movs	r0, #0
 8003914:	9004      	str	r0, [sp, #16]
 8003916:	ab04      	add	r3, sp, #16
 8003918:	aa05      	add	r2, sp, #20
 800391a:	210a      	movs	r1, #10
 800391c:	4668      	mov	r0, sp
 800391e:	7b40      	ldrb	r0, [r0, #13]
 8003920:	68a7      	ldr	r7, [r4, #8]
 8003922:	697f      	ldr	r7, [r7, #20]
 8003924:	47b8      	blx	r7
 8003926:	2104      	movs	r1, #4
 8003928:	9804      	ldr	r0, [sp, #16]
 800392a:	f7fd fd8f 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800392e:	2800      	cmp	r0, #0
 8003930:	d11f      	bne.n	8003972 <__iar_annotation$$branch+0x8e>
 8003932:	71f0      	strb	r0, [r6, #7]
 8003934:	7230      	strb	r0, [r6, #8]
 8003936:	7c20      	ldrb	r0, [r4, #16]
 8003938:	f7fd fa04 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800393c:	2800      	cmp	r0, #0
 800393e:	d103      	bne.n	8003948 <__iar_annotation$$branch+0x64>
 8003940:	7a30      	ldrb	r0, [r6, #8]
 8003942:	2180      	movs	r1, #128	@ 0x80
 8003944:	4301      	orrs	r1, r0
 8003946:	7231      	strb	r1, [r6, #8]
 8003948:	9a04      	ldr	r2, [sp, #16]
 800394a:	a905      	add	r1, sp, #20
 800394c:	4871      	ldr	r0, [pc, #452]	@ (8003b14 <.text_6>)
 800394e:	1820      	adds	r0, r4, r0
 8003950:	f013 f8dc 	bl	8016b0c <__aeabi_memcpy>
 8003954:	2000      	movs	r0, #0
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	2003      	movs	r0, #3
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	2008      	movs	r0, #8
 800395e:	9000      	str	r0, [sp, #0]
 8003960:	486d      	ldr	r0, [pc, #436]	@ (8003b18 <.text_7>)
 8003962:	1823      	adds	r3, r4, r0
 8003964:	220c      	movs	r2, #12
 8003966:	2100      	movs	r1, #0
 8003968:	0020      	movs	r0, r4
 800396a:	f7fd ff2f 	bl	80017cc <PE_Send_ExtendedMessage>
 800396e:	214c      	movs	r1, #76	@ 0x4c
 8003970:	e69c      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003972:	2001      	movs	r0, #1
 8003974:	e510      	b.n	8003398 <__iar_annotation$$branch+0x4d8>
 8003976:	2001      	movs	r0, #1
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	2339      	movs	r3, #57	@ 0x39
 800397c:	7832      	ldrb	r2, [r6, #0]
 800397e:	2033      	movs	r0, #51	@ 0x33
 8003980:	5c21      	ldrb	r1, [r4, r0]
 8003982:	0020      	movs	r0, r4
 8003984:	f7fd fdc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003988:	2800      	cmp	r0, #0
 800398a:	d144      	bne.n	8003a16 <__iar_annotation$$branch+0x24>
 800398c:	7870      	ldrb	r0, [r6, #1]
 800398e:	7720      	strb	r0, [r4, #28]
 8003990:	83e7      	strh	r7, [r4, #30]
 8003992:	251b      	movs	r5, #27
 8003994:	2144      	movs	r1, #68	@ 0x44
 8003996:	e689      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003998:	8be0      	ldrh	r0, [r4, #30]
 800399a:	03a9      	lsls	r1, r5, #14
 800399c:	4288      	cmp	r0, r1
 800399e:	d104      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a0:	4668      	mov	r0, sp
 80039a2:	7b00      	ldrb	r0, [r0, #12]
 80039a4:	2814      	cmp	r0, #20
 80039a6:	d100      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a8:	e5d6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039aa:	4668      	mov	r0, sp
 80039ac:	7b00      	ldrb	r0, [r0, #12]
 80039ae:	2814      	cmp	r0, #20
 80039b0:	d031      	beq.n	8003a16 <__iar_annotation$$branch+0x24>
 80039b2:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80039b4:	0bc1      	lsrs	r1, r0, #15
 80039b6:	d003      	beq.n	80039c0 <__iar_annotation$$branch+0xdc>
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fd fe11 	bl	80015e0 <PE_Check_ExtendedMessage>
 80039be:	e740      	b.n	8003842 <__iar_annotation$$branch+0x982>
 80039c0:	06c0      	lsls	r0, r0, #27
 80039c2:	0ec0      	lsrs	r0, r0, #27
 80039c4:	2810      	cmp	r0, #16
 80039c6:	d000      	beq.n	80039ca <__iar_annotation$$branch+0xe6>
 80039c8:	e5c6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039ca:	2014      	movs	r0, #20
 80039cc:	4669      	mov	r1, sp
 80039ce:	7308      	strb	r0, [r1, #12]
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc ffc0 	bl	8000956 <PE_Clear_RxEvent>
 80039d6:	2500      	movs	r5, #0
 80039d8:	83e5      	strh	r5, [r4, #30]
 80039da:	2003      	movs	r0, #3
 80039dc:	7460      	strb	r0, [r4, #17]
 80039de:	2159      	movs	r1, #89	@ 0x59
 80039e0:	e664      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7fd ff1e 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80039e8:	e003      	b.n	80039f2 <__iar_annotation$$branch>
 80039ea:	a903      	add	r1, sp, #12
 80039ec:	0020      	movs	r0, r4
 80039ee:	f7fd f9bb 	bl	8000d68 <PE_SubStateMachine_Generic>

080039f2 <__iar_annotation$$branch>:
 80039f2:	f7ff fa35 	bl	8002e60 <__iar_annotation$$branch+0xc>
 80039f6:	a903      	add	r1, sp, #12
 80039f8:	0020      	movs	r0, r4
 80039fa:	f000 f9d5 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80039fe:	0005      	movs	r5, r0
 8003a00:	6860      	ldr	r0, [r4, #4]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	0401      	lsls	r1, r0, #16
 8003a06:	0fc9      	lsrs	r1, r1, #31
 8003a08:	d006      	beq.n	8003a18 <__iar_annotation$$branch+0x26>
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	6801      	ldr	r1, [r0, #0]
 8003a0e:	4668      	mov	r0, sp
 8003a10:	7b40      	ldrb	r0, [r0, #13]
 8003a12:	f001 fec7 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8003a16:	e5bf      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a18:	2101      	movs	r1, #1
 8003a1a:	e7f8      	b.n	8003a0e <__iar_annotation$$branch+0x1c>
 8003a1c:	4668      	mov	r0, sp
 8003a1e:	7b00      	ldrb	r0, [r0, #12]
 8003a20:	2811      	cmp	r0, #17
 8003a22:	d111      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a24:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003a26:	4001      	ands	r1, r0
 8003a28:	2913      	cmp	r1, #19
 8003a2a:	d10d      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	4669      	mov	r1, sp
 8003a30:	7308      	strb	r0, [r1, #12]
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7fc ff8f 	bl	8000956 <PE_Clear_RxEvent>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	9000      	str	r0, [sp, #0]
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	2203      	movs	r2, #3
 8003a40:	2100      	movs	r1, #0
 8003a42:	0020      	movs	r0, r4
 8003a44:	f7fd fd64 	bl	8001510 <PE_Send_CtrlMessage>
 8003a48:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8003a4a:	03a9      	lsls	r1, r5, #14
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	d106      	bne.n	8003a5e <__iar_annotation$$branch+0x6c>
 8003a50:	2092      	movs	r0, #146	@ 0x92
 8003a52:	e582      	b.n	800355a <__iar_annotation$$branch+0x69a>
 8003a54:	4668      	mov	r0, sp
 8003a56:	7b01      	ldrb	r1, [r0, #12]
 8003a58:	0020      	movs	r0, r4
 8003a5a:	f001 fc05 	bl	8005268 <PE_StateMachine_UVDM>
 8003a5e:	e59b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a60:	6960      	ldr	r0, [r4, #20]
 8003a62:	2701      	movs	r7, #1
 8003a64:	0b41      	lsrs	r1, r0, #13
 8003a66:	4039      	ands	r1, r7
 8003a68:	d019      	beq.n	8003a9e <__iar_annotation$$branch+0xac>
 8003a6a:	0b80      	lsrs	r0, r0, #14
 8003a6c:	4038      	ands	r0, r7
 8003a6e:	d007      	beq.n	8003a80 <__iar_annotation$$branch+0x8e>
 8003a70:	215b      	movs	r1, #91	@ 0x5b
 8003a72:	7c20      	ldrb	r0, [r4, #16]
 8003a74:	f7fc fd04 	bl	8000480 <USBPD_PE_Notification>
 8003a78:	6960      	ldr	r0, [r4, #20]
 8003a7a:	4928      	ldr	r1, [pc, #160]	@ (8003b1c <.text_8>)
 8003a7c:	4001      	ands	r1, r0
 8003a7e:	6161      	str	r1, [r4, #20]
 8003a80:	2003      	movs	r0, #3
 8003a82:	7460      	strb	r0, [r4, #17]
 8003a84:	7ca1      	ldrb	r1, [r4, #18]
 8003a86:	2903      	cmp	r1, #3
 8003a88:	d008      	beq.n	8003a9c <__iar_annotation$$branch+0xaa>
 8003a8a:	74a0      	strb	r0, [r4, #18]
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2203      	movs	r2, #3
 8003a94:	7c21      	ldrb	r1, [r4, #16]
 8003a96:	2004      	movs	r0, #4
 8003a98:	6835      	ldr	r5, [r6, #0]
 8003a9a:	47a8      	blx	r5
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	6960      	ldr	r0, [r4, #20]
 8003aa0:	491f      	ldr	r1, [pc, #124]	@ (8003b20 <.text_9>)
 8003aa2:	4001      	ands	r1, r0
 8003aa4:	6161      	str	r1, [r4, #20]
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d101      	bne.n	8003aae <__iar_annotation$$branch>

08003aaa <__iar_annotation$$branch>:
 8003aaa:	f7ff f8c9 	bl	8002c40 <USBPD_PE_StateMachine_SRC+0xb4>

08003aae <__iar_annotation$$branch>:
 8003aae:	f7ff fa0b 	bl	8002ec8 <__iar_annotation$$branch+0x8>
	...

08003ab4 <.text_3>:
 8003ab4:	000081d6 	.word	0x000081d6

08003ab8 <PE_Send_SRCCapabilities>:
 8003ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003aba:	0004      	movs	r4, r0
 8003abc:	000d      	movs	r5, r1
 8003abe:	2000      	movs	r0, #0
 8003ac0:	9002      	str	r0, [sp, #8]
 8003ac2:	ab02      	add	r3, sp, #8
 8003ac4:	4817      	ldr	r0, [pc, #92]	@ (8003b24 <.text_10>)
 8003ac6:	1822      	adds	r2, r4, r0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	7c20      	ldrb	r0, [r4, #16]
 8003acc:	68a6      	ldr	r6, [r4, #8]
 8003ace:	6976      	ldr	r6, [r6, #20]
 8003ad0:	47b0      	blx	r6
 8003ad2:	9802      	ldr	r0, [sp, #8]
 8003ad4:	1c80      	adds	r0, r0, #2
 8003ad6:	9002      	str	r0, [sp, #8]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	9802      	ldr	r0, [sp, #8]
 8003adc:	f7fd fcb6 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d113      	bne.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003ae4:	6860      	ldr	r0, [r4, #4]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	04c1      	lsls	r1, r0, #19
 8003aea:	0fc9      	lsrs	r1, r1, #31
 8003aec:	d00e      	beq.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003aee:	9501      	str	r5, [sp, #4]
 8003af0:	9802      	ldr	r0, [sp, #8]
 8003af2:	b280      	uxth	r0, r0
 8003af4:	9000      	str	r0, [sp, #0]
 8003af6:	4808      	ldr	r0, [pc, #32]	@ (8003b18 <.text_7>)
 8003af8:	1823      	adds	r3, r4, r0
 8003afa:	2201      	movs	r2, #1
 8003afc:	2100      	movs	r1, #0
 8003afe:	7c20      	ldrb	r0, [r4, #16]
 8003b00:	f001 fe54 	bl	80057ac <USBPD_PRL_SendMessage>
 8003b04:	2803      	cmp	r0, #3
 8003b06:	d0e7      	beq.n	8003ad8 <PE_Send_SRCCapabilities+0x20>
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	e7fb      	b.n	8003b08 <PE_Send_SRCCapabilities+0x50>

08003b10 <.text_5>:
 8003b10:	20000000 	.word	0x20000000

08003b14 <.text_6>:
 8003b14:	00000267 	.word	0x00000267

08003b18 <.text_7>:
 8003b18:	00000263 	.word	0x00000263

08003b1c <.text_8>:
 8003b1c:	ffffbfff 	.word	0xffffbfff

08003b20 <.text_9>:
 8003b20:	ffffdfff 	.word	0xffffdfff

08003b24 <.text_10>:
 8003b24:	00000265 	.word	0x00000265

08003b28 <PE_StateMachine_VDMCable>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	b08c      	sub	sp, #48	@ 0x30
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	2502      	movs	r5, #2
 8003b30:	2607      	movs	r6, #7
 8003b32:	7c60      	ldrb	r0, [r4, #17]
 8003b34:	2805      	cmp	r0, #5
 8003b36:	d002      	beq.n	8003b3e <PE_StateMachine_VDMCable+0x16>
 8003b38:	289a      	cmp	r0, #154	@ 0x9a
 8003b3a:	d072      	beq.n	8003c22 <PE_StateMachine_VDMCable+0xfa>
 8003b3c:	e127      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003b3e:	6860      	ldr	r0, [r4, #4]
 8003b40:	7800      	ldrb	r0, [r0, #0]
 8003b42:	0781      	lsls	r1, r0, #30
 8003b44:	0f89      	lsrs	r1, r1, #30
 8003b46:	0020      	movs	r0, r4
 8003b48:	f000 fa5e 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003b4c:	2094      	movs	r0, #148	@ 0x94
 8003b4e:	0080      	lsls	r0, r0, #2
 8003b50:	5821      	ldr	r1, [r4, r0]
 8003b52:	201f      	movs	r0, #31
 8003b54:	4381      	bics	r1, r0
 8003b56:	488f      	ldr	r0, [pc, #572]	@ (8003d94 <.text_3>)
 8003b58:	4308      	orrs	r0, r1
 8003b5a:	2194      	movs	r1, #148	@ 0x94
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	5060      	str	r0, [r4, r1]
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	9a00      	ldr	r2, [sp, #0]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	0953      	lsrs	r3, r2, #5
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	4a8a      	ldr	r2, [pc, #552]	@ (8003d98 <.text_4>)
 8003b70:	4002      	ands	r2, r0
 8003b72:	0358      	lsls	r0, r3, #13
 8003b74:	4310      	orrs	r0, r2
 8003b76:	22ff      	movs	r2, #255	@ 0xff
 8003b78:	0612      	lsls	r2, r2, #24
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	2094      	movs	r0, #148	@ 0x94
 8003b7e:	0080      	lsls	r0, r0, #2
 8003b80:	5022      	str	r2, [r4, r0]
 8003b82:	9800      	ldr	r0, [sp, #0]
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	0880      	lsrs	r0, r0, #2
 8003b88:	4001      	ands	r1, r0
 8003b8a:	d003      	beq.n	8003b94 <PE_StateMachine_VDMCable+0x6c>
 8003b8c:	6960      	ldr	r0, [r4, #20]
 8003b8e:	0741      	lsls	r1, r0, #29
 8003b90:	0fc8      	lsrs	r0, r1, #31
 8003b92:	e000      	b.n	8003b96 <PE_StateMachine_VDMCable+0x6e>
 8003b94:	2002      	movs	r0, #2
 8003b96:	2194      	movs	r1, #148	@ 0x94
 8003b98:	0089      	lsls	r1, r1, #2
 8003b9a:	1867      	adds	r7, r4, r1
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	209a      	movs	r0, #154	@ 0x9a
 8003ba0:	9001      	str	r0, [sp, #4]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	9000      	str	r0, [sp, #0]
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	220f      	movs	r2, #15
 8003baa:	2101      	movs	r1, #1
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fd fcda 	bl	8001566 <PE_Send_DataMessage>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d109      	bne.n	8003bca <PE_StateMachine_VDMCable+0xa2>
 8003bb6:	6960      	ldr	r0, [r4, #20]
 8003bb8:	03e9      	lsls	r1, r5, #15
 8003bba:	4301      	orrs	r1, r0
 8003bbc:	6161      	str	r1, [r4, #20]
 8003bbe:	2051      	movs	r0, #81	@ 0x51
 8003bc0:	7720      	strb	r0, [r4, #28]
 8003bc2:	4876      	ldr	r0, [pc, #472]	@ (8003d9c <.text_5>)
 8003bc4:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003bc6:	251e      	movs	r5, #30
 8003bc8:	e0e1      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003bca:	2809      	cmp	r0, #9
 8003bcc:	d0fc      	beq.n	8003bc8 <PE_StateMachine_VDMCable+0xa0>
 8003bce:	7cb8      	ldrb	r0, [r7, #18]
 8003bd0:	2815      	cmp	r0, #21
 8003bd2:	d202      	bcs.n	8003bda <PE_StateMachine_VDMCable+0xb2>
 8003bd4:	4872      	ldr	r0, [pc, #456]	@ (8003da0 <.text_6>)
 8003bd6:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003bd8:	e00a      	b.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003bda:	68e0      	ldr	r0, [r4, #12]
 8003bdc:	6940      	ldr	r0, [r0, #20]
 8003bde:	9000      	str	r0, [sp, #0]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d005      	beq.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2205      	movs	r2, #5
 8003be8:	2101      	movs	r1, #1
 8003bea:	7c20      	ldrb	r0, [r4, #16]
 8003bec:	9f00      	ldr	r7, [sp, #0]
 8003bee:	47b8      	blx	r7
 8003bf0:	6860      	ldr	r0, [r4, #4]
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	0a00      	lsrs	r0, r0, #8
 8003bf6:	4030      	ands	r0, r6
 8003bf8:	2803      	cmp	r0, #3
 8003bfa:	d100      	bne.n	8003bfe <PE_StateMachine_VDMCable+0xd6>
 8003bfc:	e0a4      	b.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003bfe:	4869      	ldr	r0, [pc, #420]	@ (8003da4 <.text_7>)
 8003c00:	8be1      	ldrh	r1, [r4, #30]
 8003c02:	4201      	tst	r1, r0
 8003c04:	d00b      	beq.n	8003c1e <PE_StateMachine_VDMCable+0xf6>
 8003c06:	2108      	movs	r1, #8
 8003c08:	7461      	strb	r1, [r4, #17]
 8003c0a:	8be1      	ldrh	r1, [r4, #30]
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	292d      	cmp	r1, #45	@ 0x2d
 8003c10:	d203      	bcs.n	8003c1a <PE_StateMachine_VDMCable+0xf2>
 8003c12:	8be1      	ldrh	r1, [r4, #30]
 8003c14:	0005      	movs	r5, r0
 8003c16:	400d      	ands	r5, r1
 8003c18:	e0b9      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1a:	252d      	movs	r5, #45	@ 0x2d
 8003c1c:	e0b7      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1e:	7466      	strb	r6, [r4, #17]
 8003c20:	e0b5      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fc fecf 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8003c2a:	4669      	mov	r1, sp
 8003c2c:	7008      	strb	r0, [r1, #0]
 8003c2e:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003c30:	2700      	movs	r7, #0
 8003c32:	221f      	movs	r2, #31
 8003c34:	9801      	ldr	r0, [sp, #4]
 8003c36:	7800      	ldrb	r0, [r0, #0]
 8003c38:	466b      	mov	r3, sp
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	d14f      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c40:	0bc8      	lsrs	r0, r1, #15
 8003c42:	d14d      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c44:	0b08      	lsrs	r0, r1, #12
 8003c46:	4230      	tst	r0, r6
 8003c48:	d04a      	beq.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	4008      	ands	r0, r1
 8003c4e:	280f      	cmp	r0, #15
 8003c50:	d146      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c52:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003c54:	7880      	ldrb	r0, [r0, #2]
 8003c56:	9000      	str	r0, [sp, #0]
 8003c58:	4002      	ands	r2, r0
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	d13b      	bne.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c5e:	0980      	lsrs	r0, r0, #6
 8003c60:	d039      	beq.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c62:	0608      	lsls	r0, r1, #24
 8003c64:	0f81      	lsrs	r1, r0, #30
 8003c66:	0020      	movs	r0, r4
 8003c68:	f000 f9ce 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	6940      	ldr	r0, [r0, #20]
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d023      	beq.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c74:	9800      	ldr	r0, [sp, #0]
 8003c76:	0985      	lsrs	r5, r0, #6
 8003c78:	07a8      	lsls	r0, r5, #30
 8003c7a:	0f80      	lsrs	r0, r0, #30
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d11d      	bne.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c80:	aa03      	add	r2, sp, #12
 8003c82:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003c84:	1d81      	adds	r1, r0, #6
 8003c86:	7c20      	ldrb	r0, [r4, #16]
 8003c88:	f001 fb9a 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d111      	bne.n	8003cb4 <PE_StateMachine_VDMCable+0x18c>
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	07aa      	lsls	r2, r5, #30
 8003c94:	0f92      	lsrs	r2, r2, #30
 8003c96:	2101      	movs	r1, #1
 8003c98:	7c20      	ldrb	r0, [r4, #16]
 8003c9a:	68e5      	ldr	r5, [r4, #12]
 8003c9c:	696d      	ldr	r5, [r5, #20]
 8003c9e:	47a8      	blx	r5
 8003ca0:	2152      	movs	r1, #82	@ 0x52
 8003ca2:	7c20      	ldrb	r0, [r4, #16]
 8003ca4:	f7fc fbec 	bl	8000480 <USBPD_PE_Notification>
 8003ca8:	2014      	movs	r0, #20
 8003caa:	2194      	movs	r1, #148	@ 0x94
 8003cac:	0089      	lsls	r1, r1, #2
 8003cae:	1861      	adds	r1, r4, r1
 8003cb0:	7488      	strb	r0, [r1, #18]
 8003cb2:	e003      	b.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003cb4:	211b      	movs	r1, #27
 8003cb6:	7c20      	ldrb	r0, [r4, #16]
 8003cb8:	f7fc fbe2 	bl	8000480 <USBPD_PE_Notification>
 8003cbc:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003cbe:	6860      	ldr	r0, [r4, #4]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	0a00      	lsrs	r0, r0, #8
 8003cc4:	4030      	ands	r0, r6
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	d102      	bne.n	8003cd0 <PE_StateMachine_VDMCable+0x1a8>
 8003cca:	7460      	strb	r0, [r4, #17]
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e002      	b.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003cd0:	7466      	strb	r6, [r4, #17]
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	7727      	strb	r7, [r4, #28]
 8003cd6:	9801      	ldr	r0, [sp, #4]
 8003cd8:	7800      	ldrb	r0, [r0, #0]
 8003cda:	2814      	cmp	r0, #20
 8003cdc:	d119      	bne.n	8003d12 <PE_StateMachine_VDMCable+0x1ea>
 8003cde:	e056      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	2a10      	cmp	r2, #16
 8003ce6:	d11b      	bne.n	8003d20 <PE_StateMachine_VDMCable+0x1f8>
 8003ce8:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003cea:	6861      	ldr	r1, [r4, #4]
 8003cec:	6809      	ldr	r1, [r1, #0]
 8003cee:	0a09      	lsrs	r1, r1, #8
 8003cf0:	4031      	ands	r1, r6
 8003cf2:	2903      	cmp	r1, #3
 8003cf4:	d102      	bne.n	8003cfc <PE_StateMachine_VDMCable+0x1d4>
 8003cf6:	7460      	strb	r0, [r4, #17]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	e002      	b.n	8003d02 <PE_StateMachine_VDMCable+0x1da>
 8003cfc:	7466      	strb	r6, [r4, #17]
 8003cfe:	2500      	movs	r5, #0
 8003d00:	7727      	strb	r7, [r4, #28]
 8003d02:	2159      	movs	r1, #89	@ 0x59
 8003d04:	7c20      	ldrb	r0, [r4, #16]
 8003d06:	f7fc fbbb 	bl	8000480 <USBPD_PE_Notification>
 8003d0a:	9801      	ldr	r0, [sp, #4]
 8003d0c:	7800      	ldrb	r0, [r0, #0]
 8003d0e:	2814      	cmp	r0, #20
 8003d10:	d03d      	beq.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d12:	2014      	movs	r0, #20
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	7008      	strb	r0, [r1, #0]
 8003d18:	0020      	movs	r0, r4
 8003d1a:	f7fc fe1c 	bl	8000956 <PE_Clear_RxEvent>
 8003d1e:	e036      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d20:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003d22:	03aa      	lsls	r2, r5, #14
 8003d24:	4291      	cmp	r1, r2
 8003d26:	d132      	bne.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d28:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	0a13      	lsrs	r3, r2, #8
 8003d30:	4033      	ands	r3, r6
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d10c      	bne.n	8003d50 <PE_StateMachine_VDMCable+0x228>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	6945      	ldr	r5, [r0, #20]
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d004      	beq.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2204      	movs	r2, #4
 8003d42:	2101      	movs	r1, #1
 8003d44:	7c20      	ldrb	r0, [r4, #16]
 8003d46:	47a8      	blx	r5
 8003d48:	2003      	movs	r0, #3
 8003d4a:	7460      	strb	r0, [r4, #17]
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	e01e      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d50:	0e93      	lsrs	r3, r2, #26
 8003d52:	4018      	ands	r0, r3
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d10e      	bne.n	8003d76 <PE_StateMachine_VDMCable+0x24e>
 8003d58:	48b7      	ldr	r0, [pc, #732]	@ (8004038 <.text_10>)
 8003d5a:	4010      	ands	r0, r2
 8003d5c:	066a      	lsls	r2, r5, #25
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	600a      	str	r2, [r1, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	7c20      	ldrb	r0, [r4, #16]
 8003d66:	f001 fcea 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003d6a:	480d      	ldr	r0, [pc, #52]	@ (8003da0 <.text_6>)
 8003d6c:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003d6e:	252d      	movs	r5, #45	@ 0x2d
 8003d70:	2008      	movs	r0, #8
 8003d72:	7460      	strb	r0, [r4, #17]
 8003d74:	e00a      	b.n	8003d8c <PE_StateMachine_VDMCable+0x264>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	6945      	ldr	r5, [r0, #20]
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d004      	beq.n	8003d88 <PE_StateMachine_VDMCable+0x260>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2204      	movs	r2, #4
 8003d82:	2101      	movs	r1, #1
 8003d84:	7c20      	ldrb	r0, [r4, #16]
 8003d86:	47a8      	blx	r5
 8003d88:	7466      	strb	r6, [r4, #17]
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	7727      	strb	r7, [r4, #28]
 8003d8e:	0028      	movs	r0, r5
 8003d90:	b00d      	add	sp, #52	@ 0x34
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <.text_3>:
 8003d94:	00008001 	.word	0x00008001

08003d98 <.text_4>:
 8003d98:	0000983f 	.word	0x0000983f

08003d9c <.text_5>:
 8003d9c:	0000801e 	.word	0x0000801e

08003da0 <.text_6>:
 8003da0:	0000802d 	.word	0x0000802d

08003da4 <.text_7>:
 8003da4:	00007fff 	.word	0x00007fff

08003da8 <PE_SubStateMachine_VconnSwap>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	2502      	movs	r5, #2
 8003dae:	2703      	movs	r7, #3
 8003db0:	4ea2      	ldr	r6, [pc, #648]	@ (800403c <.text_11>)
 8003db2:	2014      	movs	r0, #20
 8003db4:	7c62      	ldrb	r2, [r4, #17]
 8003db6:	2a9d      	cmp	r2, #157	@ 0x9d
 8003db8:	d010      	beq.n	8003ddc <PE_SubStateMachine_VconnSwap+0x34>
 8003dba:	d30e      	bcc.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dbc:	2a9f      	cmp	r2, #159	@ 0x9f
 8003dbe:	d057      	beq.n	8003e70 <PE_SubStateMachine_VconnSwap+0xc8>
 8003dc0:	d33d      	bcc.n	8003e3e <PE_SubStateMachine_VconnSwap+0x96>
 8003dc2:	2aa1      	cmp	r2, #161	@ 0xa1
 8003dc4:	d100      	bne.n	8003dc8 <PE_SubStateMachine_VconnSwap+0x20>
 8003dc6:	e085      	b.n	8003ed4 <PE_SubStateMachine_VconnSwap+0x12c>
 8003dc8:	d377      	bcc.n	8003eba <PE_SubStateMachine_VconnSwap+0x112>
 8003dca:	2aa3      	cmp	r2, #163	@ 0xa3
 8003dcc:	d100      	bne.n	8003dd0 <PE_SubStateMachine_VconnSwap+0x28>
 8003dce:	e0a3      	b.n	8003f18 <PE_SubStateMachine_VconnSwap+0x170>
 8003dd0:	d200      	bcs.n	8003dd4 <PE_SubStateMachine_VconnSwap+0x2c>
 8003dd2:	e08e      	b.n	8003ef2 <PE_SubStateMachine_VconnSwap+0x14a>
 8003dd4:	2aa4      	cmp	r2, #164	@ 0xa4
 8003dd6:	d100      	bne.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dd8:	e106      	b.n	8003fe8 <PE_SubStateMachine_VconnSwap+0x240>
 8003dda:	e113      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ddc:	6860      	ldr	r0, [r4, #4]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	21b8      	movs	r1, #184	@ 0xb8
 8003de2:	0149      	lsls	r1, r1, #5
 8003de4:	4001      	ands	r1, r0
 8003de6:	2098      	movs	r0, #152	@ 0x98
 8003de8:	0140      	lsls	r0, r0, #5
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d121      	bne.n	8003e32 <PE_SubStateMachine_VconnSwap+0x8a>
 8003dee:	7c20      	ldrb	r0, [r4, #16]
 8003df0:	68a1      	ldr	r1, [r4, #8]
 8003df2:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8003df4:	4788      	blx	r1
 8003df6:	280a      	cmp	r0, #10
 8003df8:	d002      	beq.n	8003e00 <PE_SubStateMachine_VconnSwap+0x58>
 8003dfa:	280d      	cmp	r0, #13
 8003dfc:	d007      	beq.n	8003e0e <PE_SubStateMachine_VconnSwap+0x66>
 8003dfe:	e00f      	b.n	8003e20 <PE_SubStateMachine_VconnSwap+0x78>
 8003e00:	209e      	movs	r0, #158	@ 0x9e
 8003e02:	7460      	strb	r0, [r4, #17]
 8003e04:	6960      	ldr	r0, [r4, #20]
 8003e06:	02e9      	lsls	r1, r5, #11
 8003e08:	4301      	orrs	r1, r0
 8003e0a:	6161      	str	r1, [r4, #20]
 8003e0c:	e0fa      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	2303      	movs	r3, #3
 8003e14:	220c      	movs	r2, #12
 8003e16:	2100      	movs	r1, #0
 8003e18:	0020      	movs	r0, r4
 8003e1a:	f7fd fb79 	bl	8001510 <PE_Send_CtrlMessage>
 8003e1e:	e0f1      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e20:	2000      	movs	r0, #0
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	2303      	movs	r3, #3
 8003e26:	2204      	movs	r2, #4
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	f7fd fb70 	bl	8001510 <PE_Send_CtrlMessage>
 8003e30:	e002      	b.n	8003e38 <PE_SubStateMachine_VconnSwap+0x90>
 8003e32:	6960      	ldr	r0, [r4, #20]
 8003e34:	4006      	ands	r6, r0
 8003e36:	6166      	str	r6, [r4, #20]
 8003e38:	7467      	strb	r7, [r4, #17]
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	e0e2      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	9000      	str	r0, [sp, #0]
 8003e42:	239e      	movs	r3, #158	@ 0x9e
 8003e44:	2203      	movs	r2, #3
 8003e46:	2100      	movs	r1, #0
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f7fd fb61 	bl	8001510 <PE_Send_CtrlMessage>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1f4      	bne.n	8003e3c <PE_SubStateMachine_VconnSwap+0x94>
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	0401      	lsls	r1, r0, #16
 8003e58:	0fc9      	lsrs	r1, r1, #31
 8003e5a:	d005      	beq.n	8003e68 <PE_SubStateMachine_VconnSwap+0xc0>
 8003e5c:	209f      	movs	r0, #159	@ 0x9f
 8003e5e:	7460      	strb	r0, [r4, #17]
 8003e60:	4877      	ldr	r0, [pc, #476]	@ (8004040 <.text_12>)
 8003e62:	83e0      	strh	r0, [r4, #30]
 8003e64:	2596      	movs	r5, #150	@ 0x96
 8003e66:	e001      	b.n	8003e6c <PE_SubStateMachine_VconnSwap+0xc4>
 8003e68:	20a0      	movs	r0, #160	@ 0xa0
 8003e6a:	7460      	strb	r0, [r4, #17]
 8003e6c:	213f      	movs	r1, #63	@ 0x3f
 8003e6e:	e0b7      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003e70:	8be2      	ldrh	r2, [r4, #30]
 8003e72:	03ab      	lsls	r3, r5, #14
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d100      	bne.n	8003e7a <PE_SubStateMachine_VconnSwap+0xd2>
 8003e78:	e0ac      	b.n	8003fd4 <PE_SubStateMachine_VconnSwap+0x22c>
 8003e7a:	780a      	ldrb	r2, [r1, #0]
 8003e7c:	2a11      	cmp	r2, #17
 8003e7e:	d11b      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e80:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8003e82:	4b70      	ldr	r3, [pc, #448]	@ (8004044 <.text_13>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d116      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e8a:	7008      	strb	r0, [r1, #0]
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fc fd62 	bl	8000956 <PE_Clear_RxEvent>
 8003e92:	68a0      	ldr	r0, [r4, #8]
 8003e94:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d002      	beq.n	8003ea0 <PE_SubStateMachine_VconnSwap+0xf8>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	7c20      	ldrb	r0, [r4, #16]
 8003e9e:	4790      	blx	r2
 8003ea0:	6960      	ldr	r0, [r4, #20]
 8003ea2:	4006      	ands	r6, r0
 8003ea4:	6166      	str	r6, [r4, #20]
 8003ea6:	7467      	strb	r7, [r4, #17]
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	2142      	movs	r1, #66	@ 0x42
 8003eac:	7c20      	ldrb	r0, [r4, #16]
 8003eae:	f7fc fae7 	bl	8000480 <USBPD_PE_Notification>
 8003eb2:	8465      	strh	r5, [r4, #34]	@ 0x22
 8003eb4:	4964      	ldr	r1, [pc, #400]	@ (8004048 <.text_14>)
 8003eb6:	5465      	strb	r5, [r4, r1]
 8003eb8:	e0a4      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003eba:	68a0      	ldr	r0, [r4, #8]
 8003ebc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d002      	beq.n	8003ec8 <PE_SubStateMachine_VconnSwap+0x120>
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	7c20      	ldrb	r0, [r4, #16]
 8003ec6:	4790      	blx	r2
 8003ec8:	20a1      	movs	r0, #161	@ 0xa1
 8003eca:	7460      	strb	r0, [r4, #17]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	495e      	ldr	r1, [pc, #376]	@ (8004048 <.text_14>)
 8003ed0:	5460      	strb	r0, [r4, r1]
 8003ed2:	e097      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	9000      	str	r0, [sp, #0]
 8003ed8:	2303      	movs	r3, #3
 8003eda:	2206      	movs	r2, #6
 8003edc:	2100      	movs	r1, #0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7fd fb16 	bl	8001510 <PE_Send_CtrlMessage>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1f4      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003ee8:	6960      	ldr	r0, [r4, #20]
 8003eea:	4006      	ands	r6, r0
 8003eec:	6166      	str	r6, [r4, #20]
 8003eee:	2142      	movs	r1, #66	@ 0x42
 8003ef0:	e076      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	9000      	str	r0, [sp, #0]
 8003ef6:	23a3      	movs	r3, #163	@ 0xa3
 8003ef8:	220b      	movs	r2, #11
 8003efa:	2100      	movs	r1, #0
 8003efc:	0020      	movs	r0, r4
 8003efe:	f7fd fb07 	bl	8001510 <PE_Send_CtrlMessage>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1e5      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003f06:	6960      	ldr	r0, [r4, #20]
 8003f08:	02e9      	lsls	r1, r5, #11
 8003f0a:	4301      	orrs	r1, r0
 8003f0c:	6161      	str	r1, [r4, #20]
 8003f0e:	484f      	ldr	r0, [pc, #316]	@ (800404c <.text_15>)
 8003f10:	83e0      	strh	r0, [r4, #30]
 8003f12:	251b      	movs	r5, #27
 8003f14:	213e      	movs	r1, #62	@ 0x3e
 8003f16:	e063      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003f18:	780a      	ldrb	r2, [r1, #0]
 8003f1a:	2a11      	cmp	r2, #17
 8003f1c:	d155      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f1e:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8003f20:	23f0      	movs	r3, #240	@ 0xf0
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d150      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f28:	06d2      	lsls	r2, r2, #27
 8003f2a:	0ed2      	lsrs	r2, r2, #27
 8003f2c:	2a03      	cmp	r2, #3
 8003f2e:	d006      	beq.n	8003f3e <PE_SubStateMachine_VconnSwap+0x196>
 8003f30:	2a04      	cmp	r2, #4
 8003f32:	d024      	beq.n	8003f7e <PE_SubStateMachine_VconnSwap+0x1d6>
 8003f34:	2a0c      	cmp	r2, #12
 8003f36:	d014      	beq.n	8003f62 <PE_SubStateMachine_VconnSwap+0x1ba>
 8003f38:	2a10      	cmp	r2, #16
 8003f3a:	d02e      	beq.n	8003f9a <PE_SubStateMachine_VconnSwap+0x1f2>
 8003f3c:	e045      	b.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	0413      	lsls	r3, r2, #16
 8003f44:	0fdb      	lsrs	r3, r3, #31
 8003f46:	d001      	beq.n	8003f4c <PE_SubStateMachine_VconnSwap+0x1a4>
 8003f48:	229f      	movs	r2, #159	@ 0x9f
 8003f4a:	e000      	b.n	8003f4e <PE_SubStateMachine_VconnSwap+0x1a6>
 8003f4c:	22a0      	movs	r2, #160	@ 0xa0
 8003f4e:	7462      	strb	r2, [r4, #17]
 8003f50:	780a      	ldrb	r2, [r1, #0]
 8003f52:	2a14      	cmp	r2, #20
 8003f54:	d003      	beq.n	8003f5e <PE_SubStateMachine_VconnSwap+0x1b6>
 8003f56:	7008      	strb	r0, [r1, #0]
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f7fc fcfc 	bl	8000956 <PE_Clear_RxEvent>
 8003f5e:	213f      	movs	r1, #63	@ 0x3f
 8003f60:	e030      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f62:	6962      	ldr	r2, [r4, #20]
 8003f64:	4032      	ands	r2, r6
 8003f66:	6162      	str	r2, [r4, #20]
 8003f68:	7467      	strb	r7, [r4, #17]
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	780a      	ldrb	r2, [r1, #0]
 8003f6e:	2a14      	cmp	r2, #20
 8003f70:	d003      	beq.n	8003f7a <PE_SubStateMachine_VconnSwap+0x1d2>
 8003f72:	7008      	strb	r0, [r1, #0]
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7fc fcee 	bl	8000956 <PE_Clear_RxEvent>
 8003f7a:	2140      	movs	r1, #64	@ 0x40
 8003f7c:	e022      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	4032      	ands	r2, r6
 8003f82:	6162      	str	r2, [r4, #20]
 8003f84:	7467      	strb	r7, [r4, #17]
 8003f86:	2500      	movs	r5, #0
 8003f88:	780a      	ldrb	r2, [r1, #0]
 8003f8a:	2a14      	cmp	r2, #20
 8003f8c:	d003      	beq.n	8003f96 <PE_SubStateMachine_VconnSwap+0x1ee>
 8003f8e:	7008      	strb	r0, [r1, #0]
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7fc fce0 	bl	8000956 <PE_Clear_RxEvent>
 8003f96:	2141      	movs	r1, #65	@ 0x41
 8003f98:	e014      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	0413      	lsls	r3, r2, #16
 8003fa0:	0fdb      	lsrs	r3, r3, #31
 8003fa2:	d102      	bne.n	8003faa <PE_SubStateMachine_VconnSwap+0x202>
 8003fa4:	22a4      	movs	r2, #164	@ 0xa4
 8003fa6:	7462      	strb	r2, [r4, #17]
 8003fa8:	e004      	b.n	8003fb4 <PE_SubStateMachine_VconnSwap+0x20c>
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	4032      	ands	r2, r6
 8003fae:	6162      	str	r2, [r4, #20]
 8003fb0:	7467      	strb	r7, [r4, #17]
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	780a      	ldrb	r2, [r1, #0]
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	d003      	beq.n	8003fc2 <PE_SubStateMachine_VconnSwap+0x21a>
 8003fba:	7008      	strb	r0, [r1, #0]
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7fc fcca 	bl	8000956 <PE_Clear_RxEvent>
 8003fc2:	2143      	movs	r1, #67	@ 0x43
 8003fc4:	7c20      	ldrb	r0, [r4, #16]
 8003fc6:	f7fc fa5b 	bl	8000480 <USBPD_PE_Notification>
 8003fca:	8be0      	ldrh	r0, [r4, #30]
 8003fcc:	2180      	movs	r1, #128	@ 0x80
 8003fce:	0209      	lsls	r1, r1, #8
 8003fd0:	4288      	cmp	r0, r1
 8003fd2:	d117      	bne.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fd4:	6960      	ldr	r0, [r4, #20]
 8003fd6:	4006      	ands	r6, r0
 8003fd8:	6166      	str	r6, [r4, #20]
 8003fda:	7467      	strb	r7, [r4, #17]
 8003fdc:	2500      	movs	r5, #0
 8003fde:	211c      	movs	r1, #28
 8003fe0:	7c20      	ldrb	r0, [r4, #16]
 8003fe2:	f7fc fa4d 	bl	8000480 <USBPD_PE_Notification>
 8003fe6:	e00d      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fe8:	68a0      	ldr	r0, [r4, #8]
 8003fea:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d002      	beq.n	8003ff6 <PE_SubStateMachine_VconnSwap+0x24e>
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	7c20      	ldrb	r0, [r4, #16]
 8003ff4:	4790      	blx	r2
 8003ff6:	6960      	ldr	r0, [r4, #20]
 8003ff8:	4006      	ands	r6, r0
 8003ffa:	6166      	str	r6, [r4, #20]
 8003ffc:	7467      	strb	r7, [r4, #17]
 8003ffe:	2500      	movs	r5, #0
 8004000:	4813      	ldr	r0, [pc, #76]	@ (8004050 <.text_16>)
 8004002:	8460      	strh	r0, [r4, #34]	@ 0x22
 8004004:	0028      	movs	r0, r5
 8004006:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004008 <PE_ExtRevisionInteroperability_Cable>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	000a      	movs	r2, r1
 800400c:	6843      	ldr	r3, [r0, #4]
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	2103      	movs	r1, #3
 8004012:	2503      	movs	r5, #3
 8004014:	4025      	ands	r5, r4
 8004016:	42aa      	cmp	r2, r5
 8004018:	d300      	bcc.n	800401c <PE_ExtRevisionInteroperability_Cable+0x14>
 800401a:	002a      	movs	r2, r5
 800401c:	4d06      	ldr	r5, [pc, #24]	@ (8004038 <.text_10>)
 800401e:	4025      	ands	r5, r4
 8004020:	0694      	lsls	r4, r2, #26
 8004022:	068a      	lsls	r2, r1, #26
 8004024:	4022      	ands	r2, r4
 8004026:	432a      	orrs	r2, r5
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	0e92      	lsrs	r2, r2, #26
 800402c:	4011      	ands	r1, r2
 800402e:	7c00      	ldrb	r0, [r0, #16]
 8004030:	f001 fb85 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8004034:	bd31      	pop	{r0, r4, r5, pc}
	...

08004038 <.text_10>:
 8004038:	f3ffffff 	.word	0xf3ffffff

0800403c <.text_11>:
 800403c:	ffffefff 	.word	0xffffefff

08004040 <.text_12>:
 8004040:	00008096 	.word	0x00008096

08004044 <.text_13>:
 8004044:	0000f01f 	.word	0x0000f01f

08004048 <.text_14>:
 8004048:	00000262 	.word	0x00000262

0800404c <.text_15>:
 800404c:	0000801b 	.word	0x0000801b

08004050 <.text_16>:
 8004050:	0000802d 	.word	0x0000802d

08004054 <USBPD_PE_SVDM_RequestIdentity>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	000a      	movs	r2, r1
 8004058:	49aa      	ldr	r1, [pc, #680]	@ (8004304 <.text_8>)
 800405a:	0083      	lsls	r3, r0, #2
 800405c:	58cb      	ldr	r3, [r1, r3]
 800405e:	2110      	movs	r1, #16
 8004060:	2401      	movs	r4, #1
 8004062:	681d      	ldr	r5, [r3, #0]
 8004064:	686d      	ldr	r5, [r5, #4]
 8004066:	0a6d      	lsrs	r5, r5, #9
 8004068:	4025      	ands	r5, r4
 800406a:	d004      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 800406c:	68dd      	ldr	r5, [r3, #12]
 800406e:	2d00      	cmp	r5, #0
 8004070:	d001      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 8004072:	2a02      	cmp	r2, #2
 8004074:	d101      	bne.n	800407a <USBPD_PE_SVDM_RequestIdentity+0x26>
 8004076:	2102      	movs	r1, #2
 8004078:	e02d      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800407a:	2532      	movs	r5, #50	@ 0x32
 800407c:	5d5d      	ldrb	r5, [r3, r5]
 800407e:	2d00      	cmp	r5, #0
 8004080:	d104      	bne.n	800408c <USBPD_PE_SVDM_RequestIdentity+0x38>
 8004082:	685d      	ldr	r5, [r3, #4]
 8004084:	682d      	ldr	r5, [r5, #0]
 8004086:	0b2d      	lsrs	r5, r5, #12
 8004088:	402c      	ands	r4, r5
 800408a:	d101      	bne.n	8004090 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 800408c:	2103      	movs	r1, #3
 800408e:	e022      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004090:	2433      	movs	r4, #51	@ 0x33
 8004092:	551a      	strb	r2, [r3, r4]
 8004094:	2507      	movs	r5, #7
 8004096:	2a00      	cmp	r2, #0
 8004098:	d002      	beq.n	80040a0 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 800409a:	2a01      	cmp	r2, #1
 800409c:	d008      	beq.n	80040b0 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 800409e:	e01a      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	4015      	ands	r5, r2
 80040a8:	2d03      	cmp	r5, #3
 80040aa:	d114      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040ac:	217d      	movs	r1, #125	@ 0x7d
 80040ae:	e00c      	b.n	80040ca <USBPD_PE_SVDM_RequestIdentity+0x76>
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4eab      	ldr	r6, [pc, #684]	@ (8004364 <.text_10>)
 80040b6:	4016      	ands	r6, r2
 80040b8:	2782      	movs	r7, #130	@ 0x82
 80040ba:	007f      	lsls	r7, r7, #1
 80040bc:	42be      	cmp	r6, r7
 80040be:	d003      	beq.n	80040c8 <USBPD_PE_SVDM_RequestIdentity+0x74>
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	4015      	ands	r5, r2
 80040c4:	2d03      	cmp	r5, #3
 80040c6:	d106      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040c8:	2105      	movs	r1, #5
 80040ca:	2232      	movs	r2, #50	@ 0x32
 80040cc:	5499      	strb	r1, [r3, r2]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80040d2:	4788      	blx	r1
 80040d4:	2100      	movs	r1, #0
 80040d6:	0008      	movs	r0, r1
 80040d8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080040da <USBPD_PE_SVDM_RequestSVID>:
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	000a      	movs	r2, r1
 80040de:	4989      	ldr	r1, [pc, #548]	@ (8004304 <.text_8>)
 80040e0:	0083      	lsls	r3, r0, #2
 80040e2:	58cb      	ldr	r3, [r1, r3]
 80040e4:	2110      	movs	r1, #16
 80040e6:	68dc      	ldr	r4, [r3, #12]
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d001      	beq.n	80040f0 <USBPD_PE_SVDM_RequestSVID+0x16>
 80040ec:	2a02      	cmp	r2, #2
 80040ee:	d101      	bne.n	80040f4 <USBPD_PE_SVDM_RequestSVID+0x1a>
 80040f0:	2102      	movs	r1, #2
 80040f2:	e020      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80040f4:	2432      	movs	r4, #50	@ 0x32
 80040f6:	5d1c      	ldrb	r4, [r3, r4]
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d105      	bne.n	8004108 <USBPD_PE_SVDM_RequestSVID+0x2e>
 80040fc:	685c      	ldr	r4, [r3, #4]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	2401      	movs	r4, #1
 8004102:	0b2e      	lsrs	r6, r5, #12
 8004104:	4026      	ands	r6, r4
 8004106:	d101      	bne.n	800410c <USBPD_PE_SVDM_RequestSVID+0x32>
 8004108:	2103      	movs	r1, #3
 800410a:	e014      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800410c:	056d      	lsls	r5, r5, #21
 800410e:	0f6d      	lsrs	r5, r5, #29
 8004110:	2d03      	cmp	r5, #3
 8004112:	d110      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004114:	2533      	movs	r5, #51	@ 0x33
 8004116:	555a      	strb	r2, [r3, r5]
 8004118:	257f      	movs	r5, #127	@ 0x7f
 800411a:	2632      	movs	r6, #50	@ 0x32
 800411c:	559d      	strb	r5, [r3, r6]
 800411e:	2a00      	cmp	r2, #0
 8004120:	d005      	beq.n	800412e <USBPD_PE_SVDM_RequestSVID+0x54>
 8004122:	2a01      	cmp	r2, #1
 8004124:	d107      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	0c12      	lsrs	r2, r2, #16
 800412a:	4014      	ands	r4, r2
 800412c:	d003      	beq.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004132:	4788      	blx	r1
 8004134:	2100      	movs	r1, #0
 8004136:	0008      	movs	r0, r1
 8004138:	bd70      	pop	{r4, r5, r6, pc}

0800413a <USBPD_PE_SVDM_RequestMode>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	000b      	movs	r3, r1
 800413e:	4971      	ldr	r1, [pc, #452]	@ (8004304 <.text_8>)
 8004140:	0084      	lsls	r4, r0, #2
 8004142:	590c      	ldr	r4, [r1, r4]
 8004144:	2110      	movs	r1, #16
 8004146:	68e5      	ldr	r5, [r4, #12]
 8004148:	2d00      	cmp	r5, #0
 800414a:	d001      	beq.n	8004150 <USBPD_PE_SVDM_RequestMode+0x16>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d101      	bne.n	8004154 <USBPD_PE_SVDM_RequestMode+0x1a>
 8004150:	2102      	movs	r1, #2
 8004152:	e023      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004154:	2532      	movs	r5, #50	@ 0x32
 8004156:	5d65      	ldrb	r5, [r4, r5]
 8004158:	2d00      	cmp	r5, #0
 800415a:	d105      	bne.n	8004168 <USBPD_PE_SVDM_RequestMode+0x2e>
 800415c:	6865      	ldr	r5, [r4, #4]
 800415e:	682e      	ldr	r6, [r5, #0]
 8004160:	2501      	movs	r5, #1
 8004162:	0b37      	lsrs	r7, r6, #12
 8004164:	402f      	ands	r7, r5
 8004166:	d101      	bne.n	800416c <USBPD_PE_SVDM_RequestMode+0x32>
 8004168:	2103      	movs	r1, #3
 800416a:	e017      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800416c:	0576      	lsls	r6, r6, #21
 800416e:	0f76      	lsrs	r6, r6, #29
 8004170:	2e03      	cmp	r6, #3
 8004172:	d113      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004174:	2633      	movs	r6, #51	@ 0x33
 8004176:	55a3      	strb	r3, [r4, r6]
 8004178:	2681      	movs	r6, #129	@ 0x81
 800417a:	2732      	movs	r7, #50	@ 0x32
 800417c:	55e6      	strb	r6, [r4, r7]
 800417e:	2696      	movs	r6, #150	@ 0x96
 8004180:	00b6      	lsls	r6, r6, #2
 8004182:	53a2      	strh	r2, [r4, r6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USBPD_PE_SVDM_RequestMode+0x5a>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800418c:	6962      	ldr	r2, [r4, #20]
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	4015      	ands	r5, r2
 8004192:	d003      	beq.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004198:	4788      	blx	r1
 800419a:	2100      	movs	r1, #0
 800419c:	0008      	movs	r0, r1
 800419e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080041a0 <USBPD_PE_SVDM_RequestModeEnter>:
 80041a0:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80041a2:	4858      	ldr	r0, [pc, #352]	@ (8004304 <.text_8>)
 80041a4:	466c      	mov	r4, sp
 80041a6:	7824      	ldrb	r4, [r4, #0]
 80041a8:	00a4      	lsls	r4, r4, #2
 80041aa:	5904      	ldr	r4, [r0, r4]
 80041ac:	2010      	movs	r0, #16
 80041ae:	68e5      	ldr	r5, [r4, #12]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	d101      	bne.n	80041b8 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 80041b4:	2002      	movs	r0, #2
 80041b6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041b8:	2532      	movs	r5, #50	@ 0x32
 80041ba:	5d65      	ldrb	r5, [r4, r5]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d105      	bne.n	80041cc <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 80041c0:	6865      	ldr	r5, [r4, #4]
 80041c2:	682e      	ldr	r6, [r5, #0]
 80041c4:	2501      	movs	r5, #1
 80041c6:	0b37      	lsrs	r7, r6, #12
 80041c8:	402f      	ands	r7, r5
 80041ca:	d101      	bne.n	80041d0 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 80041cc:	2003      	movs	r0, #3
 80041ce:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041d0:	27e1      	movs	r7, #225	@ 0xe1
 80041d2:	00ff      	lsls	r7, r7, #3
 80041d4:	4037      	ands	r7, r6
 80041d6:	26c2      	movs	r6, #194	@ 0xc2
 80041d8:	00b6      	lsls	r6, r6, #2
 80041da:	42b7      	cmp	r7, r6
 80041dc:	d11e      	bne.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80041de:	2633      	movs	r6, #51	@ 0x33
 80041e0:	55a1      	strb	r1, [r4, r6]
 80041e2:	2682      	movs	r6, #130	@ 0x82
 80041e4:	2732      	movs	r7, #50	@ 0x32
 80041e6:	55e6      	strb	r6, [r4, r7]
 80041e8:	2696      	movs	r6, #150	@ 0x96
 80041ea:	00b6      	lsls	r6, r6, #2
 80041ec:	53a2      	strh	r2, [r4, r6]
 80041ee:	6966      	ldr	r6, [r4, #20]
 80041f0:	4aaf      	ldr	r2, [pc, #700]	@ (80044b0 <.text_13>)
 80041f2:	4032      	ands	r2, r6
 80041f4:	019e      	lsls	r6, r3, #6
 80041f6:	23e0      	movs	r3, #224	@ 0xe0
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4033      	ands	r3, r6
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	2900      	cmp	r1, #0
 8004202:	d005      	beq.n	8004210 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 8004204:	2902      	cmp	r1, #2
 8004206:	d000      	beq.n	800420a <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004208:	d208      	bcs.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 800420a:	0c19      	lsrs	r1, r3, #16
 800420c:	400d      	ands	r5, r1
 800420e:	d005      	beq.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004210:	4668      	mov	r0, sp
 8004212:	7800      	ldrb	r0, [r0, #0]
 8004214:	68a1      	ldr	r1, [r4, #8]
 8004216:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004218:	4788      	blx	r1
 800421a:	2000      	movs	r0, #0
 800421c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800421e <USBPD_PE_SVDM_RequestModeExit>:
 800421e:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004220:	4838      	ldr	r0, [pc, #224]	@ (8004304 <.text_8>)
 8004222:	466c      	mov	r4, sp
 8004224:	7824      	ldrb	r4, [r4, #0]
 8004226:	00a4      	lsls	r4, r4, #2
 8004228:	5904      	ldr	r4, [r0, r4]
 800422a:	2010      	movs	r0, #16
 800422c:	68e5      	ldr	r5, [r4, #12]
 800422e:	2d00      	cmp	r5, #0
 8004230:	d101      	bne.n	8004236 <USBPD_PE_SVDM_RequestModeExit+0x18>
 8004232:	2002      	movs	r0, #2
 8004234:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004236:	2532      	movs	r5, #50	@ 0x32
 8004238:	5d65      	ldrb	r5, [r4, r5]
 800423a:	2d00      	cmp	r5, #0
 800423c:	d105      	bne.n	800424a <USBPD_PE_SVDM_RequestModeExit+0x2c>
 800423e:	6865      	ldr	r5, [r4, #4]
 8004240:	682e      	ldr	r6, [r5, #0]
 8004242:	2501      	movs	r5, #1
 8004244:	0b37      	lsrs	r7, r6, #12
 8004246:	402f      	ands	r7, r5
 8004248:	d101      	bne.n	800424e <USBPD_PE_SVDM_RequestModeExit+0x30>
 800424a:	2003      	movs	r0, #3
 800424c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800424e:	27e1      	movs	r7, #225	@ 0xe1
 8004250:	00ff      	lsls	r7, r7, #3
 8004252:	4037      	ands	r7, r6
 8004254:	26c2      	movs	r6, #194	@ 0xc2
 8004256:	00b6      	lsls	r6, r6, #2
 8004258:	42b7      	cmp	r7, r6
 800425a:	d11e      	bne.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800425c:	2633      	movs	r6, #51	@ 0x33
 800425e:	55a1      	strb	r1, [r4, r6]
 8004260:	2683      	movs	r6, #131	@ 0x83
 8004262:	2732      	movs	r7, #50	@ 0x32
 8004264:	55e6      	strb	r6, [r4, r7]
 8004266:	2696      	movs	r6, #150	@ 0x96
 8004268:	00b6      	lsls	r6, r6, #2
 800426a:	53a2      	strh	r2, [r4, r6]
 800426c:	6966      	ldr	r6, [r4, #20]
 800426e:	4a90      	ldr	r2, [pc, #576]	@ (80044b0 <.text_13>)
 8004270:	4032      	ands	r2, r6
 8004272:	019e      	lsls	r6, r3, #6
 8004274:	23e0      	movs	r3, #224	@ 0xe0
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4033      	ands	r3, r6
 800427a:	4313      	orrs	r3, r2
 800427c:	6163      	str	r3, [r4, #20]
 800427e:	2900      	cmp	r1, #0
 8004280:	d005      	beq.n	800428e <USBPD_PE_SVDM_RequestModeExit+0x70>
 8004282:	2902      	cmp	r1, #2
 8004284:	d000      	beq.n	8004288 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 8004286:	d208      	bcs.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004288:	0c19      	lsrs	r1, r3, #16
 800428a:	400d      	ands	r5, r1
 800428c:	d005      	beq.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800428e:	4668      	mov	r0, sp
 8004290:	7800      	ldrb	r0, [r0, #0]
 8004292:	68a1      	ldr	r1, [r4, #8]
 8004294:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004296:	4788      	blx	r1
 8004298:	2000      	movs	r0, #0
 800429a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800429c <USBPD_PE_SVDM_RequestSpecific>:
 800429c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800429e:	4819      	ldr	r0, [pc, #100]	@ (8004304 <.text_8>)
 80042a0:	466c      	mov	r4, sp
 80042a2:	7824      	ldrb	r4, [r4, #0]
 80042a4:	00a4      	lsls	r4, r4, #2
 80042a6:	5904      	ldr	r4, [r0, r4]
 80042a8:	2010      	movs	r0, #16
 80042aa:	68e5      	ldr	r5, [r4, #12]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d101      	bne.n	80042b4 <USBPD_PE_SVDM_RequestSpecific+0x18>
 80042b0:	2002      	movs	r0, #2
 80042b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042b4:	2532      	movs	r5, #50	@ 0x32
 80042b6:	5d65      	ldrb	r5, [r4, r5]
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d105      	bne.n	80042c8 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 80042bc:	6865      	ldr	r5, [r4, #4]
 80042be:	682d      	ldr	r5, [r5, #0]
 80042c0:	2601      	movs	r6, #1
 80042c2:	0b2f      	lsrs	r7, r5, #12
 80042c4:	4037      	ands	r7, r6
 80042c6:	d101      	bne.n	80042cc <USBPD_PE_SVDM_RequestSpecific+0x30>
 80042c8:	2003      	movs	r0, #3
 80042ca:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042cc:	6967      	ldr	r7, [r4, #20]
 80042ce:	0c3f      	lsrs	r7, r7, #16
 80042d0:	403e      	ands	r6, r7
 80042d2:	d101      	bne.n	80042d8 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 80042d4:	000e      	movs	r6, r1
 80042d6:	d113      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042d8:	056d      	lsls	r5, r5, #21
 80042da:	0f6d      	lsrs	r5, r5, #29
 80042dc:	2d03      	cmp	r5, #3
 80042de:	d10f      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042e0:	2033      	movs	r0, #51	@ 0x33
 80042e2:	5421      	strb	r1, [r4, r0]
 80042e4:	2085      	movs	r0, #133	@ 0x85
 80042e6:	2132      	movs	r1, #50	@ 0x32
 80042e8:	5460      	strb	r0, [r4, r1]
 80042ea:	2095      	movs	r0, #149	@ 0x95
 80042ec:	0080      	lsls	r0, r0, #2
 80042ee:	1820      	adds	r0, r4, r0
 80042f0:	6002      	str	r2, [r0, #0]
 80042f2:	8083      	strh	r3, [r0, #4]
 80042f4:	4668      	mov	r0, sp
 80042f6:	7800      	ldrb	r0, [r0, #0]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80042fc:	4788      	blx	r1
 80042fe:	2000      	movs	r0, #0
 8004300:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004304 <.text_8>:
 8004304:	2000023c 	.word	0x2000023c

08004308 <USBPD_PE_SVDM_RequestAttention>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	000b      	movs	r3, r1
 800430c:	4969      	ldr	r1, [pc, #420]	@ (80044b4 <.text_14>)
 800430e:	0084      	lsls	r4, r0, #2
 8004310:	590d      	ldr	r5, [r1, r4]
 8004312:	2110      	movs	r1, #16
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d001      	beq.n	800431e <USBPD_PE_SVDM_RequestAttention+0x16>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <USBPD_PE_SVDM_RequestAttention+0x1a>
 800431e:	2102      	movs	r1, #2
 8004320:	e01e      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004322:	2332      	movs	r3, #50	@ 0x32
 8004324:	5ceb      	ldrb	r3, [r5, r3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800432a:	686b      	ldr	r3, [r5, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	04dc      	lsls	r4, r3, #19
 8004330:	0fe4      	lsrs	r4, r4, #31
 8004332:	d101      	bne.n	8004338 <USBPD_PE_SVDM_RequestAttention+0x30>
 8004334:	2103      	movs	r1, #3
 8004336:	e013      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	0f5b      	lsrs	r3, r3, #29
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10f      	bne.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004340:	2400      	movs	r4, #0
 8004342:	2333      	movs	r3, #51	@ 0x33
 8004344:	54ec      	strb	r4, [r5, r3]
 8004346:	2184      	movs	r1, #132	@ 0x84
 8004348:	2332      	movs	r3, #50	@ 0x32
 800434a:	54e9      	strb	r1, [r5, r3]
 800434c:	2195      	movs	r1, #149	@ 0x95
 800434e:	0089      	lsls	r1, r1, #2
 8004350:	1869      	adds	r1, r5, r1
 8004352:	2306      	movs	r3, #6
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	808a      	strh	r2, [r1, #4]
 8004358:	68a9      	ldr	r1, [r5, #8]
 800435a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800435c:	4788      	blx	r1
 800435e:	2100      	movs	r1, #0
 8004360:	0008      	movs	r0, r1
 8004362:	bd32      	pop	{r1, r4, r5, pc}

08004364 <.text_10>:
 8004364:	00000704 	.word	0x00000704

08004368 <USBPD_PE_UVDM_RequestMessage>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	000a      	movs	r2, r1
 800436c:	4951      	ldr	r1, [pc, #324]	@ (80044b4 <.text_14>)
 800436e:	0083      	lsls	r3, r0, #2
 8004370:	58cb      	ldr	r3, [r1, r3]
 8004372:	2110      	movs	r1, #16
 8004374:	68dc      	ldr	r4, [r3, #12]
 8004376:	2c00      	cmp	r4, #0
 8004378:	d101      	bne.n	800437e <USBPD_PE_UVDM_RequestMessage+0x16>
 800437a:	2102      	movs	r1, #2
 800437c:	e01d      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 800437e:	2432      	movs	r4, #50	@ 0x32
 8004380:	5d1c      	ldrb	r4, [r3, r4]
 8004382:	2c00      	cmp	r4, #0
 8004384:	d105      	bne.n	8004392 <USBPD_PE_UVDM_RequestMessage+0x2a>
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	6824      	ldr	r4, [r4, #0]
 800438a:	2501      	movs	r5, #1
 800438c:	0b26      	lsrs	r6, r4, #12
 800438e:	402e      	ands	r6, r5
 8004390:	d101      	bne.n	8004396 <USBPD_PE_UVDM_RequestMessage+0x2e>
 8004392:	2103      	movs	r1, #3
 8004394:	e011      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 8004396:	0be6      	lsrs	r6, r4, #15
 8004398:	4035      	ands	r5, r6
 800439a:	d101      	bne.n	80043a0 <USBPD_PE_UVDM_RequestMessage+0x38>
 800439c:	0015      	movs	r5, r2
 800439e:	d10c      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a0:	0564      	lsls	r4, r4, #21
 80043a2:	0f64      	lsrs	r4, r4, #29
 80043a4:	2c03      	cmp	r4, #3
 80043a6:	d108      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a8:	2133      	movs	r1, #51	@ 0x33
 80043aa:	545a      	strb	r2, [r3, r1]
 80043ac:	2186      	movs	r1, #134	@ 0x86
 80043ae:	2232      	movs	r2, #50	@ 0x32
 80043b0:	5499      	strb	r1, [r3, r2]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80043b6:	4788      	blx	r1
 80043b8:	2100      	movs	r1, #0
 80043ba:	0008      	movs	r0, r1
 80043bc:	bd70      	pop	{r4, r5, r6, pc}

080043be <PE_Receive_SVDM>:
 80043be:	493e      	ldr	r1, [pc, #248]	@ (80044b8 <.text_15>)
 80043c0:	1842      	adds	r2, r0, r1
 80043c2:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	0f49      	lsrs	r1, r1, #29
 80043c8:	1e49      	subs	r1, r1, #1
 80043ca:	7611      	strb	r1, [r2, #24]
 80043cc:	2131      	movs	r1, #49	@ 0x31
 80043ce:	5c41      	ldrb	r1, [r0, r1]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d000      	beq.n	80043d6 <PE_Receive_SVDM+0x18>
 80043d4:	4770      	bx	lr
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	2300      	movs	r3, #0
 80043da:	e010      	b.n	80043fe <PE_Receive_SVDM+0x40>
 80043dc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80043de:	009c      	lsls	r4, r3, #2
 80043e0:	1909      	adds	r1, r1, r4
 80043e2:	798c      	ldrb	r4, [r1, #6]
 80043e4:	79cd      	ldrb	r5, [r1, #7]
 80043e6:	022d      	lsls	r5, r5, #8
 80043e8:	1964      	adds	r4, r4, r5
 80043ea:	7a0d      	ldrb	r5, [r1, #8]
 80043ec:	042d      	lsls	r5, r5, #16
 80043ee:	1964      	adds	r4, r4, r5
 80043f0:	7a49      	ldrb	r1, [r1, #9]
 80043f2:	0609      	lsls	r1, r1, #24
 80043f4:	1861      	adds	r1, r4, r1
 80043f6:	009c      	lsls	r4, r3, #2
 80043f8:	5111      	str	r1, [r2, r4]
 80043fa:	1c5b      	adds	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	7e11      	ldrb	r1, [r2, #24]
 8004400:	428b      	cmp	r3, r1
 8004402:	dbeb      	blt.n	80043dc <PE_Receive_SVDM+0x1e>
 8004404:	0004      	movs	r4, r0
 8004406:	2503      	movs	r5, #3
 8004408:	4b2c      	ldr	r3, [pc, #176]	@ (80044bc <.text_16>)
 800440a:	482d      	ldr	r0, [pc, #180]	@ (80044c0 <.text_17>)
 800440c:	2694      	movs	r6, #148	@ 0x94
 800440e:	00b6      	lsls	r6, r6, #2
 8004410:	5da6      	ldrb	r6, [r4, r6]
 8004412:	06f6      	lsls	r6, r6, #27
 8004414:	0ef6      	lsrs	r6, r6, #27
 8004416:	1e76      	subs	r6, r6, #1
 8004418:	d00d      	beq.n	8004436 <PE_Receive_SVDM+0x78>
 800441a:	1e76      	subs	r6, r6, #1
 800441c:	d022      	beq.n	8004464 <PE_Receive_SVDM+0xa6>
 800441e:	1e76      	subs	r6, r6, #1
 8004420:	d025      	beq.n	800446e <PE_Receive_SVDM+0xb0>
 8004422:	1e76      	subs	r6, r6, #1
 8004424:	d028      	beq.n	8004478 <PE_Receive_SVDM+0xba>
 8004426:	1e76      	subs	r6, r6, #1
 8004428:	d02b      	beq.n	8004482 <PE_Receive_SVDM+0xc4>
 800442a:	1e76      	subs	r6, r6, #1
 800442c:	d02e      	beq.n	800448c <PE_Receive_SVDM+0xce>
 800442e:	3e0a      	subs	r6, #10
 8004430:	2e0f      	cmp	r6, #15
 8004432:	d937      	bls.n	80044a4 <PE_Receive_SVDM+0xe6>
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	2150      	movs	r1, #80	@ 0x50
 8004438:	7721      	strb	r1, [r4, #28]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	680a      	ldr	r2, [r1, #0]
 800443e:	0693      	lsls	r3, r2, #26
 8004440:	0fdb      	lsrs	r3, r3, #31
 8004442:	2694      	movs	r6, #148	@ 0x94
 8004444:	00b6      	lsls	r6, r6, #2
 8004446:	59a6      	ldr	r6, [r4, r6]
 8004448:	0b76      	lsrs	r6, r6, #13
 800444a:	4035      	ands	r5, r6
 800444c:	429d      	cmp	r5, r3
 800444e:	da00      	bge.n	8004452 <PE_Receive_SVDM+0x94>
 8004450:	002b      	movs	r3, r5
 8004452:	2520      	movs	r5, #32
 8004454:	43aa      	bics	r2, r5
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	402b      	ands	r3, r5
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	83e0      	strh	r0, [r4, #30]
 8004460:	2075      	movs	r0, #117	@ 0x75
 8004462:	e023      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004464:	2152      	movs	r1, #82	@ 0x52
 8004466:	7721      	strb	r1, [r4, #28]
 8004468:	83e0      	strh	r0, [r4, #30]
 800446a:	2076      	movs	r0, #118	@ 0x76
 800446c:	e01e      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800446e:	2153      	movs	r1, #83	@ 0x53
 8004470:	7721      	strb	r1, [r4, #28]
 8004472:	83e0      	strh	r0, [r4, #30]
 8004474:	2078      	movs	r0, #120	@ 0x78
 8004476:	e019      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004478:	2054      	movs	r0, #84	@ 0x54
 800447a:	7720      	strb	r0, [r4, #28]
 800447c:	83e3      	strh	r3, [r4, #30]
 800447e:	2079      	movs	r0, #121	@ 0x79
 8004480:	e014      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004482:	2055      	movs	r0, #85	@ 0x55
 8004484:	7720      	strb	r0, [r4, #28]
 8004486:	83e3      	strh	r3, [r4, #30]
 8004488:	207a      	movs	r0, #122	@ 0x7a
 800448a:	e00f      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <PE_Receive_SVDM+0xe2>
 8004494:	2900      	cmp	r1, #0
 8004496:	d000      	beq.n	800449a <PE_Receive_SVDM+0xdc>
 8004498:	2101      	movs	r1, #1
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	7c20      	ldrb	r0, [r4, #16]
 800449e:	4798      	blx	r3
 80044a0:	7465      	strb	r5, [r4, #17]
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	215a      	movs	r1, #90	@ 0x5a
 80044a6:	7721      	strb	r1, [r4, #28]
 80044a8:	83e0      	strh	r0, [r4, #30]
 80044aa:	207b      	movs	r0, #123	@ 0x7b
 80044ac:	7460      	strb	r0, [r4, #17]
 80044ae:	bd70      	pop	{r4, r5, r6, pc}

080044b0 <.text_13>:
 80044b0:	fffffe3f 	.word	0xfffffe3f

080044b4 <.text_14>:
 80044b4:	2000023c 	.word	0x2000023c

080044b8 <.text_15>:
 80044b8:	00000494 	.word	0x00000494

080044bc <.text_16>:
 80044bc:	00008019 	.word	0x00008019

080044c0 <.text_17>:
 80044c0:	0000800f 	.word	0x0000800f

080044c4 <PE_StateMachine_VDM>:
 80044c4:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80044c6:	b09c      	sub	sp, #112	@ 0x70
 80044c8:	0005      	movs	r5, r0
 80044ca:	2002      	movs	r0, #2
 80044cc:	9004      	str	r0, [sp, #16]
 80044ce:	7c6a      	ldrb	r2, [r5, #17]
 80044d0:	0010      	movs	r0, r2
 80044d2:	3875      	subs	r0, #117	@ 0x75
 80044d4:	2807      	cmp	r0, #7
 80044d6:	d206      	bcs.n	80044e6 <__iar_annotation$$branch+0x4>
 80044d8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80044da:	7800      	ldrb	r0, [r0, #0]
 80044dc:	2814      	cmp	r0, #20
 80044de:	d002      	beq.n	80044e6 <__iar_annotation$$branch+0x4>
 80044e0:	2002      	movs	r0, #2

080044e2 <__iar_annotation$$branch>:
 80044e2:	f000 febc 	bl	800525e <__iar_annotation$$branch+0xce4>
 80044e6:	2094      	movs	r0, #148	@ 0x94
 80044e8:	0080      	lsls	r0, r0, #2
 80044ea:	182c      	adds	r4, r5, r0
 80044ec:	210b      	movs	r1, #11
 80044ee:	271e      	movs	r7, #30
 80044f0:	201f      	movs	r0, #31
 80044f2:	43c0      	mvns	r0, r0
 80044f4:	26c0      	movs	r6, #192	@ 0xc0
 80044f6:	43f6      	mvns	r6, r6
 80044f8:	2a75      	cmp	r2, #117	@ 0x75
 80044fa:	d041      	beq.n	8004580 <__iar_annotation$$branch+0x6>
 80044fc:	2a76      	cmp	r2, #118	@ 0x76
 80044fe:	d100      	bne.n	8004502 <__iar_annotation$$branch+0x20>
 8004500:	e0bb      	b.n	800467a <__iar_annotation$$branch+0x100>
 8004502:	2a77      	cmp	r2, #119	@ 0x77
 8004504:	d100      	bne.n	8004508 <__iar_annotation$$branch+0x26>
 8004506:	e144      	b.n	8004792 <__iar_annotation$$branch+0x218>
 8004508:	2a78      	cmp	r2, #120	@ 0x78
 800450a:	d100      	bne.n	800450e <__iar_annotation$$branch+0x2c>
 800450c:	e1b4      	b.n	8004878 <__iar_annotation$$branch+0x2fe>
 800450e:	2a79      	cmp	r2, #121	@ 0x79
 8004510:	d100      	bne.n	8004514 <__iar_annotation$$branch+0x32>
 8004512:	e216      	b.n	8004942 <__iar_annotation$$branch+0x3c8>
 8004514:	2a7a      	cmp	r2, #122	@ 0x7a
 8004516:	d100      	bne.n	800451a <__iar_annotation$$branch+0x38>
 8004518:	e24b      	b.n	80049b2 <__iar_annotation$$branch+0x438>
 800451a:	2a7b      	cmp	r2, #123	@ 0x7b
 800451c:	d100      	bne.n	8004520 <__iar_annotation$$branch+0x3e>
 800451e:	e292      	b.n	8004a46 <__iar_annotation$$branch+0x4cc>
 8004520:	2a7d      	cmp	r2, #125	@ 0x7d
 8004522:	d100      	bne.n	8004526 <__iar_annotation$$branch+0x44>
 8004524:	e2e0      	b.n	8004ae8 <__iar_annotation$$branch+0x56e>
 8004526:	2a7f      	cmp	r2, #127	@ 0x7f
 8004528:	d100      	bne.n	800452c <__iar_annotation$$branch+0x4a>
 800452a:	e352      	b.n	8004bd2 <__iar_annotation$$branch+0x658>
 800452c:	2a81      	cmp	r2, #129	@ 0x81
 800452e:	d100      	bne.n	8004532 <__iar_annotation$$branch+0x50>
 8004530:	e3c2      	b.n	8004cb8 <__iar_annotation$$branch+0x73e>
 8004532:	2a82      	cmp	r2, #130	@ 0x82
 8004534:	d101      	bne.n	800453a <__iar_annotation$$branch+0x4>

08004536 <__iar_annotation$$branch>:
 8004536:	f000 fc3b 	bl	8004db0 <__iar_annotation$$branch+0x836>
 800453a:	2a83      	cmp	r2, #131	@ 0x83
 800453c:	d101      	bne.n	8004542 <__iar_annotation$$branch+0x4>

0800453e <__iar_annotation$$branch>:
 800453e:	f000 fcc9 	bl	8004ed4 <__iar_annotation$$branch+0x95a>
 8004542:	2a84      	cmp	r2, #132	@ 0x84
 8004544:	d101      	bne.n	800454a <__iar_annotation$$branch+0x4>

08004546 <__iar_annotation$$branch>:
 8004546:	f000 fe38 	bl	80051ba <__iar_annotation$$branch+0xc40>
 800454a:	2a85      	cmp	r2, #133	@ 0x85
 800454c:	d101      	bne.n	8004552 <__iar_annotation$$branch+0x4>

0800454e <__iar_annotation$$branch>:
 800454e:	f000 fd5d 	bl	800500c <__iar_annotation$$branch+0xa92>
 8004552:	2a87      	cmp	r2, #135	@ 0x87
 8004554:	d100      	bne.n	8004558 <__iar_annotation$$branch+0xa>
 8004556:	e2fc      	b.n	8004b52 <__iar_annotation$$branch+0x5d8>
 8004558:	2a89      	cmp	r2, #137	@ 0x89
 800455a:	d100      	bne.n	800455e <__iar_annotation$$branch+0x10>
 800455c:	e375      	b.n	8004c4a <__iar_annotation$$branch+0x6d0>
 800455e:	2a8b      	cmp	r2, #139	@ 0x8b
 8004560:	d101      	bne.n	8004566 <__iar_annotation$$branch+0x4>

08004562 <__iar_annotation$$branch>:
 8004562:	f000 fbe4 	bl	8004d2e <__iar_annotation$$branch+0x7b4>
 8004566:	2a8c      	cmp	r2, #140	@ 0x8c
 8004568:	d101      	bne.n	800456e <__iar_annotation$$branch+0x4>

0800456a <__iar_annotation$$branch>:
 800456a:	f000 fc63 	bl	8004e34 <__iar_annotation$$branch+0x8ba>
 800456e:	2a8d      	cmp	r2, #141	@ 0x8d
 8004570:	d101      	bne.n	8004576 <__iar_annotation$$branch+0x4>

08004572 <__iar_annotation$$branch>:
 8004572:	f000 fcf7 	bl	8004f64 <__iar_annotation$$branch+0x9ea>
 8004576:	2a8f      	cmp	r2, #143	@ 0x8f
 8004578:	d101      	bne.n	800457e <__iar_annotation$$branch+0x4>

0800457a <__iar_annotation$$branch>:
 800457a:	f000 fda5 	bl	80050c8 <__iar_annotation$$branch+0xb4e>
 800457e:	e2b2      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004580:	2201      	movs	r2, #1
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	03d3      	lsls	r3, r2, #15
 8004586:	8bea      	ldrh	r2, [r5, #30]
 8004588:	429a      	cmp	r2, r3
 800458a:	d100      	bne.n	800458e <__iar_annotation$$branch+0x14>
 800458c:	e262      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800458e:	2701      	movs	r7, #1
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	4010      	ands	r0, r2
 8004594:	4338      	orrs	r0, r7
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	4303      	orrs	r3, r0
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	6868      	ldr	r0, [r5, #4]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	0942      	lsrs	r2, r0, #5
 80045a2:	403a      	ands	r2, r7
 80045a4:	48c9      	ldr	r0, [pc, #804]	@ (80048cc <__iar_annotation$$branch+0x352>)
 80045a6:	4018      	ands	r0, r3
 80045a8:	0352      	lsls	r2, r2, #13
 80045aa:	4302      	orrs	r2, r0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	6868      	ldr	r0, [r5, #4]
 80045b0:	6800      	ldr	r0, [r0, #0]
 80045b2:	4001      	ands	r1, r0
 80045b4:	2909      	cmp	r1, #9
 80045b6:	d051      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045b8:	68e8      	ldr	r0, [r5, #12]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d04e      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045be:	6803      	ldr	r3, [r0, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04b      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045c4:	0c10      	lsrs	r0, r2, #16
 80045c6:	21ff      	movs	r1, #255	@ 0xff
 80045c8:	0209      	lsls	r1, r1, #8
 80045ca:	4288      	cmp	r0, r1
 80045cc:	d146      	bne.n	800465c <__iar_annotation$$branch+0xe2>
 80045ce:	a90b      	add	r1, sp, #44	@ 0x2c
 80045d0:	7c28      	ldrb	r0, [r5, #16]
 80045d2:	4798      	blx	r3
 80045d4:	2803      	cmp	r0, #3
 80045d6:	d002      	beq.n	80045de <__iar_annotation$$branch+0x64>
 80045d8:	280f      	cmp	r0, #15
 80045da:	d005      	beq.n	80045e8 <__iar_annotation$$branch+0x6e>
 80045dc:	e03e      	b.n	800465c <__iar_annotation$$branch+0xe2>
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	21c0      	movs	r1, #192	@ 0xc0
 80045e2:	4301      	orrs	r1, r0
 80045e4:	6021      	str	r1, [r4, #0]
 80045e6:	e03e      	b.n	8004666 <__iar_annotation$$branch+0xec>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	4006      	ands	r6, r0
 80045ec:	2040      	movs	r0, #64	@ 0x40
 80045ee:	4330      	orrs	r0, r6
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80045f4:	9015      	str	r0, [sp, #84]	@ 0x54
 80045f6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80045f8:	9016      	str	r0, [sp, #88]	@ 0x58
 80045fa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80045fc:	9017      	str	r0, [sp, #92]	@ 0x5c
 80045fe:	2004      	movs	r0, #4
 8004600:	9003      	str	r0, [sp, #12]
 8004602:	a80b      	add	r0, sp, #44	@ 0x2c
 8004604:	2120      	movs	r1, #32
 8004606:	5c40      	ldrb	r0, [r0, r1]
 8004608:	0841      	lsrs	r1, r0, #1
 800460a:	4239      	tst	r1, r7
 800460c:	d003      	beq.n	8004616 <__iar_annotation$$branch+0x9c>
 800460e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004610:	9118      	str	r1, [sp, #96]	@ 0x60
 8004612:	2105      	movs	r1, #5
 8004614:	9103      	str	r1, [sp, #12]
 8004616:	08c2      	lsrs	r2, r0, #3
 8004618:	2101      	movs	r1, #1
 800461a:	4011      	ands	r1, r2
 800461c:	d008      	beq.n	8004630 <__iar_annotation$$branch+0xb6>
 800461e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8004620:	aa14      	add	r2, sp, #80	@ 0x50
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	50d6      	str	r6, [r2, r3]
 8004628:	9a03      	ldr	r2, [sp, #12]
 800462a:	1c52      	adds	r2, r2, #1
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	9203      	str	r2, [sp, #12]
 8004630:	0900      	lsrs	r0, r0, #4
 8004632:	4238      	tst	r0, r7
 8004634:	d017      	beq.n	8004666 <__iar_annotation$$branch+0xec>
 8004636:	2900      	cmp	r1, #0
 8004638:	d007      	beq.n	800464a <__iar_annotation$$branch+0xd0>
 800463a:	2000      	movs	r0, #0
 800463c:	a914      	add	r1, sp, #80	@ 0x50
 800463e:	9a03      	ldr	r2, [sp, #12]
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	5088      	str	r0, [r1, r2]
 8004644:	9803      	ldr	r0, [sp, #12]
 8004646:	1c40      	adds	r0, r0, #1
 8004648:	9003      	str	r0, [sp, #12]
 800464a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800464c:	a914      	add	r1, sp, #80	@ 0x50
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	5088      	str	r0, [r1, r2]
 8004654:	9803      	ldr	r0, [sp, #12]
 8004656:	1c40      	adds	r0, r0, #1
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	e004      	b.n	8004666 <__iar_annotation$$branch+0xec>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	4006      	ands	r6, r0
 8004660:	2080      	movs	r0, #128	@ 0x80
 8004662:	4330      	orrs	r0, r6
 8004664:	6020      	str	r0, [r4, #0]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	9014      	str	r0, [sp, #80]	@ 0x50
 800466a:	2000      	movs	r0, #0
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	2003      	movs	r0, #3
 8004670:	9001      	str	r0, [sp, #4]
 8004672:	9803      	ldr	r0, [sp, #12]
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	ab14      	add	r3, sp, #80	@ 0x50
 8004678:	e22f      	b.n	8004ada <__iar_annotation$$branch+0x560>
 800467a:	2201      	movs	r2, #1
 800467c:	466b      	mov	r3, sp
 800467e:	731a      	strb	r2, [r3, #12]
 8004680:	03d2      	lsls	r2, r2, #15
 8004682:	8beb      	ldrh	r3, [r5, #30]
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <__iar_annotation$$branch+0x110>
 8004688:	e1e4      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4018      	ands	r0, r3
 800468e:	2302      	movs	r3, #2
 8004690:	4303      	orrs	r3, r0
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	431a      	orrs	r2, r3
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	6868      	ldr	r0, [r5, #4]
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	0698      	lsls	r0, r3, #26
 800469e:	0fc0      	lsrs	r0, r0, #31
 80046a0:	4b8a      	ldr	r3, [pc, #552]	@ (80048cc <__iar_annotation$$branch+0x352>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0340      	lsls	r0, r0, #13
 80046a6:	4318      	orrs	r0, r3
 80046a8:	6020      	str	r0, [r4, #0]
 80046aa:	686a      	ldr	r2, [r5, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4011      	ands	r1, r2
 80046b0:	2909      	cmp	r1, #9
 80046b2:	d05f      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046b4:	68e9      	ldr	r1, [r5, #12]
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046bc:	0c00      	lsrs	r0, r0, #16
 80046be:	21ff      	movs	r1, #255	@ 0xff
 80046c0:	0209      	lsls	r1, r1, #8
 80046c2:	4288      	cmp	r0, r1
 80046c4:	d156      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046c6:	4882      	ldr	r0, [pc, #520]	@ (80048d0 <__iar_annotation$$branch+0x356>)
 80046c8:	182a      	adds	r2, r5, r0
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	7c28      	ldrb	r0, [r5, #16]
 80046ce:	4798      	blx	r3
 80046d0:	2803      	cmp	r0, #3
 80046d2:	d04b      	beq.n	800476c <__iar_annotation$$branch+0x1f2>
 80046d4:	280f      	cmp	r0, #15
 80046d6:	d14d      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4006      	ands	r6, r0
 80046dc:	2040      	movs	r0, #64	@ 0x40
 80046de:	4330      	orrs	r0, r6
 80046e0:	6020      	str	r0, [r4, #0]
 80046e2:	211c      	movs	r1, #28
 80046e4:	a806      	add	r0, sp, #24
 80046e6:	f012 fa1c 	bl	8016b22 <__aeabi_memclr>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2200      	movs	r2, #0
 80046ee:	a806      	add	r0, sp, #24
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	e014      	b.n	800471e <__iar_annotation$$branch+0x1a4>
 80046f4:	005f      	lsls	r7, r3, #1
 80046f6:	5bf6      	ldrh	r6, [r6, r7]
 80046f8:	0436      	lsls	r6, r6, #16
 80046fa:	430e      	orrs	r6, r1
 80046fc:	6006      	str	r6, [r0, #0]
 80046fe:	e00d      	b.n	800471c <__iar_annotation$$branch+0x1a2>
 8004700:	1c52      	adds	r2, r2, #1
 8004702:	9800      	ldr	r0, [sp, #0]
 8004704:	1d00      	adds	r0, r0, #4
 8004706:	0859      	lsrs	r1, r3, #1
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	1840      	adds	r0, r0, r1
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	6801      	ldr	r1, [r0, #0]
 8004710:	9e05      	ldr	r6, [sp, #20]
 8004712:	d5ef      	bpl.n	80046f4 <__iar_annotation$$branch+0x17a>
 8004714:	005f      	lsls	r7, r3, #1
 8004716:	5bf6      	ldrh	r6, [r6, r7]
 8004718:	4331      	orrs	r1, r6
 800471a:	6001      	str	r1, [r0, #0]
 800471c:	1c5b      	adds	r3, r3, #1
 800471e:	486d      	ldr	r0, [pc, #436]	@ (80048d4 <__iar_annotation$$branch+0x35a>)
 8004720:	1828      	adds	r0, r5, r0
 8004722:	7840      	ldrb	r0, [r0, #1]
 8004724:	4283      	cmp	r3, r0
 8004726:	d201      	bcs.n	800472c <__iar_annotation$$branch+0x1b2>
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d3e9      	bcc.n	8004700 <__iar_annotation$$branch+0x186>
 800472c:	1a80      	subs	r0, r0, r2
 800472e:	4969      	ldr	r1, [pc, #420]	@ (80048d4 <__iar_annotation$$branch+0x35a>)
 8004730:	1869      	adds	r1, r5, r1
 8004732:	7048      	strb	r0, [r1, #1]
 8004734:	b2d0      	uxtb	r0, r2
 8004736:	280c      	cmp	r0, #12
 8004738:	d111      	bne.n	800475e <__iar_annotation$$branch+0x1e4>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	9006      	str	r0, [sp, #24]
 800473e:	2000      	movs	r0, #0
 8004740:	9002      	str	r0, [sp, #8]
 8004742:	2077      	movs	r0, #119	@ 0x77
 8004744:	9001      	str	r0, [sp, #4]
 8004746:	2007      	movs	r0, #7
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	ab06      	add	r3, sp, #24
 800474c:	220f      	movs	r2, #15
 800474e:	2031      	movs	r0, #49	@ 0x31
 8004750:	5c29      	ldrb	r1, [r5, r0]
 8004752:	0028      	movs	r0, r5
 8004754:	f7fc ff07 	bl	8001566 <PE_Send_DataMessage>
 8004758:	485f      	ldr	r0, [pc, #380]	@ (80048d8 <__iar_annotation$$branch+0x35e>)
 800475a:	83e8      	strh	r0, [r5, #30]
 800475c:	e1c3      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800475e:	0612      	lsls	r2, r2, #24
 8004760:	0e50      	lsrs	r0, r2, #25
 8004762:	1c80      	adds	r0, r0, #2
 8004764:	4669      	mov	r1, sp
 8004766:	7308      	strb	r0, [r1, #12]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	e008      	b.n	800477e <__iar_annotation$$branch+0x204>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	20c0      	movs	r0, #192	@ 0xc0
 8004770:	4308      	orrs	r0, r1
 8004772:	e003      	b.n	800477c <__iar_annotation$$branch+0x202>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4006      	ands	r6, r0
 8004778:	2080      	movs	r0, #128	@ 0x80
 800477a:	4330      	orrs	r0, r6
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	2000      	movs	r0, #0
 8004782:	9002      	str	r0, [sp, #8]
 8004784:	2003      	movs	r0, #3
 8004786:	9001      	str	r0, [sp, #4]
 8004788:	4668      	mov	r0, sp
 800478a:	7b00      	ldrb	r0, [r0, #12]
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	ab06      	add	r3, sp, #24
 8004790:	e1a3      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004792:	2180      	movs	r1, #128	@ 0x80
 8004794:	0209      	lsls	r1, r1, #8
 8004796:	8bea      	ldrh	r2, [r5, #30]
 8004798:	428a      	cmp	r2, r1
 800479a:	d100      	bne.n	800479e <__iar_annotation$$branch+0x224>
 800479c:	e15a      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	4010      	ands	r0, r2
 80047a2:	2202      	movs	r2, #2
 80047a4:	4302      	orrs	r2, r0
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	b292      	uxth	r2, r2
 80047aa:	20ff      	movs	r0, #255	@ 0xff
 80047ac:	0600      	lsls	r0, r0, #24
 80047ae:	4310      	orrs	r0, r2
 80047b0:	6020      	str	r0, [r4, #0]
 80047b2:	4301      	orrs	r1, r0
 80047b4:	6021      	str	r1, [r4, #0]
 80047b6:	2701      	movs	r7, #1
 80047b8:	6868      	ldr	r0, [r5, #4]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	0940      	lsrs	r0, r0, #5
 80047be:	4038      	ands	r0, r7
 80047c0:	4a42      	ldr	r2, [pc, #264]	@ (80048cc <__iar_annotation$$branch+0x352>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	0340      	lsls	r0, r0, #13
 80047c6:	4310      	orrs	r0, r2
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	4006      	ands	r6, r0
 80047cc:	2040      	movs	r0, #64	@ 0x40
 80047ce:	4330      	orrs	r0, r6
 80047d0:	6020      	str	r0, [r4, #0]
 80047d2:	aa03      	add	r2, sp, #12
 80047d4:	a905      	add	r1, sp, #20
 80047d6:	7c28      	ldrb	r0, [r5, #16]
 80047d8:	68eb      	ldr	r3, [r5, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4798      	blx	r3
 80047de:	211c      	movs	r1, #28
 80047e0:	a806      	add	r0, sp, #24
 80047e2:	f012 f99e 	bl	8016b22 <__aeabi_memclr>
 80047e6:	2100      	movs	r1, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	a806      	add	r0, sp, #24
 80047ec:	002c      	movs	r4, r5
 80047ee:	e016      	b.n	800481e <__iar_annotation$$branch+0x2a4>
 80047f0:	004d      	lsls	r5, r1, #1
 80047f2:	5b75      	ldrh	r5, [r6, r5]
 80047f4:	042d      	lsls	r5, r5, #16
 80047f6:	4666      	mov	r6, ip
 80047f8:	4335      	orrs	r5, r6
 80047fa:	601d      	str	r5, [r3, #0]
 80047fc:	e00e      	b.n	800481c <__iar_annotation$$branch+0x2a2>
 80047fe:	1c52      	adds	r2, r2, #1
 8004800:	1d03      	adds	r3, r0, #4
 8004802:	084d      	lsrs	r5, r1, #1
 8004804:	00ad      	lsls	r5, r5, #2
 8004806:	195b      	adds	r3, r3, r5
 8004808:	4239      	tst	r1, r7
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	46b4      	mov	ip, r6
 800480e:	9e05      	ldr	r6, [sp, #20]
 8004810:	d0ee      	beq.n	80047f0 <__iar_annotation$$branch+0x276>
 8004812:	004d      	lsls	r5, r1, #1
 8004814:	5b75      	ldrh	r5, [r6, r5]
 8004816:	4666      	mov	r6, ip
 8004818:	432e      	orrs	r6, r5
 800481a:	601e      	str	r6, [r3, #0]
 800481c:	1c49      	adds	r1, r1, #1
 800481e:	4b2d      	ldr	r3, [pc, #180]	@ (80048d4 <__iar_annotation$$branch+0x35a>)
 8004820:	18e3      	adds	r3, r4, r3
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	4299      	cmp	r1, r3
 8004826:	d201      	bcs.n	800482c <__iar_annotation$$branch+0x2b2>
 8004828:	290c      	cmp	r1, #12
 800482a:	d3e8      	bcc.n	80047fe <__iar_annotation$$branch+0x284>
 800482c:	1a98      	subs	r0, r3, r2
 800482e:	4929      	ldr	r1, [pc, #164]	@ (80048d4 <__iar_annotation$$branch+0x35a>)
 8004830:	1861      	adds	r1, r4, r1
 8004832:	7048      	strb	r0, [r1, #1]
 8004834:	b2d0      	uxtb	r0, r2
 8004836:	280c      	cmp	r0, #12
 8004838:	d10f      	bne.n	800485a <__iar_annotation$$branch+0x2e0>
 800483a:	2000      	movs	r0, #0
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	2077      	movs	r0, #119	@ 0x77
 8004840:	9001      	str	r0, [sp, #4]
 8004842:	2007      	movs	r0, #7
 8004844:	9000      	str	r0, [sp, #0]
 8004846:	ab06      	add	r3, sp, #24
 8004848:	220f      	movs	r2, #15
 800484a:	2031      	movs	r0, #49	@ 0x31
 800484c:	5c21      	ldrb	r1, [r4, r0]
 800484e:	0020      	movs	r0, r4
 8004850:	f7fc fe89 	bl	8001566 <PE_Send_DataMessage>
 8004854:	4820      	ldr	r0, [pc, #128]	@ (80048d8 <__iar_annotation$$branch+0x35e>)
 8004856:	83e0      	strh	r0, [r4, #30]
 8004858:	e145      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800485a:	2000      	movs	r0, #0
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	2003      	movs	r0, #3
 8004860:	9001      	str	r0, [sp, #4]
 8004862:	0610      	lsls	r0, r2, #24
 8004864:	0e40      	lsrs	r0, r0, #25
 8004866:	1c80      	adds	r0, r0, #2
 8004868:	b2c0      	uxtb	r0, r0
 800486a:	9000      	str	r0, [sp, #0]
 800486c:	ab06      	add	r3, sp, #24
 800486e:	220f      	movs	r2, #15
 8004870:	2031      	movs	r0, #49	@ 0x31
 8004872:	5c21      	ldrb	r1, [r4, r0]
 8004874:	0020      	movs	r0, r4
 8004876:	e134      	b.n	8004ae2 <__iar_annotation$$branch+0x568>
 8004878:	2201      	movs	r2, #1
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	03d2      	lsls	r2, r2, #15
 800487e:	8beb      	ldrh	r3, [r5, #30]
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <__iar_annotation$$branch+0x30c>
 8004884:	e3c1      	b.n	800500a <__iar_annotation$$branch+0xa90>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4018      	ands	r0, r3
 800488a:	2303      	movs	r3, #3
 800488c:	4303      	orrs	r3, r0
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	6868      	ldr	r0, [r5, #4]
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	0698      	lsls	r0, r3, #26
 800489a:	0fc0      	lsrs	r0, r0, #31
 800489c:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <__iar_annotation$$branch+0x352>)
 800489e:	4013      	ands	r3, r2
 80048a0:	0340      	lsls	r0, r0, #13
 80048a2:	4318      	orrs	r0, r3
 80048a4:	6020      	str	r0, [r4, #0]
 80048a6:	686a      	ldr	r2, [r5, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4011      	ands	r1, r2
 80048ac:	2909      	cmp	r1, #9
 80048ae:	d037      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b0:	68e9      	ldr	r1, [r5, #12]
 80048b2:	688f      	ldr	r7, [r1, #8]
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d033      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	aa05      	add	r2, sp, #20
 80048bc:	0c01      	lsrs	r1, r0, #16
 80048be:	7c28      	ldrb	r0, [r5, #16]
 80048c0:	47b8      	blx	r7
 80048c2:	2803      	cmp	r0, #3
 80048c4:	d00a      	beq.n	80048dc <__iar_annotation$$branch+0x362>
 80048c6:	280f      	cmp	r0, #15
 80048c8:	d00d      	beq.n	80048e6 <__iar_annotation$$branch+0x36c>
 80048ca:	e029      	b.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048cc:	ffff9fff 	.word	0xffff9fff
 80048d0:	000004ad 	.word	0x000004ad
 80048d4:	000004ac 	.word	0x000004ac
 80048d8:	0000800f 	.word	0x0000800f
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	21c0      	movs	r1, #192	@ 0xc0
 80048e0:	4301      	orrs	r1, r0
 80048e2:	6021      	str	r1, [r4, #0]
 80048e4:	e023      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 80048e6:	4668      	mov	r0, sp
 80048e8:	7b00      	ldrb	r0, [r0, #12]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d018      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048ee:	4668      	mov	r0, sp
 80048f0:	7b02      	ldrb	r2, [r0, #12]
 80048f2:	2a07      	cmp	r2, #7
 80048f4:	d214      	bcs.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	4006      	ands	r6, r0
 80048fa:	2040      	movs	r0, #64	@ 0x40
 80048fc:	4330      	orrs	r0, r6
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	9806      	ldr	r0, [sp, #24]
 8004904:	4293      	cmp	r3, r2
 8004906:	d211      	bcs.n	800492c <__iar_annotation$$branch+0x3b2>
 8004908:	9905      	ldr	r1, [sp, #20]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	ae07      	add	r6, sp, #28
 800490e:	1d36      	adds	r6, r6, #4
 8004910:	009f      	lsls	r7, r3, #2
 8004912:	51f1      	str	r1, [r6, r7]
 8004914:	9905      	ldr	r1, [sp, #20]
 8004916:	1d09      	adds	r1, r1, #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	1c40      	adds	r0, r0, #1
 800491c:	1c5b      	adds	r3, r3, #1
 800491e:	e7f1      	b.n	8004904 <__iar_annotation$$branch+0x38a>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4006      	ands	r6, r0
 8004924:	2080      	movs	r0, #128	@ 0x80
 8004926:	4330      	orrs	r0, r6
 8004928:	6020      	str	r0, [r4, #0]
 800492a:	e000      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 800492c:	9006      	str	r0, [sp, #24]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	9007      	str	r0, [sp, #28]
 8004932:	2000      	movs	r0, #0
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	2003      	movs	r0, #3
 8004938:	9001      	str	r0, [sp, #4]
 800493a:	9806      	ldr	r0, [sp, #24]
 800493c:	9000      	str	r0, [sp, #0]
 800493e:	ab07      	add	r3, sp, #28
 8004940:	e0cb      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004942:	2180      	movs	r1, #128	@ 0x80
 8004944:	0209      	lsls	r1, r1, #8
 8004946:	8bea      	ldrh	r2, [r5, #30]
 8004948:	428a      	cmp	r2, r1
 800494a:	d100      	bne.n	800494e <__iar_annotation$$branch+0x3d4>
 800494c:	e35d      	b.n	800500a <__iar_annotation$$branch+0xa90>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	4010      	ands	r0, r2
 8004952:	2204      	movs	r2, #4
 8004954:	4302      	orrs	r2, r0
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	4311      	orrs	r1, r2
 800495a:	6021      	str	r1, [r4, #0]
 800495c:	2001      	movs	r0, #1
 800495e:	686a      	ldr	r2, [r5, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	0952      	lsrs	r2, r2, #5
 8004964:	4002      	ands	r2, r0
 8004966:	4ba6      	ldr	r3, [pc, #664]	@ (8004c00 <__iar_annotation$$branch+0x686>)
 8004968:	400b      	ands	r3, r1
 800496a:	0351      	lsls	r1, r2, #13
 800496c:	4319      	orrs	r1, r3
 800496e:	6021      	str	r1, [r4, #0]
 8004970:	686a      	ldr	r2, [r5, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	08d2      	lsrs	r2, r2, #3
 8004976:	4010      	ands	r0, r2
 8004978:	d152      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 800497a:	68e8      	ldr	r0, [r5, #12]
 800497c:	68c3      	ldr	r3, [r0, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04e      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004982:	2707      	movs	r7, #7
 8004984:	0a0a      	lsrs	r2, r1, #8
 8004986:	403a      	ands	r2, r7
 8004988:	0c09      	lsrs	r1, r1, #16
 800498a:	7c28      	ldrb	r0, [r5, #16]
 800498c:	4798      	blx	r3
 800498e:	2803      	cmp	r0, #3
 8004990:	d041      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 8004992:	280f      	cmp	r0, #15
 8004994:	d144      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	4006      	ands	r6, r0
 800499a:	2040      	movs	r0, #64	@ 0x40
 800499c:	4330      	orrs	r0, r6
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	0a00      	lsrs	r0, r0, #8
 80049a2:	4007      	ands	r7, r0
 80049a4:	6968      	ldr	r0, [r5, #20]
 80049a6:	4940      	ldr	r1, [pc, #256]	@ (8004aa8 <__iar_annotation$$branch+0x52e>)
 80049a8:	4001      	ands	r1, r0
 80049aa:	01b8      	lsls	r0, r7, #6
 80049ac:	4308      	orrs	r0, r1
 80049ae:	6168      	str	r0, [r5, #20]
 80049b0:	e03b      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 80049b2:	2180      	movs	r1, #128	@ 0x80
 80049b4:	0209      	lsls	r1, r1, #8
 80049b6:	8bea      	ldrh	r2, [r5, #30]
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d04b      	beq.n	8004a54 <__iar_annotation$$branch+0x4da>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	4010      	ands	r0, r2
 80049c0:	2205      	movs	r2, #5
 80049c2:	4302      	orrs	r2, r0
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	6021      	str	r1, [r4, #0]
 80049ca:	2001      	movs	r0, #1
 80049cc:	686a      	ldr	r2, [r5, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	0952      	lsrs	r2, r2, #5
 80049d2:	4002      	ands	r2, r0
 80049d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004c00 <__iar_annotation$$branch+0x686>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	0351      	lsls	r1, r2, #13
 80049da:	4319      	orrs	r1, r3
 80049dc:	6021      	str	r1, [r4, #0]
 80049de:	686a      	ldr	r2, [r5, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	08d2      	lsrs	r2, r2, #3
 80049e4:	4010      	ands	r0, r2
 80049e6:	d11b      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049e8:	68e8      	ldr	r0, [r5, #12]
 80049ea:	6903      	ldr	r3, [r0, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049f0:	0548      	lsls	r0, r1, #21
 80049f2:	0f42      	lsrs	r2, r0, #29
 80049f4:	0c09      	lsrs	r1, r1, #16
 80049f6:	7c28      	ldrb	r0, [r5, #16]
 80049f8:	4798      	blx	r3
 80049fa:	2803      	cmp	r0, #3
 80049fc:	d00b      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 80049fe:	280f      	cmp	r0, #15
 8004a00:	d10e      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	4006      	ands	r6, r0
 8004a06:	2040      	movs	r0, #64	@ 0x40
 8004a08:	4330      	orrs	r0, r6
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	6968      	ldr	r0, [r5, #20]
 8004a0e:	4926      	ldr	r1, [pc, #152]	@ (8004aa8 <__iar_annotation$$branch+0x52e>)
 8004a10:	4001      	ands	r1, r0
 8004a12:	6169      	str	r1, [r5, #20]
 8004a14:	e009      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	21c0      	movs	r1, #192	@ 0xc0
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	e004      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	4006      	ands	r6, r0
 8004a24:	2080      	movs	r0, #128	@ 0x80
 8004a26:	4330      	orrs	r0, r6
 8004a28:	6020      	str	r0, [r4, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	2003      	movs	r0, #3
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	2001      	movs	r0, #1
 8004a34:	9000      	str	r0, [sp, #0]
 8004a36:	0023      	movs	r3, r4
 8004a38:	220f      	movs	r2, #15
 8004a3a:	2031      	movs	r0, #49	@ 0x31
 8004a3c:	5c29      	ldrb	r1, [r5, r0]
 8004a3e:	0028      	movs	r0, r5
 8004a40:	f7fc fd91 	bl	8001566 <PE_Send_DataMessage>
 8004a44:	e04f      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004a46:	2001      	movs	r0, #1
 8004a48:	4669      	mov	r1, sp
 8004a4a:	7308      	strb	r0, [r1, #12]
 8004a4c:	8be8      	ldrh	r0, [r5, #30]
 8004a4e:	2180      	movs	r1, #128	@ 0x80
 8004a50:	0209      	lsls	r1, r1, #8
 8004a52:	4288      	cmp	r0, r1
 8004a54:	d100      	bne.n	8004a58 <__iar_annotation$$branch+0x4de>
 8004a56:	e3ab      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8004a58:	68e8      	ldr	r0, [r5, #12]
 8004a5a:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d02a      	beq.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a60:	4868      	ldr	r0, [pc, #416]	@ (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a62:	182b      	adds	r3, r5, r0
 8004a64:	3018      	adds	r0, #24
 8004a66:	182a      	adds	r2, r5, r0
 8004a68:	7820      	ldrb	r0, [r4, #0]
 8004a6a:	06c1      	lsls	r1, r0, #27
 8004a6c:	0ec9      	lsrs	r1, r1, #27
 8004a6e:	7c28      	ldrb	r0, [r5, #16]
 8004a70:	47b8      	blx	r7
 8004a72:	2803      	cmp	r0, #3
 8004a74:	d01a      	beq.n	8004aac <__iar_annotation$$branch+0x532>
 8004a76:	280f      	cmp	r0, #15
 8004a78:	d11d      	bne.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	4006      	ands	r6, r0
 8004a7e:	2040      	movs	r0, #64	@ 0x40
 8004a80:	4330      	orrs	r0, r6
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	4668      	mov	r0, sp
 8004a88:	7b00      	ldrb	r0, [r0, #12]
 8004a8a:	495f      	ldr	r1, [pc, #380]	@ (8004c08 <__iar_annotation$$branch+0x68e>)
 8004a8c:	5c69      	ldrb	r1, [r5, r1]
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	d217      	bcs.n	8004ac2 <__iar_annotation$$branch+0x548>
 8004a92:	0091      	lsls	r1, r2, #2
 8004a94:	4b5b      	ldr	r3, [pc, #364]	@ (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a96:	18eb      	adds	r3, r5, r3
 8004a98:	585b      	ldr	r3, [r3, r1]
 8004a9a:	ae05      	add	r6, sp, #20
 8004a9c:	1d36      	adds	r6, r6, #4
 8004a9e:	5073      	str	r3, [r6, r1]
 8004aa0:	1c40      	adds	r0, r0, #1
 8004aa2:	1c52      	adds	r2, r2, #1
 8004aa4:	e7f1      	b.n	8004a8a <__iar_annotation$$branch+0x510>
 8004aa6:	bf00      	nop
 8004aa8:	fffffe3f 	.word	0xfffffe3f
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	21c0      	movs	r1, #192	@ 0xc0
 8004ab0:	4301      	orrs	r1, r0
 8004ab2:	6021      	str	r1, [r4, #0]
 8004ab4:	e007      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4006      	ands	r6, r0
 8004aba:	2080      	movs	r0, #128	@ 0x80
 8004abc:	4330      	orrs	r0, r6
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	e001      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ac2:	4669      	mov	r1, sp
 8004ac4:	7308      	strb	r0, [r1, #12]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	9005      	str	r0, [sp, #20]
 8004aca:	2000      	movs	r0, #0
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	2003      	movs	r0, #3
 8004ad0:	9001      	str	r0, [sp, #4]
 8004ad2:	4668      	mov	r0, sp
 8004ad4:	7b00      	ldrb	r0, [r0, #12]
 8004ad6:	9000      	str	r0, [sp, #0]
 8004ad8:	ab05      	add	r3, sp, #20
 8004ada:	220f      	movs	r2, #15
 8004adc:	2031      	movs	r0, #49	@ 0x31
 8004ade:	5c29      	ldrb	r1, [r5, r0]
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	f7fc fd40 	bl	8001566 <PE_Send_DataMessage>
 8004ae6:	e3b9      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004ae8:	2101      	movs	r1, #1
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	4010      	ands	r0, r2
 8004aee:	4308      	orrs	r0, r1
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	03ca      	lsls	r2, r1, #15
 8004af4:	4302      	orrs	r2, r0
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	6868      	ldr	r0, [r5, #4]
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	0943      	lsrs	r3, r0, #5
 8004afe:	400b      	ands	r3, r1
 8004b00:	483f      	ldr	r0, [pc, #252]	@ (8004c00 <__iar_annotation$$branch+0x686>)
 8004b02:	4010      	ands	r0, r2
 8004b04:	035a      	lsls	r2, r3, #13
 8004b06:	4302      	orrs	r2, r0
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	48bf      	ldr	r0, [pc, #764]	@ (8004e08 <__iar_annotation$$branch+0x88e>)
 8004b0c:	4010      	ands	r0, r2
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	4006      	ands	r6, r0
 8004b12:	6026      	str	r6, [r4, #0]
 8004b14:	b2b0      	uxth	r0, r6
 8004b16:	22ff      	movs	r2, #255	@ 0xff
 8004b18:	0612      	lsls	r2, r2, #24
 8004b1a:	4302      	orrs	r2, r0
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	6868      	ldr	r0, [r5, #4]
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	0880      	lsrs	r0, r0, #2
 8004b24:	4001      	ands	r1, r0
 8004b26:	d003      	beq.n	8004b30 <__iar_annotation$$branch+0x5b6>
 8004b28:	6968      	ldr	r0, [r5, #20]
 8004b2a:	0741      	lsls	r1, r0, #29
 8004b2c:	0fc8      	lsrs	r0, r1, #31
 8004b2e:	e000      	b.n	8004b32 <__iar_annotation$$branch+0x5b8>
 8004b30:	2002      	movs	r0, #2
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	2087      	movs	r0, #135	@ 0x87
 8004b36:	9001      	str	r0, [sp, #4]
 8004b38:	2001      	movs	r0, #1
 8004b3a:	9000      	str	r0, [sp, #0]
 8004b3c:	0023      	movs	r3, r4
 8004b3e:	220f      	movs	r2, #15
 8004b40:	2031      	movs	r0, #49	@ 0x31
 8004b42:	5c29      	ldrb	r1, [r5, r0]
 8004b44:	0028      	movs	r0, r5
 8004b46:	f7fc fd0e 	bl	8001566 <PE_Send_DataMessage>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004b4e:	2050      	movs	r0, #80	@ 0x50
 8004b50:	e0e8      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004b52:	2031      	movs	r0, #49	@ 0x31
 8004b54:	5c28      	ldrb	r0, [r5, r0]
 8004b56:	f7fb ff37 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004b5a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004b5c:	7809      	ldrb	r1, [r1, #0]
 8004b5e:	4281      	cmp	r1, r0
 8004b60:	d000      	beq.n	8004b64 <__iar_annotation$$branch+0x5ea>
 8004b62:	e245      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b64:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004b66:	0bc2      	lsrs	r2, r0, #15
 8004b68:	d176      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b6a:	0b02      	lsrs	r2, r0, #12
 8004b6c:	0752      	lsls	r2, r2, #29
 8004b6e:	d012      	beq.n	8004b96 <__iar_annotation$$branch+0x61c>
 8004b70:	06c0      	lsls	r0, r0, #27
 8004b72:	0ec0      	lsrs	r0, r0, #27
 8004b74:	280f      	cmp	r0, #15
 8004b76:	d16f      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b78:	2914      	cmp	r1, #20
 8004b7a:	d005      	beq.n	8004b88 <__iar_annotation$$branch+0x60e>
 8004b7c:	2014      	movs	r0, #20
 8004b7e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004b80:	7008      	strb	r0, [r1, #0]
 8004b82:	0028      	movs	r0, r5
 8004b84:	f7fb fee7 	bl	8000956 <PE_Clear_RxEvent>
 8004b88:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004b8a:	7881      	ldrb	r1, [r0, #2]
 8004b8c:	06ca      	lsls	r2, r1, #27
 8004b8e:	0ed2      	lsrs	r2, r2, #27
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	d161      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b94:	098c      	lsrs	r4, r1, #6
 8004b96:	d100      	bne.n	8004b9a <__iar_annotation$$branch+0x620>
 8004b98:	e22a      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b9a:	68e9      	ldr	r1, [r5, #12]
 8004b9c:	6949      	ldr	r1, [r1, #20]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d100      	bne.n	8004ba4 <__iar_annotation$$branch+0x62a>
 8004ba2:	e2e3      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ba4:	2103      	movs	r1, #3
 8004ba6:	4021      	ands	r1, r4
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d000      	beq.n	8004bae <__iar_annotation$$branch+0x634>
 8004bac:	e2de      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004bae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004bb0:	1d81      	adds	r1, r0, #6
 8004bb2:	7c28      	ldrb	r0, [r5, #16]
 8004bb4:	f000 fc04 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d108      	bne.n	8004bce <__iar_annotation$$branch+0x654>
 8004bbc:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	7c28      	ldrb	r0, [r5, #16]
 8004bc4:	68ec      	ldr	r4, [r5, #12]
 8004bc6:	6964      	ldr	r4, [r4, #20]
 8004bc8:	47a0      	blx	r4
 8004bca:	2151      	movs	r1, #81	@ 0x51
 8004bcc:	e0ec      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bce:	211b      	movs	r1, #27
 8004bd0:	e0ea      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	400e      	ands	r6, r1
 8004bd6:	6026      	str	r6, [r4, #0]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4030      	ands	r0, r6
 8004bdc:	4308      	orrs	r0, r1
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	b280      	uxth	r0, r0
 8004be2:	22ff      	movs	r2, #255	@ 0xff
 8004be4:	0612      	lsls	r2, r2, #24
 8004be6:	4302      	orrs	r2, r0
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	0388      	lsls	r0, r1, #14
 8004bec:	4310      	orrs	r0, r2
 8004bee:	6020      	str	r0, [r4, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	686b      	ldr	r3, [r5, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	095e      	lsrs	r6, r3, #5
 8004bf8:	4016      	ands	r6, r2
 8004bfa:	4b01      	ldr	r3, [pc, #4]	@ (8004c00 <__iar_annotation$$branch+0x686>)
 8004bfc:	e006      	b.n	8004c0c <__iar_annotation$$branch+0x692>
 8004bfe:	bf00      	nop
 8004c00:	ffff9fff 	.word	0xffff9fff
 8004c04:	00000494 	.word	0x00000494
 8004c08:	000004ac 	.word	0x000004ac
 8004c0c:	4003      	ands	r3, r0
 8004c0e:	0370      	lsls	r0, r6, #13
 8004c10:	4318      	orrs	r0, r3
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	4b7c      	ldr	r3, [pc, #496]	@ (8004e08 <__iar_annotation$$branch+0x88e>)
 8004c16:	4003      	ands	r3, r0
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6868      	ldr	r0, [r5, #4]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	0880      	lsrs	r0, r0, #2
 8004c20:	4002      	ands	r2, r0
 8004c22:	d002      	beq.n	8004c2a <__iar_annotation$$branch+0x6b0>
 8004c24:	6968      	ldr	r0, [r5, #20]
 8004c26:	0740      	lsls	r0, r0, #29
 8004c28:	0fc1      	lsrs	r1, r0, #31
 8004c2a:	9102      	str	r1, [sp, #8]
 8004c2c:	2089      	movs	r0, #137	@ 0x89
 8004c2e:	9001      	str	r0, [sp, #4]
 8004c30:	2001      	movs	r0, #1
 8004c32:	9000      	str	r0, [sp, #0]
 8004c34:	0023      	movs	r3, r4
 8004c36:	220f      	movs	r2, #15
 8004c38:	2031      	movs	r0, #49	@ 0x31
 8004c3a:	5c29      	ldrb	r1, [r5, r0]
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f7fc fc92 	bl	8001566 <PE_Send_DataMessage>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d172      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004c46:	2052      	movs	r0, #82	@ 0x52
 8004c48:	e06c      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004c4a:	2031      	movs	r0, #49	@ 0x31
 8004c4c:	5c28      	ldrb	r0, [r5, r0]
 8004c4e:	f7fb febb 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004c52:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004c54:	7809      	ldrb	r1, [r1, #0]
 8004c56:	4281      	cmp	r1, r0
 8004c58:	d000      	beq.n	8004c5c <__iar_annotation$$branch+0x6e2>
 8004c5a:	e1c9      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004c5c:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004c5e:	0bc2      	lsrs	r2, r0, #15
 8004c60:	d1fa      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c62:	0b02      	lsrs	r2, r0, #12
 8004c64:	0752      	lsls	r2, r2, #29
 8004c66:	d06f      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c68:	06c0      	lsls	r0, r0, #27
 8004c6a:	0ec0      	lsrs	r0, r0, #27
 8004c6c:	280f      	cmp	r0, #15
 8004c6e:	d1f3      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c70:	2914      	cmp	r1, #20
 8004c72:	d005      	beq.n	8004c80 <__iar_annotation$$branch+0x706>
 8004c74:	2014      	movs	r0, #20
 8004c76:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004c78:	7008      	strb	r0, [r1, #0]
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7fb fe6b 	bl	8000956 <PE_Clear_RxEvent>
 8004c80:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004c82:	7881      	ldrb	r1, [r0, #2]
 8004c84:	06ca      	lsls	r2, r1, #27
 8004c86:	0ed2      	lsrs	r2, r2, #27
 8004c88:	2a02      	cmp	r2, #2
 8004c8a:	d1e5      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c8c:	060c      	lsls	r4, r1, #24
 8004c8e:	d05b      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c90:	68e9      	ldr	r1, [r5, #12]
 8004c92:	6989      	ldr	r1, [r1, #24]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d100      	bne.n	8004c9a <__iar_annotation$$branch+0x720>
 8004c98:	e268      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004c9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c9c:	1d81      	adds	r1, r0, #6
 8004c9e:	7c28      	ldrb	r0, [r5, #16]
 8004ca0:	f000 fc55 	bl	800554e <PE_SVDM_CheckSVIDs>
 8004ca4:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004ca6:	0fa2      	lsrs	r2, r4, #30
 8004ca8:	2031      	movs	r0, #49	@ 0x31
 8004caa:	5c29      	ldrb	r1, [r5, r0]
 8004cac:	7c28      	ldrb	r0, [r5, #16]
 8004cae:	68ec      	ldr	r4, [r5, #12]
 8004cb0:	69a4      	ldr	r4, [r4, #24]
 8004cb2:	47a0      	blx	r4
 8004cb4:	2153      	movs	r1, #83	@ 0x53
 8004cb6:	e077      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	400e      	ands	r6, r1
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	4030      	ands	r0, r6
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	8920      	ldrh	r0, [r4, #8]
 8004cc8:	b28a      	uxth	r2, r1
 8004cca:	0401      	lsls	r1, r0, #16
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	2080      	movs	r0, #128	@ 0x80
 8004cd2:	0200      	lsls	r0, r0, #8
 8004cd4:	4308      	orrs	r0, r1
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	686a      	ldr	r2, [r5, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	0952      	lsrs	r2, r2, #5
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	@ (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ce4:	4003      	ands	r3, r0
 8004ce6:	0350      	lsls	r0, r2, #13
 8004ce8:	4318      	orrs	r0, r3
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	4a46      	ldr	r2, [pc, #280]	@ (8004e08 <__iar_annotation$$branch+0x88e>)
 8004cee:	4002      	ands	r2, r0
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	6868      	ldr	r0, [r5, #4]
 8004cf4:	6800      	ldr	r0, [r0, #0]
 8004cf6:	0880      	lsrs	r0, r0, #2
 8004cf8:	4001      	ands	r1, r0
 8004cfa:	d003      	beq.n	8004d04 <__iar_annotation$$branch+0x78a>
 8004cfc:	6968      	ldr	r0, [r5, #20]
 8004cfe:	0741      	lsls	r1, r0, #29
 8004d00:	0fc8      	lsrs	r0, r1, #31
 8004d02:	e000      	b.n	8004d06 <__iar_annotation$$branch+0x78c>
 8004d04:	2002      	movs	r0, #2
 8004d06:	9002      	str	r0, [sp, #8]
 8004d08:	208b      	movs	r0, #139	@ 0x8b
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	9000      	str	r0, [sp, #0]
 8004d10:	0023      	movs	r3, r4
 8004d12:	220f      	movs	r2, #15
 8004d14:	2031      	movs	r0, #49	@ 0x31
 8004d16:	5c29      	ldrb	r1, [r5, r0]
 8004d18:	0028      	movs	r0, r5
 8004d1a:	f7fc fc24 	bl	8001566 <PE_Send_DataMessage>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d104      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004d22:	2053      	movs	r0, #83	@ 0x53
 8004d24:	7728      	strb	r0, [r5, #28]
 8004d26:	488e      	ldr	r0, [pc, #568]	@ (8004f60 <__iar_annotation$$branch+0x9e6>)
 8004d28:	83e8      	strh	r0, [r5, #30]
 8004d2a:	9704      	str	r7, [sp, #16]
 8004d2c:	e296      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004d2e:	2031      	movs	r0, #49	@ 0x31
 8004d30:	5c28      	ldrb	r0, [r5, r0]
 8004d32:	f7fb fe49 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004d36:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004d38:	7809      	ldrb	r1, [r1, #0]
 8004d3a:	4281      	cmp	r1, r0
 8004d3c:	d18c      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d3e:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004d40:	0bc2      	lsrs	r2, r0, #15
 8004d42:	d189      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d44:	0b02      	lsrs	r2, r0, #12
 8004d46:	0752      	lsls	r2, r2, #29
 8004d48:	d100      	bne.n	8004d4c <__iar_annotation$$branch+0x7d2>
 8004d4a:	e151      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d4c:	06c0      	lsls	r0, r0, #27
 8004d4e:	0ec0      	lsrs	r0, r0, #27
 8004d50:	280f      	cmp	r0, #15
 8004d52:	d000      	beq.n	8004d56 <__iar_annotation$$branch+0x7dc>
 8004d54:	e14c      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d56:	2914      	cmp	r1, #20
 8004d58:	d005      	beq.n	8004d66 <__iar_annotation$$branch+0x7ec>
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004d5e:	7008      	strb	r0, [r1, #0]
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7fb fdf8 	bl	8000956 <PE_Clear_RxEvent>
 8004d66:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004d68:	7881      	ldrb	r1, [r0, #2]
 8004d6a:	06ca      	lsls	r2, r1, #27
 8004d6c:	0ed2      	lsrs	r2, r2, #27
 8004d6e:	2a03      	cmp	r2, #3
 8004d70:	d1ef      	bne.n	8004d52 <__iar_annotation$$branch+0x7d8>
 8004d72:	098e      	lsrs	r6, r1, #6
 8004d74:	d0e8      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004d76:	68e9      	ldr	r1, [r5, #12]
 8004d78:	69c9      	ldr	r1, [r1, #28]
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d017      	beq.n	8004dae <__iar_annotation$$branch+0x834>
 8004d7e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004d80:	1d82      	adds	r2, r0, #6
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	0c01      	lsrs	r1, r0, #16
 8004d86:	7c28      	ldrb	r0, [r5, #16]
 8004d88:	f000 fc22 	bl	80055d0 <PE_SVDM_CheckModes>
 8004d8c:	2403      	movs	r4, #3
 8004d8e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004d90:	2203      	movs	r2, #3
 8004d92:	4032      	ands	r2, r6
 8004d94:	2031      	movs	r0, #49	@ 0x31
 8004d96:	5c29      	ldrb	r1, [r5, r0]
 8004d98:	7c28      	ldrb	r0, [r5, #16]
 8004d9a:	68ef      	ldr	r7, [r5, #12]
 8004d9c:	69ff      	ldr	r7, [r7, #28]
 8004d9e:	47b8      	blx	r7
 8004da0:	4034      	ands	r4, r6
 8004da2:	2c01      	cmp	r4, #1
 8004da4:	d103      	bne.n	8004dae <__iar_annotation$$branch+0x834>
 8004da6:	2154      	movs	r1, #84	@ 0x54
 8004da8:	7c28      	ldrb	r0, [r5, #16]
 8004daa:	f7fb fb69 	bl	8000480 <USBPD_PE_Notification>
 8004dae:	e1dd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	400e      	ands	r6, r1
 8004db4:	6026      	str	r6, [r4, #0]
 8004db6:	4030      	ands	r0, r6
 8004db8:	2104      	movs	r1, #4
 8004dba:	4301      	orrs	r1, r0
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	8920      	ldrh	r0, [r4, #8]
 8004dc0:	b289      	uxth	r1, r1
 8004dc2:	0400      	lsls	r0, r0, #16
 8004dc4:	4308      	orrs	r0, r1
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	2180      	movs	r1, #128	@ 0x80
 8004dca:	0209      	lsls	r1, r1, #8
 8004dcc:	4301      	orrs	r1, r0
 8004dce:	6021      	str	r1, [r4, #0]
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	686a      	ldr	r2, [r5, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	0952      	lsrs	r2, r2, #5
 8004dd8:	4002      	ands	r2, r0
 8004dda:	4b60      	ldr	r3, [pc, #384]	@ (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ddc:	400b      	ands	r3, r1
 8004dde:	0351      	lsls	r1, r2, #13
 8004de0:	4319      	orrs	r1, r3
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	696a      	ldr	r2, [r5, #20]
 8004de6:	05d2      	lsls	r2, r2, #23
 8004de8:	0f52      	lsrs	r2, r2, #29
 8004dea:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <__iar_annotation$$branch+0x88e>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	0211      	lsls	r1, r2, #8
 8004df0:	4319      	orrs	r1, r3
 8004df2:	6021      	str	r1, [r4, #0]
 8004df4:	6869      	ldr	r1, [r5, #4]
 8004df6:	6809      	ldr	r1, [r1, #0]
 8004df8:	0889      	lsrs	r1, r1, #2
 8004dfa:	4008      	ands	r0, r1
 8004dfc:	d006      	beq.n	8004e0c <__iar_annotation$$branch+0x892>
 8004dfe:	6968      	ldr	r0, [r5, #20]
 8004e00:	0741      	lsls	r1, r0, #29
 8004e02:	0fc8      	lsrs	r0, r1, #31
 8004e04:	e003      	b.n	8004e0e <__iar_annotation$$branch+0x894>
 8004e06:	bf00      	nop
 8004e08:	fffff8ff 	.word	0xfffff8ff
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	9002      	str	r0, [sp, #8]
 8004e10:	208c      	movs	r0, #140	@ 0x8c
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2001      	movs	r0, #1
 8004e16:	9000      	str	r0, [sp, #0]
 8004e18:	0023      	movs	r3, r4
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	2031      	movs	r0, #49	@ 0x31
 8004e1e:	5c29      	ldrb	r1, [r5, r0]
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7fc fba0 	bl	8001566 <PE_Send_DataMessage>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d000      	beq.n	8004e2c <__iar_annotation$$branch+0x8b2>
 8004e2a:	e217      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004e2c:	2054      	movs	r0, #84	@ 0x54
 8004e2e:	7728      	strb	r0, [r5, #28]
 8004e30:	2134      	movs	r1, #52	@ 0x34
 8004e32:	e08c      	b.n	8004f4e <__iar_annotation$$branch+0x9d4>
 8004e34:	2634      	movs	r6, #52	@ 0x34
 8004e36:	2031      	movs	r0, #49	@ 0x31
 8004e38:	5c28      	ldrb	r0, [r5, r0]
 8004e3a:	f7fb fdc5 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004e3e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004e40:	7809      	ldrb	r1, [r1, #0]
 8004e42:	4281      	cmp	r1, r0
 8004e44:	d144      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e46:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004e48:	0bc2      	lsrs	r2, r0, #15
 8004e4a:	d141      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e4c:	2707      	movs	r7, #7
 8004e4e:	0b02      	lsrs	r2, r0, #12
 8004e50:	423a      	tst	r2, r7
 8004e52:	d03d      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e54:	06c0      	lsls	r0, r0, #27
 8004e56:	0ec0      	lsrs	r0, r0, #27
 8004e58:	280f      	cmp	r0, #15
 8004e5a:	d139      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e5c:	2914      	cmp	r1, #20
 8004e5e:	d005      	beq.n	8004e6c <__iar_annotation$$branch+0x8f2>
 8004e60:	2014      	movs	r0, #20
 8004e62:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004e64:	7008      	strb	r0, [r1, #0]
 8004e66:	0028      	movs	r0, r5
 8004e68:	f7fb fd75 	bl	8000956 <PE_Clear_RxEvent>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	7728      	strb	r0, [r5, #28]
 8004e70:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004e72:	7880      	ldrb	r0, [r0, #2]
 8004e74:	06c1      	lsls	r1, r0, #27
 8004e76:	0ec9      	lsrs	r1, r1, #27
 8004e78:	2904      	cmp	r1, #4
 8004e7a:	d129      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e7c:	0980      	lsrs	r0, r0, #6
 8004e7e:	d027      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e80:	9001      	str	r0, [sp, #4]
 8004e82:	488f      	ldr	r0, [pc, #572]	@ (80050c0 <__iar_annotation$$branch+0xb46>)
 8004e84:	9901      	ldr	r1, [sp, #4]
 8004e86:	2901      	cmp	r1, #1
 8004e88:	d004      	beq.n	8004e94 <__iar_annotation$$branch+0x91a>
 8004e8a:	d30e      	bcc.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e8c:	2903      	cmp	r1, #3
 8004e8e:	d008      	beq.n	8004ea2 <__iar_annotation$$branch+0x928>
 8004e90:	d302      	bcc.n	8004e98 <__iar_annotation$$branch+0x91e>
 8004e92:	e00a      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e94:	2635      	movs	r6, #53	@ 0x35
 8004e96:	e008      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e98:	6969      	ldr	r1, [r5, #20]
 8004e9a:	4008      	ands	r0, r1
 8004e9c:	6168      	str	r0, [r5, #20]
 8004e9e:	2636      	movs	r6, #54	@ 0x36
 8004ea0:	e003      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004ea2:	6969      	ldr	r1, [r5, #20]
 8004ea4:	4008      	ands	r0, r1
 8004ea6:	6168      	str	r0, [r5, #20]
 8004ea8:	2637      	movs	r6, #55	@ 0x37
 8004eaa:	0031      	movs	r1, r6
 8004eac:	7c28      	ldrb	r0, [r5, #16]
 8004eae:	f7fb fae7 	bl	8000480 <USBPD_PE_Notification>
 8004eb2:	68e8      	ldr	r0, [r5, #12]
 8004eb4:	6a06      	ldr	r6, [r0, #32]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	d009      	beq.n	8004ece <__iar_annotation$$branch+0x954>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	0a01      	lsrs	r1, r0, #8
 8004ebe:	400f      	ands	r7, r1
 8004ec0:	9700      	str	r7, [sp, #0]
 8004ec2:	0c03      	lsrs	r3, r0, #16
 8004ec4:	9a01      	ldr	r2, [sp, #4]
 8004ec6:	2031      	movs	r0, #49	@ 0x31
 8004ec8:	5c29      	ldrb	r1, [r5, r0]
 8004eca:	7c28      	ldrb	r0, [r5, #16]
 8004ecc:	47b0      	blx	r6
 8004ece:	e14d      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ed0:	5da8      	ldrb	r0, [r5, r6]
 8004ed2:	e08f      	b.n	8004ff4 <__iar_annotation$$branch+0xa7a>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	400e      	ands	r6, r1
 8004ed8:	6026      	str	r6, [r4, #0]
 8004eda:	4030      	ands	r0, r6
 8004edc:	2105      	movs	r1, #5
 8004ede:	4301      	orrs	r1, r0
 8004ee0:	6021      	str	r1, [r4, #0]
 8004ee2:	8920      	ldrh	r0, [r4, #8]
 8004ee4:	b289      	uxth	r1, r1
 8004ee6:	0400      	lsls	r0, r0, #16
 8004ee8:	4308      	orrs	r0, r1
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	2180      	movs	r1, #128	@ 0x80
 8004eee:	0209      	lsls	r1, r1, #8
 8004ef0:	4301      	orrs	r1, r0
 8004ef2:	6021      	str	r1, [r4, #0]
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	686a      	ldr	r2, [r5, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	0952      	lsrs	r2, r2, #5
 8004efc:	4002      	ands	r2, r0
 8004efe:	4b17      	ldr	r3, [pc, #92]	@ (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	0351      	lsls	r1, r2, #13
 8004f04:	4319      	orrs	r1, r3
 8004f06:	6021      	str	r1, [r4, #0]
 8004f08:	696a      	ldr	r2, [r5, #20]
 8004f0a:	05d2      	lsls	r2, r2, #23
 8004f0c:	0f52      	lsrs	r2, r2, #29
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80050c4 <__iar_annotation$$branch+0xb4a>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	0211      	lsls	r1, r2, #8
 8004f14:	4319      	orrs	r1, r3
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	6869      	ldr	r1, [r5, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	0889      	lsrs	r1, r1, #2
 8004f1e:	4008      	ands	r0, r1
 8004f20:	d003      	beq.n	8004f2a <__iar_annotation$$branch+0x9b0>
 8004f22:	6968      	ldr	r0, [r5, #20]
 8004f24:	0741      	lsls	r1, r0, #29
 8004f26:	0fc8      	lsrs	r0, r1, #31
 8004f28:	e000      	b.n	8004f2c <__iar_annotation$$branch+0x9b2>
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	208d      	movs	r0, #141	@ 0x8d
 8004f30:	9001      	str	r0, [sp, #4]
 8004f32:	2001      	movs	r0, #1
 8004f34:	9000      	str	r0, [sp, #0]
 8004f36:	0023      	movs	r3, r4
 8004f38:	220f      	movs	r2, #15
 8004f3a:	2031      	movs	r0, #49	@ 0x31
 8004f3c:	5c29      	ldrb	r1, [r5, r0]
 8004f3e:	0028      	movs	r0, r5
 8004f40:	f7fc fb11 	bl	8001566 <PE_Send_DataMessage>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d15e      	bne.n	8005006 <__iar_annotation$$branch+0xa8c>
 8004f48:	2055      	movs	r0, #85	@ 0x55
 8004f4a:	7728      	strb	r0, [r5, #28]
 8004f4c:	2155      	movs	r1, #85	@ 0x55
 8004f4e:	7c28      	ldrb	r0, [r5, #16]
 8004f50:	f7fb fa96 	bl	8000480 <USBPD_PE_Notification>
 8004f54:	48c3      	ldr	r0, [pc, #780]	@ (8005264 <.text_19>)
 8004f56:	83e8      	strh	r0, [r5, #30]
 8004f58:	2032      	movs	r0, #50	@ 0x32
 8004f5a:	e12c      	b.n	80051b6 <__iar_annotation$$branch+0xc3c>
 8004f5c:	ffff9fff 	.word	0xffff9fff
 8004f60:	0000801e 	.word	0x0000801e
 8004f64:	2031      	movs	r0, #49	@ 0x31
 8004f66:	5c28      	ldrb	r0, [r5, r0]
 8004f68:	f7fb fd2e 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004f6c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004f6e:	7809      	ldrb	r1, [r1, #0]
 8004f70:	4281      	cmp	r1, r0
 8004f72:	d13d      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f74:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004f76:	0bc2      	lsrs	r2, r0, #15
 8004f78:	d13a      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f7a:	2607      	movs	r6, #7
 8004f7c:	0b02      	lsrs	r2, r0, #12
 8004f7e:	4232      	tst	r2, r6
 8004f80:	d036      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f82:	06c0      	lsls	r0, r0, #27
 8004f84:	0ec0      	lsrs	r0, r0, #27
 8004f86:	280f      	cmp	r0, #15
 8004f88:	d132      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f8a:	2914      	cmp	r1, #20
 8004f8c:	d005      	beq.n	8004f9a <__iar_annotation$$branch+0xa20>
 8004f8e:	2014      	movs	r0, #20
 8004f90:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004f92:	7008      	strb	r0, [r1, #0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f7fb fcde 	bl	8000956 <PE_Clear_RxEvent>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	7728      	strb	r0, [r5, #28]
 8004f9e:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004fa0:	7880      	ldrb	r0, [r0, #2]
 8004fa2:	06c1      	lsls	r1, r0, #27
 8004fa4:	0ec9      	lsrs	r1, r1, #27
 8004fa6:	2905      	cmp	r1, #5
 8004fa8:	d122      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004faa:	0980      	lsrs	r0, r0, #6
 8004fac:	d020      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d004      	beq.n	8004fbe <__iar_annotation$$branch+0xa44>
 8004fb4:	d309      	bcc.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fb6:	2803      	cmp	r0, #3
 8004fb8:	d005      	beq.n	8004fc6 <__iar_annotation$$branch+0xa4c>
 8004fba:	d302      	bcc.n	8004fc2 <__iar_annotation$$branch+0xa48>
 8004fbc:	e005      	b.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fbe:	2156      	movs	r1, #86	@ 0x56
 8004fc0:	e004      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc2:	2157      	movs	r1, #87	@ 0x57
 8004fc4:	e002      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc6:	2158      	movs	r1, #88	@ 0x58
 8004fc8:	e000      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fca:	2155      	movs	r1, #85	@ 0x55
 8004fcc:	7c28      	ldrb	r0, [r5, #16]
 8004fce:	f7fb fa57 	bl	8000480 <USBPD_PE_Notification>
 8004fd2:	68e8      	ldr	r0, [r5, #12]
 8004fd4:	6a47      	ldr	r7, [r0, #36]	@ 0x24
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d009      	beq.n	8004fee <__iar_annotation$$branch+0xa74>
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	0a01      	lsrs	r1, r0, #8
 8004fde:	400e      	ands	r6, r1
 8004fe0:	9600      	str	r6, [sp, #0]
 8004fe2:	0c03      	lsrs	r3, r0, #16
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	2031      	movs	r0, #49	@ 0x31
 8004fe8:	5c29      	ldrb	r1, [r5, r0]
 8004fea:	7c28      	ldrb	r0, [r5, #16]
 8004fec:	47b8      	blx	r7
 8004fee:	e0bd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ff0:	2034      	movs	r0, #52	@ 0x34
 8004ff2:	5c28      	ldrb	r0, [r5, r0]
 8004ff4:	06c0      	lsls	r0, r0, #27
 8004ff6:	0ec0      	lsrs	r0, r0, #27
 8004ff8:	2810      	cmp	r0, #16
 8004ffa:	d100      	bne.n	8004ffe <__iar_annotation$$branch+0xa84>
 8004ffc:	e0bf      	b.n	800517e <__iar_annotation$$branch+0xc04>
 8004ffe:	8be8      	ldrh	r0, [r5, #30]
 8005000:	2180      	movs	r1, #128	@ 0x80
 8005002:	0209      	lsls	r1, r1, #8
 8005004:	4288      	cmp	r0, r1
 8005006:	d000      	beq.n	800500a <__iar_annotation$$branch+0xa90>
 8005008:	e128      	b.n	800525c <__iar_annotation$$branch+0xce2>
 800500a:	e0d1      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 800500c:	2100      	movs	r1, #0
 800500e:	466a      	mov	r2, sp
 8005010:	7311      	strb	r1, [r2, #12]
 8005012:	6821      	ldr	r1, [r4, #0]
 8005014:	400e      	ands	r6, r1
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	6861      	ldr	r1, [r4, #4]
 800501a:	4030      	ands	r0, r6
 800501c:	06c9      	lsls	r1, r1, #27
 800501e:	0ec9      	lsrs	r1, r1, #27
 8005020:	4301      	orrs	r1, r0
 8005022:	6021      	str	r1, [r4, #0]
 8005024:	8920      	ldrh	r0, [r4, #8]
 8005026:	b28a      	uxth	r2, r1
 8005028:	0401      	lsls	r1, r0, #16
 800502a:	4311      	orrs	r1, r2
 800502c:	6021      	str	r1, [r4, #0]
 800502e:	2080      	movs	r0, #128	@ 0x80
 8005030:	0200      	lsls	r0, r0, #8
 8005032:	4308      	orrs	r0, r1
 8005034:	6020      	str	r0, [r4, #0]
 8005036:	2601      	movs	r6, #1
 8005038:	6869      	ldr	r1, [r5, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	0949      	lsrs	r1, r1, #5
 800503e:	4031      	ands	r1, r6
 8005040:	4aaa      	ldr	r2, [pc, #680]	@ (80052ec <.text_21>)
 8005042:	4002      	ands	r2, r0
 8005044:	0348      	lsls	r0, r1, #13
 8005046:	4310      	orrs	r0, r2
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	491e      	ldr	r1, [pc, #120]	@ (80050c4 <__iar_annotation$$branch+0xb4a>)
 800504c:	4001      	ands	r1, r0
 800504e:	0230      	lsls	r0, r6, #8
 8005050:	4308      	orrs	r0, r1
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	9005      	str	r0, [sp, #20]
 8005056:	68e8      	ldr	r0, [r5, #12]
 8005058:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2800      	cmp	r0, #0
 800505e:	d00b      	beq.n	8005078 <__iar_annotation$$branch+0xafe>
 8005060:	a805      	add	r0, sp, #20
 8005062:	1d00      	adds	r0, r0, #4
 8005064:	9000      	str	r0, [sp, #0]
 8005066:	ab03      	add	r3, sp, #12
 8005068:	7820      	ldrb	r0, [r4, #0]
 800506a:	06c2      	lsls	r2, r0, #27
 800506c:	0ed2      	lsrs	r2, r2, #27
 800506e:	2031      	movs	r0, #49	@ 0x31
 8005070:	5c29      	ldrb	r1, [r5, r0]
 8005072:	7c28      	ldrb	r0, [r5, #16]
 8005074:	9c01      	ldr	r4, [sp, #4]
 8005076:	47a0      	blx	r4
 8005078:	4668      	mov	r0, sp
 800507a:	7b00      	ldrb	r0, [r0, #12]
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	4669      	mov	r1, sp
 8005080:	7308      	strb	r0, [r1, #12]
 8005082:	6868      	ldr	r0, [r5, #4]
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	0880      	lsrs	r0, r0, #2
 8005088:	4006      	ands	r6, r0
 800508a:	d003      	beq.n	8005094 <__iar_annotation$$branch+0xb1a>
 800508c:	6968      	ldr	r0, [r5, #20]
 800508e:	0741      	lsls	r1, r0, #29
 8005090:	0fc8      	lsrs	r0, r1, #31
 8005092:	e000      	b.n	8005096 <__iar_annotation$$branch+0xb1c>
 8005094:	2002      	movs	r0, #2
 8005096:	9002      	str	r0, [sp, #8]
 8005098:	208f      	movs	r0, #143	@ 0x8f
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	4668      	mov	r0, sp
 800509e:	7b00      	ldrb	r0, [r0, #12]
 80050a0:	9000      	str	r0, [sp, #0]
 80050a2:	ab05      	add	r3, sp, #20
 80050a4:	220f      	movs	r2, #15
 80050a6:	2031      	movs	r0, #49	@ 0x31
 80050a8:	5c29      	ldrb	r1, [r5, r0]
 80050aa:	0028      	movs	r0, r5
 80050ac:	f7fc fa5b 	bl	8001566 <PE_Send_DataMessage>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d104      	bne.n	80050be <__iar_annotation$$branch+0xb44>
 80050b4:	205a      	movs	r0, #90	@ 0x5a
 80050b6:	7728      	strb	r0, [r5, #28]
 80050b8:	48bf      	ldr	r0, [pc, #764]	@ (80053b8 <.text_23>)
 80050ba:	83e8      	strh	r0, [r5, #30]
 80050bc:	9704      	str	r7, [sp, #16]
 80050be:	e0ca      	b.n	8005256 <__iar_annotation$$branch+0xcdc>
 80050c0:	fffffe3f 	.word	0xfffffe3f
 80050c4:	fffff8ff 	.word	0xfffff8ff
 80050c8:	2607      	movs	r6, #7
 80050ca:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80050cc:	0b00      	lsrs	r0, r0, #12
 80050ce:	2107      	movs	r1, #7
 80050d0:	4001      	ands	r1, r0
 80050d2:	1e48      	subs	r0, r1, #1
 80050d4:	4669      	mov	r1, sp
 80050d6:	7108      	strb	r0, [r1, #4]
 80050d8:	2031      	movs	r0, #49	@ 0x31
 80050da:	5c28      	ldrb	r0, [r5, r0]
 80050dc:	f7fb fc74 	bl	80009c8 <PE_Convert_SOPRxEvent>
 80050e0:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d144      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050e8:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80050ea:	0bc2      	lsrs	r2, r0, #15
 80050ec:	d141      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050ee:	0b02      	lsrs	r2, r0, #12
 80050f0:	4232      	tst	r2, r6
 80050f2:	d03e      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050f4:	06c0      	lsls	r0, r0, #27
 80050f6:	0ec0      	lsrs	r0, r0, #27
 80050f8:	280f      	cmp	r0, #15
 80050fa:	d13a      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050fc:	2914      	cmp	r1, #20
 80050fe:	d005      	beq.n	800510c <__iar_annotation$$branch+0xb92>
 8005100:	2014      	movs	r0, #20
 8005102:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005104:	7008      	strb	r0, [r1, #0]
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb fc25 	bl	8000956 <PE_Clear_RxEvent>
 800510c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800510e:	7880      	ldrb	r0, [r0, #2]
 8005110:	06c1      	lsls	r1, r0, #27
 8005112:	0ec9      	lsrs	r1, r1, #27
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	4291      	cmp	r1, r2
 8005118:	d12b      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511a:	0981      	lsrs	r1, r0, #6
 800511c:	d029      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511e:	68e9      	ldr	r1, [r5, #12]
 8005120:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8005122:	2900      	cmp	r1, #0
 8005124:	d022      	beq.n	800516c <__iar_annotation$$branch+0xbf2>
 8005126:	2600      	movs	r6, #0
 8005128:	e011      	b.n	800514e <__iar_annotation$$branch+0xbd4>
 800512a:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800512c:	00b2      	lsls	r2, r6, #2
 800512e:	188b      	adds	r3, r1, r2
 8005130:	799c      	ldrb	r4, [r3, #6]
 8005132:	79df      	ldrb	r7, [r3, #7]
 8005134:	023f      	lsls	r7, r7, #8
 8005136:	19e4      	adds	r4, r4, r7
 8005138:	3108      	adds	r1, #8
 800513a:	5c89      	ldrb	r1, [r1, r2]
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	1861      	adds	r1, r4, r1
 8005140:	7a5a      	ldrb	r2, [r3, #9]
 8005142:	0612      	lsls	r2, r2, #24
 8005144:	1889      	adds	r1, r1, r2
 8005146:	aa05      	add	r2, sp, #20
 8005148:	00b3      	lsls	r3, r6, #2
 800514a:	50d1      	str	r1, [r2, r3]
 800514c:	1c76      	adds	r6, r6, #1
 800514e:	4669      	mov	r1, sp
 8005150:	7909      	ldrb	r1, [r1, #4]
 8005152:	428e      	cmp	r6, r1
 8005154:	d3e9      	bcc.n	800512a <__iar_annotation$$branch+0xbb0>
 8005156:	a905      	add	r1, sp, #20
 8005158:	9100      	str	r1, [sp, #0]
 800515a:	ab01      	add	r3, sp, #4
 800515c:	06c2      	lsls	r2, r0, #27
 800515e:	0ed2      	lsrs	r2, r2, #27
 8005160:	2031      	movs	r0, #49	@ 0x31
 8005162:	5c29      	ldrb	r1, [r5, r0]
 8005164:	7c28      	ldrb	r0, [r5, #16]
 8005166:	68ec      	ldr	r4, [r5, #12]
 8005168:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 800516a:	47a0      	blx	r4
 800516c:	2000      	movs	r0, #0
 800516e:	83e8      	strh	r0, [r5, #30]
 8005170:	e01e      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8005172:	2034      	movs	r0, #52	@ 0x34
 8005174:	5c28      	ldrb	r0, [r5, r0]
 8005176:	06c0      	lsls	r0, r0, #27
 8005178:	0ec0      	lsrs	r0, r0, #27
 800517a:	2810      	cmp	r0, #16
 800517c:	d113      	bne.n	80051a6 <__iar_annotation$$branch+0xc2c>
 800517e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8005180:	7800      	ldrb	r0, [r0, #0]
 8005182:	2814      	cmp	r0, #20
 8005184:	d005      	beq.n	8005192 <__iar_annotation$$branch+0xc18>
 8005186:	2014      	movs	r0, #20
 8005188:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800518a:	7008      	strb	r0, [r1, #0]
 800518c:	0028      	movs	r0, r5
 800518e:	f7fb fbe2 	bl	8000956 <PE_Clear_RxEvent>
 8005192:	2000      	movs	r0, #0
 8005194:	83e8      	strh	r0, [r5, #30]
 8005196:	2103      	movs	r1, #3
 8005198:	7469      	strb	r1, [r5, #17]
 800519a:	9004      	str	r0, [sp, #16]
 800519c:	2159      	movs	r1, #89	@ 0x59
 800519e:	7c28      	ldrb	r0, [r5, #16]
 80051a0:	f7fb f96e 	bl	8000480 <USBPD_PE_Notification>
 80051a4:	e05a      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051a6:	8be8      	ldrh	r0, [r5, #30]
 80051a8:	2180      	movs	r1, #128	@ 0x80
 80051aa:	0209      	lsls	r1, r1, #8
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d155      	bne.n	800525c <__iar_annotation$$branch+0xce2>
 80051b0:	2003      	movs	r0, #3
 80051b2:	7468      	strb	r0, [r5, #17]
 80051b4:	2000      	movs	r0, #0
 80051b6:	9004      	str	r0, [sp, #16]
 80051b8:	e050      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051ba:	2100      	movs	r1, #0
 80051bc:	466a      	mov	r2, sp
 80051be:	7311      	strb	r1, [r2, #12]
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	400e      	ands	r6, r1
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	6861      	ldr	r1, [r4, #4]
 80051c8:	4030      	ands	r0, r6
 80051ca:	06c9      	lsls	r1, r1, #27
 80051cc:	0ec9      	lsrs	r1, r1, #27
 80051ce:	4301      	orrs	r1, r0
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	8920      	ldrh	r0, [r4, #8]
 80051d4:	b28a      	uxth	r2, r1
 80051d6:	0401      	lsls	r1, r0, #16
 80051d8:	4311      	orrs	r1, r2
 80051da:	6021      	str	r1, [r4, #0]
 80051dc:	2080      	movs	r0, #128	@ 0x80
 80051de:	0200      	lsls	r0, r0, #8
 80051e0:	4308      	orrs	r0, r1
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	2601      	movs	r6, #1
 80051e6:	6869      	ldr	r1, [r5, #4]
 80051e8:	6809      	ldr	r1, [r1, #0]
 80051ea:	0949      	lsrs	r1, r1, #5
 80051ec:	4031      	ands	r1, r6
 80051ee:	4a3f      	ldr	r2, [pc, #252]	@ (80052ec <.text_21>)
 80051f0:	4002      	ands	r2, r0
 80051f2:	0348      	lsls	r0, r1, #13
 80051f4:	4310      	orrs	r0, r2
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	4970      	ldr	r1, [pc, #448]	@ (80053bc <.text_24>)
 80051fa:	4001      	ands	r1, r0
 80051fc:	0230      	lsls	r0, r6, #8
 80051fe:	4308      	orrs	r0, r1
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	9005      	str	r0, [sp, #20]
 8005204:	68e8      	ldr	r0, [r5, #12]
 8005206:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <__iar_annotation$$branch+0xc9c>
 800520c:	a805      	add	r0, sp, #20
 800520e:	1d02      	adds	r2, r0, #4
 8005210:	a903      	add	r1, sp, #12
 8005212:	7c28      	ldrb	r0, [r5, #16]
 8005214:	4798      	blx	r3
 8005216:	4668      	mov	r0, sp
 8005218:	7b00      	ldrb	r0, [r0, #12]
 800521a:	1c40      	adds	r0, r0, #1
 800521c:	4669      	mov	r1, sp
 800521e:	7308      	strb	r0, [r1, #12]
 8005220:	6868      	ldr	r0, [r5, #4]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	0880      	lsrs	r0, r0, #2
 8005226:	4006      	ands	r6, r0
 8005228:	d003      	beq.n	8005232 <__iar_annotation$$branch+0xcb8>
 800522a:	6968      	ldr	r0, [r5, #20]
 800522c:	0741      	lsls	r1, r0, #29
 800522e:	0fc8      	lsrs	r0, r1, #31
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xcba>
 8005232:	2002      	movs	r0, #2
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	2003      	movs	r0, #3
 8005238:	9001      	str	r0, [sp, #4]
 800523a:	4668      	mov	r0, sp
 800523c:	7b00      	ldrb	r0, [r0, #12]
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	ab05      	add	r3, sp, #20
 8005242:	220f      	movs	r2, #15
 8005244:	2031      	movs	r0, #49	@ 0x31
 8005246:	5c29      	ldrb	r1, [r5, r0]
 8005248:	0028      	movs	r0, r5
 800524a:	f7fc f98c 	bl	8001566 <PE_Send_DataMessage>
 800524e:	2800      	cmp	r0, #0
 8005250:	d101      	bne.n	8005256 <__iar_annotation$$branch+0xcdc>
 8005252:	205a      	movs	r0, #90	@ 0x5a
 8005254:	7728      	strb	r0, [r5, #28]
 8005256:	2000      	movs	r0, #0
 8005258:	2132      	movs	r1, #50	@ 0x32
 800525a:	5468      	strb	r0, [r5, r1]
 800525c:	9804      	ldr	r0, [sp, #16]
 800525e:	b01d      	add	sp, #116	@ 0x74
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005264 <.text_19>:
 8005264:	00008032 	.word	0x00008032

08005268 <PE_StateMachine_UVDM>:
 8005268:	2914      	cmp	r1, #20
 800526a:	d000      	beq.n	800526e <PE_StateMachine_UVDM+0x6>
 800526c:	4770      	bx	lr
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	b08c      	sub	sp, #48	@ 0x30
 8005272:	0004      	movs	r4, r0
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	2800      	cmp	r0, #0
 8005278:	d035      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 800527a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800527c:	2800      	cmp	r0, #0
 800527e:	d032      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 8005280:	2500      	movs	r5, #0
 8005282:	4669      	mov	r1, sp
 8005284:	730d      	strb	r5, [r1, #12]
 8005286:	a805      	add	r0, sp, #20
 8005288:	1d03      	adds	r3, r0, #4
 800528a:	aa03      	add	r2, sp, #12
 800528c:	a904      	add	r1, sp, #16
 800528e:	7c20      	ldrb	r0, [r4, #16]
 8005290:	68e6      	ldr	r6, [r4, #12]
 8005292:	6bf6      	ldr	r6, [r6, #60]	@ 0x3c
 8005294:	47b0      	blx	r6
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	49cc      	ldr	r1, [pc, #816]	@ (80055cc <.text_27>)
 800529a:	4001      	ands	r1, r0
 800529c:	9104      	str	r1, [sp, #16]
 800529e:	4668      	mov	r0, sp
 80052a0:	7b00      	ldrb	r0, [r0, #12]
 80052a2:	1c40      	adds	r0, r0, #1
 80052a4:	4669      	mov	r1, sp
 80052a6:	7308      	strb	r0, [r1, #12]
 80052a8:	9804      	ldr	r0, [sp, #16]
 80052aa:	9005      	str	r0, [sp, #20]
 80052ac:	6860      	ldr	r0, [r4, #4]
 80052ae:	6800      	ldr	r0, [r0, #0]
 80052b0:	0741      	lsls	r1, r0, #29
 80052b2:	0fc9      	lsrs	r1, r1, #31
 80052b4:	d003      	beq.n	80052be <PE_StateMachine_UVDM+0x56>
 80052b6:	6960      	ldr	r0, [r4, #20]
 80052b8:	0741      	lsls	r1, r0, #29
 80052ba:	0fc8      	lsrs	r0, r1, #31
 80052bc:	e000      	b.n	80052c0 <PE_StateMachine_UVDM+0x58>
 80052be:	2002      	movs	r0, #2
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	2003      	movs	r0, #3
 80052c4:	9001      	str	r0, [sp, #4]
 80052c6:	4668      	mov	r0, sp
 80052c8:	7b00      	ldrb	r0, [r0, #12]
 80052ca:	9000      	str	r0, [sp, #0]
 80052cc:	ab05      	add	r3, sp, #20
 80052ce:	220f      	movs	r2, #15
 80052d0:	2031      	movs	r0, #49	@ 0x31
 80052d2:	5c21      	ldrb	r1, [r4, r0]
 80052d4:	0020      	movs	r0, r4
 80052d6:	f7fc f946 	bl	8001566 <PE_Send_DataMessage>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d101      	bne.n	80052e2 <PE_StateMachine_UVDM+0x7a>
 80052de:	2059      	movs	r0, #89	@ 0x59
 80052e0:	7720      	strb	r0, [r4, #28]
 80052e2:	2032      	movs	r0, #50	@ 0x32
 80052e4:	5425      	strb	r5, [r4, r0]
 80052e6:	b00c      	add	sp, #48	@ 0x30
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052ec <.text_21>:
 80052ec:	ffff9fff 	.word	0xffff9fff

080052f0 <PE_Check_DataMessageVDM>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	2403      	movs	r4, #3
 80052f4:	2501      	movs	r5, #1
 80052f6:	6801      	ldr	r1, [r0, #0]
 80052f8:	6849      	ldr	r1, [r1, #4]
 80052fa:	0949      	lsrs	r1, r1, #5
 80052fc:	4029      	ands	r1, r5
 80052fe:	d01f      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005300:	68c1      	ldr	r1, [r0, #12]
 8005302:	2900      	cmp	r1, #0
 8005304:	d01c      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005306:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005308:	788a      	ldrb	r2, [r1, #2]
 800530a:	78cb      	ldrb	r3, [r1, #3]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	790b      	ldrb	r3, [r1, #4]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	7949      	ldrb	r1, [r1, #5]
 8005318:	0609      	lsls	r1, r1, #24
 800531a:	1851      	adds	r1, r2, r1
 800531c:	9100      	str	r1, [sp, #0]
 800531e:	0bca      	lsrs	r2, r1, #15
 8005320:	402a      	ands	r2, r5
 8005322:	d014      	beq.n	800534e <PE_Check_DataMessageVDM+0x5e>
 8005324:	2394      	movs	r3, #148	@ 0x94
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	50c1      	str	r1, [r0, r3]
 800532a:	0989      	lsrs	r1, r1, #6
 800532c:	4021      	ands	r1, r4
 800532e:	d107      	bne.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	6849      	ldr	r1, [r1, #4]
 8005334:	0a09      	lsrs	r1, r1, #8
 8005336:	4029      	ands	r1, r5
 8005338:	d002      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 800533a:	f7ff f840 	bl	80043be <PE_Receive_SVDM>
 800533e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	400c      	ands	r4, r1
 8005346:	2c02      	cmp	r4, #2
 8005348:	d134      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 800534a:	7445      	strb	r5, [r0, #17]
 800534c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800534e:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 8005350:	0449      	lsls	r1, r1, #17
 8005352:	0f49      	lsrs	r1, r1, #29
 8005354:	1e49      	subs	r1, r1, #1
 8005356:	4ab1      	ldr	r2, [pc, #708]	@ (800561c <.text_29>)
 8005358:	5481      	strb	r1, [r0, r2]
 800535a:	0006      	movs	r6, r0
 800535c:	2000      	movs	r0, #0
 800535e:	e00f      	b.n	8005380 <PE_Check_DataMessageVDM+0x90>
 8005360:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 8005362:	0082      	lsls	r2, r0, #2
 8005364:	1889      	adds	r1, r1, r2
 8005366:	798a      	ldrb	r2, [r1, #6]
 8005368:	79cf      	ldrb	r7, [r1, #7]
 800536a:	023f      	lsls	r7, r7, #8
 800536c:	19d2      	adds	r2, r2, r7
 800536e:	7a0f      	ldrb	r7, [r1, #8]
 8005370:	043f      	lsls	r7, r7, #16
 8005372:	19d2      	adds	r2, r2, r7
 8005374:	7a49      	ldrb	r1, [r1, #9]
 8005376:	0609      	lsls	r1, r1, #24
 8005378:	1851      	adds	r1, r2, r1
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	5099      	str	r1, [r3, r2]
 800537e:	1c40      	adds	r0, r0, #1
 8005380:	49a7      	ldr	r1, [pc, #668]	@ (8005620 <.text_30>)
 8005382:	1873      	adds	r3, r6, r1
 8005384:	3118      	adds	r1, #24
 8005386:	1872      	adds	r2, r6, r1
 8005388:	7811      	ldrb	r1, [r2, #0]
 800538a:	4288      	cmp	r0, r1
 800538c:	d3e8      	bcc.n	8005360 <PE_Check_DataMessageVDM+0x70>
 800538e:	9900      	ldr	r1, [sp, #0]
 8005390:	68f0      	ldr	r0, [r6, #12]
 8005392:	2800      	cmp	r0, #0
 8005394:	d008      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 8005396:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8005398:	2f00      	cmp	r7, #0
 800539a:	d005      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 800539c:	7c30      	ldrb	r0, [r6, #16]
 800539e:	47b8      	blx	r7
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d101      	bne.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 80053a4:	7474      	strb	r4, [r6, #17]
 80053a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80053a8:	6870      	ldr	r0, [r6, #4]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	4004      	ands	r4, r0
 80053ae:	2c02      	cmp	r4, #2
 80053b0:	d100      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 80053b2:	7475      	strb	r5, [r6, #17]
 80053b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080053b8 <.text_23>:
 80053b8:	0000801e 	.word	0x0000801e

080053bc <.text_24>:
 80053bc:	fffff8ff 	.word	0xfffff8ff

080053c0 <PE_SVDM_CheckIdentity>:
 80053c0:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80053c2:	0003      	movs	r3, r0
 80053c4:	2000      	movs	r0, #0
 80053c6:	4c97      	ldr	r4, [pc, #604]	@ (8005624 <.text_31>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	58e3      	ldr	r3, [r4, r3]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80053d0:	045b      	lsls	r3, r3, #17
 80053d2:	0f5b      	lsrs	r3, r3, #29
 80053d4:	1e5c      	subs	r4, r3, #1
 80053d6:	b2e3      	uxtb	r3, r4
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d200      	bcs.n	80053de <PE_SVDM_CheckIdentity+0x1e>
 80053dc:	e0b5      	b.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 80053de:	000b      	movs	r3, r1
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	785d      	ldrb	r5, [r3, #1]
 80053e4:	022d      	lsls	r5, r5, #8
 80053e6:	1949      	adds	r1, r1, r5
 80053e8:	789d      	ldrb	r5, [r3, #2]
 80053ea:	042d      	lsls	r5, r5, #16
 80053ec:	1949      	adds	r1, r1, r5
 80053ee:	78dd      	ldrb	r5, [r3, #3]
 80053f0:	062d      	lsls	r5, r5, #24
 80053f2:	194d      	adds	r5, r1, r5
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	7919      	ldrb	r1, [r3, #4]
 80053f8:	795e      	ldrb	r6, [r3, #5]
 80053fa:	0236      	lsls	r6, r6, #8
 80053fc:	1989      	adds	r1, r1, r6
 80053fe:	799e      	ldrb	r6, [r3, #6]
 8005400:	0436      	lsls	r6, r6, #16
 8005402:	1989      	adds	r1, r1, r6
 8005404:	79de      	ldrb	r6, [r3, #7]
 8005406:	0636      	lsls	r6, r6, #24
 8005408:	1989      	adds	r1, r1, r6
 800540a:	6051      	str	r1, [r2, #4]
 800540c:	2108      	movs	r1, #8
 800540e:	7a1e      	ldrb	r6, [r3, #8]
 8005410:	7a5f      	ldrb	r7, [r3, #9]
 8005412:	023f      	lsls	r7, r7, #8
 8005414:	19f6      	adds	r6, r6, r7
 8005416:	7a9f      	ldrb	r7, [r3, #10]
 8005418:	043f      	lsls	r7, r7, #16
 800541a:	19f6      	adds	r6, r6, r7
 800541c:	7adf      	ldrb	r7, [r3, #11]
 800541e:	063f      	lsls	r7, r7, #24
 8005420:	19f6      	adds	r6, r6, r7
 8005422:	6096      	str	r6, [r2, #8]
 8005424:	1ee4      	subs	r4, r4, #3
 8005426:	2620      	movs	r6, #32
 8005428:	5d97      	ldrb	r7, [r2, r6]
 800542a:	26e0      	movs	r6, #224	@ 0xe0
 800542c:	403e      	ands	r6, r7
 800542e:	466f      	mov	r7, sp
 8005430:	703e      	strb	r6, [r7, #0]
 8005432:	466e      	mov	r6, sp
 8005434:	7836      	ldrb	r6, [r6, #0]
 8005436:	2720      	movs	r7, #32
 8005438:	55d6      	strb	r6, [r2, r7]
 800543a:	0626      	lsls	r6, r4, #24
 800543c:	d022      	beq.n	8005484 <PE_SVDM_CheckIdentity+0xc4>
 800543e:	1e66      	subs	r6, r4, #1
 8005440:	466f      	mov	r7, sp
 8005442:	707e      	strb	r6, [r7, #1]
 8005444:	00ae      	lsls	r6, r5, #2
 8005446:	0f76      	lsrs	r6, r6, #29
 8005448:	2e05      	cmp	r6, #5
 800544a:	d827      	bhi.n	800549c <PE_SVDM_CheckIdentity+0xdc>
 800544c:	a701      	add	r7, pc, #4	@ (adr r7, 8005454 <PE_SVDM_CheckIdentity+0x94>)
 800544e:	5dbf      	ldrb	r7, [r7, r6]
 8005450:	44bf      	add	pc, r7
 8005452:	bf00      	nop
 8005454:	5a060632 	.word	0x5a060632
 8005458:	a680      	.short	0xa680
 800545a:	210c      	movs	r1, #12
 800545c:	466c      	mov	r4, sp
 800545e:	7824      	ldrb	r4, [r4, #0]
 8005460:	2608      	movs	r6, #8
 8005462:	4326      	orrs	r6, r4
 8005464:	2420      	movs	r4, #32
 8005466:	5516      	strb	r6, [r2, r4]
 8005468:	7b1c      	ldrb	r4, [r3, #12]
 800546a:	7b5e      	ldrb	r6, [r3, #13]
 800546c:	0236      	lsls	r6, r6, #8
 800546e:	19a4      	adds	r4, r4, r6
 8005470:	7b9e      	ldrb	r6, [r3, #14]
 8005472:	0436      	lsls	r6, r6, #16
 8005474:	19a4      	adds	r4, r4, r6
 8005476:	7bde      	ldrb	r6, [r3, #15]
 8005478:	0636      	lsls	r6, r6, #24
 800547a:	19a4      	adds	r4, r4, r6
 800547c:	6194      	str	r4, [r2, #24]
 800547e:	466c      	mov	r4, sp
 8005480:	7864      	ldrb	r4, [r4, #1]
 8005482:	0026      	movs	r6, r4
 8005484:	d062      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005486:	9e01      	ldr	r6, [sp, #4]
 8005488:	8eb6      	ldrh	r6, [r6, #52]	@ 0x34
 800548a:	0636      	lsls	r6, r6, #24
 800548c:	0fb6      	lsrs	r6, r6, #30
 800548e:	2e02      	cmp	r6, #2
 8005490:	d35c      	bcc.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005492:	01ad      	lsls	r5, r5, #6
 8005494:	0f6d      	lsrs	r5, r5, #29
 8005496:	d059      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005498:	1e6d      	subs	r5, r5, #1
 800549a:	2d02      	cmp	r5, #2
 800549c:	d855      	bhi.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 800549e:	2520      	movs	r5, #32
 80054a0:	5d55      	ldrb	r5, [r2, r5]
 80054a2:	08ef      	lsrs	r7, r5, #3
 80054a4:	07ff      	lsls	r7, r7, #31
 80054a6:	d53b      	bpl.n	8005520 <PE_SVDM_CheckIdentity+0x160>
 80054a8:	3108      	adds	r1, #8
 80054aa:	1e64      	subs	r4, r4, #1
 80054ac:	e039      	b.n	8005522 <PE_SVDM_CheckIdentity+0x162>
 80054ae:	210c      	movs	r1, #12
 80054b0:	466c      	mov	r4, sp
 80054b2:	7824      	ldrb	r4, [r4, #0]
 80054b4:	2601      	movs	r6, #1
 80054b6:	4326      	orrs	r6, r4
 80054b8:	2420      	movs	r4, #32
 80054ba:	5516      	strb	r6, [r2, r4]
 80054bc:	7b1c      	ldrb	r4, [r3, #12]
 80054be:	7b5e      	ldrb	r6, [r3, #13]
 80054c0:	0236      	lsls	r6, r6, #8
 80054c2:	19a4      	adds	r4, r4, r6
 80054c4:	7b9e      	ldrb	r6, [r3, #14]
 80054c6:	0436      	lsls	r6, r6, #16
 80054c8:	19a4      	adds	r4, r4, r6
 80054ca:	7bde      	ldrb	r6, [r3, #15]
 80054cc:	0636      	lsls	r6, r6, #24
 80054ce:	19a4      	adds	r4, r4, r6
 80054d0:	60d4      	str	r4, [r2, #12]
 80054d2:	e7d4      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054d4:	210c      	movs	r1, #12
 80054d6:	466c      	mov	r4, sp
 80054d8:	7824      	ldrb	r4, [r4, #0]
 80054da:	2604      	movs	r6, #4
 80054dc:	4326      	orrs	r6, r4
 80054de:	2420      	movs	r4, #32
 80054e0:	5516      	strb	r6, [r2, r4]
 80054e2:	7b1c      	ldrb	r4, [r3, #12]
 80054e4:	7b5e      	ldrb	r6, [r3, #13]
 80054e6:	0236      	lsls	r6, r6, #8
 80054e8:	19a4      	adds	r4, r4, r6
 80054ea:	7b9e      	ldrb	r6, [r3, #14]
 80054ec:	0436      	lsls	r6, r6, #16
 80054ee:	19a4      	adds	r4, r4, r6
 80054f0:	7bde      	ldrb	r6, [r3, #15]
 80054f2:	0636      	lsls	r6, r6, #24
 80054f4:	19a4      	adds	r4, r4, r6
 80054f6:	6154      	str	r4, [r2, #20]
 80054f8:	e7c1      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054fa:	210c      	movs	r1, #12
 80054fc:	466c      	mov	r4, sp
 80054fe:	7824      	ldrb	r4, [r4, #0]
 8005500:	2602      	movs	r6, #2
 8005502:	4326      	orrs	r6, r4
 8005504:	2420      	movs	r4, #32
 8005506:	5516      	strb	r6, [r2, r4]
 8005508:	7b1c      	ldrb	r4, [r3, #12]
 800550a:	7b5e      	ldrb	r6, [r3, #13]
 800550c:	0236      	lsls	r6, r6, #8
 800550e:	19a4      	adds	r4, r4, r6
 8005510:	7b9e      	ldrb	r6, [r3, #14]
 8005512:	0436      	lsls	r6, r6, #16
 8005514:	19a4      	adds	r4, r4, r6
 8005516:	7bde      	ldrb	r6, [r3, #15]
 8005518:	0636      	lsls	r6, r6, #24
 800551a:	19a4      	adds	r4, r4, r6
 800551c:	6114      	str	r4, [r2, #16]
 800551e:	e7ae      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 8005520:	1d09      	adds	r1, r1, #4
 8005522:	b2e4      	uxtb	r4, r4
 8005524:	2c01      	cmp	r4, #1
 8005526:	d110      	bne.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 8005528:	2410      	movs	r4, #16
 800552a:	432c      	orrs	r4, r5
 800552c:	2520      	movs	r5, #32
 800552e:	5554      	strb	r4, [r2, r5]
 8005530:	1859      	adds	r1, r3, r1
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	784c      	ldrb	r4, [r1, #1]
 8005536:	0224      	lsls	r4, r4, #8
 8005538:	191b      	adds	r3, r3, r4
 800553a:	788c      	ldrb	r4, [r1, #2]
 800553c:	0424      	lsls	r4, r4, #16
 800553e:	191b      	adds	r3, r3, r4
 8005540:	78c9      	ldrb	r1, [r1, #3]
 8005542:	0609      	lsls	r1, r1, #24
 8005544:	1859      	adds	r1, r3, r1
 8005546:	61d1      	str	r1, [r2, #28]
 8005548:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 800554a:	2002      	movs	r0, #2
 800554c:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

0800554e <PE_SVDM_CheckSVIDs>:
 800554e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005550:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <.text_31>)
 8005552:	0080      	lsls	r0, r0, #2
 8005554:	5818      	ldr	r0, [r3, r0]
 8005556:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8005558:	0440      	lsls	r0, r0, #17
 800555a:	0f40      	lsrs	r0, r0, #29
 800555c:	1e46      	subs	r6, r0, #1
 800555e:	b2f6      	uxtb	r6, r6
 8005560:	2000      	movs	r0, #0
 8005562:	2500      	movs	r5, #0
 8005564:	7610      	strb	r0, [r2, #24]
 8005566:	7650      	strb	r0, [r2, #25]
 8005568:	000b      	movs	r3, r1
 800556a:	0014      	movs	r4, r2
 800556c:	0031      	movs	r1, r6
 800556e:	5c1a      	ldrb	r2, [r3, r0]
 8005570:	1c5e      	adds	r6, r3, #1
 8005572:	5c36      	ldrb	r6, [r6, r0]
 8005574:	0236      	lsls	r6, r6, #8
 8005576:	1992      	adds	r2, r2, r6
 8005578:	7e26      	ldrb	r6, [r4, #24]
 800557a:	0076      	lsls	r6, r6, #1
 800557c:	53a2      	strh	r2, [r4, r6]
 800557e:	7e26      	ldrb	r6, [r4, #24]
 8005580:	2201      	movs	r2, #1
 8005582:	0077      	lsls	r7, r6, #1
 8005584:	5be7      	ldrh	r7, [r4, r7]
 8005586:	2f00      	cmp	r7, #0
 8005588:	d002      	beq.n	8005590 <PE_SVDM_CheckSVIDs+0x42>
 800558a:	1c76      	adds	r6, r6, #1
 800558c:	7626      	strb	r6, [r4, #24]
 800558e:	e001      	b.n	8005594 <PE_SVDM_CheckSVIDs+0x46>
 8005590:	2501      	movs	r5, #1
 8005592:	7662      	strb	r2, [r4, #25]
 8005594:	1c80      	adds	r0, r0, #2
 8005596:	b2c0      	uxtb	r0, r0
 8005598:	5c1e      	ldrb	r6, [r3, r0]
 800559a:	1c5f      	adds	r7, r3, #1
 800559c:	5c3f      	ldrb	r7, [r7, r0]
 800559e:	023f      	lsls	r7, r7, #8
 80055a0:	19f6      	adds	r6, r6, r7
 80055a2:	7e27      	ldrb	r7, [r4, #24]
 80055a4:	007f      	lsls	r7, r7, #1
 80055a6:	53e6      	strh	r6, [r4, r7]
 80055a8:	7e26      	ldrb	r6, [r4, #24]
 80055aa:	0077      	lsls	r7, r6, #1
 80055ac:	5be7      	ldrh	r7, [r4, r7]
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	d002      	beq.n	80055b8 <PE_SVDM_CheckSVIDs+0x6a>
 80055b2:	1c76      	adds	r6, r6, #1
 80055b4:	7626      	strb	r6, [r4, #24]
 80055b6:	e001      	b.n	80055bc <PE_SVDM_CheckSVIDs+0x6e>
 80055b8:	2501      	movs	r5, #1
 80055ba:	7662      	strb	r2, [r4, #25]
 80055bc:	1c80      	adds	r0, r0, #2
 80055be:	b2c0      	uxtb	r0, r0
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	4290      	cmp	r0, r2
 80055c4:	d201      	bcs.n	80055ca <PE_SVDM_CheckSVIDs+0x7c>
 80055c6:	002a      	movs	r2, r5
 80055c8:	d0d1      	beq.n	800556e <PE_SVDM_CheckSVIDs+0x20>
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055cc <.text_27>:
 80055cc:	ffff7fff 	.word	0xffff7fff

080055d0 <PE_SVDM_CheckModes>:
 80055d0:	b530      	push	{r4, r5, lr}
 80055d2:	4c14      	ldr	r4, [pc, #80]	@ (8005624 <.text_31>)
 80055d4:	0080      	lsls	r0, r0, #2
 80055d6:	5820      	ldr	r0, [r4, r0]
 80055d8:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 80055da:	0440      	lsls	r0, r0, #17
 80055dc:	0f40      	lsrs	r0, r0, #29
 80055de:	1e40      	subs	r0, r0, #1
 80055e0:	b2c0      	uxtb	r0, r0
 80055e2:	2400      	movs	r4, #0
 80055e4:	8399      	strh	r1, [r3, #28]
 80055e6:	601c      	str	r4, [r3, #0]
 80055e8:	5d11      	ldrb	r1, [r2, r4]
 80055ea:	1915      	adds	r5, r2, r4
 80055ec:	786d      	ldrb	r5, [r5, #1]
 80055ee:	022d      	lsls	r5, r5, #8
 80055f0:	1949      	adds	r1, r1, r5
 80055f2:	1915      	adds	r5, r2, r4
 80055f4:	78ad      	ldrb	r5, [r5, #2]
 80055f6:	042d      	lsls	r5, r5, #16
 80055f8:	1949      	adds	r1, r1, r5
 80055fa:	1915      	adds	r5, r2, r4
 80055fc:	78ed      	ldrb	r5, [r5, #3]
 80055fe:	062d      	lsls	r5, r5, #24
 8005600:	1949      	adds	r1, r1, r5
 8005602:	681d      	ldr	r5, [r3, #0]
 8005604:	00ad      	lsls	r5, r5, #2
 8005606:	195d      	adds	r5, r3, r5
 8005608:	6069      	str	r1, [r5, #4]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	1c49      	adds	r1, r1, #1
 800560e:	6019      	str	r1, [r3, #0]
 8005610:	1d24      	adds	r4, r4, #4
 8005612:	b2e4      	uxtb	r4, r4
 8005614:	0081      	lsls	r1, r0, #2
 8005616:	428c      	cmp	r4, r1
 8005618:	d3e6      	bcc.n	80055e8 <PE_SVDM_CheckModes+0x18>
 800561a:	bd30      	pop	{r4, r5, pc}

0800561c <.text_29>:
 800561c:	000004ac 	.word	0x000004ac

08005620 <.text_30>:
 8005620:	00000494 	.word	0x00000494

08005624 <.text_31>:
 8005624:	2000023c 	.word	0x2000023c

08005628 <USBPD_PRL_TimerCounter>:
 8005628:	4954      	ldr	r1, [pc, #336]	@ (800577c <.text_15>)
 800562a:	0080      	lsls	r0, r0, #2
 800562c:	1808      	adds	r0, r1, r0
 800562e:	6801      	ldr	r1, [r0, #0]
 8005630:	790a      	ldrb	r2, [r1, #4]
 8005632:	2a00      	cmp	r2, #0
 8005634:	d002      	beq.n	800563c <USBPD_PRL_TimerCounter+0x14>
 8005636:	790a      	ldrb	r2, [r1, #4]
 8005638:	1e52      	subs	r2, r2, #1
 800563a:	710a      	strb	r2, [r1, #4]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	7841      	ldrb	r1, [r0, #1]
 8005640:	2900      	cmp	r1, #0
 8005642:	d001      	beq.n	8005648 <USBPD_PRL_TimerCounter+0x20>
 8005644:	1e49      	subs	r1, r1, #1
 8005646:	7041      	strb	r1, [r0, #1]
 8005648:	4770      	bx	lr
	...

0800564c <USBPD_PRL_Init>:
 800564c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800564e:	b081      	sub	sp, #4
 8005650:	0014      	movs	r4, r2
 8005652:	001d      	movs	r5, r3
 8005654:	2616      	movs	r6, #22
 8005656:	209c      	movs	r0, #156	@ 0x9c
 8005658:	0040      	lsls	r0, r0, #1
 800565a:	f011 f933 	bl	80168c4 <malloc>
 800565e:	0007      	movs	r7, r0
 8005660:	d01e      	beq.n	80056a0 <USBPD_PRL_Init+0x54>
 8005662:	9e02      	ldr	r6, [sp, #8]
 8005664:	219c      	movs	r1, #156	@ 0x9c
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	f011 fa5b 	bl	8016b22 <__aeabi_memclr>
 800566c:	220f      	movs	r2, #15
 800566e:	2103      	movs	r1, #3
 8005670:	1db8      	adds	r0, r7, #6
 8005672:	f011 fa4f 	bl	8016b14 <__aeabi_memset>
 8005676:	4841      	ldr	r0, [pc, #260]	@ (800577c <.text_15>)
 8005678:	4669      	mov	r1, sp
 800567a:	7909      	ldrb	r1, [r1, #4]
 800567c:	0089      	lsls	r1, r1, #2
 800567e:	5047      	str	r7, [r0, r1]
 8005680:	62bc      	str	r4, [r7, #40]	@ 0x28
 8005682:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8005684:	2001      	movs	r0, #1
 8005686:	9000      	str	r0, [sp, #0]
 8005688:	6870      	ldr	r0, [r6, #4]
 800568a:	0743      	lsls	r3, r0, #29
 800568c:	0fdb      	lsrs	r3, r3, #31
 800568e:	003a      	movs	r2, r7
 8005690:	3230      	adds	r2, #48	@ 0x30
 8005692:	bf00      	nop
 8005694:	a103      	add	r1, pc, #12	@ (adr r1, 80056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8005696:	4668      	mov	r0, sp
 8005698:	7900      	ldrb	r0, [r0, #4]
 800569a:	f00c f80d 	bl	80116b8 <USBPD_PHY_Init>
 800569e:	0006      	movs	r6, r0
 80056a0:	0030      	movs	r0, r6
 80056a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80056a4:	5cdd 0800 6035 0800 608f 0800 60a9 0800     .\..5`...`...`..
 80056b4:	60b1 0800 579d 0800                         .`...W..

080056bc <USBPD_PRL_GetMemoryConsumption>:
 80056bc:	20ea      	movs	r0, #234	@ 0xea
 80056be:	0080      	lsls	r0, r0, #2
 80056c0:	4770      	bx	lr

080056c2 <USBPD_PRL_SetHeader>:
 80056c2:	b530      	push	{r4, r5, lr}
 80056c4:	4c2d      	ldr	r4, [pc, #180]	@ (800577c <.text_15>)
 80056c6:	0080      	lsls	r0, r0, #2
 80056c8:	5820      	ldr	r0, [r4, r0]
 80056ca:	8a44      	ldrh	r4, [r0, #18]
 80056cc:	4d2c      	ldr	r5, [pc, #176]	@ (8005780 <.text_16>)
 80056ce:	4025      	ands	r5, r4
 80056d0:	0209      	lsls	r1, r1, #8
 80056d2:	2480      	movs	r4, #128	@ 0x80
 80056d4:	0064      	lsls	r4, r4, #1
 80056d6:	4021      	ands	r1, r4
 80056d8:	4329      	orrs	r1, r5
 80056da:	8241      	strh	r1, [r0, #18]
 80056dc:	4c29      	ldr	r4, [pc, #164]	@ (8005784 <.text_17>)
 80056de:	400c      	ands	r4, r1
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	2220      	movs	r2, #32
 80056e4:	4011      	ands	r1, r2
 80056e6:	4321      	orrs	r1, r4
 80056e8:	8241      	strh	r1, [r0, #18]
 80056ea:	4a27      	ldr	r2, [pc, #156]	@ (8005788 <.text_18>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	0199      	lsls	r1, r3, #6
 80056f0:	23c0      	movs	r3, #192	@ 0xc0
 80056f2:	400b      	ands	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	8243      	strh	r3, [r0, #18]
 80056f8:	bd30      	pop	{r4, r5, pc}

080056fa <USBPD_PRL_SetHeaderPowerRole>:
 80056fa:	4a20      	ldr	r2, [pc, #128]	@ (800577c <.text_15>)
 80056fc:	0080      	lsls	r0, r0, #2
 80056fe:	5810      	ldr	r0, [r2, r0]
 8005700:	8a42      	ldrh	r2, [r0, #18]
 8005702:	4b1f      	ldr	r3, [pc, #124]	@ (8005780 <.text_16>)
 8005704:	4013      	ands	r3, r2
 8005706:	0209      	lsls	r1, r1, #8
 8005708:	2280      	movs	r2, #128	@ 0x80
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	e007      	b.n	800571e <.text_10>

0800570e <USBPD_PRL_SetHeaderDataRole>:
 800570e:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <.text_15>)
 8005710:	0080      	lsls	r0, r0, #2
 8005712:	5810      	ldr	r0, [r2, r0]
 8005714:	8a42      	ldrh	r2, [r0, #18]
 8005716:	4b1b      	ldr	r3, [pc, #108]	@ (8005784 <.text_17>)
 8005718:	4013      	ands	r3, r2
 800571a:	0149      	lsls	r1, r1, #5
 800571c:	2220      	movs	r2, #32

0800571e <.text_10>:
 800571e:	4011      	ands	r1, r2
 8005720:	4319      	orrs	r1, r3
 8005722:	8241      	strh	r1, [r0, #18]
 8005724:	4770      	bx	lr

08005726 <USBPD_PRL_SetHeaderSpecification>:
 8005726:	4a15      	ldr	r2, [pc, #84]	@ (800577c <.text_15>)
 8005728:	0080      	lsls	r0, r0, #2
 800572a:	5810      	ldr	r0, [r2, r0]
 800572c:	8a42      	ldrh	r2, [r0, #18]
 800572e:	4b16      	ldr	r3, [pc, #88]	@ (8005788 <.text_18>)
 8005730:	4013      	ands	r3, r2
 8005732:	0189      	lsls	r1, r1, #6
 8005734:	22c0      	movs	r2, #192	@ 0xc0
 8005736:	400a      	ands	r2, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	8242      	strh	r2, [r0, #18]
 800573c:	4770      	bx	lr

0800573e <USBPD_PRL_CBL_SetHeaderSpecification>:
 800573e:	4a0f      	ldr	r2, [pc, #60]	@ (800577c <.text_15>)
 8005740:	0080      	lsls	r0, r0, #2
 8005742:	5810      	ldr	r0, [r2, r0]
 8005744:	018a      	lsls	r2, r1, #6
 8005746:	21c0      	movs	r1, #192	@ 0xc0
 8005748:	4011      	ands	r1, r2
 800574a:	4a0f      	ldr	r2, [pc, #60]	@ (8005788 <.text_18>)
 800574c:	8a83      	ldrh	r3, [r0, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	430b      	orrs	r3, r1
 8005752:	8283      	strh	r3, [r0, #20]
 8005754:	8ac3      	ldrh	r3, [r0, #22]
 8005756:	401a      	ands	r2, r3
 8005758:	4311      	orrs	r1, r2
 800575a:	82c1      	strh	r1, [r0, #22]
 800575c:	4770      	bx	lr

0800575e <USBPD_PRL_SRCSetSinkNG>:
 800575e:	b580      	push	{r7, lr}
 8005760:	f00c f89f 	bl	80118a2 <USBPD_PHY_SetResistor_SinkTxNG>
 8005764:	bd01      	pop	{r0, pc}

08005766 <USBPD_PRL_SRCReleaseSinkNG>:
 8005766:	b510      	push	{r4, lr}
 8005768:	0004      	movs	r4, r0
 800576a:	f00c f8a9 	bl	80118c0 <USBPD_PHY_SetResistor_SinkTxOK>
 800576e:	2000      	movs	r0, #0
 8005770:	4902      	ldr	r1, [pc, #8]	@ (800577c <.text_15>)
 8005772:	00a2      	lsls	r2, r4, #2
 8005774:	5889      	ldr	r1, [r1, r2]
 8005776:	7148      	strb	r0, [r1, #5]
 8005778:	bd10      	pop	{r4, pc}
	...

0800577c <.text_15>:
 800577c:	20000248 	.word	0x20000248

08005780 <.text_16>:
 8005780:	0000feff 	.word	0x0000feff

08005784 <.text_17>:
 8005784:	0000ffdf 	.word	0x0000ffdf

08005788 <.text_18>:
 8005788:	0000ff3f 	.word	0x0000ff3f

0800578c <USBPD_PRL_IsResistor_SinkTxOK>:
 800578c:	b580      	push	{r7, lr}
 800578e:	f00c f8bd 	bl	801190c <USBPD_PHY_IsResistor_SinkTxOk>
 8005792:	bd02      	pop	{r1, pc}

08005794 <USBPD_PRL_FastRoleSwapSignalling>:
 8005794:	b580      	push	{r7, lr}
 8005796:	f00c f8c9 	bl	801192c <USBPD_PHY_FastRoleSwapSignalling>
 800579a:	bd01      	pop	{r0, pc}

0800579c <PRL_FastRoleSwapReception>:
 800579c:	b580      	push	{r7, lr}
 800579e:	f7fb fa4d 	bl	8000c3c <PE_PRL_FastRoleSwapReception>
 80057a2:	bd01      	pop	{r0, pc}

080057a4 <USBPD_PRL_SOPCapability>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	f00c f89b 	bl	80118e0 <USBPD_PHY_SOPSupported>
 80057aa:	bd01      	pop	{r0, pc}

080057ac <USBPD_PRL_SendMessage>:
 80057ac:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	2503      	movs	r5, #3
 80057b2:	4668      	mov	r0, sp
 80057b4:	7f00      	ldrb	r0, [r0, #28]
 80057b6:	9005      	str	r0, [sp, #20]
 80057b8:	48ca      	ldr	r0, [pc, #808]	@ (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	1880      	adds	r0, r0, r2
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	7962      	ldrb	r2, [r4, #5]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d004      	beq.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057cc:	7a62      	ldrb	r2, [r4, #9]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d101      	bne.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057d2:	220f      	movs	r2, #15
 80057d4:	7142      	strb	r2, [r0, #5]
 80057d6:	466a      	mov	r2, sp
 80057d8:	7111      	strb	r1, [r2, #4]
 80057da:	4669      	mov	r1, sp
 80057dc:	7909      	ldrb	r1, [r1, #4]
 80057de:	9104      	str	r1, [sp, #16]
 80057e0:	1861      	adds	r1, r4, r1
 80057e2:	9a05      	ldr	r2, [sp, #20]
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	1c52      	adds	r2, r2, #1
 80057e8:	466e      	mov	r6, sp
 80057ea:	7172      	strb	r2, [r6, #5]
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	9203      	str	r2, [sp, #12]
 80057f2:	2600      	movs	r6, #0
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80057f8:	7963      	ldrb	r3, [r4, #5]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d900      	bls.n	8005800 <USBPD_PRL_SendMessage+0x54>
 80057fe:	e1f6      	b.n	8005bee <USBPD_PRL_SendMessage+0x442>
 8005800:	a701      	add	r7, pc, #4	@ (adr r7, 8005808 <USBPD_PRL_SendMessage+0x5c>)
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	5aff      	ldrh	r7, [r7, r3]
 8005806:	44bf      	add	pc, r7
 8005808:	00480020 	.word	0x00480020
 800580c:	03e4005e 	.word	0x03e4005e
 8005810:	00a8006a 	.word	0x00a8006a
 8005814:	015a0086 	.word	0x015a0086
 8005818:	03e403e4 	.word	0x03e403e4
 800581c:	030802de 	.word	0x030802de
 8005820:	03560334 	.word	0x03560334
 8005824:	03de03e4 	.word	0x03de03e4
 8005828:	03a6      	.short	0x03a6
 800582a:	f3ef 8710 	mrs	r7, PRIMASK
 800582e:	b672      	cpsid	i
 8005830:	4668      	mov	r0, sp
 8005832:	7f00      	ldrb	r0, [r0, #28]
 8005834:	f7fb f8b4 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8005838:	2800      	cmp	r0, #0
 800583a:	d105      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 800583c:	7aa0      	ldrb	r0, [r4, #10]
 800583e:	2800      	cmp	r0, #0
 8005840:	d102      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 8005842:	20ff      	movs	r0, #255	@ 0xff
 8005844:	7260      	strb	r0, [r4, #9]
 8005846:	e000      	b.n	800584a <USBPD_PRL_SendMessage+0x9e>
 8005848:	7266      	strb	r6, [r4, #9]
 800584a:	f387 8810 	msr	PRIMASK, r7
 800584e:	2006      	movs	r0, #6
 8005850:	e1a0      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005852:	4668      	mov	r0, sp
 8005854:	7f00      	ldrb	r0, [r0, #28]
 8005856:	f00c f824 	bl	80118a2 <USBPD_PHY_SetResistor_SinkTxNG>
 800585a:	2002      	movs	r0, #2
 800585c:	9900      	ldr	r1, [sp, #0]
 800585e:	6809      	ldr	r1, [r1, #0]
 8005860:	7148      	strb	r0, [r1, #5]
 8005862:	2013      	movs	r0, #19
 8005864:	7060      	strb	r0, [r4, #1]
 8005866:	e1c4      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005868:	2a01      	cmp	r2, #1
 800586a:	d10f      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 800586c:	7861      	ldrb	r1, [r4, #1]
 800586e:	2900      	cmp	r1, #0
 8005870:	d10a      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005872:	e01c      	b.n	80058ae <USBPD_PRL_SendMessage+0x102>
 8005874:	2a02      	cmp	r2, #2
 8005876:	d109      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 8005878:	4668      	mov	r0, sp
 800587a:	7f00      	ldrb	r0, [r0, #28]
 800587c:	f00c f846 	bl	801190c <USBPD_PHY_IsResistor_SinkTxOk>
 8005880:	2801      	cmp	r0, #1
 8005882:	d101      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005884:	2005      	movs	r0, #5
 8005886:	e185      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005888:	2509      	movs	r5, #9
 800588a:	e1b2      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 800588c:	2106      	movs	r1, #6
 800588e:	e154      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1861      	adds	r1, r4, r1
 8005894:	8a49      	ldrh	r1, [r1, #18]
 8005896:	0609      	lsls	r1, r1, #24
 8005898:	0f89      	lsrs	r1, r1, #30
 800589a:	2902      	cmp	r1, #2
 800589c:	d107      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d101      	bne.n	80058a6 <USBPD_PRL_SendMessage+0xfa>
 80058a2:	7142      	strb	r2, [r0, #5]
 80058a4:	e1a5      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 80058a6:	2a02      	cmp	r2, #2
 80058a8:	d101      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 80058aa:	2104      	movs	r1, #4
 80058ac:	e145      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058ae:	2105      	movs	r1, #5
 80058b0:	e143      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058b2:	9803      	ldr	r0, [sp, #12]
 80058b4:	1820      	adds	r0, r4, r0
 80058b6:	8a43      	ldrh	r3, [r0, #18]
 80058b8:	4acf      	ldr	r2, [pc, #828]	@ (8005bf8 <.text_24>)
 80058ba:	401a      	ands	r2, r3
 80058bc:	ab08      	add	r3, sp, #32
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	06db      	lsls	r3, r3, #27
 80058c2:	0edb      	lsrs	r3, r3, #27
 80058c4:	4313      	orrs	r3, r2
 80058c6:	8243      	strh	r3, [r0, #18]
 80058c8:	045a      	lsls	r2, r3, #17
 80058ca:	0c52      	lsrs	r2, r2, #17
 80058cc:	ab08      	add	r3, sp, #32
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	03db      	lsls	r3, r3, #15
 80058d4:	4313      	orrs	r3, r2
 80058d6:	8243      	strh	r3, [r0, #18]
 80058d8:	70a6      	strb	r6, [r4, #2]
 80058da:	8a43      	ldrh	r3, [r0, #18]
 80058dc:	0bda      	lsrs	r2, r3, #15
 80058de:	d023      	beq.n	8005928 <USBPD_PRL_SendMessage+0x17c>
 80058e0:	9a02      	ldr	r2, [sp, #8]
 80058e2:	7892      	ldrb	r2, [r2, #2]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	18d2      	adds	r2, r2, r3
 80058ec:	83a2      	strh	r2, [r4, #28]
 80058ee:	8ba2      	ldrh	r2, [r4, #28]
 80058f0:	0a93      	lsrs	r3, r2, #10
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d40f      	bmi.n	8005916 <USBPD_PRL_SendMessage+0x16a>
 80058f6:	0ad2      	lsrs	r2, r2, #11
 80058f8:	0712      	lsls	r2, r2, #28
 80058fa:	d122      	bne.n	8005942 <USBPD_PRL_SendMessage+0x196>
 80058fc:	466a      	mov	r2, sp
 80058fe:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8005900:	1f12      	subs	r2, r2, #4
 8005902:	8462      	strh	r2, [r4, #34]	@ 0x22
 8005904:	05d2      	lsls	r2, r2, #23
 8005906:	0dd2      	lsrs	r2, r2, #23
 8005908:	8ba3      	ldrh	r3, [r4, #28]
 800590a:	27fe      	movs	r7, #254	@ 0xfe
 800590c:	023f      	lsls	r7, r7, #8
 800590e:	401f      	ands	r7, r3
 8005910:	433a      	orrs	r2, r7
 8005912:	83a2      	strh	r2, [r4, #28]
 8005914:	e015      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005916:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005918:	8a42      	ldrh	r2, [r0, #18]
 800591a:	4bb8      	ldr	r3, [pc, #736]	@ (8005bfc <.text_25>)
 800591c:	4013      	ands	r3, r2
 800591e:	2280      	movs	r2, #128	@ 0x80
 8005920:	0152      	lsls	r2, r2, #5
 8005922:	431a      	orrs	r2, r3
 8005924:	8242      	strh	r2, [r0, #18]
 8005926:	e00c      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005928:	4ab4      	ldr	r2, [pc, #720]	@ (8005bfc <.text_25>)
 800592a:	401a      	ands	r2, r3
 800592c:	466b      	mov	r3, sp
 800592e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005930:	1e9b      	subs	r3, r3, #2
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	27e0      	movs	r7, #224	@ 0xe0
 8005938:	01ff      	lsls	r7, r7, #7
 800593a:	401f      	ands	r7, r3
 800593c:	4317      	orrs	r7, r2
 800593e:	8247      	strh	r7, [r0, #18]
 8005940:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005942:	aa08      	add	r2, sp, #32
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	2a0d      	cmp	r2, #13
 8005948:	d10a      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 800594a:	8a40      	ldrh	r0, [r0, #18]
 800594c:	22f0      	movs	r2, #240	@ 0xf0
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4002      	ands	r2, r0
 8005952:	d105      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 8005954:	72ce      	strb	r6, [r1, #11]
 8005956:	220f      	movs	r2, #15
 8005958:	2103      	movs	r1, #3
 800595a:	1da0      	adds	r0, r4, #6
 800595c:	f011 f8da 	bl	8016b14 <__aeabi_memset>
 8005960:	2007      	movs	r0, #7
 8005962:	e117      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005964:	4669      	mov	r1, sp
 8005966:	8f0c      	ldrh	r4, [r1, #56]	@ 0x38
 8005968:	9903      	ldr	r1, [sp, #12]
 800596a:	1841      	adds	r1, r0, r1
 800596c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800596e:	466b      	mov	r3, sp
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	58d2      	ldr	r2, [r2, r3]
 8005976:	466b      	mov	r3, sp
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	8a52      	ldrh	r2, [r2, #18]
 8005980:	0bd3      	lsrs	r3, r2, #15
 8005982:	d074      	beq.n	8005a6e <USBPD_PRL_SendMessage+0x2c2>
 8005984:	8b83      	ldrh	r3, [r0, #28]
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d465      	bmi.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 800598c:	4b55      	ldr	r3, [pc, #340]	@ (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800598e:	466f      	mov	r7, sp
 8005990:	7f3f      	ldrb	r7, [r7, #28]
 8005992:	00bf      	lsls	r7, r7, #2
 8005994:	59db      	ldr	r3, [r3, r7]
 8005996:	8b9b      	ldrh	r3, [r3, #28]
 8005998:	8c47      	ldrh	r7, [r0, #34]	@ 0x22
 800599a:	2f1b      	cmp	r7, #27
 800599c:	d30a      	bcc.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 800599e:	0bdf      	lsrs	r7, r3, #15
 80059a0:	d008      	beq.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 80059a2:	23e0      	movs	r3, #224	@ 0xe0
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4313      	orrs	r3, r2
 80059a8:	824b      	strh	r3, [r1, #18]
 80059aa:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 80059ac:	391a      	subs	r1, #26
 80059ae:	8441      	strh	r1, [r0, #34]	@ 0x22
 80059b0:	241e      	movs	r4, #30
 80059b2:	e051      	b.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 80059b4:	0ada      	lsrs	r2, r3, #11
 80059b6:	0712      	lsls	r2, r2, #28
 80059b8:	d107      	bne.n	80059ca <USBPD_PRL_SendMessage+0x21e>
 80059ba:	22fe      	movs	r2, #254	@ 0xfe
 80059bc:	0212      	lsls	r2, r2, #8
 80059be:	401a      	ands	r2, r3
 80059c0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	0ddb      	lsrs	r3, r3, #23
 80059c6:	4313      	orrs	r3, r2
 80059c8:	8383      	strh	r3, [r0, #28]
 80059ca:	8a4b      	ldrh	r3, [r1, #18]
 80059cc:	4a8b      	ldr	r2, [pc, #556]	@ (8005bfc <.text_25>)
 80059ce:	401a      	ands	r2, r3
 80059d0:	824a      	strh	r2, [r1, #18]
 80059d2:	8b83      	ldrh	r3, [r0, #28]
 80059d4:	0bdb      	lsrs	r3, r3, #15
 80059d6:	d03c      	beq.n	8005a52 <USBPD_PRL_SendMessage+0x2a6>
 80059d8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80059da:	1c9b      	adds	r3, r3, #2
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	24e0      	movs	r4, #224	@ 0xe0
 80059e2:	01e4      	lsls	r4, r4, #7
 80059e4:	401c      	ands	r4, r3
 80059e6:	4314      	orrs	r4, r2
 80059e8:	824c      	strh	r4, [r1, #18]
 80059ea:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80059ec:	1c80      	adds	r0, r0, #2
 80059ee:	0781      	lsls	r1, r0, #30
 80059f0:	0f89      	lsrs	r1, r1, #30
 80059f2:	d025      	beq.n	8005a40 <USBPD_PRL_SendMessage+0x294>
 80059f4:	2200      	movs	r2, #0
 80059f6:	483b      	ldr	r0, [pc, #236]	@ (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18c0      	adds	r0, r0, r3
 80059fe:	9000      	str	r0, [sp, #0]
 8005a00:	9802      	ldr	r0, [sp, #8]
 8005a02:	9102      	str	r1, [sp, #8]
 8005a04:	e004      	b.n	8005a10 <USBPD_PRL_SendMessage+0x264>
 8005a06:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005a08:	1859      	adds	r1, r3, r1
 8005a0a:	1841      	adds	r1, r0, r1
 8005a0c:	710e      	strb	r6, [r1, #4]
 8005a0e:	1c52      	adds	r2, r2, #1
 8005a10:	9900      	ldr	r1, [sp, #0]
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	b2d1      	uxtb	r1, r2
 8005a16:	2404      	movs	r4, #4
 8005a18:	9f02      	ldr	r7, [sp, #8]
 8005a1a:	1be4      	subs	r4, r4, r7
 8005a1c:	42a1      	cmp	r1, r4
 8005a1e:	d3f2      	bcc.n	8005a06 <USBPD_PRL_SendMessage+0x25a>
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	0018      	movs	r0, r3
 8005a24:	3012      	adds	r0, #18
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1840      	adds	r0, r0, r1
 8005a2a:	8801      	ldrh	r1, [r0, #0]
 8005a2c:	4a73      	ldr	r2, [pc, #460]	@ (8005bfc <.text_25>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	0b09      	lsrs	r1, r1, #12
 8005a32:	1c49      	adds	r1, r1, #1
 8005a34:	0309      	lsls	r1, r1, #12
 8005a36:	23e0      	movs	r3, #224	@ 0xe0
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	8003      	strh	r3, [r0, #0]
 8005a40:	9800      	ldr	r0, [sp, #0]
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	3012      	adds	r0, #18
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	5a40      	ldrh	r0, [r0, r1]
 8005a4a:	0440      	lsls	r0, r0, #17
 8005a4c:	0f40      	lsrs	r0, r0, #29
 8005a4e:	0084      	lsls	r4, r0, #2
 8005a50:	1ca4      	adds	r4, r4, #2
 8005a52:	9800      	ldr	r0, [sp, #0]
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	8446      	strh	r6, [r0, #34]	@ 0x22
 8005a58:	9800      	ldr	r0, [sp, #0]
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	8b80      	ldrh	r0, [r0, #28]
 8005a5e:	9902      	ldr	r1, [sp, #8]
 8005a60:	7088      	strb	r0, [r1, #2]
 8005a62:	9800      	ldr	r0, [sp, #0]
 8005a64:	6800      	ldr	r0, [r0, #0]
 8005a66:	8b80      	ldrh	r0, [r0, #28]
 8005a68:	0a00      	lsrs	r0, r0, #8
 8005a6a:	9902      	ldr	r1, [sp, #8]
 8005a6c:	70c8      	strb	r0, [r1, #3]
 8005a6e:	9800      	ldr	r0, [sp, #0]
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	0010      	movs	r0, r2
 8005a74:	3012      	adds	r0, #18
 8005a76:	9903      	ldr	r1, [sp, #12]
 8005a78:	1840      	adds	r0, r0, r1
 8005a7a:	8803      	ldrh	r3, [r0, #0]
 8005a7c:	498c      	ldr	r1, [pc, #560]	@ (8005cb0 <.text_30>)
 8005a7e:	4019      	ands	r1, r3
 8005a80:	320b      	adds	r2, #11
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	5cd2      	ldrb	r2, [r2, r3]
 8005a86:	0253      	lsls	r3, r2, #9
 8005a88:	22e0      	movs	r2, #224	@ 0xe0
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	8002      	strh	r2, [r0, #0]
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	7002      	strb	r2, [r0, #0]
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	3012      	adds	r0, #18
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	5a40      	ldrh	r0, [r0, r1]
 8005aa0:	0a00      	lsrs	r0, r0, #8
 8005aa2:	9902      	ldr	r1, [sp, #8]
 8005aa4:	7048      	strb	r0, [r1, #1]
 8005aa6:	9800      	ldr	r0, [sp, #0]
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	81c4      	strh	r4, [r0, #14]
 8005aac:	210a      	movs	r1, #10
 8005aae:	7141      	strb	r1, [r0, #5]
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	7401      	strb	r1, [r0, #16]
 8005ab4:	b2a0      	uxth	r0, r4
 8005ab6:	9000      	str	r0, [sp, #0]
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	4668      	mov	r0, sp
 8005abc:	7902      	ldrb	r2, [r0, #4]
 8005abe:	7f01      	ldrb	r1, [r0, #28]
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	4e7c      	ldr	r6, [pc, #496]	@ (8005cb4 <.text_31>)
 8005ac4:	6836      	ldr	r6, [r6, #0]
 8005ac6:	47b0      	blx	r6
 8005ac8:	497b      	ldr	r1, [pc, #492]	@ (8005cb8 <.text_32>)
 8005aca:	4668      	mov	r0, sp
 8005acc:	7940      	ldrb	r0, [r0, #5]
 8005ace:	f00d fa95 	bl	8012ffc <USBPD_TIM_Start>
 8005ad2:	b2a3      	uxth	r3, r4
 8005ad4:	9a02      	ldr	r2, [sp, #8]
 8005ad6:	4668      	mov	r0, sp
 8005ad8:	7901      	ldrb	r1, [r0, #4]
 8005ada:	7f00      	ldrb	r0, [r0, #28]
 8005adc:	f00b fe9b 	bl	8011816 <USBPD_PHY_SendMessage>
 8005ae0:	e087      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005ae2:	bf00      	nop
 8005ae4:	20000248 	.word	0x20000248
 8005ae8:	f3ef 8410 	mrs	r4, PRIMASK
 8005aec:	b672      	cpsid	i
 8005aee:	9800      	ldr	r0, [sp, #0]
 8005af0:	6800      	ldr	r0, [r0, #0]
 8005af2:	7940      	ldrb	r0, [r0, #5]
 8005af4:	280a      	cmp	r0, #10
 8005af6:	d109      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005af8:	4668      	mov	r0, sp
 8005afa:	7940      	ldrb	r0, [r0, #5]
 8005afc:	f00d faec 	bl	80130d8 <USBPD_TIM_IsExpired>
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d103      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005b04:	200d      	movs	r0, #13
 8005b06:	9900      	ldr	r1, [sp, #0]
 8005b08:	6809      	ldr	r1, [r1, #0]
 8005b0a:	7148      	strb	r0, [r1, #5]
 8005b0c:	f384 8810 	msr	PRIMASK, r4
 8005b10:	e06f      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b12:	7aca      	ldrb	r2, [r1, #11]
 8005b14:	8b67      	ldrh	r7, [r4, #26]
 8005b16:	053f      	lsls	r7, r7, #20
 8005b18:	0f7f      	lsrs	r7, r7, #29
 8005b1a:	42ba      	cmp	r2, r7
 8005b1c:	d10c      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b1e:	7ea3      	ldrb	r3, [r4, #26]
 8005b20:	06db      	lsls	r3, r3, #27
 8005b22:	0edb      	lsrs	r3, r3, #27
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b28:	1c52      	adds	r2, r2, #1
 8005b2a:	0750      	lsls	r0, r2, #29
 8005b2c:	0f40      	lsrs	r0, r0, #29
 8005b2e:	72c8      	strb	r0, [r1, #11]
 8005b30:	9800      	ldr	r0, [sp, #0]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	7146      	strb	r6, [r0, #5]
 8005b36:	e011      	b.n	8005b5c <USBPD_PRL_SendMessage+0x3b0>
 8005b38:	210d      	movs	r1, #13
 8005b3a:	7141      	strb	r1, [r0, #5]
 8005b3c:	e059      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b3e:	7ac8      	ldrb	r0, [r1, #11]
 8005b40:	1c40      	adds	r0, r0, #1
 8005b42:	0740      	lsls	r0, r0, #29
 8005b44:	0f40      	lsrs	r0, r0, #29
 8005b46:	72c8      	strb	r0, [r1, #11]
 8005b48:	9800      	ldr	r0, [sp, #0]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	7146      	strb	r6, [r0, #5]
 8005b4e:	8ba1      	ldrh	r1, [r4, #28]
 8005b50:	485a      	ldr	r0, [pc, #360]	@ (8005cbc <.text_33>)
 8005b52:	4008      	ands	r0, r1
 8005b54:	83a0      	strh	r0, [r4, #28]
 8005b56:	495a      	ldr	r1, [pc, #360]	@ (8005cc0 <.text_34>)
 8005b58:	4001      	ands	r1, r0
 8005b5a:	83a1      	strh	r1, [r4, #28]
 8005b5c:	2505      	movs	r5, #5
 8005b5e:	e048      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b60:	78a0      	ldrb	r0, [r4, #2]
 8005b62:	1c40      	adds	r0, r0, #1
 8005b64:	70a0      	strb	r0, [r4, #2]
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	18a2      	adds	r2, r4, r2
 8005b6a:	8a52      	ldrh	r2, [r2, #18]
 8005b6c:	0613      	lsls	r3, r2, #24
 8005b6e:	0f9b      	lsrs	r3, r3, #30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <USBPD_PRL_SendMessage+0x3cc>
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <USBPD_PRL_SendMessage+0x3ce>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	0bd2      	lsrs	r2, r2, #15
 8005b7c:	d006      	beq.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b7e:	8ba2      	ldrh	r2, [r4, #28]
 8005b80:	0bd4      	lsrs	r4, r2, #15
 8005b82:	d103      	bne.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b84:	05d2      	lsls	r2, r2, #23
 8005b86:	0dd2      	lsrs	r2, r2, #23
 8005b88:	2a1b      	cmp	r2, #27
 8005b8a:	d207      	bcs.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b8c:	b2c0      	uxtb	r0, r0
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d304      	bcc.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b92:	2010      	movs	r0, #16
 8005b94:	9900      	ldr	r1, [sp, #0]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	7148      	strb	r0, [r1, #5]
 8005b9a:	e02a      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b9c:	9800      	ldr	r0, [sp, #0]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	7146      	strb	r6, [r0, #5]
 8005ba2:	2507      	movs	r5, #7
 8005ba4:	7ac8      	ldrb	r0, [r1, #11]
 8005ba6:	1c40      	adds	r0, r0, #1
 8005ba8:	2207      	movs	r2, #7
 8005baa:	4002      	ands	r2, r0
 8005bac:	72ca      	strb	r2, [r1, #11]
 8005bae:	e020      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	7141      	strb	r1, [r0, #5]
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	7420      	strb	r0, [r4, #16]
 8005bb8:	493f      	ldr	r1, [pc, #252]	@ (8005cb8 <.text_32>)
 8005bba:	4668      	mov	r0, sp
 8005bbc:	7940      	ldrb	r0, [r0, #5]
 8005bbe:	f00d fa1d 	bl	8012ffc <USBPD_TIM_Start>
 8005bc2:	89e3      	ldrh	r3, [r4, #14]
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	4668      	mov	r0, sp
 8005bc8:	7901      	ldrb	r1, [r0, #4]
 8005bca:	7f00      	ldrb	r0, [r0, #28]
 8005bcc:	f00b fe23 	bl	8011816 <USBPD_PHY_SendMessage>
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 8005bd4:	9000      	str	r0, [sp, #0]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	4668      	mov	r0, sp
 8005bda:	7902      	ldrb	r2, [r0, #4]
 8005bdc:	7f01      	ldrb	r1, [r0, #28]
 8005bde:	2002      	movs	r0, #2
 8005be0:	4c34      	ldr	r4, [pc, #208]	@ (8005cb4 <.text_31>)
 8005be2:	6824      	ldr	r4, [r4, #0]
 8005be4:	47a0      	blx	r4
 8005be6:	e004      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005be8:	7146      	strb	r6, [r0, #5]
 8005bea:	2506      	movs	r5, #6
 8005bec:	e001      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bee:	7146      	strb	r6, [r0, #5]
 8005bf0:	2510      	movs	r5, #16
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	b009      	add	sp, #36	@ 0x24
 8005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf8 <.text_24>:
 8005bf8:	0000ffe0 	.word	0x0000ffe0

08005bfc <.text_25>:
 8005bfc:	00008fff 	.word	0x00008fff

08005c00 <USBPD_PRL_ResetRequestProcess>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	0005      	movs	r5, r0
 8005c04:	000e      	movs	r6, r1
 8005c06:	482f      	ldr	r0, [pc, #188]	@ (8005cc4 <.text_35>)
 8005c08:	00a9      	lsls	r1, r5, #2
 8005c0a:	1840      	adds	r0, r0, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	2700      	movs	r7, #0
 8005c12:	70e7      	strb	r7, [r4, #3]
 8005c14:	72e7      	strb	r7, [r4, #11]
 8005c16:	7327      	strb	r7, [r4, #12]
 8005c18:	7367      	strb	r7, [r4, #13]
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	1da0      	adds	r0, r4, #6
 8005c20:	f010 ff78 	bl	8016b14 <__aeabi_memset>
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	7147      	strb	r7, [r0, #5]
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	0032      	movs	r2, r6
 8005c30:	0029      	movs	r1, r5
 8005c32:	2002      	movs	r0, #2
 8005c34:	4f1f      	ldr	r7, [pc, #124]	@ (8005cb4 <.text_31>)
 8005c36:	683f      	ldr	r7, [r7, #0]
 8005c38:	47b8      	blx	r7
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f849 	bl	8005cd2 <PRL_DisableRX>
 8005c40:	0031      	movs	r1, r6
 8005c42:	0028      	movs	r0, r5
 8005c44:	f00b fdd1 	bl	80117ea <USBPD_PHY_ResetRequest>
 8005c48:	2005      	movs	r0, #5
 8005c4a:	7120      	strb	r0, [r4, #4]
 8005c4c:	78e0      	ldrb	r0, [r4, #3]
 8005c4e:	2801      	cmp	r0, #1
 8005c50:	d002      	beq.n	8005c58 <USBPD_PRL_ResetRequestProcess+0x58>
 8005c52:	7920      	ldrb	r0, [r4, #4]
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1f9      	bne.n	8005c4c <USBPD_PRL_ResetRequestProcess+0x4c>
 8005c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005c5a <USBDPD_PRL_BistCarrierEyeMode>:
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	2905      	cmp	r1, #5
 8005c5e:	d102      	bne.n	8005c66 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005c60:	f00b fdf8 	bl	8011854 <USBPD_PHY_Send_BIST_Pattern>
 8005c64:	bd02      	pop	{r1, pc}
 8005c66:	2010      	movs	r0, #16
 8005c68:	bd02      	pop	{r1, pc}

08005c6a <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	2905      	cmp	r1, #5
 8005c6e:	d103      	bne.n	8005c78 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005c70:	2107      	movs	r1, #7
 8005c72:	f00b fdff 	bl	8011874 <USBPD_PHY_ExitTransmit>
 8005c76:	bd02      	pop	{r1, pc}
 8005c78:	2010      	movs	r0, #16
 8005c7a:	bd02      	pop	{r1, pc}

08005c7c <USBPD_PRL_Reset>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	0004      	movs	r4, r0
 8005c80:	4810      	ldr	r0, [pc, #64]	@ (8005cc4 <.text_35>)
 8005c82:	00a1      	lsls	r1, r4, #2
 8005c84:	5845      	ldr	r5, [r0, r1]
 8005c86:	2600      	movs	r6, #0
 8005c88:	716e      	strb	r6, [r5, #5]
 8005c8a:	702e      	strb	r6, [r5, #0]
 8005c8c:	712e      	strb	r6, [r5, #4]
 8005c8e:	72ee      	strb	r6, [r5, #11]
 8005c90:	732e      	strb	r6, [r5, #12]
 8005c92:	736e      	strb	r6, [r5, #13]
 8005c94:	220f      	movs	r2, #15
 8005c96:	2103      	movs	r1, #3
 8005c98:	1da8      	adds	r0, r5, #6
 8005c9a:	f010 ff3b 	bl	8016b14 <__aeabi_memset>
 8005c9e:	2025      	movs	r0, #37	@ 0x25
 8005ca0:	542e      	strb	r6, [r5, r0]
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f00b fd97 	bl	80117d6 <USBPD_PHY_Reset>
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f00b fe4e 	bl	801194a <USBPD_PHY_EnableRX>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}

08005cb0 <.text_30>:
 8005cb0:	0000f1ff 	.word	0x0000f1ff

08005cb4 <.text_31>:
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <.text_32>:
 8005cb8:	00002710 	.word	0x00002710

08005cbc <.text_33>:
 8005cbc:	000087ff 	.word	0x000087ff

08005cc0 <.text_34>:
 8005cc0:	0000fbff 	.word	0x0000fbff

08005cc4 <.text_35>:
 8005cc4:	20000248 	.word	0x20000248

08005cc8 <USBPD_PRL_Stop>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	f00b fe4d 	bl	8011968 <USBPD_PHY_DisableRX>
 8005cce:	bd01      	pop	{r0, pc}

08005cd0 <USBPD_PRL_DeInit>:
 8005cd0:	4770      	bx	lr

08005cd2 <PRL_DisableRX>:
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	f00b fe48 	bl	8011968 <USBPD_PHY_DisableRX>
 8005cd8:	bd01      	pop	{r0, pc}
	...

08005cdc <PRL_Received>:
 8005cdc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005cde:	b089      	sub	sp, #36	@ 0x24
 8005ce0:	a809      	add	r0, sp, #36	@ 0x24
 8005ce2:	7805      	ldrb	r5, [r0, #0]
 8005ce4:	48d0      	ldr	r0, [pc, #832]	@ (8006028 <PRL_Received+0x34c>)
 8005ce6:	00a9      	lsls	r1, r5, #2
 8005ce8:	1846      	adds	r6, r0, r1
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4628      	mov	r0, r5
 8005cee:	f00b fd67 	bl	80117c0 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005cf2:	a909      	add	r1, sp, #36	@ 0x24
 8005cf4:	7809      	ldrb	r1, [r1, #0]
 8005cf6:	0049      	lsls	r1, r1, #1
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	7011      	strb	r1, [r2, #0]
 8005cfc:	0001      	movs	r1, r0
 8005cfe:	4668      	mov	r0, sp
 8005d00:	7800      	ldrb	r0, [r0, #0]
 8005d02:	f00d f97b 	bl	8012ffc <USBPD_TIM_Start>
 8005d06:	2030      	movs	r0, #48	@ 0x30
 8005d08:	5c20      	ldrb	r0, [r4, r0]
 8005d0a:	2131      	movs	r1, #49	@ 0x31
 8005d0c:	5c61      	ldrb	r1, [r4, r1]
 8005d0e:	0209      	lsls	r1, r1, #8
 8005d10:	1840      	adds	r0, r0, r1
 8005d12:	4669      	mov	r1, sp
 8005d14:	8088      	strh	r0, [r1, #4]
 8005d16:	4668      	mov	r0, sp
 8005d18:	8880      	ldrh	r0, [r0, #4]
 8005d1a:	0440      	lsls	r0, r0, #17
 8005d1c:	0f40      	lsrs	r0, r0, #29
 8005d1e:	0080      	lsls	r0, r0, #2
 8005d20:	9005      	str	r0, [sp, #20]
 8005d22:	1c80      	adds	r0, r0, #2
 8005d24:	9007      	str	r0, [sp, #28]
 8005d26:	48c1      	ldr	r0, [pc, #772]	@ (800602c <.text_40>)
 8005d28:	8889      	ldrh	r1, [r1, #4]
 8005d2a:	4001      	ands	r1, r0
 8005d2c:	2901      	cmp	r1, #1
 8005d2e:	d116      	bne.n	8005d5e <PRL_Received+0x82>
 8005d30:	0068      	lsls	r0, r5, #1
 8005d32:	1c40      	adds	r0, r0, #1
 8005d34:	b2c0      	uxtb	r0, r0
 8005d36:	f00d f9cf 	bl	80130d8 <USBPD_TIM_IsExpired>
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d04c      	beq.n	8005dd8 <PRL_Received+0xfc>
 8005d3e:	200b      	movs	r0, #11
 8005d40:	6831      	ldr	r1, [r6, #0]
 8005d42:	7148      	strb	r0, [r1, #5]
 8005d44:	4668      	mov	r0, sp
 8005d46:	8880      	ldrh	r0, [r0, #4]
 8005d48:	8360      	strh	r0, [r4, #26]
 8005d4a:	9807      	ldr	r0, [sp, #28]
 8005d4c:	9000      	str	r0, [sp, #0]
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3330      	adds	r3, #48	@ 0x30
 8005d52:	a80a      	add	r0, sp, #40	@ 0x28
 8005d54:	7802      	ldrb	r2, [r0, #0]
 8005d56:	a809      	add	r0, sp, #36	@ 0x24
 8005d58:	7801      	ldrb	r1, [r0, #0]
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e15f      	b.n	800601e <PRL_Received+0x342>
 8005d5e:	49b4      	ldr	r1, [pc, #720]	@ (8006030 <.text_41>)
 8005d60:	880f      	ldrh	r7, [r1, #0]
 8005d62:	2601      	movs	r6, #1
 8005d64:	72a6      	strb	r6, [r4, #10]
 8005d66:	a90a      	add	r1, sp, #40	@ 0x28
 8005d68:	7809      	ldrb	r1, [r1, #0]
 8005d6a:	1861      	adds	r1, r4, r1
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	2500      	movs	r5, #0
 8005d70:	4669      	mov	r1, sp
 8005d72:	8889      	ldrh	r1, [r1, #4]
 8005d74:	4008      	ands	r0, r1
 8005d76:	280d      	cmp	r0, #13
 8005d78:	d106      	bne.n	8005d88 <PRL_Received+0xac>
 8005d7a:	9904      	ldr	r1, [sp, #16]
 8005d7c:	72cd      	strb	r5, [r1, #11]
 8005d7e:	220f      	movs	r2, #15
 8005d80:	2103      	movs	r1, #3
 8005d82:	1da0      	adds	r0, r4, #6
 8005d84:	f010 fec6 	bl	8016b14 <__aeabi_memset>
 8005d88:	a80a      	add	r0, sp, #40	@ 0x28
 8005d8a:	7800      	ldrb	r0, [r0, #0]
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d10d      	bne.n	8005dac <PRL_Received+0xd0>
 8005d90:	8a61      	ldrh	r1, [r4, #18]
 8005d92:	094a      	lsrs	r2, r1, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	4010      	ands	r0, r2
 8005d98:	0a0a      	lsrs	r2, r1, #8
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	4abf      	ldr	r2, [pc, #764]	@ (800609c <.text_44>)
 8005da0:	403a      	ands	r2, r7
 8005da2:	0143      	lsls	r3, r0, #5
 8005da4:	4313      	orrs	r3, r2
 8005da6:	0208      	lsls	r0, r1, #8
 8005da8:	4318      	orrs	r0, r3
 8005daa:	e001      	b.n	8005db0 <PRL_Received+0xd4>
 8005dac:	48bc      	ldr	r0, [pc, #752]	@ (80060a0 <.text_45>)
 8005dae:	4038      	ands	r0, r7
 8005db0:	49bc      	ldr	r1, [pc, #752]	@ (80060a4 <.text_46>)
 8005db2:	4001      	ands	r1, r0
 8005db4:	4668      	mov	r0, sp
 8005db6:	8880      	ldrh	r0, [r0, #4]
 8005db8:	22e0      	movs	r2, #224	@ 0xe0
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	4002      	ands	r2, r0
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	2040      	movs	r0, #64	@ 0x40
 8005dc2:	4310      	orrs	r0, r2
 8005dc4:	7620      	strb	r0, [r4, #24]
 8005dc6:	0a00      	lsrs	r0, r0, #8
 8005dc8:	7660      	strb	r0, [r4, #25]
 8005dca:	a80a      	add	r0, sp, #40	@ 0x28
 8005dcc:	7801      	ldrb	r1, [r0, #0]
 8005dce:	a809      	add	r0, sp, #36	@ 0x24
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	f7fa ff49 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d100      	bne.n	8005ddc <PRL_Received+0x100>
 8005dda:	e123      	b.n	8006024 <PRL_Received+0x348>
 8005ddc:	7426      	strb	r6, [r4, #16]
 8005dde:	4668      	mov	r0, sp
 8005de0:	7800      	ldrb	r0, [r0, #0]
 8005de2:	f00d f979 	bl	80130d8 <USBPD_TIM_IsExpired>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f9      	beq.n	8005dde <PRL_Received+0x102>
 8005dea:	2302      	movs	r3, #2
 8005dec:	0022      	movs	r2, r4
 8005dee:	3218      	adds	r2, #24
 8005df0:	a80a      	add	r0, sp, #40	@ 0x28
 8005df2:	7801      	ldrb	r1, [r0, #0]
 8005df4:	a809      	add	r0, sp, #36	@ 0x24
 8005df6:	7800      	ldrb	r0, [r0, #0]
 8005df8:	f00b fd0d 	bl	8011816 <USBPD_PHY_SendMessage>
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	a80a      	add	r0, sp, #40	@ 0x28
 8005e00:	7800      	ldrb	r0, [r0, #0]
 8005e02:	7260      	strb	r0, [r4, #9]
 8005e04:	0021      	movs	r1, r4
 8005e06:	3130      	adds	r1, #48	@ 0x30
 8005e08:	a809      	add	r0, sp, #36	@ 0x24
 8005e0a:	7800      	ldrb	r0, [r0, #0]
 8005e0c:	f7fa ff60 	bl	8000cd0 <PE_PRL_PostReceiveEventCopy>
 8005e10:	2033      	movs	r0, #51	@ 0x33
 8005e12:	5c20      	ldrb	r0, [r4, r0]
 8005e14:	2132      	movs	r1, #50	@ 0x32
 8005e16:	5c61      	ldrb	r1, [r4, r1]
 8005e18:	0203      	lsls	r3, r0, #8
 8005e1a:	18ca      	adds	r2, r1, r3
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	80da      	strh	r2, [r3, #6]
 8005e20:	466a      	mov	r2, sp
 8005e22:	8892      	ldrh	r2, [r2, #4]
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	0f52      	lsrs	r2, r2, #29
 8005e28:	81da      	strh	r2, [r3, #14]
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	88d2      	ldrh	r2, [r2, #6]
 8005e2e:	05d2      	lsls	r2, r2, #23
 8005e30:	0dd2      	lsrs	r2, r2, #23
 8005e32:	811a      	strh	r2, [r3, #8]
 8005e34:	466a      	mov	r2, sp
 8005e36:	88d2      	ldrh	r2, [r2, #6]
 8005e38:	0bd2      	lsrs	r2, r2, #15
 8005e3a:	819a      	strh	r2, [r3, #12]
 8005e3c:	466a      	mov	r2, sp
 8005e3e:	8892      	ldrh	r2, [r2, #4]
 8005e40:	0bd2      	lsrs	r2, r2, #15
 8005e42:	815a      	strh	r2, [r3, #10]
 8005e44:	d007      	beq.n	8005e56 <PRL_Received+0x17a>
 8005e46:	466a      	mov	r2, sp
 8005e48:	8992      	ldrh	r2, [r2, #12]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d103      	bne.n	8005e56 <PRL_Received+0x17a>
 8005e4e:	4668      	mov	r0, sp
 8005e50:	8900      	ldrh	r0, [r0, #8]
 8005e52:	1d00      	adds	r0, r0, #4
 8005e54:	e01b      	b.n	8005e8e <PRL_Received+0x1b2>
 8005e56:	7822      	ldrb	r2, [r4, #0]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d117      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e5c:	466a      	mov	r2, sp
 8005e5e:	89d2      	ldrh	r2, [r2, #14]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d013      	beq.n	8005e8c <PRL_Received+0x1b0>
 8005e64:	466a      	mov	r2, sp
 8005e66:	8892      	ldrh	r2, [r2, #4]
 8005e68:	06d2      	lsls	r2, r2, #27
 8005e6a:	0ed2      	lsrs	r2, r2, #27
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	d10d      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e70:	0200      	lsls	r0, r0, #8
 8005e72:	1808      	adds	r0, r1, r0
 8005e74:	2134      	movs	r1, #52	@ 0x34
 8005e76:	5c61      	ldrb	r1, [r4, r1]
 8005e78:	0409      	lsls	r1, r1, #16
 8005e7a:	1840      	adds	r0, r0, r1
 8005e7c:	2135      	movs	r1, #53	@ 0x35
 8005e7e:	5c61      	ldrb	r1, [r4, r1]
 8005e80:	0609      	lsls	r1, r1, #24
 8005e82:	1840      	adds	r0, r0, r1
 8005e84:	0f00      	lsrs	r0, r0, #28
 8005e86:	2808      	cmp	r0, #8
 8005e88:	d100      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e8a:	7026      	strb	r6, [r4, #0]
 8005e8c:	9807      	ldr	r0, [sp, #28]
 8005e8e:	9000      	str	r0, [sp, #0]
 8005e90:	0023      	movs	r3, r4
 8005e92:	3330      	adds	r3, #48	@ 0x30
 8005e94:	a80a      	add	r0, sp, #40	@ 0x28
 8005e96:	7802      	ldrb	r2, [r0, #0]
 8005e98:	a809      	add	r0, sp, #36	@ 0x24
 8005e9a:	7801      	ldrb	r1, [r0, #0]
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	4fc1      	ldr	r7, [pc, #772]	@ (80061a4 <.text_51>)
 8005ea0:	683f      	ldr	r7, [r7, #0]
 8005ea2:	47b8      	blx	r7
 8005ea4:	9806      	ldr	r0, [sp, #24]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d10b      	bne.n	8005ec2 <PRL_Received+0x1e6>
 8005eaa:	2002      	movs	r0, #2
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	0023      	movs	r3, r4
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	a80a      	add	r0, sp, #40	@ 0x28
 8005eb4:	7802      	ldrb	r2, [r0, #0]
 8005eb6:	a809      	add	r0, sp, #36	@ 0x24
 8005eb8:	7801      	ldrb	r1, [r0, #0]
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4fb9      	ldr	r7, [pc, #740]	@ (80061a4 <.text_51>)
 8005ebe:	683f      	ldr	r7, [r7, #0]
 8005ec0:	47b8      	blx	r7
 8005ec2:	4668      	mov	r0, sp
 8005ec4:	8880      	ldrh	r0, [r0, #4]
 8005ec6:	0a40      	lsrs	r0, r0, #9
 8005ec8:	2107      	movs	r1, #7
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	7992      	ldrb	r2, [r2, #6]
 8005ece:	2307      	movs	r3, #7
 8005ed0:	4003      	ands	r3, r0
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d103      	bne.n	8005ede <PRL_Received+0x202>
 8005ed6:	9a06      	ldr	r2, [sp, #24]
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d100      	bne.n	8005ede <PRL_Received+0x202>
 8005edc:	e08f      	b.n	8005ffe <PRL_Received+0x322>
 8005ede:	4001      	ands	r1, r0
 8005ee0:	9804      	ldr	r0, [sp, #16]
 8005ee2:	7181      	strb	r1, [r0, #6]
 8005ee4:	4668      	mov	r0, sp
 8005ee6:	8880      	ldrh	r0, [r0, #4]
 8005ee8:	8420      	strh	r0, [r4, #32]
 8005eea:	4668      	mov	r0, sp
 8005eec:	8940      	ldrh	r0, [r0, #10]
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d043      	beq.n	8005f7a <PRL_Received+0x29e>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	8980      	ldrh	r0, [r0, #12]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d03f      	beq.n	8005f7a <PRL_Received+0x29e>
 8005efa:	4668      	mov	r0, sp
 8005efc:	88c0      	ldrh	r0, [r0, #6]
 8005efe:	83e0      	strh	r0, [r4, #30]
 8005f00:	4668      	mov	r0, sp
 8005f02:	88c0      	ldrh	r0, [r0, #6]
 8005f04:	0440      	lsls	r0, r0, #17
 8005f06:	0f01      	lsrs	r1, r0, #28
 8005f08:	201a      	movs	r0, #26
 8005f0a:	4348      	muls	r0, r1
 8005f0c:	9905      	ldr	r1, [sp, #20]
 8005f0e:	1e89      	subs	r1, r1, #2
 8005f10:	466a      	mov	r2, sp
 8005f12:	88d2      	ldrh	r2, [r2, #6]
 8005f14:	23f8      	movs	r3, #248	@ 0xf8
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d12f      	bne.n	8005f7c <PRL_Received+0x2a0>
 8005f1c:	466a      	mov	r2, sp
 8005f1e:	88d2      	ldrh	r2, [r2, #6]
 8005f20:	05d2      	lsls	r2, r2, #23
 8005f22:	0dd2      	lsrs	r2, r2, #23
 8005f24:	466b      	mov	r3, sp
 8005f26:	89db      	ldrh	r3, [r3, #14]
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d30a      	bcc.n	8005f42 <PRL_Received+0x266>
 8005f2c:	2a1a      	cmp	r2, #26
 8005f2e:	d811      	bhi.n	8005f54 <PRL_Received+0x278>
 8005f30:	e007      	b.n	8005f42 <PRL_Received+0x266>
 8005f32:	0023      	movs	r3, r4
 8005f34:	3334      	adds	r3, #52	@ 0x34
 8005f36:	5d5b      	ldrb	r3, [r3, r5]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f3a:	182f      	adds	r7, r5, r0
 8005f3c:	55f3      	strb	r3, [r6, r7]
 8005f3e:	1c6d      	adds	r5, r5, #1
 8005f40:	b2ad      	uxth	r5, r5
 8005f42:	428d      	cmp	r5, r1
 8005f44:	d3f5      	bcc.n	8005f32 <PRL_Received+0x256>
 8005f46:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005f48:	4291      	cmp	r1, r2
 8005f4a:	d301      	bcc.n	8005f50 <PRL_Received+0x274>
 8005f4c:	4669      	mov	r1, sp
 8005f4e:	8909      	ldrh	r1, [r1, #8]
 8005f50:	8001      	strh	r1, [r0, #0]
 8005f52:	e00c      	b.n	8005f6e <PRL_Received+0x292>
 8005f54:	2025      	movs	r0, #37	@ 0x25
 8005f56:	5426      	strb	r6, [r4, r0]
 8005f58:	0020      	movs	r0, r4
 8005f5a:	3034      	adds	r0, #52	@ 0x34
 8005f5c:	5d40      	ldrb	r0, [r0, r5]
 8005f5e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005f60:	5548      	strb	r0, [r1, r5]
 8005f62:	1c6d      	adds	r5, r5, #1
 8005f64:	2d1a      	cmp	r5, #26
 8005f66:	d3f7      	bcc.n	8005f58 <PRL_Received+0x27c>
 8005f68:	201a      	movs	r0, #26
 8005f6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005f6c:	8008      	strh	r0, [r1, #0]
 8005f6e:	a80a      	add	r0, sp, #40	@ 0x28
 8005f70:	7801      	ldrb	r1, [r0, #0]
 8005f72:	a809      	add	r0, sp, #36	@ 0x24
 8005f74:	7800      	ldrb	r0, [r0, #0]
 8005f76:	f7fa fe77 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005f7a:	e053      	b.n	8006024 <PRL_Received+0x348>
 8005f7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	1e9b      	subs	r3, r3, #2
 8005f86:	27ff      	movs	r7, #255	@ 0xff
 8005f88:	1dbf      	adds	r7, r7, #6
 8005f8a:	321a      	adds	r2, #26
 8005f8c:	42ba      	cmp	r2, r7
 8005f8e:	d21b      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f90:	466a      	mov	r2, sp
 8005f92:	8912      	ldrh	r2, [r2, #8]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d217      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f98:	2225      	movs	r2, #37	@ 0x25
 8005f9a:	54a6      	strb	r6, [r4, r2]
 8005f9c:	e007      	b.n	8005fae <PRL_Received+0x2d2>
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	3234      	adds	r2, #52	@ 0x34
 8005fa2:	5d52      	ldrb	r2, [r2, r5]
 8005fa4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005fa6:	182e      	adds	r6, r5, r0
 8005fa8:	559a      	strb	r2, [r3, r6]
 8005faa:	1c6d      	adds	r5, r5, #1
 8005fac:	b2ad      	uxth	r5, r5
 8005fae:	428d      	cmp	r5, r1
 8005fb0:	d3f5      	bcc.n	8005f9e <PRL_Received+0x2c2>
 8005fb2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005fb4:	8801      	ldrh	r1, [r0, #0]
 8005fb6:	466a      	mov	r2, sp
 8005fb8:	8892      	ldrh	r2, [r2, #4]
 8005fba:	0a92      	lsrs	r2, r2, #10
 8005fbc:	231c      	movs	r3, #28
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	1e9a      	subs	r2, r3, #2
 8005fc2:	1889      	adds	r1, r1, r2
 8005fc4:	8001      	strh	r1, [r0, #0]
 8005fc6:	e02d      	b.n	8006024 <PRL_Received+0x348>
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	d215      	bcs.n	8005ff8 <PRL_Received+0x31c>
 8005fcc:	466a      	mov	r2, sp
 8005fce:	8912      	ldrh	r2, [r2, #8]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d311      	bcc.n	8005ff8 <PRL_Received+0x31c>
 8005fd4:	2225      	movs	r2, #37	@ 0x25
 8005fd6:	54a6      	strb	r6, [r4, r2]
 8005fd8:	e007      	b.n	8005fea <PRL_Received+0x30e>
 8005fda:	0022      	movs	r2, r4
 8005fdc:	3234      	adds	r2, #52	@ 0x34
 8005fde:	5d52      	ldrb	r2, [r2, r5]
 8005fe0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005fe2:	182e      	adds	r6, r5, r0
 8005fe4:	559a      	strb	r2, [r3, r6]
 8005fe6:	1c6d      	adds	r5, r5, #1
 8005fe8:	b2ad      	uxth	r5, r5
 8005fea:	428d      	cmp	r5, r1
 8005fec:	d3f5      	bcc.n	8005fda <PRL_Received+0x2fe>
 8005fee:	4668      	mov	r0, sp
 8005ff0:	8900      	ldrh	r0, [r0, #8]
 8005ff2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ff4:	8008      	strh	r0, [r1, #0]
 8005ff6:	e015      	b.n	8006024 <PRL_Received+0x348>
 8005ff8:	2025      	movs	r0, #37	@ 0x25
 8005ffa:	5425      	strb	r5, [r4, r0]
 8005ffc:	e012      	b.n	8006024 <PRL_Received+0x348>
 8005ffe:	20ff      	movs	r0, #255	@ 0xff
 8006000:	7260      	strb	r0, [r4, #9]
 8006002:	7425      	strb	r5, [r4, #16]
 8006004:	a809      	add	r0, sp, #36	@ 0x24
 8006006:	7800      	ldrb	r0, [r0, #0]
 8006008:	f7fa fe4a 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 800600c:	72a5      	strb	r5, [r4, #10]
 800600e:	2017      	movs	r0, #23
 8006010:	9000      	str	r0, [sp, #0]
 8006012:	bf00      	nop
 8006014:	a367      	add	r3, pc, #412	@ (adr r3, 80061b4 <.text_55>)
 8006016:	2200      	movs	r2, #0
 8006018:	a809      	add	r0, sp, #36	@ 0x24
 800601a:	7801      	ldrb	r1, [r0, #0]
 800601c:	2006      	movs	r0, #6
 800601e:	4c61      	ldr	r4, [pc, #388]	@ (80061a4 <.text_51>)
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	47a0      	blx	r4
 8006024:	b00b      	add	sp, #44	@ 0x2c
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006028:	20000248 	.word	0x20000248

0800602c <.text_40>:
 800602c:	0000f01f 	.word	0x0000f01f

08006030 <.text_41>:
 8006030:	080172f0 	.word	0x080172f0

08006034 <PRL_ResetIndicate>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0004      	movs	r4, r0
 8006038:	000d      	movs	r5, r1
 800603a:	2d05      	cmp	r5, #5
 800603c:	d119      	bne.n	8006072 <PRL_ResetIndicate+0x3e>
 800603e:	485a      	ldr	r0, [pc, #360]	@ (80061a8 <.text_52>)
 8006040:	00a1      	lsls	r1, r4, #2
 8006042:	1840      	adds	r0, r0, r1
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	6807      	ldr	r7, [r0, #0]
 8006048:	2600      	movs	r6, #0
 800604a:	2000      	movs	r0, #0
 800604c:	b2c2      	uxtb	r2, r0
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	72d6      	strb	r6, [r2, #11]
 8006052:	1c40      	adds	r0, r0, #1
 8006054:	b2c1      	uxtb	r1, r0
 8006056:	2903      	cmp	r1, #3
 8006058:	d3f8      	bcc.n	800604c <PRL_ResetIndicate+0x18>
 800605a:	220f      	movs	r2, #15
 800605c:	2103      	movs	r1, #3
 800605e:	1db8      	adds	r0, r7, #6
 8006060:	f010 fd58 	bl	8016b14 <__aeabi_memset>
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	714e      	strb	r6, [r1, #5]
 800606a:	703e      	strb	r6, [r7, #0]
 800606c:	0020      	movs	r0, r4
 800606e:	f7ff fe30 	bl	8005cd2 <PRL_DisableRX>
 8006072:	2000      	movs	r0, #0
 8006074:	9000      	str	r0, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	002a      	movs	r2, r5
 800607a:	0021      	movs	r1, r4
 800607c:	2001      	movs	r0, #1
 800607e:	4e49      	ldr	r6, [pc, #292]	@ (80061a4 <.text_51>)
 8006080:	6836      	ldr	r6, [r6, #0]
 8006082:	47b0      	blx	r6
 8006084:	0029      	movs	r1, r5
 8006086:	0020      	movs	r0, r4
 8006088:	f7fa fce6 	bl	8000a58 <PE_PRL_ResetReceived>
 800608c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800608e <PRL_ResetCompleted>:
 800608e:	2101      	movs	r1, #1
 8006090:	4a45      	ldr	r2, [pc, #276]	@ (80061a8 <.text_52>)
 8006092:	0080      	lsls	r0, r0, #2
 8006094:	5810      	ldr	r0, [r2, r0]
 8006096:	70c1      	strb	r1, [r0, #3]
 8006098:	4770      	bx	lr
	...

0800609c <.text_44>:
 800609c:	0000fedf 	.word	0x0000fedf

080060a0 <.text_45>:
 80060a0:	0000feff 	.word	0x0000feff

080060a4 <.text_46>:
 80060a4:	0000f13f 	.word	0x0000f13f

080060a8 <PRL_BistCompleted>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	f7fa fd01 	bl	8000ab0 <PE_PRL_BistCompleted>
 80060ae:	bd01      	pop	{r0, pc}

080060b0 <PRL_TxCompleted>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	0004      	movs	r4, r0
 80060b4:	4a3c      	ldr	r2, [pc, #240]	@ (80061a8 <.text_52>)
 80060b6:	00a3      	lsls	r3, r4, #2
 80060b8:	58d6      	ldr	r6, [r2, r3]
 80060ba:	2500      	movs	r5, #0
 80060bc:	7c32      	ldrb	r2, [r6, #16]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	d002      	beq.n	80060c8 <PRL_TxCompleted+0x18>
 80060c2:	2a02      	cmp	r2, #2
 80060c4:	d009      	beq.n	80060da <PRL_TxCompleted+0x2a>
 80060c6:	e010      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d102      	bne.n	80060d2 <PRL_TxCompleted+0x22>
 80060cc:	f7fa fe1a 	bl	8000d04 <PE_PRL_PostReceiveEventComplete>
 80060d0:	e001      	b.n	80060d6 <PRL_TxCompleted+0x26>
 80060d2:	f7fa fde5 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 80060d6:	72b5      	strb	r5, [r6, #10]
 80060d8:	e007      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060da:	f00b fb63 	bl	80117a4 <USBPD_PHY_GetRetryTimerValue>
 80060de:	0001      	movs	r1, r0
 80060e0:	0060      	lsls	r0, r4, #1
 80060e2:	1c40      	adds	r0, r0, #1
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	f00c ff89 	bl	8012ffc <USBPD_TIM_Start>
 80060ea:	7435      	strb	r5, [r6, #16]
 80060ec:	bd70      	pop	{r4, r5, r6, pc}

080060ee <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4c2d      	ldr	r4, [pc, #180]	@ (80061a8 <.text_52>)
 80060f2:	0080      	lsls	r0, r0, #2
 80060f4:	5820      	ldr	r0, [r4, r0]
 80060f6:	2480      	movs	r4, #128	@ 0x80
 80060f8:	0224      	lsls	r4, r4, #8
 80060fa:	8b85      	ldrh	r5, [r0, #28]
 80060fc:	4e2b      	ldr	r6, [pc, #172]	@ (80061ac <.text_53>)
 80060fe:	402e      	ands	r6, r5
 8006100:	02c9      	lsls	r1, r1, #11
 8006102:	4331      	orrs	r1, r6
 8006104:	25fe      	movs	r5, #254	@ 0xfe
 8006106:	022d      	lsls	r5, r5, #8
 8006108:	400d      	ands	r5, r1
 800610a:	05d1      	lsls	r1, r2, #23
 800610c:	0dc9      	lsrs	r1, r1, #23
 800610e:	4329      	orrs	r1, r5
 8006110:	4321      	orrs	r1, r4
 8006112:	8381      	strh	r1, [r0, #28]
 8006114:	8a41      	ldrh	r1, [r0, #18]
 8006116:	430c      	orrs	r4, r1
 8006118:	8244      	strh	r4, [r0, #18]
 800611a:	4a25      	ldr	r2, [pc, #148]	@ (80061b0 <.text_54>)
 800611c:	4022      	ands	r2, r4
 800611e:	2120      	movs	r1, #32
 8006120:	5c41      	ldrb	r1, [r0, r1]
 8006122:	06c9      	lsls	r1, r1, #27
 8006124:	0ec9      	lsrs	r1, r1, #27
 8006126:	4311      	orrs	r1, r2
 8006128:	8241      	strh	r1, [r0, #18]
 800612a:	7019      	strb	r1, [r3, #0]
 800612c:	8a41      	ldrh	r1, [r0, #18]
 800612e:	0a09      	lsrs	r1, r1, #8
 8006130:	7059      	strb	r1, [r3, #1]
 8006132:	8b81      	ldrh	r1, [r0, #28]
 8006134:	7099      	strb	r1, [r3, #2]
 8006136:	8b80      	ldrh	r0, [r0, #28]
 8006138:	0a00      	lsrs	r0, r0, #8
 800613a:	70d8      	strb	r0, [r3, #3]
 800613c:	bd70      	pop	{r4, r5, r6, pc}

0800613e <USBPD_PRL_PrepareChunkRequest>:
 800613e:	b510      	push	{r4, lr}
 8006140:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <.text_52>)
 8006142:	0080      	lsls	r0, r0, #2
 8006144:	5810      	ldr	r0, [r2, r0]
 8006146:	8b83      	ldrh	r3, [r0, #28]
 8006148:	2284      	movs	r2, #132	@ 0x84
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	431a      	orrs	r2, r3
 800614e:	8382      	strh	r2, [r0, #28]
 8006150:	2386      	movs	r3, #134	@ 0x86
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	4013      	ands	r3, r2
 8006156:	8bc2      	ldrh	r2, [r0, #30]
 8006158:	0ad2      	lsrs	r2, r2, #11
 800615a:	1c52      	adds	r2, r2, #1
 800615c:	02d2      	lsls	r2, r2, #11
 800615e:	24f0      	movs	r4, #240	@ 0xf0
 8006160:	01e4      	lsls	r4, r4, #7
 8006162:	4014      	ands	r4, r2
 8006164:	431c      	orrs	r4, r3
 8006166:	8384      	strh	r4, [r0, #28]
 8006168:	8a43      	ldrh	r3, [r0, #18]
 800616a:	2280      	movs	r2, #128	@ 0x80
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	431a      	orrs	r2, r3
 8006170:	0003      	movs	r3, r0
 8006172:	3312      	adds	r3, #18
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	4c0e      	ldr	r4, [pc, #56]	@ (80061b0 <.text_54>)
 8006178:	4014      	ands	r4, r2
 800617a:	2220      	movs	r2, #32
 800617c:	5c82      	ldrb	r2, [r0, r2]
 800617e:	06d2      	lsls	r2, r2, #27
 8006180:	0ed2      	lsrs	r2, r2, #27
 8006182:	4322      	orrs	r2, r4
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	7142      	strb	r2, [r0, #5]
 800618a:	8a43      	ldrh	r3, [r0, #18]
 800618c:	700b      	strb	r3, [r1, #0]
 800618e:	8a43      	ldrh	r3, [r0, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	704b      	strb	r3, [r1, #1]
 8006194:	8b83      	ldrh	r3, [r0, #28]
 8006196:	708b      	strb	r3, [r1, #2]
 8006198:	8b80      	ldrh	r0, [r0, #28]
 800619a:	0a00      	lsrs	r0, r0, #8
 800619c:	70c8      	strb	r0, [r1, #3]
 800619e:	710a      	strb	r2, [r1, #4]
 80061a0:	714a      	strb	r2, [r1, #5]
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <.text_51>:
 80061a4:	20000000 	.word	0x20000000

080061a8 <.text_52>:
 80061a8:	20000248 	.word	0x20000248

080061ac <.text_53>:
 80061ac:	000083ff 	.word	0x000083ff

080061b0 <.text_54>:
 80061b0:	0000ffe0 	.word	0x0000ffe0

080061b4 <.text_55>:
 80061b4:	5f4c5250 	.word	0x5f4c5250
 80061b8:	4e455645 	.word	0x4e455645
 80061bc:	58525f54 	.word	0x58525f54
 80061c0:	5349445f 	.word	0x5349445f
 80061c4:	44524143 	.word	0x44524143
 80061c8:	00004445 	.word	0x00004445

080061cc <strlen>:
 80061cc:	2300      	movs	r3, #0
 80061ce:	5cc2      	ldrb	r2, [r0, r3]
 80061d0:	3301      	adds	r3, #1
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1fb      	bne.n	80061ce <strlen+0x2>
 80061d6:	1e58      	subs	r0, r3, #1
 80061d8:	4770      	bx	lr
	...

080061dc <__gnu_thumb1_case_shi>:
 80061dc:	b403      	push	{r0, r1}
 80061de:	4671      	mov	r1, lr
 80061e0:	0849      	lsrs	r1, r1, #1
 80061e2:	0040      	lsls	r0, r0, #1
 80061e4:	0049      	lsls	r1, r1, #1
 80061e6:	5e09      	ldrsh	r1, [r1, r0]
 80061e8:	0049      	lsls	r1, r1, #1
 80061ea:	448e      	add	lr, r1
 80061ec:	bc03      	pop	{r0, r1}
 80061ee:	4770      	bx	lr

080061f0 <__udivsi3>:
 80061f0:	2200      	movs	r2, #0
 80061f2:	0843      	lsrs	r3, r0, #1
 80061f4:	428b      	cmp	r3, r1
 80061f6:	d374      	bcc.n	80062e2 <__udivsi3+0xf2>
 80061f8:	0903      	lsrs	r3, r0, #4
 80061fa:	428b      	cmp	r3, r1
 80061fc:	d35f      	bcc.n	80062be <__udivsi3+0xce>
 80061fe:	0a03      	lsrs	r3, r0, #8
 8006200:	428b      	cmp	r3, r1
 8006202:	d344      	bcc.n	800628e <__udivsi3+0x9e>
 8006204:	0b03      	lsrs	r3, r0, #12
 8006206:	428b      	cmp	r3, r1
 8006208:	d328      	bcc.n	800625c <__udivsi3+0x6c>
 800620a:	0c03      	lsrs	r3, r0, #16
 800620c:	428b      	cmp	r3, r1
 800620e:	d30d      	bcc.n	800622c <__udivsi3+0x3c>
 8006210:	22ff      	movs	r2, #255	@ 0xff
 8006212:	0209      	lsls	r1, r1, #8
 8006214:	ba12      	rev	r2, r2
 8006216:	0c03      	lsrs	r3, r0, #16
 8006218:	428b      	cmp	r3, r1
 800621a:	d302      	bcc.n	8006222 <__udivsi3+0x32>
 800621c:	1212      	asrs	r2, r2, #8
 800621e:	0209      	lsls	r1, r1, #8
 8006220:	d065      	beq.n	80062ee <__udivsi3+0xfe>
 8006222:	0b03      	lsrs	r3, r0, #12
 8006224:	428b      	cmp	r3, r1
 8006226:	d319      	bcc.n	800625c <__udivsi3+0x6c>
 8006228:	e000      	b.n	800622c <__udivsi3+0x3c>
 800622a:	0a09      	lsrs	r1, r1, #8
 800622c:	0bc3      	lsrs	r3, r0, #15
 800622e:	428b      	cmp	r3, r1
 8006230:	d301      	bcc.n	8006236 <__udivsi3+0x46>
 8006232:	03cb      	lsls	r3, r1, #15
 8006234:	1ac0      	subs	r0, r0, r3
 8006236:	4152      	adcs	r2, r2
 8006238:	0b83      	lsrs	r3, r0, #14
 800623a:	428b      	cmp	r3, r1
 800623c:	d301      	bcc.n	8006242 <__udivsi3+0x52>
 800623e:	038b      	lsls	r3, r1, #14
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	4152      	adcs	r2, r2
 8006244:	0b43      	lsrs	r3, r0, #13
 8006246:	428b      	cmp	r3, r1
 8006248:	d301      	bcc.n	800624e <__udivsi3+0x5e>
 800624a:	034b      	lsls	r3, r1, #13
 800624c:	1ac0      	subs	r0, r0, r3
 800624e:	4152      	adcs	r2, r2
 8006250:	0b03      	lsrs	r3, r0, #12
 8006252:	428b      	cmp	r3, r1
 8006254:	d301      	bcc.n	800625a <__udivsi3+0x6a>
 8006256:	030b      	lsls	r3, r1, #12
 8006258:	1ac0      	subs	r0, r0, r3
 800625a:	4152      	adcs	r2, r2
 800625c:	0ac3      	lsrs	r3, r0, #11
 800625e:	428b      	cmp	r3, r1
 8006260:	d301      	bcc.n	8006266 <__udivsi3+0x76>
 8006262:	02cb      	lsls	r3, r1, #11
 8006264:	1ac0      	subs	r0, r0, r3
 8006266:	4152      	adcs	r2, r2
 8006268:	0a83      	lsrs	r3, r0, #10
 800626a:	428b      	cmp	r3, r1
 800626c:	d301      	bcc.n	8006272 <__udivsi3+0x82>
 800626e:	028b      	lsls	r3, r1, #10
 8006270:	1ac0      	subs	r0, r0, r3
 8006272:	4152      	adcs	r2, r2
 8006274:	0a43      	lsrs	r3, r0, #9
 8006276:	428b      	cmp	r3, r1
 8006278:	d301      	bcc.n	800627e <__udivsi3+0x8e>
 800627a:	024b      	lsls	r3, r1, #9
 800627c:	1ac0      	subs	r0, r0, r3
 800627e:	4152      	adcs	r2, r2
 8006280:	0a03      	lsrs	r3, r0, #8
 8006282:	428b      	cmp	r3, r1
 8006284:	d301      	bcc.n	800628a <__udivsi3+0x9a>
 8006286:	020b      	lsls	r3, r1, #8
 8006288:	1ac0      	subs	r0, r0, r3
 800628a:	4152      	adcs	r2, r2
 800628c:	d2cd      	bcs.n	800622a <__udivsi3+0x3a>
 800628e:	09c3      	lsrs	r3, r0, #7
 8006290:	428b      	cmp	r3, r1
 8006292:	d301      	bcc.n	8006298 <__udivsi3+0xa8>
 8006294:	01cb      	lsls	r3, r1, #7
 8006296:	1ac0      	subs	r0, r0, r3
 8006298:	4152      	adcs	r2, r2
 800629a:	0983      	lsrs	r3, r0, #6
 800629c:	428b      	cmp	r3, r1
 800629e:	d301      	bcc.n	80062a4 <__udivsi3+0xb4>
 80062a0:	018b      	lsls	r3, r1, #6
 80062a2:	1ac0      	subs	r0, r0, r3
 80062a4:	4152      	adcs	r2, r2
 80062a6:	0943      	lsrs	r3, r0, #5
 80062a8:	428b      	cmp	r3, r1
 80062aa:	d301      	bcc.n	80062b0 <__udivsi3+0xc0>
 80062ac:	014b      	lsls	r3, r1, #5
 80062ae:	1ac0      	subs	r0, r0, r3
 80062b0:	4152      	adcs	r2, r2
 80062b2:	0903      	lsrs	r3, r0, #4
 80062b4:	428b      	cmp	r3, r1
 80062b6:	d301      	bcc.n	80062bc <__udivsi3+0xcc>
 80062b8:	010b      	lsls	r3, r1, #4
 80062ba:	1ac0      	subs	r0, r0, r3
 80062bc:	4152      	adcs	r2, r2
 80062be:	08c3      	lsrs	r3, r0, #3
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d301      	bcc.n	80062c8 <__udivsi3+0xd8>
 80062c4:	00cb      	lsls	r3, r1, #3
 80062c6:	1ac0      	subs	r0, r0, r3
 80062c8:	4152      	adcs	r2, r2
 80062ca:	0883      	lsrs	r3, r0, #2
 80062cc:	428b      	cmp	r3, r1
 80062ce:	d301      	bcc.n	80062d4 <__udivsi3+0xe4>
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	4152      	adcs	r2, r2
 80062d6:	0843      	lsrs	r3, r0, #1
 80062d8:	428b      	cmp	r3, r1
 80062da:	d301      	bcc.n	80062e0 <__udivsi3+0xf0>
 80062dc:	004b      	lsls	r3, r1, #1
 80062de:	1ac0      	subs	r0, r0, r3
 80062e0:	4152      	adcs	r2, r2
 80062e2:	1a41      	subs	r1, r0, r1
 80062e4:	d200      	bcs.n	80062e8 <__udivsi3+0xf8>
 80062e6:	4601      	mov	r1, r0
 80062e8:	4152      	adcs	r2, r2
 80062ea:	4610      	mov	r0, r2
 80062ec:	4770      	bx	lr
 80062ee:	e7ff      	b.n	80062f0 <__udivsi3+0x100>
 80062f0:	b501      	push	{r0, lr}
 80062f2:	2000      	movs	r0, #0
 80062f4:	f000 f8f0 	bl	80064d8 <__aeabi_idiv0>
 80062f8:	bd02      	pop	{r1, pc}
 80062fa:	46c0      	nop			@ (mov r8, r8)

080062fc <__aeabi_uidivmod>:
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d0f7      	beq.n	80062f0 <__udivsi3+0x100>
 8006300:	e776      	b.n	80061f0 <__udivsi3>
 8006302:	4770      	bx	lr

08006304 <__divsi3>:
 8006304:	4603      	mov	r3, r0
 8006306:	430b      	orrs	r3, r1
 8006308:	d47f      	bmi.n	800640a <__divsi3+0x106>
 800630a:	2200      	movs	r2, #0
 800630c:	0843      	lsrs	r3, r0, #1
 800630e:	428b      	cmp	r3, r1
 8006310:	d374      	bcc.n	80063fc <__divsi3+0xf8>
 8006312:	0903      	lsrs	r3, r0, #4
 8006314:	428b      	cmp	r3, r1
 8006316:	d35f      	bcc.n	80063d8 <__divsi3+0xd4>
 8006318:	0a03      	lsrs	r3, r0, #8
 800631a:	428b      	cmp	r3, r1
 800631c:	d344      	bcc.n	80063a8 <__divsi3+0xa4>
 800631e:	0b03      	lsrs	r3, r0, #12
 8006320:	428b      	cmp	r3, r1
 8006322:	d328      	bcc.n	8006376 <__divsi3+0x72>
 8006324:	0c03      	lsrs	r3, r0, #16
 8006326:	428b      	cmp	r3, r1
 8006328:	d30d      	bcc.n	8006346 <__divsi3+0x42>
 800632a:	22ff      	movs	r2, #255	@ 0xff
 800632c:	0209      	lsls	r1, r1, #8
 800632e:	ba12      	rev	r2, r2
 8006330:	0c03      	lsrs	r3, r0, #16
 8006332:	428b      	cmp	r3, r1
 8006334:	d302      	bcc.n	800633c <__divsi3+0x38>
 8006336:	1212      	asrs	r2, r2, #8
 8006338:	0209      	lsls	r1, r1, #8
 800633a:	d065      	beq.n	8006408 <__divsi3+0x104>
 800633c:	0b03      	lsrs	r3, r0, #12
 800633e:	428b      	cmp	r3, r1
 8006340:	d319      	bcc.n	8006376 <__divsi3+0x72>
 8006342:	e000      	b.n	8006346 <__divsi3+0x42>
 8006344:	0a09      	lsrs	r1, r1, #8
 8006346:	0bc3      	lsrs	r3, r0, #15
 8006348:	428b      	cmp	r3, r1
 800634a:	d301      	bcc.n	8006350 <__divsi3+0x4c>
 800634c:	03cb      	lsls	r3, r1, #15
 800634e:	1ac0      	subs	r0, r0, r3
 8006350:	4152      	adcs	r2, r2
 8006352:	0b83      	lsrs	r3, r0, #14
 8006354:	428b      	cmp	r3, r1
 8006356:	d301      	bcc.n	800635c <__divsi3+0x58>
 8006358:	038b      	lsls	r3, r1, #14
 800635a:	1ac0      	subs	r0, r0, r3
 800635c:	4152      	adcs	r2, r2
 800635e:	0b43      	lsrs	r3, r0, #13
 8006360:	428b      	cmp	r3, r1
 8006362:	d301      	bcc.n	8006368 <__divsi3+0x64>
 8006364:	034b      	lsls	r3, r1, #13
 8006366:	1ac0      	subs	r0, r0, r3
 8006368:	4152      	adcs	r2, r2
 800636a:	0b03      	lsrs	r3, r0, #12
 800636c:	428b      	cmp	r3, r1
 800636e:	d301      	bcc.n	8006374 <__divsi3+0x70>
 8006370:	030b      	lsls	r3, r1, #12
 8006372:	1ac0      	subs	r0, r0, r3
 8006374:	4152      	adcs	r2, r2
 8006376:	0ac3      	lsrs	r3, r0, #11
 8006378:	428b      	cmp	r3, r1
 800637a:	d301      	bcc.n	8006380 <__divsi3+0x7c>
 800637c:	02cb      	lsls	r3, r1, #11
 800637e:	1ac0      	subs	r0, r0, r3
 8006380:	4152      	adcs	r2, r2
 8006382:	0a83      	lsrs	r3, r0, #10
 8006384:	428b      	cmp	r3, r1
 8006386:	d301      	bcc.n	800638c <__divsi3+0x88>
 8006388:	028b      	lsls	r3, r1, #10
 800638a:	1ac0      	subs	r0, r0, r3
 800638c:	4152      	adcs	r2, r2
 800638e:	0a43      	lsrs	r3, r0, #9
 8006390:	428b      	cmp	r3, r1
 8006392:	d301      	bcc.n	8006398 <__divsi3+0x94>
 8006394:	024b      	lsls	r3, r1, #9
 8006396:	1ac0      	subs	r0, r0, r3
 8006398:	4152      	adcs	r2, r2
 800639a:	0a03      	lsrs	r3, r0, #8
 800639c:	428b      	cmp	r3, r1
 800639e:	d301      	bcc.n	80063a4 <__divsi3+0xa0>
 80063a0:	020b      	lsls	r3, r1, #8
 80063a2:	1ac0      	subs	r0, r0, r3
 80063a4:	4152      	adcs	r2, r2
 80063a6:	d2cd      	bcs.n	8006344 <__divsi3+0x40>
 80063a8:	09c3      	lsrs	r3, r0, #7
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d301      	bcc.n	80063b2 <__divsi3+0xae>
 80063ae:	01cb      	lsls	r3, r1, #7
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	4152      	adcs	r2, r2
 80063b4:	0983      	lsrs	r3, r0, #6
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d301      	bcc.n	80063be <__divsi3+0xba>
 80063ba:	018b      	lsls	r3, r1, #6
 80063bc:	1ac0      	subs	r0, r0, r3
 80063be:	4152      	adcs	r2, r2
 80063c0:	0943      	lsrs	r3, r0, #5
 80063c2:	428b      	cmp	r3, r1
 80063c4:	d301      	bcc.n	80063ca <__divsi3+0xc6>
 80063c6:	014b      	lsls	r3, r1, #5
 80063c8:	1ac0      	subs	r0, r0, r3
 80063ca:	4152      	adcs	r2, r2
 80063cc:	0903      	lsrs	r3, r0, #4
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d301      	bcc.n	80063d6 <__divsi3+0xd2>
 80063d2:	010b      	lsls	r3, r1, #4
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	4152      	adcs	r2, r2
 80063d8:	08c3      	lsrs	r3, r0, #3
 80063da:	428b      	cmp	r3, r1
 80063dc:	d301      	bcc.n	80063e2 <__divsi3+0xde>
 80063de:	00cb      	lsls	r3, r1, #3
 80063e0:	1ac0      	subs	r0, r0, r3
 80063e2:	4152      	adcs	r2, r2
 80063e4:	0883      	lsrs	r3, r0, #2
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d301      	bcc.n	80063ee <__divsi3+0xea>
 80063ea:	008b      	lsls	r3, r1, #2
 80063ec:	1ac0      	subs	r0, r0, r3
 80063ee:	4152      	adcs	r2, r2
 80063f0:	0843      	lsrs	r3, r0, #1
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d301      	bcc.n	80063fa <__divsi3+0xf6>
 80063f6:	004b      	lsls	r3, r1, #1
 80063f8:	1ac0      	subs	r0, r0, r3
 80063fa:	4152      	adcs	r2, r2
 80063fc:	1a41      	subs	r1, r0, r1
 80063fe:	d200      	bcs.n	8006402 <__divsi3+0xfe>
 8006400:	4601      	mov	r1, r0
 8006402:	4152      	adcs	r2, r2
 8006404:	4610      	mov	r0, r2
 8006406:	4770      	bx	lr
 8006408:	e05d      	b.n	80064c6 <__divsi3+0x1c2>
 800640a:	0fca      	lsrs	r2, r1, #31
 800640c:	d000      	beq.n	8006410 <__divsi3+0x10c>
 800640e:	4249      	negs	r1, r1
 8006410:	1003      	asrs	r3, r0, #32
 8006412:	d300      	bcc.n	8006416 <__divsi3+0x112>
 8006414:	4240      	negs	r0, r0
 8006416:	4053      	eors	r3, r2
 8006418:	2200      	movs	r2, #0
 800641a:	469c      	mov	ip, r3
 800641c:	0903      	lsrs	r3, r0, #4
 800641e:	428b      	cmp	r3, r1
 8006420:	d32d      	bcc.n	800647e <__divsi3+0x17a>
 8006422:	0a03      	lsrs	r3, r0, #8
 8006424:	428b      	cmp	r3, r1
 8006426:	d312      	bcc.n	800644e <__divsi3+0x14a>
 8006428:	22fc      	movs	r2, #252	@ 0xfc
 800642a:	0189      	lsls	r1, r1, #6
 800642c:	ba12      	rev	r2, r2
 800642e:	0a03      	lsrs	r3, r0, #8
 8006430:	428b      	cmp	r3, r1
 8006432:	d30c      	bcc.n	800644e <__divsi3+0x14a>
 8006434:	0189      	lsls	r1, r1, #6
 8006436:	1192      	asrs	r2, r2, #6
 8006438:	428b      	cmp	r3, r1
 800643a:	d308      	bcc.n	800644e <__divsi3+0x14a>
 800643c:	0189      	lsls	r1, r1, #6
 800643e:	1192      	asrs	r2, r2, #6
 8006440:	428b      	cmp	r3, r1
 8006442:	d304      	bcc.n	800644e <__divsi3+0x14a>
 8006444:	0189      	lsls	r1, r1, #6
 8006446:	d03a      	beq.n	80064be <__divsi3+0x1ba>
 8006448:	1192      	asrs	r2, r2, #6
 800644a:	e000      	b.n	800644e <__divsi3+0x14a>
 800644c:	0989      	lsrs	r1, r1, #6
 800644e:	09c3      	lsrs	r3, r0, #7
 8006450:	428b      	cmp	r3, r1
 8006452:	d301      	bcc.n	8006458 <__divsi3+0x154>
 8006454:	01cb      	lsls	r3, r1, #7
 8006456:	1ac0      	subs	r0, r0, r3
 8006458:	4152      	adcs	r2, r2
 800645a:	0983      	lsrs	r3, r0, #6
 800645c:	428b      	cmp	r3, r1
 800645e:	d301      	bcc.n	8006464 <__divsi3+0x160>
 8006460:	018b      	lsls	r3, r1, #6
 8006462:	1ac0      	subs	r0, r0, r3
 8006464:	4152      	adcs	r2, r2
 8006466:	0943      	lsrs	r3, r0, #5
 8006468:	428b      	cmp	r3, r1
 800646a:	d301      	bcc.n	8006470 <__divsi3+0x16c>
 800646c:	014b      	lsls	r3, r1, #5
 800646e:	1ac0      	subs	r0, r0, r3
 8006470:	4152      	adcs	r2, r2
 8006472:	0903      	lsrs	r3, r0, #4
 8006474:	428b      	cmp	r3, r1
 8006476:	d301      	bcc.n	800647c <__divsi3+0x178>
 8006478:	010b      	lsls	r3, r1, #4
 800647a:	1ac0      	subs	r0, r0, r3
 800647c:	4152      	adcs	r2, r2
 800647e:	08c3      	lsrs	r3, r0, #3
 8006480:	428b      	cmp	r3, r1
 8006482:	d301      	bcc.n	8006488 <__divsi3+0x184>
 8006484:	00cb      	lsls	r3, r1, #3
 8006486:	1ac0      	subs	r0, r0, r3
 8006488:	4152      	adcs	r2, r2
 800648a:	0883      	lsrs	r3, r0, #2
 800648c:	428b      	cmp	r3, r1
 800648e:	d301      	bcc.n	8006494 <__divsi3+0x190>
 8006490:	008b      	lsls	r3, r1, #2
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	4152      	adcs	r2, r2
 8006496:	d2d9      	bcs.n	800644c <__divsi3+0x148>
 8006498:	0843      	lsrs	r3, r0, #1
 800649a:	428b      	cmp	r3, r1
 800649c:	d301      	bcc.n	80064a2 <__divsi3+0x19e>
 800649e:	004b      	lsls	r3, r1, #1
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	4152      	adcs	r2, r2
 80064a4:	1a41      	subs	r1, r0, r1
 80064a6:	d200      	bcs.n	80064aa <__divsi3+0x1a6>
 80064a8:	4601      	mov	r1, r0
 80064aa:	4663      	mov	r3, ip
 80064ac:	4152      	adcs	r2, r2
 80064ae:	105b      	asrs	r3, r3, #1
 80064b0:	4610      	mov	r0, r2
 80064b2:	d301      	bcc.n	80064b8 <__divsi3+0x1b4>
 80064b4:	4240      	negs	r0, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d500      	bpl.n	80064bc <__divsi3+0x1b8>
 80064ba:	4249      	negs	r1, r1
 80064bc:	4770      	bx	lr
 80064be:	4663      	mov	r3, ip
 80064c0:	105b      	asrs	r3, r3, #1
 80064c2:	d300      	bcc.n	80064c6 <__divsi3+0x1c2>
 80064c4:	4240      	negs	r0, r0
 80064c6:	b501      	push	{r0, lr}
 80064c8:	2000      	movs	r0, #0
 80064ca:	f000 f805 	bl	80064d8 <__aeabi_idiv0>
 80064ce:	bd02      	pop	{r1, pc}

080064d0 <__aeabi_idivmod>:
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d0f8      	beq.n	80064c6 <__divsi3+0x1c2>
 80064d4:	e716      	b.n	8006304 <__divsi3>
 80064d6:	4770      	bx	lr

080064d8 <__aeabi_idiv0>:
 80064d8:	4770      	bx	lr
 80064da:	46c0      	nop			@ (mov r8, r8)

080064dc <__aeabi_uldivmod>:
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d111      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d10f      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d100      	bne.n	80064ea <__aeabi_uldivmod+0xe>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d002      	beq.n	80064f2 <__aeabi_uldivmod+0x16>
 80064ec:	2100      	movs	r1, #0
 80064ee:	43c9      	mvns	r1, r1
 80064f0:	0008      	movs	r0, r1
 80064f2:	b407      	push	{r0, r1, r2}
 80064f4:	4802      	ldr	r0, [pc, #8]	@ (8006500 <__aeabi_uldivmod+0x24>)
 80064f6:	a102      	add	r1, pc, #8	@ (adr r1, 8006500 <__aeabi_uldivmod+0x24>)
 80064f8:	1840      	adds	r0, r0, r1
 80064fa:	9002      	str	r0, [sp, #8]
 80064fc:	bd03      	pop	{r0, r1, pc}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	ffffffd9 	.word	0xffffffd9
 8006504:	b403      	push	{r0, r1}
 8006506:	4668      	mov	r0, sp
 8006508:	b501      	push	{r0, lr}
 800650a:	9802      	ldr	r0, [sp, #8]
 800650c:	f000 f806 	bl	800651c <__udivmoddi4>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	469e      	mov	lr, r3
 8006514:	b002      	add	sp, #8
 8006516:	bc0c      	pop	{r2, r3}
 8006518:	4770      	bx	lr
 800651a:	46c0      	nop			@ (mov r8, r8)

0800651c <__udivmoddi4>:
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	4657      	mov	r7, sl
 8006520:	464e      	mov	r6, r9
 8006522:	4645      	mov	r5, r8
 8006524:	46de      	mov	lr, fp
 8006526:	b5e0      	push	{r5, r6, r7, lr}
 8006528:	0004      	movs	r4, r0
 800652a:	000d      	movs	r5, r1
 800652c:	4692      	mov	sl, r2
 800652e:	4699      	mov	r9, r3
 8006530:	b083      	sub	sp, #12
 8006532:	428b      	cmp	r3, r1
 8006534:	d830      	bhi.n	8006598 <__udivmoddi4+0x7c>
 8006536:	d02d      	beq.n	8006594 <__udivmoddi4+0x78>
 8006538:	4649      	mov	r1, r9
 800653a:	4650      	mov	r0, sl
 800653c:	f000 f8ba 	bl	80066b4 <__clzdi2>
 8006540:	0029      	movs	r1, r5
 8006542:	0006      	movs	r6, r0
 8006544:	0020      	movs	r0, r4
 8006546:	f000 f8b5 	bl	80066b4 <__clzdi2>
 800654a:	1a33      	subs	r3, r6, r0
 800654c:	4698      	mov	r8, r3
 800654e:	3b20      	subs	r3, #32
 8006550:	d434      	bmi.n	80065bc <__udivmoddi4+0xa0>
 8006552:	469b      	mov	fp, r3
 8006554:	4653      	mov	r3, sl
 8006556:	465a      	mov	r2, fp
 8006558:	4093      	lsls	r3, r2
 800655a:	4642      	mov	r2, r8
 800655c:	001f      	movs	r7, r3
 800655e:	4653      	mov	r3, sl
 8006560:	4093      	lsls	r3, r2
 8006562:	001e      	movs	r6, r3
 8006564:	42af      	cmp	r7, r5
 8006566:	d83b      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006568:	42af      	cmp	r7, r5
 800656a:	d100      	bne.n	800656e <__udivmoddi4+0x52>
 800656c:	e079      	b.n	8006662 <__udivmoddi4+0x146>
 800656e:	465b      	mov	r3, fp
 8006570:	1ba4      	subs	r4, r4, r6
 8006572:	41bd      	sbcs	r5, r7
 8006574:	2b00      	cmp	r3, #0
 8006576:	da00      	bge.n	800657a <__udivmoddi4+0x5e>
 8006578:	e076      	b.n	8006668 <__udivmoddi4+0x14c>
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	9200      	str	r2, [sp, #0]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	2301      	movs	r3, #1
 8006584:	465a      	mov	r2, fp
 8006586:	4093      	lsls	r3, r2
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2301      	movs	r3, #1
 800658c:	4642      	mov	r2, r8
 800658e:	4093      	lsls	r3, r2
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	e029      	b.n	80065e8 <__udivmoddi4+0xcc>
 8006594:	4282      	cmp	r2, r0
 8006596:	d9cf      	bls.n	8006538 <__udivmoddi4+0x1c>
 8006598:	2200      	movs	r2, #0
 800659a:	2300      	movs	r3, #0
 800659c:	9200      	str	r2, [sp, #0]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <__udivmoddi4+0x8e>
 80065a6:	601c      	str	r4, [r3, #0]
 80065a8:	605d      	str	r5, [r3, #4]
 80065aa:	9800      	ldr	r0, [sp, #0]
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	b003      	add	sp, #12
 80065b0:	bcf0      	pop	{r4, r5, r6, r7}
 80065b2:	46bb      	mov	fp, r7
 80065b4:	46b2      	mov	sl, r6
 80065b6:	46a9      	mov	r9, r5
 80065b8:	46a0      	mov	r8, r4
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065bc:	4642      	mov	r2, r8
 80065be:	469b      	mov	fp, r3
 80065c0:	2320      	movs	r3, #32
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	4652      	mov	r2, sl
 80065c6:	40da      	lsrs	r2, r3
 80065c8:	4641      	mov	r1, r8
 80065ca:	0013      	movs	r3, r2
 80065cc:	464a      	mov	r2, r9
 80065ce:	408a      	lsls	r2, r1
 80065d0:	0017      	movs	r7, r2
 80065d2:	4642      	mov	r2, r8
 80065d4:	431f      	orrs	r7, r3
 80065d6:	4653      	mov	r3, sl
 80065d8:	4093      	lsls	r3, r2
 80065da:	001e      	movs	r6, r3
 80065dc:	42af      	cmp	r7, r5
 80065de:	d9c3      	bls.n	8006568 <__udivmoddi4+0x4c>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	9200      	str	r2, [sp, #0]
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	4643      	mov	r3, r8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0d8      	beq.n	80065a0 <__udivmoddi4+0x84>
 80065ee:	07fb      	lsls	r3, r7, #31
 80065f0:	0872      	lsrs	r2, r6, #1
 80065f2:	431a      	orrs	r2, r3
 80065f4:	4646      	mov	r6, r8
 80065f6:	087b      	lsrs	r3, r7, #1
 80065f8:	e00e      	b.n	8006618 <__udivmoddi4+0xfc>
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	d101      	bne.n	8006602 <__udivmoddi4+0xe6>
 80065fe:	42a2      	cmp	r2, r4
 8006600:	d80c      	bhi.n	800661c <__udivmoddi4+0x100>
 8006602:	1aa4      	subs	r4, r4, r2
 8006604:	419d      	sbcs	r5, r3
 8006606:	2001      	movs	r0, #1
 8006608:	1924      	adds	r4, r4, r4
 800660a:	416d      	adcs	r5, r5
 800660c:	2100      	movs	r1, #0
 800660e:	3e01      	subs	r6, #1
 8006610:	1824      	adds	r4, r4, r0
 8006612:	414d      	adcs	r5, r1
 8006614:	2e00      	cmp	r6, #0
 8006616:	d006      	beq.n	8006626 <__udivmoddi4+0x10a>
 8006618:	42ab      	cmp	r3, r5
 800661a:	d9ee      	bls.n	80065fa <__udivmoddi4+0xde>
 800661c:	3e01      	subs	r6, #1
 800661e:	1924      	adds	r4, r4, r4
 8006620:	416d      	adcs	r5, r5
 8006622:	2e00      	cmp	r6, #0
 8006624:	d1f8      	bne.n	8006618 <__udivmoddi4+0xfc>
 8006626:	9800      	ldr	r0, [sp, #0]
 8006628:	9901      	ldr	r1, [sp, #4]
 800662a:	465b      	mov	r3, fp
 800662c:	1900      	adds	r0, r0, r4
 800662e:	4169      	adcs	r1, r5
 8006630:	2b00      	cmp	r3, #0
 8006632:	db24      	blt.n	800667e <__udivmoddi4+0x162>
 8006634:	002b      	movs	r3, r5
 8006636:	465a      	mov	r2, fp
 8006638:	4644      	mov	r4, r8
 800663a:	40d3      	lsrs	r3, r2
 800663c:	002a      	movs	r2, r5
 800663e:	40e2      	lsrs	r2, r4
 8006640:	001c      	movs	r4, r3
 8006642:	465b      	mov	r3, fp
 8006644:	0015      	movs	r5, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	db2a      	blt.n	80066a0 <__udivmoddi4+0x184>
 800664a:	0026      	movs	r6, r4
 800664c:	409e      	lsls	r6, r3
 800664e:	0033      	movs	r3, r6
 8006650:	0026      	movs	r6, r4
 8006652:	4647      	mov	r7, r8
 8006654:	40be      	lsls	r6, r7
 8006656:	0032      	movs	r2, r6
 8006658:	1a80      	subs	r0, r0, r2
 800665a:	4199      	sbcs	r1, r3
 800665c:	9000      	str	r0, [sp, #0]
 800665e:	9101      	str	r1, [sp, #4]
 8006660:	e79e      	b.n	80065a0 <__udivmoddi4+0x84>
 8006662:	42a3      	cmp	r3, r4
 8006664:	d8bc      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006666:	e782      	b.n	800656e <__udivmoddi4+0x52>
 8006668:	4642      	mov	r2, r8
 800666a:	2320      	movs	r3, #32
 800666c:	2100      	movs	r1, #0
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	2200      	movs	r2, #0
 8006672:	9100      	str	r1, [sp, #0]
 8006674:	9201      	str	r2, [sp, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	40da      	lsrs	r2, r3
 800667a:	9201      	str	r2, [sp, #4]
 800667c:	e785      	b.n	800658a <__udivmoddi4+0x6e>
 800667e:	4642      	mov	r2, r8
 8006680:	2320      	movs	r3, #32
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	002a      	movs	r2, r5
 8006686:	4646      	mov	r6, r8
 8006688:	409a      	lsls	r2, r3
 800668a:	0023      	movs	r3, r4
 800668c:	40f3      	lsrs	r3, r6
 800668e:	4644      	mov	r4, r8
 8006690:	4313      	orrs	r3, r2
 8006692:	002a      	movs	r2, r5
 8006694:	40e2      	lsrs	r2, r4
 8006696:	001c      	movs	r4, r3
 8006698:	465b      	mov	r3, fp
 800669a:	0015      	movs	r5, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	dad4      	bge.n	800664a <__udivmoddi4+0x12e>
 80066a0:	4642      	mov	r2, r8
 80066a2:	002f      	movs	r7, r5
 80066a4:	2320      	movs	r3, #32
 80066a6:	0026      	movs	r6, r4
 80066a8:	4097      	lsls	r7, r2
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	40de      	lsrs	r6, r3
 80066ae:	003b      	movs	r3, r7
 80066b0:	4333      	orrs	r3, r6
 80066b2:	e7cd      	b.n	8006650 <__udivmoddi4+0x134>

080066b4 <__clzdi2>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d103      	bne.n	80066c2 <__clzdi2+0xe>
 80066ba:	f000 f807 	bl	80066cc <__clzsi2>
 80066be:	3020      	adds	r0, #32
 80066c0:	e002      	b.n	80066c8 <__clzdi2+0x14>
 80066c2:	0008      	movs	r0, r1
 80066c4:	f000 f802 	bl	80066cc <__clzsi2>
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	46c0      	nop			@ (mov r8, r8)

080066cc <__clzsi2>:
 80066cc:	211c      	movs	r1, #28
 80066ce:	2301      	movs	r3, #1
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	4298      	cmp	r0, r3
 80066d4:	d301      	bcc.n	80066da <__clzsi2+0xe>
 80066d6:	0c00      	lsrs	r0, r0, #16
 80066d8:	3910      	subs	r1, #16
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	4298      	cmp	r0, r3
 80066de:	d301      	bcc.n	80066e4 <__clzsi2+0x18>
 80066e0:	0a00      	lsrs	r0, r0, #8
 80066e2:	3908      	subs	r1, #8
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	4298      	cmp	r0, r3
 80066e8:	d301      	bcc.n	80066ee <__clzsi2+0x22>
 80066ea:	0900      	lsrs	r0, r0, #4
 80066ec:	3904      	subs	r1, #4
 80066ee:	a202      	add	r2, pc, #8	@ (adr r2, 80066f8 <__clzsi2+0x2c>)
 80066f0:	5c10      	ldrb	r0, [r2, r0]
 80066f2:	1840      	adds	r0, r0, r1
 80066f4:	4770      	bx	lr
 80066f6:	46c0      	nop			@ (mov r8, r8)
 80066f8:	02020304 	.word	0x02020304
 80066fc:	01010101 	.word	0x01010101
	...

08006708 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	0018      	movs	r0, r3
 8006712:	230c      	movs	r3, #12
 8006714:	001a      	movs	r2, r3
 8006716:	2100      	movs	r1, #0
 8006718:	f010 f9b2 	bl	8016a80 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800671c:	4b79      	ldr	r3, [pc, #484]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800671e:	4a7a      	ldr	r2, [pc, #488]	@ (8006908 <MX_ADC1_Init+0x200>)
 8006720:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006722:	4b78      	ldr	r3, [pc, #480]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006724:	2280      	movs	r2, #128	@ 0x80
 8006726:	05d2      	lsls	r2, r2, #23
 8006728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800672a:	4b76      	ldr	r3, [pc, #472]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800672c:	2200      	movs	r2, #0
 800672e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006730:	4b74      	ldr	r3, [pc, #464]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006732:	2200      	movs	r2, #0
 8006734:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8006736:	4b73      	ldr	r3, [pc, #460]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006738:	2280      	movs	r2, #128	@ 0x80
 800673a:	0612      	lsls	r2, r2, #24
 800673c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800673e:	4b71      	ldr	r3, [pc, #452]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006740:	2204      	movs	r2, #4
 8006742:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006744:	4b6f      	ldr	r3, [pc, #444]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006746:	2200      	movs	r2, #0
 8006748:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800674a:	4b6e      	ldr	r3, [pc, #440]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800674c:	2200      	movs	r2, #0
 800674e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006750:	4b6c      	ldr	r3, [pc, #432]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006752:	2200      	movs	r2, #0
 8006754:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8006756:	4b6b      	ldr	r3, [pc, #428]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006758:	2201      	movs	r2, #1
 800675a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800675c:	4b69      	ldr	r3, [pc, #420]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800675e:	2220      	movs	r2, #32
 8006760:	2100      	movs	r1, #0
 8006762:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006764:	4b67      	ldr	r3, [pc, #412]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006766:	2200      	movs	r2, #0
 8006768:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800676a:	4b66      	ldr	r3, [pc, #408]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800676c:	2200      	movs	r2, #0
 800676e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006770:	4b64      	ldr	r3, [pc, #400]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006772:	222c      	movs	r2, #44	@ 0x2c
 8006774:	2100      	movs	r1, #0
 8006776:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006778:	4b62      	ldr	r3, [pc, #392]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800677a:	2200      	movs	r2, #0
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800677e:	4b61      	ldr	r3, [pc, #388]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006780:	2200      	movs	r2, #0
 8006782:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006784:	4b5f      	ldr	r3, [pc, #380]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006786:	223c      	movs	r2, #60	@ 0x3c
 8006788:	2100      	movs	r1, #0
 800678a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800678c:	4b5d      	ldr	r3, [pc, #372]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800678e:	2200      	movs	r2, #0
 8006790:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006792:	4b5c      	ldr	r3, [pc, #368]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006794:	0018      	movs	r0, r3
 8006796:	f001 fee5 	bl	8008564 <HAL_ADC_Init>
 800679a:	1e03      	subs	r3, r0, #0
 800679c:	d001      	beq.n	80067a2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800679e:	f000 fe07 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80067a2:	1d3b      	adds	r3, r7, #4
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80067a8:	1d3b      	adds	r3, r7, #4
 80067aa:	2201      	movs	r2, #1
 80067ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80067ae:	1d3a      	adds	r2, r7, #4
 80067b0:	4b54      	ldr	r3, [pc, #336]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 80067b2:	0011      	movs	r1, r2
 80067b4:	0018      	movs	r0, r3
 80067b6:	f002 f87d 	bl	80088b4 <HAL_ADC_ConfigChannel>
 80067ba:	1e03      	subs	r3, r0, #0
 80067bc:	d001      	beq.n	80067c2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80067be:	f000 fdf7 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80067c2:	1d3b      	adds	r3, r7, #4
 80067c4:	4a51      	ldr	r2, [pc, #324]	@ (800690c <MX_ADC1_Init+0x204>)
 80067c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80067c8:	1d3a      	adds	r2, r7, #4
 80067ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 80067cc:	0011      	movs	r1, r2
 80067ce:	0018      	movs	r0, r3
 80067d0:	f002 f870 	bl	80088b4 <HAL_ADC_ConfigChannel>
 80067d4:	1e03      	subs	r3, r0, #0
 80067d6:	d001      	beq.n	80067dc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80067d8:	f000 fdea 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80067dc:	1d3b      	adds	r3, r7, #4
 80067de:	4a4c      	ldr	r2, [pc, #304]	@ (8006910 <MX_ADC1_Init+0x208>)
 80067e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80067e2:	1d3a      	adds	r2, r7, #4
 80067e4:	4b47      	ldr	r3, [pc, #284]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 80067e6:	0011      	movs	r1, r2
 80067e8:	0018      	movs	r0, r3
 80067ea:	f002 f863 	bl	80088b4 <HAL_ADC_ConfigChannel>
 80067ee:	1e03      	subs	r3, r0, #0
 80067f0:	d001      	beq.n	80067f6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80067f2:	f000 fddd 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80067f6:	1d3b      	adds	r3, r7, #4
 80067f8:	4a46      	ldr	r2, [pc, #280]	@ (8006914 <MX_ADC1_Init+0x20c>)
 80067fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80067fc:	1d3a      	adds	r2, r7, #4
 80067fe:	4b41      	ldr	r3, [pc, #260]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006800:	0011      	movs	r1, r2
 8006802:	0018      	movs	r0, r3
 8006804:	f002 f856 	bl	80088b4 <HAL_ADC_ConfigChannel>
 8006808:	1e03      	subs	r3, r0, #0
 800680a:	d001      	beq.n	8006810 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800680c:	f000 fdd0 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006810:	1d3b      	adds	r3, r7, #4
 8006812:	4a41      	ldr	r2, [pc, #260]	@ (8006918 <MX_ADC1_Init+0x210>)
 8006814:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006816:	1d3a      	adds	r2, r7, #4
 8006818:	4b3a      	ldr	r3, [pc, #232]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800681a:	0011      	movs	r1, r2
 800681c:	0018      	movs	r0, r3
 800681e:	f002 f849 	bl	80088b4 <HAL_ADC_ConfigChannel>
 8006822:	1e03      	subs	r3, r0, #0
 8006824:	d001      	beq.n	800682a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 8006826:	f000 fdc3 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800682a:	1d3b      	adds	r3, r7, #4
 800682c:	4a3b      	ldr	r2, [pc, #236]	@ (800691c <MX_ADC1_Init+0x214>)
 800682e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006830:	1d3a      	adds	r2, r7, #4
 8006832:	4b34      	ldr	r3, [pc, #208]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006834:	0011      	movs	r1, r2
 8006836:	0018      	movs	r0, r3
 8006838:	f002 f83c 	bl	80088b4 <HAL_ADC_ConfigChannel>
 800683c:	1e03      	subs	r3, r0, #0
 800683e:	d001      	beq.n	8006844 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8006840:	f000 fdb6 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006844:	1d3b      	adds	r3, r7, #4
 8006846:	4a36      	ldr	r2, [pc, #216]	@ (8006920 <MX_ADC1_Init+0x218>)
 8006848:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800684a:	1d3a      	adds	r2, r7, #4
 800684c:	4b2d      	ldr	r3, [pc, #180]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800684e:	0011      	movs	r1, r2
 8006850:	0018      	movs	r0, r3
 8006852:	f002 f82f 	bl	80088b4 <HAL_ADC_ConfigChannel>
 8006856:	1e03      	subs	r3, r0, #0
 8006858:	d001      	beq.n	800685e <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 800685a:	f000 fda9 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800685e:	1d3b      	adds	r3, r7, #4
 8006860:	4a30      	ldr	r2, [pc, #192]	@ (8006924 <MX_ADC1_Init+0x21c>)
 8006862:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006864:	1d3a      	adds	r2, r7, #4
 8006866:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006868:	0011      	movs	r1, r2
 800686a:	0018      	movs	r0, r3
 800686c:	f002 f822 	bl	80088b4 <HAL_ADC_ConfigChannel>
 8006870:	1e03      	subs	r3, r0, #0
 8006872:	d001      	beq.n	8006878 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8006874:	f000 fd9c 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006878:	1d3b      	adds	r3, r7, #4
 800687a:	4a2b      	ldr	r2, [pc, #172]	@ (8006928 <MX_ADC1_Init+0x220>)
 800687c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800687e:	1d3a      	adds	r2, r7, #4
 8006880:	4b20      	ldr	r3, [pc, #128]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 8006882:	0011      	movs	r1, r2
 8006884:	0018      	movs	r0, r3
 8006886:	f002 f815 	bl	80088b4 <HAL_ADC_ConfigChannel>
 800688a:	1e03      	subs	r3, r0, #0
 800688c:	d001      	beq.n	8006892 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800688e:	f000 fd8f 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006892:	1d3b      	adds	r3, r7, #4
 8006894:	4a25      	ldr	r2, [pc, #148]	@ (800692c <MX_ADC1_Init+0x224>)
 8006896:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006898:	1d3a      	adds	r2, r7, #4
 800689a:	4b1a      	ldr	r3, [pc, #104]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 800689c:	0011      	movs	r1, r2
 800689e:	0018      	movs	r0, r3
 80068a0:	f002 f808 	bl	80088b4 <HAL_ADC_ConfigChannel>
 80068a4:	1e03      	subs	r3, r0, #0
 80068a6:	d001      	beq.n	80068ac <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 80068a8:	f000 fd82 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	4a20      	ldr	r2, [pc, #128]	@ (8006930 <MX_ADC1_Init+0x228>)
 80068b0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068b2:	1d3a      	adds	r2, r7, #4
 80068b4:	4b13      	ldr	r3, [pc, #76]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 80068b6:	0011      	movs	r1, r2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f001 fffb 	bl	80088b4 <HAL_ADC_ConfigChannel>
 80068be:	1e03      	subs	r3, r0, #0
 80068c0:	d001      	beq.n	80068c6 <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 80068c2:	f000 fd75 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006934 <MX_ADC1_Init+0x22c>)
 80068ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068cc:	1d3a      	adds	r2, r7, #4
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 80068d0:	0011      	movs	r1, r2
 80068d2:	0018      	movs	r0, r3
 80068d4:	f001 ffee 	bl	80088b4 <HAL_ADC_ConfigChannel>
 80068d8:	1e03      	subs	r3, r0, #0
 80068da:	d001      	beq.n	80068e0 <MX_ADC1_Init+0x1d8>
  {
    Error_Handler();
 80068dc:	f000 fd68 	bl	80073b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80068e0:	1d3b      	adds	r3, r7, #4
 80068e2:	4a15      	ldr	r2, [pc, #84]	@ (8006938 <MX_ADC1_Init+0x230>)
 80068e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068e6:	1d3a      	adds	r2, r7, #4
 80068e8:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <MX_ADC1_Init+0x1fc>)
 80068ea:	0011      	movs	r1, r2
 80068ec:	0018      	movs	r0, r3
 80068ee:	f001 ffe1 	bl	80088b4 <HAL_ADC_ConfigChannel>
 80068f2:	1e03      	subs	r3, r0, #0
 80068f4:	d001      	beq.n	80068fa <MX_ADC1_Init+0x1f2>
  {
    Error_Handler();
 80068f6:	f000 fd5b 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b004      	add	sp, #16
 8006900:	bd80      	pop	{r7, pc}
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	20000254 	.word	0x20000254
 8006908:	40012400 	.word	0x40012400
 800690c:	04000002 	.word	0x04000002
 8006910:	08000004 	.word	0x08000004
 8006914:	0c000008 	.word	0x0c000008
 8006918:	10000010 	.word	0x10000010
 800691c:	14000020 	.word	0x14000020
 8006920:	20000100 	.word	0x20000100
 8006924:	24000200 	.word	0x24000200
 8006928:	28000400 	.word	0x28000400
 800692c:	3c008000 	.word	0x3c008000
 8006930:	40010000 	.word	0x40010000
 8006934:	44020000 	.word	0x44020000
 8006938:	48040000 	.word	0x48040000

0800693c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b08d      	sub	sp, #52	@ 0x34
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006944:	241c      	movs	r4, #28
 8006946:	193b      	adds	r3, r7, r4
 8006948:	0018      	movs	r0, r3
 800694a:	2314      	movs	r3, #20
 800694c:	001a      	movs	r2, r3
 800694e:	2100      	movs	r1, #0
 8006950:	f010 f896 	bl	8016a80 <memset>
  if(adcHandle->Instance==ADC1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a33      	ldr	r2, [pc, #204]	@ (8006a28 <HAL_ADC_MspInit+0xec>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d160      	bne.n	8006a20 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800695e:	4b33      	ldr	r3, [pc, #204]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 8006960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006962:	4b32      	ldr	r3, [pc, #200]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 8006964:	2180      	movs	r1, #128	@ 0x80
 8006966:	0349      	lsls	r1, r1, #13
 8006968:	430a      	orrs	r2, r1
 800696a:	641a      	str	r2, [r3, #64]	@ 0x40
 800696c:	4b2f      	ldr	r3, [pc, #188]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 800696e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006970:	2380      	movs	r3, #128	@ 0x80
 8006972:	035b      	lsls	r3, r3, #13
 8006974:	4013      	ands	r3, r2
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800697a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 800697c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697e:	4b2b      	ldr	r3, [pc, #172]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 8006980:	2101      	movs	r1, #1
 8006982:	430a      	orrs	r2, r1
 8006984:	635a      	str	r2, [r3, #52]	@ 0x34
 8006986:	4b29      	ldr	r3, [pc, #164]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 8006988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800698a:	2201      	movs	r2, #1
 800698c:	4013      	ands	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006992:	4b26      	ldr	r3, [pc, #152]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 8006994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006996:	4b25      	ldr	r3, [pc, #148]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 8006998:	2104      	movs	r1, #4
 800699a:	430a      	orrs	r2, r1
 800699c:	635a      	str	r2, [r3, #52]	@ 0x34
 800699e:	4b23      	ldr	r3, [pc, #140]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 80069a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a2:	2204      	movs	r2, #4
 80069a4:	4013      	ands	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069aa:	4b20      	ldr	r3, [pc, #128]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 80069ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ae:	4b1f      	ldr	r3, [pc, #124]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 80069b0:	2102      	movs	r1, #2
 80069b2:	430a      	orrs	r2, r1
 80069b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80069b6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a2c <HAL_ADC_MspInit+0xf0>)
 80069b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ba:	2202      	movs	r2, #2
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> ADC1_IN9
    PB2     ------> ADC1_IN10
    PB11     ------> ADC1_IN15
    PB12     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ADC_LED_VOLTAGE_4_Pin|ADC_LED_VOLTAGE_3_Pin|ADC_LED_VOLTAGE_2_Pin|ADC_LED_VOLTAGE_1_Pin
 80069c2:	193b      	adds	r3, r7, r4
 80069c4:	223f      	movs	r2, #63	@ 0x3f
 80069c6:	601a      	str	r2, [r3, #0]
                          |ADC_BATTERY_NTC_2_Pin|ADC_SYS_CURRENT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069c8:	193b      	adds	r3, r7, r4
 80069ca:	2203      	movs	r2, #3
 80069cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ce:	193b      	adds	r3, r7, r4
 80069d0:	2200      	movs	r2, #0
 80069d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069d4:	193a      	adds	r2, r7, r4
 80069d6:	23a0      	movs	r3, #160	@ 0xa0
 80069d8:	05db      	lsls	r3, r3, #23
 80069da:	0011      	movs	r1, r2
 80069dc:	0018      	movs	r0, r3
 80069de:	f002 fbf1 	bl	80091c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_USB_C_60W_I_SENSE_Pin|DC_USB_C_60W_V_SINK_Pin;
 80069e2:	193b      	adds	r3, r7, r4
 80069e4:	2230      	movs	r2, #48	@ 0x30
 80069e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069e8:	193b      	adds	r3, r7, r4
 80069ea:	2203      	movs	r2, #3
 80069ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ee:	193b      	adds	r3, r7, r4
 80069f0:	2200      	movs	r2, #0
 80069f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069f4:	193b      	adds	r3, r7, r4
 80069f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006a30 <HAL_ADC_MspInit+0xf4>)
 80069f8:	0019      	movs	r1, r3
 80069fa:	0010      	movs	r0, r2
 80069fc:	f002 fbe2 	bl	80091c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_USB_C_60W_IN_Pin|ADC_USB_C_100W_V_BUS_Pin|ADC_USB_C_100W_V_SOURCE_Pin|ADC_USB_C_100W_V_SINK_Pin
 8006a00:	0021      	movs	r1, r4
 8006a02:	187b      	adds	r3, r7, r1
 8006a04:	4a0b      	ldr	r2, [pc, #44]	@ (8006a34 <HAL_ADC_MspInit+0xf8>)
 8006a06:	601a      	str	r2, [r3, #0]
                          |ADC_USB_C_60W_V_BUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a08:	187b      	adds	r3, r7, r1
 8006a0a:	2203      	movs	r2, #3
 8006a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a0e:	187b      	adds	r3, r7, r1
 8006a10:	2200      	movs	r2, #0
 8006a12:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a14:	187b      	adds	r3, r7, r1
 8006a16:	4a08      	ldr	r2, [pc, #32]	@ (8006a38 <HAL_ADC_MspInit+0xfc>)
 8006a18:	0019      	movs	r1, r3
 8006a1a:	0010      	movs	r0, r2
 8006a1c:	f002 fbd2 	bl	80091c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006a20:	46c0      	nop			@ (mov r8, r8)
 8006a22:	46bd      	mov	sp, r7
 8006a24:	b00d      	add	sp, #52	@ 0x34
 8006a26:	bd90      	pop	{r4, r7, pc}
 8006a28:	40012400 	.word	0x40012400
 8006a2c:	40021000 	.word	0x40021000
 8006a30:	50000800 	.word	0x50000800
 8006a34:	00001807 	.word	0x00001807
 8006a38:	50000400 	.word	0x50000400

08006a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	0002      	movs	r2, r0
 8006a44:	1dfb      	adds	r3, r7, #7
 8006a46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006a48:	1dfb      	adds	r3, r7, #7
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a4e:	d809      	bhi.n	8006a64 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a50:	1dfb      	adds	r3, r7, #7
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	001a      	movs	r2, r3
 8006a56:	231f      	movs	r3, #31
 8006a58:	401a      	ands	r2, r3
 8006a5a:	4b04      	ldr	r3, [pc, #16]	@ (8006a6c <__NVIC_EnableIRQ+0x30>)
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	4091      	lsls	r1, r2
 8006a60:	000a      	movs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006a64:	46c0      	nop			@ (mov r8, r8)
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	e000e100 	.word	0xe000e100

08006a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	0002      	movs	r2, r0
 8006a78:	6039      	str	r1, [r7, #0]
 8006a7a:	1dfb      	adds	r3, r7, #7
 8006a7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006a7e:	1dfb      	adds	r3, r7, #7
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a84:	d828      	bhi.n	8006ad8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a86:	4a2f      	ldr	r2, [pc, #188]	@ (8006b44 <__NVIC_SetPriority+0xd4>)
 8006a88:	1dfb      	adds	r3, r7, #7
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b25b      	sxtb	r3, r3
 8006a8e:	089b      	lsrs	r3, r3, #2
 8006a90:	33c0      	adds	r3, #192	@ 0xc0
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	589b      	ldr	r3, [r3, r2]
 8006a96:	1dfa      	adds	r2, r7, #7
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	0011      	movs	r1, r2
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	400a      	ands	r2, r1
 8006aa0:	00d2      	lsls	r2, r2, #3
 8006aa2:	21ff      	movs	r1, #255	@ 0xff
 8006aa4:	4091      	lsls	r1, r2
 8006aa6:	000a      	movs	r2, r1
 8006aa8:	43d2      	mvns	r2, r2
 8006aaa:	401a      	ands	r2, r3
 8006aac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	019b      	lsls	r3, r3, #6
 8006ab2:	22ff      	movs	r2, #255	@ 0xff
 8006ab4:	401a      	ands	r2, r3
 8006ab6:	1dfb      	adds	r3, r7, #7
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	0018      	movs	r0, r3
 8006abc:	2303      	movs	r3, #3
 8006abe:	4003      	ands	r3, r0
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ac4:	481f      	ldr	r0, [pc, #124]	@ (8006b44 <__NVIC_SetPriority+0xd4>)
 8006ac6:	1dfb      	adds	r3, r7, #7
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	b25b      	sxtb	r3, r3
 8006acc:	089b      	lsrs	r3, r3, #2
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	33c0      	adds	r3, #192	@ 0xc0
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006ad6:	e031      	b.n	8006b3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b48 <__NVIC_SetPriority+0xd8>)
 8006ada:	1dfb      	adds	r3, r7, #7
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	0019      	movs	r1, r3
 8006ae0:	230f      	movs	r3, #15
 8006ae2:	400b      	ands	r3, r1
 8006ae4:	3b08      	subs	r3, #8
 8006ae6:	089b      	lsrs	r3, r3, #2
 8006ae8:	3306      	adds	r3, #6
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	18d3      	adds	r3, r2, r3
 8006aee:	3304      	adds	r3, #4
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	1dfa      	adds	r2, r7, #7
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	0011      	movs	r1, r2
 8006af8:	2203      	movs	r2, #3
 8006afa:	400a      	ands	r2, r1
 8006afc:	00d2      	lsls	r2, r2, #3
 8006afe:	21ff      	movs	r1, #255	@ 0xff
 8006b00:	4091      	lsls	r1, r2
 8006b02:	000a      	movs	r2, r1
 8006b04:	43d2      	mvns	r2, r2
 8006b06:	401a      	ands	r2, r3
 8006b08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	019b      	lsls	r3, r3, #6
 8006b0e:	22ff      	movs	r2, #255	@ 0xff
 8006b10:	401a      	ands	r2, r3
 8006b12:	1dfb      	adds	r3, r7, #7
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	0018      	movs	r0, r3
 8006b18:	2303      	movs	r3, #3
 8006b1a:	4003      	ands	r3, r0
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006b20:	4809      	ldr	r0, [pc, #36]	@ (8006b48 <__NVIC_SetPriority+0xd8>)
 8006b22:	1dfb      	adds	r3, r7, #7
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	001c      	movs	r4, r3
 8006b28:	230f      	movs	r3, #15
 8006b2a:	4023      	ands	r3, r4
 8006b2c:	3b08      	subs	r3, #8
 8006b2e:	089b      	lsrs	r3, r3, #2
 8006b30:	430a      	orrs	r2, r1
 8006b32:	3306      	adds	r3, #6
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	18c3      	adds	r3, r0, r3
 8006b38:	3304      	adds	r3, #4
 8006b3a:	601a      	str	r2, [r3, #0]
}
 8006b3c:	46c0      	nop			@ (mov r8, r8)
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b003      	add	sp, #12
 8006b42:	bd90      	pop	{r4, r7, pc}
 8006b44:	e000e100 	.word	0xe000e100
 8006b48:	e000ed00 	.word	0xe000ed00

08006b4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006b52:	4b13      	ldr	r3, [pc, #76]	@ (8006ba0 <MX_DMA_Init+0x54>)
 8006b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b56:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <MX_DMA_Init+0x54>)
 8006b58:	2101      	movs	r1, #1
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b5e:	4b10      	ldr	r3, [pc, #64]	@ (8006ba0 <MX_DMA_Init+0x54>)
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	2201      	movs	r2, #1
 8006b64:	4013      	ands	r3, r2
 8006b66:	607b      	str	r3, [r7, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	2009      	movs	r0, #9
 8006b6e:	f7ff ff7f 	bl	8006a70 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006b72:	2009      	movs	r0, #9
 8006b74:	f7ff ff62 	bl	8006a3c <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 8006b78:	2100      	movs	r1, #0
 8006b7a:	200a      	movs	r0, #10
 8006b7c:	f7ff ff78 	bl	8006a70 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006b80:	200a      	movs	r0, #10
 8006b82:	f7ff ff5b 	bl	8006a3c <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 8006b86:	2200      	movs	r2, #0
 8006b88:	2100      	movs	r1, #0
 8006b8a:	200b      	movs	r0, #11
 8006b8c:	f002 f916 	bl	8008dbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 8006b90:	200b      	movs	r0, #11
 8006b92:	f002 f928 	bl	8008de6 <HAL_NVIC_EnableIRQ>

}
 8006b96:	46c0      	nop			@ (mov r8, r8)
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b002      	add	sp, #8
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	46c0      	nop			@ (mov r8, r8)
 8006ba0:	40021000 	.word	0x40021000

08006ba4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8006ba8:	4b20      	ldr	r3, [pc, #128]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006baa:	4a21      	ldr	r2, [pc, #132]	@ (8006c30 <MX_FDCAN1_Init+0x8c>)
 8006bac:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8006bae:	4b1f      	ldr	r3, [pc, #124]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8006bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8006bba:	4b1c      	ldr	r3, [pc, #112]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8006bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8006bc6:	4b19      	ldr	r3, [pc, #100]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8006bcc:	4b17      	ldr	r3, [pc, #92]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8006bd2:	4b16      	ldr	r3, [pc, #88]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8006bd8:	4b14      	ldr	r3, [pc, #80]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8006bde:	4b13      	ldr	r3, [pc, #76]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8006be4:	4b11      	ldr	r3, [pc, #68]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8006bea:	4b10      	ldr	r3, [pc, #64]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8006bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8006c02:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8006c08:	4b08      	ldr	r3, [pc, #32]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8006c0e:	4b07      	ldr	r3, [pc, #28]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8006c14:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <MX_FDCAN1_Init+0x88>)
 8006c16:	0018      	movs	r0, r3
 8006c18:	f002 f902 	bl	8008e20 <HAL_FDCAN_Init>
 8006c1c:	1e03      	subs	r3, r0, #0
 8006c1e:	d001      	beq.n	8006c24 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8006c20:	f000 fbc6 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8006c24:	46c0      	nop			@ (mov r8, r8)
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	200002b8 	.word	0x200002b8
 8006c30:	40006400 	.word	0x40006400

08006c34 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8006c34:	b590      	push	{r4, r7, lr}
 8006c36:	b09f      	sub	sp, #124	@ 0x7c
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c3c:	2364      	movs	r3, #100	@ 0x64
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	0018      	movs	r0, r3
 8006c42:	2314      	movs	r3, #20
 8006c44:	001a      	movs	r2, r3
 8006c46:	2100      	movs	r1, #0
 8006c48:	f00f ff1a 	bl	8016a80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006c4c:	2414      	movs	r4, #20
 8006c4e:	193b      	adds	r3, r7, r4
 8006c50:	0018      	movs	r0, r3
 8006c52:	2350      	movs	r3, #80	@ 0x50
 8006c54:	001a      	movs	r2, r3
 8006c56:	2100      	movs	r1, #0
 8006c58:	f00f ff12 	bl	8016a80 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a23      	ldr	r2, [pc, #140]	@ (8006cf0 <HAL_FDCAN_MspInit+0xbc>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d13f      	bne.n	8006ce6 <HAL_FDCAN_MspInit+0xb2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8006c66:	193b      	adds	r3, r7, r4
 8006c68:	2280      	movs	r2, #128	@ 0x80
 8006c6a:	0492      	lsls	r2, r2, #18
 8006c6c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8006c6e:	193b      	adds	r3, r7, r4
 8006c70:	2200      	movs	r2, #0
 8006c72:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c74:	193b      	adds	r3, r7, r4
 8006c76:	0018      	movs	r0, r3
 8006c78:	f005 f83c 	bl	800bcf4 <HAL_RCCEx_PeriphCLKConfig>
 8006c7c:	1e03      	subs	r3, r0, #0
 8006c7e:	d001      	beq.n	8006c84 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8006c80:	f000 fb96 	bl	80073b0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8006c84:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf4 <HAL_FDCAN_MspInit+0xc0>)
 8006c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c88:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf4 <HAL_FDCAN_MspInit+0xc0>)
 8006c8a:	2180      	movs	r1, #128	@ 0x80
 8006c8c:	0149      	lsls	r1, r1, #5
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c92:	4b18      	ldr	r3, [pc, #96]	@ (8006cf4 <HAL_FDCAN_MspInit+0xc0>)
 8006c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c96:	2380      	movs	r3, #128	@ 0x80
 8006c98:	015b      	lsls	r3, r3, #5
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ca0:	4b14      	ldr	r3, [pc, #80]	@ (8006cf4 <HAL_FDCAN_MspInit+0xc0>)
 8006ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ca4:	4b13      	ldr	r3, [pc, #76]	@ (8006cf4 <HAL_FDCAN_MspInit+0xc0>)
 8006ca6:	2108      	movs	r1, #8
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	635a      	str	r2, [r3, #52]	@ 0x34
 8006cac:	4b11      	ldr	r3, [pc, #68]	@ (8006cf4 <HAL_FDCAN_MspInit+0xc0>)
 8006cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD12     ------> FDCAN1_RX
    PD13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006cb8:	2164      	movs	r1, #100	@ 0x64
 8006cba:	187b      	adds	r3, r7, r1
 8006cbc:	22c0      	movs	r2, #192	@ 0xc0
 8006cbe:	0192      	lsls	r2, r2, #6
 8006cc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc2:	187b      	adds	r3, r7, r1
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc8:	187b      	adds	r3, r7, r1
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cce:	187b      	adds	r3, r7, r1
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8006cd4:	187b      	adds	r3, r7, r1
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cda:	187b      	adds	r3, r7, r1
 8006cdc:	4a06      	ldr	r2, [pc, #24]	@ (8006cf8 <HAL_FDCAN_MspInit+0xc4>)
 8006cde:	0019      	movs	r1, r3
 8006ce0:	0010      	movs	r0, r2
 8006ce2:	f002 fa6f 	bl	80091c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8006ce6:	46c0      	nop			@ (mov r8, r8)
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b01f      	add	sp, #124	@ 0x7c
 8006cec:	bd90      	pop	{r4, r7, pc}
 8006cee:	46c0      	nop			@ (mov r8, r8)
 8006cf0:	40006400 	.word	0x40006400
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	50000c00 	.word	0x50000c00

08006cfc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006cfc:	b590      	push	{r4, r7, lr}
 8006cfe:	b08d      	sub	sp, #52	@ 0x34
 8006d00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d02:	241c      	movs	r4, #28
 8006d04:	193b      	adds	r3, r7, r4
 8006d06:	0018      	movs	r0, r3
 8006d08:	2314      	movs	r3, #20
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	f00f feb7 	bl	8016a80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d12:	4b9b      	ldr	r3, [pc, #620]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d16:	4b9a      	ldr	r3, [pc, #616]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d18:	2102      	movs	r1, #2
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d1e:	4b98      	ldr	r3, [pc, #608]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d22:	2202      	movs	r2, #2
 8006d24:	4013      	ands	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d2a:	4b95      	ldr	r3, [pc, #596]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d2e:	4b94      	ldr	r3, [pc, #592]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d30:	2104      	movs	r1, #4
 8006d32:	430a      	orrs	r2, r1
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d36:	4b92      	ldr	r3, [pc, #584]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006d42:	4b8f      	ldr	r3, [pc, #572]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d46:	4b8e      	ldr	r3, [pc, #568]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d48:	2120      	movs	r1, #32
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d4e:	4b8c      	ldr	r3, [pc, #560]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d52:	2220      	movs	r2, #32
 8006d54:	4013      	ands	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
 8006d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d5a:	4b89      	ldr	r3, [pc, #548]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d5e:	4b88      	ldr	r3, [pc, #544]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d60:	2101      	movs	r1, #1
 8006d62:	430a      	orrs	r2, r1
 8006d64:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d66:	4b86      	ldr	r3, [pc, #536]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d72:	4b83      	ldr	r3, [pc, #524]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d76:	4b82      	ldr	r3, [pc, #520]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d78:	2110      	movs	r1, #16
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d7e:	4b80      	ldr	r3, [pc, #512]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d82:	2210      	movs	r2, #16
 8006d84:	4013      	ands	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
 8006d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d90:	2108      	movs	r1, #8
 8006d92:	430a      	orrs	r2, r1
 8006d94:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d96:	4b7a      	ldr	r3, [pc, #488]	@ (8006f80 <MX_GPIO_Init+0x284>)
 8006d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MPPT_BQ_CHARGE_ENABLE_Pin|MPPT_BQ_QON_Pin|ENABLE_CURRENT_SENSE_Pin|ENABLE_BAT_OUTPUT_Pin, GPIO_PIN_RESET);
 8006da2:	4978      	ldr	r1, [pc, #480]	@ (8006f84 <MX_GPIO_Init+0x288>)
 8006da4:	4b78      	ldr	r3, [pc, #480]	@ (8006f88 <MX_GPIO_Init+0x28c>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	0018      	movs	r0, r3
 8006daa:	f002 fb77 	bl	800949c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_LED_BUCK_Pin|ENABLE_DIAG_12V_RS485_Pin, GPIO_PIN_RESET);
 8006dae:	4977      	ldr	r1, [pc, #476]	@ (8006f8c <MX_GPIO_Init+0x290>)
 8006db0:	4b77      	ldr	r3, [pc, #476]	@ (8006f90 <MX_GPIO_Init+0x294>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	0018      	movs	r0, r3
 8006db6:	f002 fb71 	bl	800949c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENABLE_USB_60W_Pin|CAN_ENABLE_Pin|DISABLE_LED_CURRENT_Pin|ENABLE_USB_100W_Pin
 8006dba:	4976      	ldr	r1, [pc, #472]	@ (8006f94 <MX_GPIO_Init+0x298>)
 8006dbc:	4b76      	ldr	r3, [pc, #472]	@ (8006f98 <MX_GPIO_Init+0x29c>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f002 fb6b 	bl	800949c <HAL_GPIO_WritePin>
                          |ENABLE_BUCK_BOOST_100W_Pin|ENABLE_12V_RS485_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC12 PC13 PC14 PC15
                           PC2 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8006dc6:	193b      	adds	r3, r7, r4
 8006dc8:	4a74      	ldr	r2, [pc, #464]	@ (8006f9c <MX_GPIO_Init+0x2a0>)
 8006dca:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dcc:	193b      	adds	r3, r7, r4
 8006dce:	2203      	movs	r2, #3
 8006dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd2:	193b      	adds	r3, r7, r4
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dd8:	193b      	adds	r3, r7, r4
 8006dda:	4a71      	ldr	r2, [pc, #452]	@ (8006fa0 <MX_GPIO_Init+0x2a4>)
 8006ddc:	0019      	movs	r1, r3
 8006dde:	0010      	movs	r0, r2
 8006de0:	f002 f9f0 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006de4:	193b      	adds	r3, r7, r4
 8006de6:	2203      	movs	r2, #3
 8006de8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dea:	193b      	adds	r3, r7, r4
 8006dec:	2203      	movs	r2, #3
 8006dee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df0:	193b      	adds	r3, r7, r4
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006df6:	193b      	adds	r3, r7, r4
 8006df8:	4a6a      	ldr	r2, [pc, #424]	@ (8006fa4 <MX_GPIO_Init+0x2a8>)
 8006dfa:	0019      	movs	r1, r3
 8006dfc:	0010      	movs	r0, r2
 8006dfe:	f002 f9e1 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_RESET_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin;
 8006e02:	193b      	adds	r3, r7, r4
 8006e04:	2204      	movs	r2, #4
 8006e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e08:	193b      	adds	r3, r7, r4
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0e:	193b      	adds	r3, r7, r4
 8006e10:	2200      	movs	r2, #0
 8006e12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MCU_RESET_GPIO_Port, &GPIO_InitStruct);
 8006e14:	193b      	adds	r3, r7, r4
 8006e16:	4a63      	ldr	r2, [pc, #396]	@ (8006fa4 <MX_GPIO_Init+0x2a8>)
 8006e18:	0019      	movs	r1, r3
 8006e1a:	0010      	movs	r0, r2
 8006e1c:	f002 f9d2 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BI_Pin */
  GPIO_InitStruct.Pin = BI_Pin;
 8006e20:	193b      	adds	r3, r7, r4
 8006e22:	2208      	movs	r2, #8
 8006e24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e26:	193b      	adds	r3, r7, r4
 8006e28:	2200      	movs	r2, #0
 8006e2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2c:	193b      	adds	r3, r7, r4
 8006e2e:	2200      	movs	r2, #0
 8006e30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BI_GPIO_Port, &GPIO_InitStruct);
 8006e32:	193b      	adds	r3, r7, r4
 8006e34:	4a5a      	ldr	r2, [pc, #360]	@ (8006fa0 <MX_GPIO_Init+0x2a4>)
 8006e36:	0019      	movs	r1, r3
 8006e38:	0010      	movs	r0, r2
 8006e3a:	f002 f9c3 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006e3e:	193b      	adds	r3, r7, r4
 8006e40:	2240      	movs	r2, #64	@ 0x40
 8006e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e44:	193b      	adds	r3, r7, r4
 8006e46:	2203      	movs	r2, #3
 8006e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e4a:	193b      	adds	r3, r7, r4
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e50:	193a      	adds	r2, r7, r4
 8006e52:	23a0      	movs	r3, #160	@ 0xa0
 8006e54:	05db      	lsls	r3, r3, #23
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f002 f9b3 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMS_INTERRUPT_Pin MPPT_BQ_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = BMS_INTERRUPT_Pin|MPPT_BQ_INTERRUPT_Pin;
 8006e5e:	0021      	movs	r1, r4
 8006e60:	187b      	adds	r3, r7, r1
 8006e62:	22a0      	movs	r2, #160	@ 0xa0
 8006e64:	0092      	lsls	r2, r2, #2
 8006e66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006e68:	187b      	adds	r3, r7, r1
 8006e6a:	2288      	movs	r2, #136	@ 0x88
 8006e6c:	0352      	lsls	r2, r2, #13
 8006e6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e70:	187b      	adds	r3, r7, r1
 8006e72:	2200      	movs	r2, #0
 8006e74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e76:	000c      	movs	r4, r1
 8006e78:	187b      	adds	r3, r7, r1
 8006e7a:	4a43      	ldr	r2, [pc, #268]	@ (8006f88 <MX_GPIO_Init+0x28c>)
 8006e7c:	0019      	movs	r1, r3
 8006e7e:	0010      	movs	r0, r2
 8006e80:	f002 f9a0 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_GOOD_VBAT_OUT_Pin */
  GPIO_InitStruct.Pin = PWR_GOOD_VBAT_OUT_Pin;
 8006e84:	0021      	movs	r1, r4
 8006e86:	187b      	adds	r3, r7, r1
 8006e88:	2280      	movs	r2, #128	@ 0x80
 8006e8a:	0052      	lsls	r2, r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e8e:	000c      	movs	r4, r1
 8006e90:	193b      	adds	r3, r7, r4
 8006e92:	2200      	movs	r2, #0
 8006e94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e96:	193b      	adds	r3, r7, r4
 8006e98:	2200      	movs	r2, #0
 8006e9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PWR_GOOD_VBAT_OUT_GPIO_Port, &GPIO_InitStruct);
 8006e9c:	193b      	adds	r3, r7, r4
 8006e9e:	4a3a      	ldr	r2, [pc, #232]	@ (8006f88 <MX_GPIO_Init+0x28c>)
 8006ea0:	0019      	movs	r1, r3
 8006ea2:	0010      	movs	r0, r2
 8006ea4:	f002 f98e 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MPPT_BQ_CHARGE_ENABLE_Pin MPPT_BQ_QON_Pin ENABLE_CURRENT_SENSE_Pin ENABLE_BAT_OUTPUT_Pin */
  GPIO_InitStruct.Pin = MPPT_BQ_CHARGE_ENABLE_Pin|MPPT_BQ_QON_Pin|ENABLE_CURRENT_SENSE_Pin|ENABLE_BAT_OUTPUT_Pin;
 8006ea8:	193b      	adds	r3, r7, r4
 8006eaa:	4a36      	ldr	r2, [pc, #216]	@ (8006f84 <MX_GPIO_Init+0x288>)
 8006eac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eae:	193b      	adds	r3, r7, r4
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb4:	193b      	adds	r3, r7, r4
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eba:	193b      	adds	r3, r7, r4
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ec0:	193b      	adds	r3, r7, r4
 8006ec2:	4a31      	ldr	r2, [pc, #196]	@ (8006f88 <MX_GPIO_Init+0x28c>)
 8006ec4:	0019      	movs	r1, r3
 8006ec6:	0010      	movs	r0, r2
 8006ec8:	f002 f97c 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_LED_BUCK_Pin ENABLE_DIAG_12V_RS485_Pin */
  GPIO_InitStruct.Pin = ENABLE_LED_BUCK_Pin|ENABLE_DIAG_12V_RS485_Pin;
 8006ecc:	193b      	adds	r3, r7, r4
 8006ece:	4a2f      	ldr	r2, [pc, #188]	@ (8006f8c <MX_GPIO_Init+0x290>)
 8006ed0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ed2:	193b      	adds	r3, r7, r4
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed8:	193b      	adds	r3, r7, r4
 8006eda:	2200      	movs	r2, #0
 8006edc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ede:	193b      	adds	r3, r7, r4
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ee4:	193b      	adds	r3, r7, r4
 8006ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f90 <MX_GPIO_Init+0x294>)
 8006ee8:	0019      	movs	r1, r3
 8006eea:	0010      	movs	r0, r2
 8006eec:	f002 f96a 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLAG_USB_100W_Pin FAULT_12V_RS485_Pin FLAG_USB_60W_Pin */
  GPIO_InitStruct.Pin = FLAG_USB_100W_Pin|FAULT_12V_RS485_Pin|FLAG_USB_60W_Pin;
 8006ef0:	0021      	movs	r1, r4
 8006ef2:	187b      	adds	r3, r7, r1
 8006ef4:	22d0      	movs	r2, #208	@ 0xd0
 8006ef6:	0112      	lsls	r2, r2, #4
 8006ef8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006efa:	000c      	movs	r4, r1
 8006efc:	193b      	adds	r3, r7, r4
 8006efe:	2200      	movs	r2, #0
 8006f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f02:	193b      	adds	r3, r7, r4
 8006f04:	2200      	movs	r2, #0
 8006f06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f08:	193b      	adds	r3, r7, r4
 8006f0a:	4a23      	ldr	r2, [pc, #140]	@ (8006f98 <MX_GPIO_Init+0x29c>)
 8006f0c:	0019      	movs	r1, r3
 8006f0e:	0010      	movs	r0, r2
 8006f10:	f002 f958 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_USB_60W_Pin CAN_ENABLE_Pin DISABLE_LED_CURRENT_Pin ENABLE_USB_100W_Pin
                           ENABLE_BUCK_BOOST_100W_Pin ENABLE_12V_RS485_Pin */
  GPIO_InitStruct.Pin = ENABLE_USB_60W_Pin|CAN_ENABLE_Pin|DISABLE_LED_CURRENT_Pin|ENABLE_USB_100W_Pin
 8006f14:	193b      	adds	r3, r7, r4
 8006f16:	4a1f      	ldr	r2, [pc, #124]	@ (8006f94 <MX_GPIO_Init+0x298>)
 8006f18:	601a      	str	r2, [r3, #0]
                          |ENABLE_BUCK_BOOST_100W_Pin|ENABLE_12V_RS485_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f1a:	193b      	adds	r3, r7, r4
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f20:	193b      	adds	r3, r7, r4
 8006f22:	2200      	movs	r2, #0
 8006f24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	2200      	movs	r2, #0
 8006f2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f2c:	193b      	adds	r3, r7, r4
 8006f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f98 <MX_GPIO_Init+0x29c>)
 8006f30:	0019      	movs	r1, r3
 8006f32:	0010      	movs	r0, r2
 8006f34:	f002 f946 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006f38:	193b      	adds	r3, r7, r4
 8006f3a:	2210      	movs	r2, #16
 8006f3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f3e:	193b      	adds	r3, r7, r4
 8006f40:	2203      	movs	r2, #3
 8006f42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f44:	193b      	adds	r3, r7, r4
 8006f46:	2200      	movs	r2, #0
 8006f48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f4a:	193b      	adds	r3, r7, r4
 8006f4c:	4a12      	ldr	r2, [pc, #72]	@ (8006f98 <MX_GPIO_Init+0x29c>)
 8006f4e:	0019      	movs	r1, r3
 8006f50:	0010      	movs	r0, r2
 8006f52:	f002 f937 	bl	80091c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006f56:	0021      	movs	r1, r4
 8006f58:	187b      	adds	r3, r7, r1
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f5e:	187b      	adds	r3, r7, r1
 8006f60:	2203      	movs	r2, #3
 8006f62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f64:	187b      	adds	r3, r7, r1
 8006f66:	2200      	movs	r2, #0
 8006f68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	4a08      	ldr	r2, [pc, #32]	@ (8006f90 <MX_GPIO_Init+0x294>)
 8006f6e:	0019      	movs	r1, r3
 8006f70:	0010      	movs	r0, r2
 8006f72:	f002 f927 	bl	80091c4 <HAL_GPIO_Init>

}
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	b00d      	add	sp, #52	@ 0x34
 8006f7c:	bd90      	pop	{r4, r7, pc}
 8006f7e:	46c0      	nop			@ (mov r8, r8)
 8006f80:	40021000 	.word	0x40021000
 8006f84:	0000040b 	.word	0x0000040b
 8006f88:	50001000 	.word	0x50001000
 8006f8c:	00002010 	.word	0x00002010
 8006f90:	50000400 	.word	0x50000400
 8006f94:	0000c2e0 	.word	0x0000c2e0
 8006f98:	50000c00 	.word	0x50000c00
 8006f9c:	0000f384 	.word	0x0000f384
 8006fa0:	50000800 	.word	0x50000800
 8006fa4:	50001400 	.word	0x50001400

08006fa8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006fac:	4b1b      	ldr	r3, [pc, #108]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fae:	4a1c      	ldr	r2, [pc, #112]	@ (8007020 <MX_I2C1_Init+0x78>)
 8006fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8006fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007024 <MX_I2C1_Init+0x7c>)
 8006fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006fb8:	4b18      	ldr	r3, [pc, #96]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006fbe:	4b17      	ldr	r3, [pc, #92]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006fc4:	4b15      	ldr	r3, [pc, #84]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006fca:	4b14      	ldr	r3, [pc, #80]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006fd0:	4b12      	ldr	r3, [pc, #72]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006fd6:	4b11      	ldr	r3, [pc, #68]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800701c <MX_I2C1_Init+0x74>)
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f002 fa77 	bl	80094d8 <HAL_I2C_Init>
 8006fea:	1e03      	subs	r3, r0, #0
 8006fec:	d001      	beq.n	8006ff2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006fee:	f000 f9df 	bl	80073b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <MX_I2C1_Init+0x74>)
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f002 fb14 	bl	8009624 <HAL_I2CEx_ConfigAnalogFilter>
 8006ffc:	1e03      	subs	r3, r0, #0
 8006ffe:	d001      	beq.n	8007004 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007000:	f000 f9d6 	bl	80073b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007004:	4b05      	ldr	r3, [pc, #20]	@ (800701c <MX_I2C1_Init+0x74>)
 8007006:	2100      	movs	r1, #0
 8007008:	0018      	movs	r0, r3
 800700a:	f002 fb57 	bl	80096bc <HAL_I2CEx_ConfigDigitalFilter>
 800700e:	1e03      	subs	r3, r0, #0
 8007010:	d001      	beq.n	8007016 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007012:	f000 f9cd 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	2000031c 	.word	0x2000031c
 8007020:	40005400 	.word	0x40005400
 8007024:	10b17db5 	.word	0x10b17db5

08007028 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800702c:	4b1b      	ldr	r3, [pc, #108]	@ (800709c <MX_I2C2_Init+0x74>)
 800702e:	4a1c      	ldr	r2, [pc, #112]	@ (80070a0 <MX_I2C2_Init+0x78>)
 8007030:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8007032:	4b1a      	ldr	r3, [pc, #104]	@ (800709c <MX_I2C2_Init+0x74>)
 8007034:	4a1b      	ldr	r2, [pc, #108]	@ (80070a4 <MX_I2C2_Init+0x7c>)
 8007036:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007038:	4b18      	ldr	r3, [pc, #96]	@ (800709c <MX_I2C2_Init+0x74>)
 800703a:	2200      	movs	r2, #0
 800703c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800703e:	4b17      	ldr	r3, [pc, #92]	@ (800709c <MX_I2C2_Init+0x74>)
 8007040:	2201      	movs	r2, #1
 8007042:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007044:	4b15      	ldr	r3, [pc, #84]	@ (800709c <MX_I2C2_Init+0x74>)
 8007046:	2200      	movs	r2, #0
 8007048:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800704a:	4b14      	ldr	r3, [pc, #80]	@ (800709c <MX_I2C2_Init+0x74>)
 800704c:	2200      	movs	r2, #0
 800704e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007050:	4b12      	ldr	r3, [pc, #72]	@ (800709c <MX_I2C2_Init+0x74>)
 8007052:	2200      	movs	r2, #0
 8007054:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007056:	4b11      	ldr	r3, [pc, #68]	@ (800709c <MX_I2C2_Init+0x74>)
 8007058:	2200      	movs	r2, #0
 800705a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800705c:	4b0f      	ldr	r3, [pc, #60]	@ (800709c <MX_I2C2_Init+0x74>)
 800705e:	2200      	movs	r2, #0
 8007060:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007062:	4b0e      	ldr	r3, [pc, #56]	@ (800709c <MX_I2C2_Init+0x74>)
 8007064:	0018      	movs	r0, r3
 8007066:	f002 fa37 	bl	80094d8 <HAL_I2C_Init>
 800706a:	1e03      	subs	r3, r0, #0
 800706c:	d001      	beq.n	8007072 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800706e:	f000 f99f 	bl	80073b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007072:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <MX_I2C2_Init+0x74>)
 8007074:	2100      	movs	r1, #0
 8007076:	0018      	movs	r0, r3
 8007078:	f002 fad4 	bl	8009624 <HAL_I2CEx_ConfigAnalogFilter>
 800707c:	1e03      	subs	r3, r0, #0
 800707e:	d001      	beq.n	8007084 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007080:	f000 f996 	bl	80073b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007084:	4b05      	ldr	r3, [pc, #20]	@ (800709c <MX_I2C2_Init+0x74>)
 8007086:	2100      	movs	r1, #0
 8007088:	0018      	movs	r0, r3
 800708a:	f002 fb17 	bl	80096bc <HAL_I2CEx_ConfigDigitalFilter>
 800708e:	1e03      	subs	r3, r0, #0
 8007090:	d001      	beq.n	8007096 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007092:	f000 f98d 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007096:	46c0      	nop			@ (mov r8, r8)
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20000370 	.word	0x20000370
 80070a0:	40005800 	.word	0x40005800
 80070a4:	10b17db5 	.word	0x10b17db5

080070a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80070a8:	b590      	push	{r4, r7, lr}
 80070aa:	b0a1      	sub	sp, #132	@ 0x84
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b0:	236c      	movs	r3, #108	@ 0x6c
 80070b2:	18fb      	adds	r3, r7, r3
 80070b4:	0018      	movs	r0, r3
 80070b6:	2314      	movs	r3, #20
 80070b8:	001a      	movs	r2, r3
 80070ba:	2100      	movs	r1, #0
 80070bc:	f00f fce0 	bl	8016a80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80070c0:	241c      	movs	r4, #28
 80070c2:	193b      	adds	r3, r7, r4
 80070c4:	0018      	movs	r0, r3
 80070c6:	2350      	movs	r3, #80	@ 0x50
 80070c8:	001a      	movs	r2, r3
 80070ca:	2100      	movs	r1, #0
 80070cc:	f00f fcd8 	bl	8016a80 <memset>
  if(i2cHandle->Instance==I2C1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a45      	ldr	r2, [pc, #276]	@ (80071ec <HAL_I2C_MspInit+0x144>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d13f      	bne.n	800715a <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80070da:	193b      	adds	r3, r7, r4
 80070dc:	2220      	movs	r2, #32
 80070de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80070e0:	193b      	adds	r3, r7, r4
 80070e2:	2200      	movs	r2, #0
 80070e4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80070e6:	193b      	adds	r3, r7, r4
 80070e8:	0018      	movs	r0, r3
 80070ea:	f004 fe03 	bl	800bcf4 <HAL_RCCEx_PeriphCLKConfig>
 80070ee:	1e03      	subs	r3, r0, #0
 80070f0:	d001      	beq.n	80070f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80070f2:	f000 f95d 	bl	80073b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070f6:	4b3e      	ldr	r3, [pc, #248]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 80070f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070fa:	4b3d      	ldr	r3, [pc, #244]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 80070fc:	2102      	movs	r1, #2
 80070fe:	430a      	orrs	r2, r1
 8007100:	635a      	str	r2, [r3, #52]	@ 0x34
 8007102:	4b3b      	ldr	r3, [pc, #236]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 8007104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007106:	2202      	movs	r2, #2
 8007108:	4013      	ands	r3, r2
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800710e:	216c      	movs	r1, #108	@ 0x6c
 8007110:	187b      	adds	r3, r7, r1
 8007112:	22c0      	movs	r2, #192	@ 0xc0
 8007114:	0092      	lsls	r2, r2, #2
 8007116:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007118:	187b      	adds	r3, r7, r1
 800711a:	2212      	movs	r2, #18
 800711c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711e:	187b      	adds	r3, r7, r1
 8007120:	2200      	movs	r2, #0
 8007122:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007124:	187b      	adds	r3, r7, r1
 8007126:	2200      	movs	r2, #0
 8007128:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800712a:	187b      	adds	r3, r7, r1
 800712c:	2206      	movs	r2, #6
 800712e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007130:	187b      	adds	r3, r7, r1
 8007132:	4a30      	ldr	r2, [pc, #192]	@ (80071f4 <HAL_I2C_MspInit+0x14c>)
 8007134:	0019      	movs	r1, r3
 8007136:	0010      	movs	r0, r2
 8007138:	f002 f844 	bl	80091c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800713c:	4b2c      	ldr	r3, [pc, #176]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 800713e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007140:	4b2b      	ldr	r3, [pc, #172]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 8007142:	2180      	movs	r1, #128	@ 0x80
 8007144:	0389      	lsls	r1, r1, #14
 8007146:	430a      	orrs	r2, r1
 8007148:	63da      	str	r2, [r3, #60]	@ 0x3c
 800714a:	4b29      	ldr	r3, [pc, #164]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 800714c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800714e:	2380      	movs	r3, #128	@ 0x80
 8007150:	039b      	lsls	r3, r3, #14
 8007152:	4013      	ands	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007158:	e044      	b.n	80071e4 <HAL_I2C_MspInit+0x13c>
  else if(i2cHandle->Instance==I2C2)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a26      	ldr	r2, [pc, #152]	@ (80071f8 <HAL_I2C_MspInit+0x150>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d13f      	bne.n	80071e4 <HAL_I2C_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8007164:	211c      	movs	r1, #28
 8007166:	187b      	adds	r3, r7, r1
 8007168:	2240      	movs	r2, #64	@ 0x40
 800716a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800716c:	187b      	adds	r3, r7, r1
 800716e:	2200      	movs	r2, #0
 8007170:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007172:	187b      	adds	r3, r7, r1
 8007174:	0018      	movs	r0, r3
 8007176:	f004 fdbd 	bl	800bcf4 <HAL_RCCEx_PeriphCLKConfig>
 800717a:	1e03      	subs	r3, r0, #0
 800717c:	d001      	beq.n	8007182 <HAL_I2C_MspInit+0xda>
      Error_Handler();
 800717e:	f000 f917 	bl	80073b0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007182:	4b1b      	ldr	r3, [pc, #108]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 8007184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007186:	4b1a      	ldr	r3, [pc, #104]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 8007188:	2102      	movs	r1, #2
 800718a:	430a      	orrs	r2, r1
 800718c:	635a      	str	r2, [r3, #52]	@ 0x34
 800718e:	4b18      	ldr	r3, [pc, #96]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 8007190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007192:	2202      	movs	r2, #2
 8007194:	4013      	ands	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ADC_USB_C_100W_I_SENSE_Pin|GPIO_PIN_14;
 800719a:	216c      	movs	r1, #108	@ 0x6c
 800719c:	187b      	adds	r3, r7, r1
 800719e:	2288      	movs	r2, #136	@ 0x88
 80071a0:	01d2      	lsls	r2, r2, #7
 80071a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071a4:	187b      	adds	r3, r7, r1
 80071a6:	2212      	movs	r2, #18
 80071a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071aa:	187b      	adds	r3, r7, r1
 80071ac:	2200      	movs	r2, #0
 80071ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b0:	187b      	adds	r3, r7, r1
 80071b2:	2200      	movs	r2, #0
 80071b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80071b6:	187b      	adds	r3, r7, r1
 80071b8:	2206      	movs	r2, #6
 80071ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071bc:	187b      	adds	r3, r7, r1
 80071be:	4a0d      	ldr	r2, [pc, #52]	@ (80071f4 <HAL_I2C_MspInit+0x14c>)
 80071c0:	0019      	movs	r1, r3
 80071c2:	0010      	movs	r0, r2
 80071c4:	f001 fffe 	bl	80091c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80071c8:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 80071ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071cc:	4b08      	ldr	r3, [pc, #32]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 80071ce:	2180      	movs	r1, #128	@ 0x80
 80071d0:	03c9      	lsls	r1, r1, #15
 80071d2:	430a      	orrs	r2, r1
 80071d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80071d6:	4b06      	ldr	r3, [pc, #24]	@ (80071f0 <HAL_I2C_MspInit+0x148>)
 80071d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071da:	2380      	movs	r3, #128	@ 0x80
 80071dc:	03db      	lsls	r3, r3, #15
 80071de:	4013      	ands	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	46c0      	nop			@ (mov r8, r8)
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b021      	add	sp, #132	@ 0x84
 80071ea:	bd90      	pop	{r4, r7, pc}
 80071ec:	40005400 	.word	0x40005400
 80071f0:	40021000 	.word	0x40021000
 80071f4:	50000400 	.word	0x50000400
 80071f8:	40005800 	.word	0x40005800

080071fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007202:	f001 f807 	bl	8008214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007206:	f000 f871 	bl	80072ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800720a:	f7ff fd77 	bl	8006cfc <MX_GPIO_Init>
  MX_DMA_Init();
 800720e:	f7ff fc9d 	bl	8006b4c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8007212:	f7ff fcc7 	bl	8006ba4 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8007216:	f7ff fec7 	bl	8006fa8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800721a:	f7ff ff05 	bl	8007028 <MX_I2C2_Init>
  MX_UCPD1_Init();
 800721e:	f000 fd47 	bl	8007cb0 <MX_UCPD1_Init>
  MX_UCPD2_Init();
 8007222:	f000 fdeb 	bl	8007dfc <MX_UCPD2_Init>
  MX_USART3_UART_Init();
 8007226:	f000 fe89 	bl	8007f3c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800722a:	f000 fed5 	bl	8007fd8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800722e:	f7ff fa6b 	bl	8006708 <MX_ADC1_Init>
  MX_TIM2_Init();
 8007232:	f000 f95f 	bl	80074f4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8007236:	f000 f9ef 	bl	8007618 <MX_TIM4_Init>
  MX_USB_Device_Init();
 800723a:	f00e fd81 	bl	8015d40 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800723e:	4b28      	ldr	r3, [pc, #160]	@ (80072e0 <main+0xe4>)
 8007240:	2100      	movs	r1, #0
 8007242:	0018      	movs	r0, r3
 8007244:	f005 f86a 	bl	800c31c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8007248:	4b25      	ldr	r3, [pc, #148]	@ (80072e0 <main+0xe4>)
 800724a:	2104      	movs	r1, #4
 800724c:	0018      	movs	r0, r3
 800724e:	f005 f865 	bl	800c31c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8007252:	4b23      	ldr	r3, [pc, #140]	@ (80072e0 <main+0xe4>)
 8007254:	2108      	movs	r1, #8
 8007256:	0018      	movs	r0, r3
 8007258:	f005 f860 	bl	800c31c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800725c:	4b21      	ldr	r3, [pc, #132]	@ (80072e4 <main+0xe8>)
 800725e:	2100      	movs	r1, #0
 8007260:	0018      	movs	r0, r3
 8007262:	f005 f85b 	bl	800c31c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8007266:	4b1f      	ldr	r3, [pc, #124]	@ (80072e4 <main+0xe8>)
 8007268:	2104      	movs	r1, #4
 800726a:	0018      	movs	r0, r3
 800726c:	f005 f856 	bl	800c31c <HAL_TIM_PWM_Start>

  uint8_t intensity = 0;
 8007270:	230e      	movs	r3, #14
 8007272:	18fb      	adds	r3, r7, r3
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8007278:	f00e f968 	bl	801554c <MX_USBPD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char txtBuffer[8];
  uint8_t count = 1;
 800727c:	230f      	movs	r3, #15
 800727e:	18fb      	adds	r3, r7, r3
 8007280:	2201      	movs	r2, #1
 8007282:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  /*
	   * 100 is max according to out timing this sets pwm dutycycle like analog write.
	   */
	  htim2.Instance->CCR1 = 100 - intensity;
 8007284:	230e      	movs	r3, #14
 8007286:	18fb      	adds	r3, r7, r3
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2264      	movs	r2, #100	@ 0x64
 800728c:	1ad2      	subs	r2, r2, r3
 800728e:	4b14      	ldr	r3, [pc, #80]	@ (80072e0 <main+0xe4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	635a      	str	r2, [r3, #52]	@ 0x34

	  // v con port test
	  sprintf(txtBuffer,"%u\r\n", count);
 8007294:	240f      	movs	r4, #15
 8007296:	193b      	adds	r3, r7, r4
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	4913      	ldr	r1, [pc, #76]	@ (80072e8 <main+0xec>)
 800729c:	1d3b      	adds	r3, r7, #4
 800729e:	0018      	movs	r0, r3
 80072a0:	f00f fbcc 	bl	8016a3c <siprintf>
	  count ++;
 80072a4:	0021      	movs	r1, r4
 80072a6:	187b      	adds	r3, r7, r1
 80072a8:	781a      	ldrb	r2, [r3, #0]
 80072aa:	187b      	adds	r3, r7, r1
 80072ac:	3201      	adds	r2, #1
 80072ae:	701a      	strb	r2, [r3, #0]
	  if (count>100)count=1;
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b64      	cmp	r3, #100	@ 0x64
 80072b6:	d902      	bls.n	80072be <main+0xc2>
 80072b8:	187b      	adds	r3, r7, r1
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
	  CDC_Transmit_FS((uint8_t *) txtBuffer, strlen(txtBuffer));
 80072be:	1d3b      	adds	r3, r7, #4
 80072c0:	0018      	movs	r0, r3
 80072c2:	f7fe ff83 	bl	80061cc <strlen>
 80072c6:	0003      	movs	r3, r0
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	1d3b      	adds	r3, r7, #4
 80072cc:	0011      	movs	r1, r2
 80072ce:	0018      	movs	r0, r3
 80072d0:	f00e fdba 	bl	8015e48 <CDC_Transmit_FS>

	  HAL_Delay(100);
 80072d4:	2064      	movs	r0, #100	@ 0x64
 80072d6:	f001 f823 	bl	8008320 <HAL_Delay>


    /* USER CODE END WHILE */
    USBPD_DPM_Run();
 80072da:	f00e fa35 	bl	8015748 <USBPD_DPM_Run>
	  htim2.Instance->CCR1 = 100 - intensity;
 80072de:	e7d1      	b.n	8007284 <main+0x88>
 80072e0:	200003c8 	.word	0x200003c8
 80072e4:	20000414 	.word	0x20000414
 80072e8:	0801724c 	.word	0x0801724c

080072ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b095      	sub	sp, #84	@ 0x54
 80072f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072f2:	2414      	movs	r4, #20
 80072f4:	193b      	adds	r3, r7, r4
 80072f6:	0018      	movs	r0, r3
 80072f8:	233c      	movs	r3, #60	@ 0x3c
 80072fa:	001a      	movs	r2, r3
 80072fc:	2100      	movs	r1, #0
 80072fe:	f00f fbbf 	bl	8016a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007302:	1d3b      	adds	r3, r7, #4
 8007304:	0018      	movs	r0, r3
 8007306:	2310      	movs	r3, #16
 8007308:	001a      	movs	r2, r3
 800730a:	2100      	movs	r1, #0
 800730c:	f00f fbb8 	bl	8016a80 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007310:	2380      	movs	r3, #128	@ 0x80
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	0018      	movs	r0, r3
 8007316:	f003 ff97 	bl	800b248 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800731a:	193b      	adds	r3, r7, r4
 800731c:	2222      	movs	r2, #34	@ 0x22
 800731e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007320:	193b      	adds	r3, r7, r4
 8007322:	2280      	movs	r2, #128	@ 0x80
 8007324:	0052      	lsls	r2, r2, #1
 8007326:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007328:	193b      	adds	r3, r7, r4
 800732a:	2280      	movs	r2, #128	@ 0x80
 800732c:	03d2      	lsls	r2, r2, #15
 800732e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8007330:	0021      	movs	r1, r4
 8007332:	187b      	adds	r3, r7, r1
 8007334:	2200      	movs	r2, #0
 8007336:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007338:	187b      	adds	r3, r7, r1
 800733a:	2240      	movs	r2, #64	@ 0x40
 800733c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800733e:	187b      	adds	r3, r7, r1
 8007340:	2202      	movs	r2, #2
 8007342:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007344:	187b      	adds	r3, r7, r1
 8007346:	2202      	movs	r2, #2
 8007348:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800734a:	187b      	adds	r3, r7, r1
 800734c:	2200      	movs	r2, #0
 800734e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8007350:	187b      	adds	r3, r7, r1
 8007352:	2208      	movs	r2, #8
 8007354:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007356:	187b      	adds	r3, r7, r1
 8007358:	2280      	movs	r2, #128	@ 0x80
 800735a:	0292      	lsls	r2, r2, #10
 800735c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800735e:	187b      	adds	r3, r7, r1
 8007360:	2280      	movs	r2, #128	@ 0x80
 8007362:	0492      	lsls	r2, r2, #18
 8007364:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007366:	187b      	adds	r3, r7, r1
 8007368:	2280      	movs	r2, #128	@ 0x80
 800736a:	0592      	lsls	r2, r2, #22
 800736c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800736e:	187b      	adds	r3, r7, r1
 8007370:	0018      	movs	r0, r3
 8007372:	f003 ffb5 	bl	800b2e0 <HAL_RCC_OscConfig>
 8007376:	1e03      	subs	r3, r0, #0
 8007378:	d001      	beq.n	800737e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800737a:	f000 f819 	bl	80073b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800737e:	1d3b      	adds	r3, r7, #4
 8007380:	2207      	movs	r2, #7
 8007382:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007384:	1d3b      	adds	r3, r7, #4
 8007386:	2202      	movs	r2, #2
 8007388:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800738a:	1d3b      	adds	r3, r7, #4
 800738c:	2200      	movs	r2, #0
 800738e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007390:	1d3b      	adds	r3, r7, #4
 8007392:	2200      	movs	r2, #0
 8007394:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	2102      	movs	r1, #2
 800739a:	0018      	movs	r0, r3
 800739c:	f004 fb00 	bl	800b9a0 <HAL_RCC_ClockConfig>
 80073a0:	1e03      	subs	r3, r0, #0
 80073a2:	d001      	beq.n	80073a8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80073a4:	f000 f804 	bl	80073b0 <Error_Handler>
  }
}
 80073a8:	46c0      	nop			@ (mov r8, r8)
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b015      	add	sp, #84	@ 0x54
 80073ae:	bd90      	pop	{r4, r7, pc}

080073b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073b4:	b672      	cpsid	i
}
 80073b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80073b8:	46c0      	nop			@ (mov r8, r8)
 80073ba:	e7fd      	b.n	80073b8 <Error_Handler+0x8>

080073bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007400 <HAL_MspInit+0x44>)
 80073c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007400 <HAL_MspInit+0x44>)
 80073c8:	2101      	movs	r1, #1
 80073ca:	430a      	orrs	r2, r1
 80073cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80073ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007400 <HAL_MspInit+0x44>)
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	2201      	movs	r2, #1
 80073d4:	4013      	ands	r3, r2
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80073da:	4b09      	ldr	r3, [pc, #36]	@ (8007400 <HAL_MspInit+0x44>)
 80073dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073de:	4b08      	ldr	r3, [pc, #32]	@ (8007400 <HAL_MspInit+0x44>)
 80073e0:	2180      	movs	r1, #128	@ 0x80
 80073e2:	0549      	lsls	r1, r1, #21
 80073e4:	430a      	orrs	r2, r1
 80073e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80073e8:	4b05      	ldr	r3, [pc, #20]	@ (8007400 <HAL_MspInit+0x44>)
 80073ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ec:	2380      	movs	r3, #128	@ 0x80
 80073ee:	055b      	lsls	r3, r3, #21
 80073f0:	4013      	ands	r3, r2
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073f6:	46c0      	nop			@ (mov r8, r8)
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b002      	add	sp, #8
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	46c0      	nop			@ (mov r8, r8)
 8007400:	40021000 	.word	0x40021000

08007404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007408:	46c0      	nop			@ (mov r8, r8)
 800740a:	e7fd      	b.n	8007408 <NMI_Handler+0x4>

0800740c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007410:	46c0      	nop			@ (mov r8, r8)
 8007412:	e7fd      	b.n	8007410 <HardFault_Handler+0x4>

08007414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007418:	46c0      	nop			@ (mov r8, r8)
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007422:	46c0      	nop			@ (mov r8, r8)
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800742c:	f000 ff5c 	bl	80082e8 <HAL_IncTick>
  USBPD_DPM_TimerCounter();
 8007430:	f00e f9d4 	bl	80157dc <USBPD_DPM_TimerCounter>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007434:	46c0      	nop			@ (mov r8, r8)
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8007440:	4b05      	ldr	r3, [pc, #20]	@ (8007458 <USB_UCPD1_2_IRQHandler+0x1c>)
 8007442:	0018      	movs	r0, r3
 8007444:	f002 fb0c 	bl	8009a60 <HAL_PCD_IRQHandler>
  USBPD_PORT1_IRQHandler();
 8007448:	f009 ff11 	bl	801126e <USBPD_PORT1_IRQHandler>
  USBPD_PORT0_IRQHandler();
 800744c:	f009 ff07 	bl	801125e <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8007450:	46c0      	nop			@ (mov r8, r8)
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	20001b30 	.word	0x20001b30

0800745c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007460:	46c0      	nop			@ (mov r8, r8)
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800746a:	46c0      	nop			@ (mov r8, r8)
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8007474:	46c0      	nop			@ (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007484:	4a14      	ldr	r2, [pc, #80]	@ (80074d8 <_sbrk+0x5c>)
 8007486:	4b15      	ldr	r3, [pc, #84]	@ (80074dc <_sbrk+0x60>)
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007490:	4b13      	ldr	r3, [pc, #76]	@ (80074e0 <_sbrk+0x64>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007498:	4b11      	ldr	r3, [pc, #68]	@ (80074e0 <_sbrk+0x64>)
 800749a:	4a12      	ldr	r2, [pc, #72]	@ (80074e4 <_sbrk+0x68>)
 800749c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800749e:	4b10      	ldr	r3, [pc, #64]	@ (80074e0 <_sbrk+0x64>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	18d3      	adds	r3, r2, r3
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d207      	bcs.n	80074bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80074ac:	f00f fb02 	bl	8016ab4 <__errno>
 80074b0:	0003      	movs	r3, r0
 80074b2:	220c      	movs	r2, #12
 80074b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80074b6:	2301      	movs	r3, #1
 80074b8:	425b      	negs	r3, r3
 80074ba:	e009      	b.n	80074d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80074bc:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <_sbrk+0x64>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80074c2:	4b07      	ldr	r3, [pc, #28]	@ (80074e0 <_sbrk+0x64>)
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	18d2      	adds	r2, r2, r3
 80074ca:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <_sbrk+0x64>)
 80074cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80074ce:	68fb      	ldr	r3, [r7, #12]
}
 80074d0:	0018      	movs	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b006      	add	sp, #24
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20024000 	.word	0x20024000
 80074dc:	00000400 	.word	0x00000400
 80074e0:	200003c4 	.word	0x200003c4
 80074e4:	20002178 	.word	0x20002178

080074e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80074ec:	46c0      	nop			@ (mov r8, r8)
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08e      	sub	sp, #56	@ 0x38
 80074f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074fa:	2328      	movs	r3, #40	@ 0x28
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	0018      	movs	r0, r3
 8007500:	2310      	movs	r3, #16
 8007502:	001a      	movs	r2, r3
 8007504:	2100      	movs	r1, #0
 8007506:	f00f fabb 	bl	8016a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800750a:	231c      	movs	r3, #28
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	0018      	movs	r0, r3
 8007510:	230c      	movs	r3, #12
 8007512:	001a      	movs	r2, r3
 8007514:	2100      	movs	r1, #0
 8007516:	f00f fab3 	bl	8016a80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800751a:	003b      	movs	r3, r7
 800751c:	0018      	movs	r0, r3
 800751e:	231c      	movs	r3, #28
 8007520:	001a      	movs	r2, r3
 8007522:	2100      	movs	r1, #0
 8007524:	f00f faac 	bl	8016a80 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007528:	4b3a      	ldr	r3, [pc, #232]	@ (8007614 <MX_TIM2_Init+0x120>)
 800752a:	2280      	movs	r2, #128	@ 0x80
 800752c:	05d2      	lsls	r2, r2, #23
 800752e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400;
 8007530:	4b38      	ldr	r3, [pc, #224]	@ (8007614 <MX_TIM2_Init+0x120>)
 8007532:	22c8      	movs	r2, #200	@ 0xc8
 8007534:	0152      	lsls	r2, r2, #5
 8007536:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007538:	4b36      	ldr	r3, [pc, #216]	@ (8007614 <MX_TIM2_Init+0x120>)
 800753a:	2200      	movs	r2, #0
 800753c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800753e:	4b35      	ldr	r3, [pc, #212]	@ (8007614 <MX_TIM2_Init+0x120>)
 8007540:	2263      	movs	r2, #99	@ 0x63
 8007542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007544:	4b33      	ldr	r3, [pc, #204]	@ (8007614 <MX_TIM2_Init+0x120>)
 8007546:	2200      	movs	r2, #0
 8007548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800754a:	4b32      	ldr	r3, [pc, #200]	@ (8007614 <MX_TIM2_Init+0x120>)
 800754c:	2280      	movs	r2, #128	@ 0x80
 800754e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007550:	4b30      	ldr	r3, [pc, #192]	@ (8007614 <MX_TIM2_Init+0x120>)
 8007552:	0018      	movs	r0, r3
 8007554:	f004 fe2a 	bl	800c1ac <HAL_TIM_Base_Init>
 8007558:	1e03      	subs	r3, r0, #0
 800755a:	d001      	beq.n	8007560 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800755c:	f7ff ff28 	bl	80073b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007560:	2128      	movs	r1, #40	@ 0x28
 8007562:	187b      	adds	r3, r7, r1
 8007564:	2280      	movs	r2, #128	@ 0x80
 8007566:	0152      	lsls	r2, r2, #5
 8007568:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800756a:	187a      	adds	r2, r7, r1
 800756c:	4b29      	ldr	r3, [pc, #164]	@ (8007614 <MX_TIM2_Init+0x120>)
 800756e:	0011      	movs	r1, r2
 8007570:	0018      	movs	r0, r3
 8007572:	f005 f8c3 	bl	800c6fc <HAL_TIM_ConfigClockSource>
 8007576:	1e03      	subs	r3, r0, #0
 8007578:	d001      	beq.n	800757e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800757a:	f7ff ff19 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800757e:	4b25      	ldr	r3, [pc, #148]	@ (8007614 <MX_TIM2_Init+0x120>)
 8007580:	0018      	movs	r0, r3
 8007582:	f004 fe6b 	bl	800c25c <HAL_TIM_PWM_Init>
 8007586:	1e03      	subs	r3, r0, #0
 8007588:	d001      	beq.n	800758e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800758a:	f7ff ff11 	bl	80073b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800758e:	211c      	movs	r1, #28
 8007590:	187b      	adds	r3, r7, r1
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007596:	187b      	adds	r3, r7, r1
 8007598:	2200      	movs	r2, #0
 800759a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800759c:	187a      	adds	r2, r7, r1
 800759e:	4b1d      	ldr	r3, [pc, #116]	@ (8007614 <MX_TIM2_Init+0x120>)
 80075a0:	0011      	movs	r1, r2
 80075a2:	0018      	movs	r0, r3
 80075a4:	f005 fd9c 	bl	800d0e0 <HAL_TIMEx_MasterConfigSynchronization>
 80075a8:	1e03      	subs	r3, r0, #0
 80075aa:	d001      	beq.n	80075b0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80075ac:	f7ff ff00 	bl	80073b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075b0:	003b      	movs	r3, r7
 80075b2:	2260      	movs	r2, #96	@ 0x60
 80075b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80075b6:	003b      	movs	r3, r7
 80075b8:	2200      	movs	r2, #0
 80075ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075bc:	003b      	movs	r3, r7
 80075be:	2200      	movs	r2, #0
 80075c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075c2:	003b      	movs	r3, r7
 80075c4:	2200      	movs	r2, #0
 80075c6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075c8:	0039      	movs	r1, r7
 80075ca:	4b12      	ldr	r3, [pc, #72]	@ (8007614 <MX_TIM2_Init+0x120>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	0018      	movs	r0, r3
 80075d0:	f004 ff94 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 80075d4:	1e03      	subs	r3, r0, #0
 80075d6:	d001      	beq.n	80075dc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80075d8:	f7ff feea 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80075dc:	0039      	movs	r1, r7
 80075de:	4b0d      	ldr	r3, [pc, #52]	@ (8007614 <MX_TIM2_Init+0x120>)
 80075e0:	2204      	movs	r2, #4
 80075e2:	0018      	movs	r0, r3
 80075e4:	f004 ff8a 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 80075e8:	1e03      	subs	r3, r0, #0
 80075ea:	d001      	beq.n	80075f0 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 80075ec:	f7ff fee0 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80075f0:	0039      	movs	r1, r7
 80075f2:	4b08      	ldr	r3, [pc, #32]	@ (8007614 <MX_TIM2_Init+0x120>)
 80075f4:	2208      	movs	r2, #8
 80075f6:	0018      	movs	r0, r3
 80075f8:	f004 ff80 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d001      	beq.n	8007604 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8007600:	f7ff fed6 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007604:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <MX_TIM2_Init+0x120>)
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f8c0 	bl	800778c <HAL_TIM_MspPostInit>

}
 800760c:	46c0      	nop			@ (mov r8, r8)
 800760e:	46bd      	mov	sp, r7
 8007610:	b00e      	add	sp, #56	@ 0x38
 8007612:	bd80      	pop	{r7, pc}
 8007614:	200003c8 	.word	0x200003c8

08007618 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	@ 0x38
 800761c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800761e:	2328      	movs	r3, #40	@ 0x28
 8007620:	18fb      	adds	r3, r7, r3
 8007622:	0018      	movs	r0, r3
 8007624:	2310      	movs	r3, #16
 8007626:	001a      	movs	r2, r3
 8007628:	2100      	movs	r1, #0
 800762a:	f00f fa29 	bl	8016a80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800762e:	231c      	movs	r3, #28
 8007630:	18fb      	adds	r3, r7, r3
 8007632:	0018      	movs	r0, r3
 8007634:	230c      	movs	r3, #12
 8007636:	001a      	movs	r2, r3
 8007638:	2100      	movs	r1, #0
 800763a:	f00f fa21 	bl	8016a80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800763e:	003b      	movs	r3, r7
 8007640:	0018      	movs	r0, r3
 8007642:	231c      	movs	r3, #28
 8007644:	001a      	movs	r2, r3
 8007646:	2100      	movs	r1, #0
 8007648:	f00f fa1a 	bl	8016a80 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800764c:	4b34      	ldr	r3, [pc, #208]	@ (8007720 <MX_TIM4_Init+0x108>)
 800764e:	4a35      	ldr	r2, [pc, #212]	@ (8007724 <MX_TIM4_Init+0x10c>)
 8007650:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6400-1;
 8007652:	4b33      	ldr	r3, [pc, #204]	@ (8007720 <MX_TIM4_Init+0x108>)
 8007654:	4a34      	ldr	r2, [pc, #208]	@ (8007728 <MX_TIM4_Init+0x110>)
 8007656:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007658:	4b31      	ldr	r3, [pc, #196]	@ (8007720 <MX_TIM4_Init+0x108>)
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800765e:	4b30      	ldr	r3, [pc, #192]	@ (8007720 <MX_TIM4_Init+0x108>)
 8007660:	2264      	movs	r2, #100	@ 0x64
 8007662:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007664:	4b2e      	ldr	r3, [pc, #184]	@ (8007720 <MX_TIM4_Init+0x108>)
 8007666:	2200      	movs	r2, #0
 8007668:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800766a:	4b2d      	ldr	r3, [pc, #180]	@ (8007720 <MX_TIM4_Init+0x108>)
 800766c:	2280      	movs	r2, #128	@ 0x80
 800766e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007670:	4b2b      	ldr	r3, [pc, #172]	@ (8007720 <MX_TIM4_Init+0x108>)
 8007672:	0018      	movs	r0, r3
 8007674:	f004 fd9a 	bl	800c1ac <HAL_TIM_Base_Init>
 8007678:	1e03      	subs	r3, r0, #0
 800767a:	d001      	beq.n	8007680 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800767c:	f7ff fe98 	bl	80073b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007680:	2128      	movs	r1, #40	@ 0x28
 8007682:	187b      	adds	r3, r7, r1
 8007684:	2280      	movs	r2, #128	@ 0x80
 8007686:	0152      	lsls	r2, r2, #5
 8007688:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800768a:	187a      	adds	r2, r7, r1
 800768c:	4b24      	ldr	r3, [pc, #144]	@ (8007720 <MX_TIM4_Init+0x108>)
 800768e:	0011      	movs	r1, r2
 8007690:	0018      	movs	r0, r3
 8007692:	f005 f833 	bl	800c6fc <HAL_TIM_ConfigClockSource>
 8007696:	1e03      	subs	r3, r0, #0
 8007698:	d001      	beq.n	800769e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800769a:	f7ff fe89 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800769e:	4b20      	ldr	r3, [pc, #128]	@ (8007720 <MX_TIM4_Init+0x108>)
 80076a0:	0018      	movs	r0, r3
 80076a2:	f004 fddb 	bl	800c25c <HAL_TIM_PWM_Init>
 80076a6:	1e03      	subs	r3, r0, #0
 80076a8:	d001      	beq.n	80076ae <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80076aa:	f7ff fe81 	bl	80073b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076ae:	211c      	movs	r1, #28
 80076b0:	187b      	adds	r3, r7, r1
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076b6:	187b      	adds	r3, r7, r1
 80076b8:	2200      	movs	r2, #0
 80076ba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80076bc:	187a      	adds	r2, r7, r1
 80076be:	4b18      	ldr	r3, [pc, #96]	@ (8007720 <MX_TIM4_Init+0x108>)
 80076c0:	0011      	movs	r1, r2
 80076c2:	0018      	movs	r0, r3
 80076c4:	f005 fd0c 	bl	800d0e0 <HAL_TIMEx_MasterConfigSynchronization>
 80076c8:	1e03      	subs	r3, r0, #0
 80076ca:	d001      	beq.n	80076d0 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80076cc:	f7ff fe70 	bl	80073b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80076d0:	003b      	movs	r3, r7
 80076d2:	2260      	movs	r2, #96	@ 0x60
 80076d4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80076d6:	003b      	movs	r3, r7
 80076d8:	2200      	movs	r2, #0
 80076da:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80076dc:	003b      	movs	r3, r7
 80076de:	2200      	movs	r2, #0
 80076e0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80076e2:	003b      	movs	r3, r7
 80076e4:	2200      	movs	r2, #0
 80076e6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80076e8:	0039      	movs	r1, r7
 80076ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <MX_TIM4_Init+0x108>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	0018      	movs	r0, r3
 80076f0:	f004 ff04 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 80076f4:	1e03      	subs	r3, r0, #0
 80076f6:	d001      	beq.n	80076fc <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 80076f8:	f7ff fe5a 	bl	80073b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80076fc:	0039      	movs	r1, r7
 80076fe:	4b08      	ldr	r3, [pc, #32]	@ (8007720 <MX_TIM4_Init+0x108>)
 8007700:	2204      	movs	r2, #4
 8007702:	0018      	movs	r0, r3
 8007704:	f004 fefa 	bl	800c4fc <HAL_TIM_PWM_ConfigChannel>
 8007708:	1e03      	subs	r3, r0, #0
 800770a:	d001      	beq.n	8007710 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 800770c:	f7ff fe50 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007710:	4b03      	ldr	r3, [pc, #12]	@ (8007720 <MX_TIM4_Init+0x108>)
 8007712:	0018      	movs	r0, r3
 8007714:	f000 f83a 	bl	800778c <HAL_TIM_MspPostInit>

}
 8007718:	46c0      	nop			@ (mov r8, r8)
 800771a:	46bd      	mov	sp, r7
 800771c:	b00e      	add	sp, #56	@ 0x38
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20000414 	.word	0x20000414
 8007724:	40000800 	.word	0x40000800
 8007728:	000018ff 	.word	0x000018ff

0800772c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	2380      	movs	r3, #128	@ 0x80
 800773a:	05db      	lsls	r3, r3, #23
 800773c:	429a      	cmp	r2, r3
 800773e:	d10c      	bne.n	800775a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007740:	4b10      	ldr	r3, [pc, #64]	@ (8007784 <HAL_TIM_Base_MspInit+0x58>)
 8007742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007744:	4b0f      	ldr	r3, [pc, #60]	@ (8007784 <HAL_TIM_Base_MspInit+0x58>)
 8007746:	2101      	movs	r1, #1
 8007748:	430a      	orrs	r2, r1
 800774a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800774c:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <HAL_TIM_Base_MspInit+0x58>)
 800774e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007750:	2201      	movs	r2, #1
 8007752:	4013      	ands	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007758:	e010      	b.n	800777c <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM4)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a0a      	ldr	r2, [pc, #40]	@ (8007788 <HAL_TIM_Base_MspInit+0x5c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d10b      	bne.n	800777c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007764:	4b07      	ldr	r3, [pc, #28]	@ (8007784 <HAL_TIM_Base_MspInit+0x58>)
 8007766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007768:	4b06      	ldr	r3, [pc, #24]	@ (8007784 <HAL_TIM_Base_MspInit+0x58>)
 800776a:	2104      	movs	r1, #4
 800776c:	430a      	orrs	r2, r1
 800776e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007770:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <HAL_TIM_Base_MspInit+0x58>)
 8007772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007774:	2204      	movs	r2, #4
 8007776:	4013      	ands	r3, r2
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	68bb      	ldr	r3, [r7, #8]
}
 800777c:	46c0      	nop			@ (mov r8, r8)
 800777e:	46bd      	mov	sp, r7
 8007780:	b004      	add	sp, #16
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40021000 	.word	0x40021000
 8007788:	40000800 	.word	0x40000800

0800778c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b08d      	sub	sp, #52	@ 0x34
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007794:	241c      	movs	r4, #28
 8007796:	193b      	adds	r3, r7, r4
 8007798:	0018      	movs	r0, r3
 800779a:	2314      	movs	r3, #20
 800779c:	001a      	movs	r2, r3
 800779e:	2100      	movs	r1, #0
 80077a0:	f00f f96e 	bl	8016a80 <memset>
  if(timHandle->Instance==TIM2)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	2380      	movs	r3, #128	@ 0x80
 80077aa:	05db      	lsls	r3, r3, #23
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d168      	bne.n	8007882 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077b0:	4b49      	ldr	r3, [pc, #292]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077b4:	4b48      	ldr	r3, [pc, #288]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077b6:	2104      	movs	r1, #4
 80077b8:	430a      	orrs	r2, r1
 80077ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80077bc:	4b46      	ldr	r3, [pc, #280]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c0:	2204      	movs	r2, #4
 80077c2:	4013      	ands	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
 80077c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077c8:	4b43      	ldr	r3, [pc, #268]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077cc:	4b42      	ldr	r3, [pc, #264]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077ce:	2101      	movs	r1, #1
 80077d0:	430a      	orrs	r2, r1
 80077d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80077d4:	4b40      	ldr	r3, [pc, #256]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077d8:	2201      	movs	r2, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077e0:	4b3d      	ldr	r3, [pc, #244]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077e4:	4b3c      	ldr	r3, [pc, #240]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077e6:	2102      	movs	r1, #2
 80077e8:	430a      	orrs	r2, r1
 80077ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80077ec:	4b3a      	ldr	r3, [pc, #232]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 80077ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f0:	2202      	movs	r2, #2
 80077f2:	4013      	ands	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_LED_CURRENT_1_Pin;
 80077f8:	193b      	adds	r3, r7, r4
 80077fa:	2240      	movs	r2, #64	@ 0x40
 80077fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077fe:	193b      	adds	r3, r7, r4
 8007800:	2202      	movs	r2, #2
 8007802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007804:	193b      	adds	r3, r7, r4
 8007806:	2200      	movs	r2, #0
 8007808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800780a:	193b      	adds	r3, r7, r4
 800780c:	2200      	movs	r2, #0
 800780e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007810:	193b      	adds	r3, r7, r4
 8007812:	2202      	movs	r2, #2
 8007814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_LED_CURRENT_1_GPIO_Port, &GPIO_InitStruct);
 8007816:	193b      	adds	r3, r7, r4
 8007818:	4a30      	ldr	r2, [pc, #192]	@ (80078dc <HAL_TIM_MspPostInit+0x150>)
 800781a:	0019      	movs	r1, r3
 800781c:	0010      	movs	r0, r2
 800781e:	f001 fcd1 	bl	80091c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_LED_CURRENT_3_Pin;
 8007822:	0021      	movs	r1, r4
 8007824:	187b      	adds	r3, r7, r1
 8007826:	2280      	movs	r2, #128	@ 0x80
 8007828:	0212      	lsls	r2, r2, #8
 800782a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800782c:	000c      	movs	r4, r1
 800782e:	193b      	adds	r3, r7, r4
 8007830:	2202      	movs	r2, #2
 8007832:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007834:	193b      	adds	r3, r7, r4
 8007836:	2200      	movs	r2, #0
 8007838:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800783a:	193b      	adds	r3, r7, r4
 800783c:	2200      	movs	r2, #0
 800783e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007840:	193b      	adds	r3, r7, r4
 8007842:	2202      	movs	r2, #2
 8007844:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_LED_CURRENT_3_GPIO_Port, &GPIO_InitStruct);
 8007846:	193a      	adds	r2, r7, r4
 8007848:	23a0      	movs	r3, #160	@ 0xa0
 800784a:	05db      	lsls	r3, r3, #23
 800784c:	0011      	movs	r1, r2
 800784e:	0018      	movs	r0, r3
 8007850:	f001 fcb8 	bl	80091c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_LED_CURRENT_2_Pin;
 8007854:	0021      	movs	r1, r4
 8007856:	187b      	adds	r3, r7, r1
 8007858:	2208      	movs	r2, #8
 800785a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800785c:	187b      	adds	r3, r7, r1
 800785e:	2202      	movs	r2, #2
 8007860:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007862:	187b      	adds	r3, r7, r1
 8007864:	2200      	movs	r2, #0
 8007866:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007868:	187b      	adds	r3, r7, r1
 800786a:	2200      	movs	r2, #0
 800786c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800786e:	187b      	adds	r3, r7, r1
 8007870:	2202      	movs	r2, #2
 8007872:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_LED_CURRENT_2_GPIO_Port, &GPIO_InitStruct);
 8007874:	187b      	adds	r3, r7, r1
 8007876:	4a1a      	ldr	r2, [pc, #104]	@ (80078e0 <HAL_TIM_MspPostInit+0x154>)
 8007878:	0019      	movs	r1, r3
 800787a:	0010      	movs	r0, r2
 800787c:	f001 fca2 	bl	80091c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007880:	e026      	b.n	80078d0 <HAL_TIM_MspPostInit+0x144>
  else if(timHandle->Instance==TIM4)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a17      	ldr	r2, [pc, #92]	@ (80078e4 <HAL_TIM_MspPostInit+0x158>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d121      	bne.n	80078d0 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800788c:	4b12      	ldr	r3, [pc, #72]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 800788e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007890:	4b11      	ldr	r3, [pc, #68]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 8007892:	2102      	movs	r1, #2
 8007894:	430a      	orrs	r2, r1
 8007896:	635a      	str	r2, [r3, #52]	@ 0x34
 8007898:	4b0f      	ldr	r3, [pc, #60]	@ (80078d8 <HAL_TIM_MspPostInit+0x14c>)
 800789a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789c:	2202      	movs	r2, #2
 800789e:	4013      	ands	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_LED_VOLTAGE_FEEDBACK_Pin|PWM_LED_CURRENT_4_Pin;
 80078a4:	211c      	movs	r1, #28
 80078a6:	187b      	adds	r3, r7, r1
 80078a8:	22c0      	movs	r2, #192	@ 0xc0
 80078aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ac:	187b      	adds	r3, r7, r1
 80078ae:	2202      	movs	r2, #2
 80078b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b2:	187b      	adds	r3, r7, r1
 80078b4:	2200      	movs	r2, #0
 80078b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b8:	187b      	adds	r3, r7, r1
 80078ba:	2200      	movs	r2, #0
 80078bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM4;
 80078be:	187b      	adds	r3, r7, r1
 80078c0:	2209      	movs	r2, #9
 80078c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c4:	187b      	adds	r3, r7, r1
 80078c6:	4a06      	ldr	r2, [pc, #24]	@ (80078e0 <HAL_TIM_MspPostInit+0x154>)
 80078c8:	0019      	movs	r1, r3
 80078ca:	0010      	movs	r0, r2
 80078cc:	f001 fc7a 	bl	80091c4 <HAL_GPIO_Init>
}
 80078d0:	46c0      	nop			@ (mov r8, r8)
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b00d      	add	sp, #52	@ 0x34
 80078d6:	bd90      	pop	{r4, r7, pc}
 80078d8:	40021000 	.word	0x40021000
 80078dc:	50000800 	.word	0x50000800
 80078e0:	50000400 	.word	0x50000400
 80078e4:	40000800 	.word	0x40000800

080078e8 <__NVIC_EnableIRQ>:
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	0002      	movs	r2, r0
 80078f0:	1dfb      	adds	r3, r7, #7
 80078f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80078f4:	1dfb      	adds	r3, r7, #7
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80078fa:	d809      	bhi.n	8007910 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078fc:	1dfb      	adds	r3, r7, #7
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	001a      	movs	r2, r3
 8007902:	231f      	movs	r3, #31
 8007904:	401a      	ands	r2, r3
 8007906:	4b04      	ldr	r3, [pc, #16]	@ (8007918 <__NVIC_EnableIRQ+0x30>)
 8007908:	2101      	movs	r1, #1
 800790a:	4091      	lsls	r1, r2
 800790c:	000a      	movs	r2, r1
 800790e:	601a      	str	r2, [r3, #0]
}
 8007910:	46c0      	nop			@ (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	b002      	add	sp, #8
 8007916:	bd80      	pop	{r7, pc}
 8007918:	e000e100 	.word	0xe000e100

0800791c <__NVIC_SetPriority>:
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	0002      	movs	r2, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	1dfb      	adds	r3, r7, #7
 8007928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800792a:	1dfb      	adds	r3, r7, #7
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007930:	d828      	bhi.n	8007984 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007932:	4a2f      	ldr	r2, [pc, #188]	@ (80079f0 <__NVIC_SetPriority+0xd4>)
 8007934:	1dfb      	adds	r3, r7, #7
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	b25b      	sxtb	r3, r3
 800793a:	089b      	lsrs	r3, r3, #2
 800793c:	33c0      	adds	r3, #192	@ 0xc0
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	589b      	ldr	r3, [r3, r2]
 8007942:	1dfa      	adds	r2, r7, #7
 8007944:	7812      	ldrb	r2, [r2, #0]
 8007946:	0011      	movs	r1, r2
 8007948:	2203      	movs	r2, #3
 800794a:	400a      	ands	r2, r1
 800794c:	00d2      	lsls	r2, r2, #3
 800794e:	21ff      	movs	r1, #255	@ 0xff
 8007950:	4091      	lsls	r1, r2
 8007952:	000a      	movs	r2, r1
 8007954:	43d2      	mvns	r2, r2
 8007956:	401a      	ands	r2, r3
 8007958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	019b      	lsls	r3, r3, #6
 800795e:	22ff      	movs	r2, #255	@ 0xff
 8007960:	401a      	ands	r2, r3
 8007962:	1dfb      	adds	r3, r7, #7
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	0018      	movs	r0, r3
 8007968:	2303      	movs	r3, #3
 800796a:	4003      	ands	r3, r0
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007970:	481f      	ldr	r0, [pc, #124]	@ (80079f0 <__NVIC_SetPriority+0xd4>)
 8007972:	1dfb      	adds	r3, r7, #7
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b25b      	sxtb	r3, r3
 8007978:	089b      	lsrs	r3, r3, #2
 800797a:	430a      	orrs	r2, r1
 800797c:	33c0      	adds	r3, #192	@ 0xc0
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	501a      	str	r2, [r3, r0]
}
 8007982:	e031      	b.n	80079e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007984:	4a1b      	ldr	r2, [pc, #108]	@ (80079f4 <__NVIC_SetPriority+0xd8>)
 8007986:	1dfb      	adds	r3, r7, #7
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	0019      	movs	r1, r3
 800798c:	230f      	movs	r3, #15
 800798e:	400b      	ands	r3, r1
 8007990:	3b08      	subs	r3, #8
 8007992:	089b      	lsrs	r3, r3, #2
 8007994:	3306      	adds	r3, #6
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	18d3      	adds	r3, r2, r3
 800799a:	3304      	adds	r3, #4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	1dfa      	adds	r2, r7, #7
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	0011      	movs	r1, r2
 80079a4:	2203      	movs	r2, #3
 80079a6:	400a      	ands	r2, r1
 80079a8:	00d2      	lsls	r2, r2, #3
 80079aa:	21ff      	movs	r1, #255	@ 0xff
 80079ac:	4091      	lsls	r1, r2
 80079ae:	000a      	movs	r2, r1
 80079b0:	43d2      	mvns	r2, r2
 80079b2:	401a      	ands	r2, r3
 80079b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	019b      	lsls	r3, r3, #6
 80079ba:	22ff      	movs	r2, #255	@ 0xff
 80079bc:	401a      	ands	r2, r3
 80079be:	1dfb      	adds	r3, r7, #7
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	0018      	movs	r0, r3
 80079c4:	2303      	movs	r3, #3
 80079c6:	4003      	ands	r3, r0
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079cc:	4809      	ldr	r0, [pc, #36]	@ (80079f4 <__NVIC_SetPriority+0xd8>)
 80079ce:	1dfb      	adds	r3, r7, #7
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	001c      	movs	r4, r3
 80079d4:	230f      	movs	r3, #15
 80079d6:	4023      	ands	r3, r4
 80079d8:	3b08      	subs	r3, #8
 80079da:	089b      	lsrs	r3, r3, #2
 80079dc:	430a      	orrs	r2, r1
 80079de:	3306      	adds	r3, #6
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	18c3      	adds	r3, r0, r3
 80079e4:	3304      	adds	r3, #4
 80079e6:	601a      	str	r2, [r3, #0]
}
 80079e8:	46c0      	nop			@ (mov r8, r8)
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b003      	add	sp, #12
 80079ee:	bd90      	pop	{r4, r7, pc}
 80079f0:	e000e100 	.word	0xe000e100
 80079f4:	e000ed00 	.word	0xe000ed00

080079f8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8007a08:	4a0c      	ldr	r2, [pc, #48]	@ (8007a3c <LL_DMA_SetDataTransferDirection+0x44>)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	18d3      	adds	r3, r2, r3
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	001a      	movs	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	18d3      	adds	r3, r2, r3
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a09      	ldr	r2, [pc, #36]	@ (8007a40 <LL_DMA_SetDataTransferDirection+0x48>)
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	0019      	movs	r1, r3
 8007a1e:	4a07      	ldr	r2, [pc, #28]	@ (8007a3c <LL_DMA_SetDataTransferDirection+0x44>)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	18d3      	adds	r3, r2, r3
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	001a      	movs	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	18d3      	adds	r3, r2, r3
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8007a32:	46c0      	nop			@ (mov r8, r8)
 8007a34:	46bd      	mov	sp, r7
 8007a36:	b006      	add	sp, #24
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	46c0      	nop			@ (mov r8, r8)
 8007a3c:	08017354 	.word	0x08017354
 8007a40:	ffffbfef 	.word	0xffffbfef

08007a44 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8007a54:	4a0c      	ldr	r2, [pc, #48]	@ (8007a88 <LL_DMA_SetMode+0x44>)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	18d3      	adds	r3, r2, r3
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	001a      	movs	r2, r3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	18d3      	adds	r3, r2, r3
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2220      	movs	r2, #32
 8007a66:	4393      	bics	r3, r2
 8007a68:	0019      	movs	r1, r3
 8007a6a:	4a07      	ldr	r2, [pc, #28]	@ (8007a88 <LL_DMA_SetMode+0x44>)
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	18d3      	adds	r3, r2, r3
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	001a      	movs	r2, r3
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	18d3      	adds	r3, r2, r3
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	601a      	str	r2, [r3, #0]
             Mode);
}
 8007a7e:	46c0      	nop			@ (mov r8, r8)
 8007a80:	46bd      	mov	sp, r7
 8007a82:	b006      	add	sp, #24
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	46c0      	nop			@ (mov r8, r8)
 8007a88:	08017354 	.word	0x08017354

08007a8c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8007a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad0 <LL_DMA_SetPeriphIncMode+0x44>)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	18d3      	adds	r3, r2, r3
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	001a      	movs	r2, r3
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	18d3      	adds	r3, r2, r3
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2240      	movs	r2, #64	@ 0x40
 8007aae:	4393      	bics	r3, r2
 8007ab0:	0019      	movs	r1, r3
 8007ab2:	4a07      	ldr	r2, [pc, #28]	@ (8007ad0 <LL_DMA_SetPeriphIncMode+0x44>)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	18d3      	adds	r3, r2, r3
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	001a      	movs	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	18d3      	adds	r3, r2, r3
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8007ac6:	46c0      	nop			@ (mov r8, r8)
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	b006      	add	sp, #24
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	46c0      	nop			@ (mov r8, r8)
 8007ad0:	08017354 	.word	0x08017354

08007ad4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8007ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8007b18 <LL_DMA_SetMemoryIncMode+0x44>)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	18d3      	adds	r3, r2, r3
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	001a      	movs	r2, r3
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	18d3      	adds	r3, r2, r3
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2280      	movs	r2, #128	@ 0x80
 8007af6:	4393      	bics	r3, r2
 8007af8:	0019      	movs	r1, r3
 8007afa:	4a07      	ldr	r2, [pc, #28]	@ (8007b18 <LL_DMA_SetMemoryIncMode+0x44>)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	18d3      	adds	r3, r2, r3
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	001a      	movs	r2, r3
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	18d3      	adds	r3, r2, r3
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8007b0e:	46c0      	nop			@ (mov r8, r8)
 8007b10:	46bd      	mov	sp, r7
 8007b12:	b006      	add	sp, #24
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	46c0      	nop			@ (mov r8, r8)
 8007b18:	08017354 	.word	0x08017354

08007b1c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8007b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8007b60 <LL_DMA_SetPeriphSize+0x44>)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	18d3      	adds	r3, r2, r3
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	001a      	movs	r2, r3
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	18d3      	adds	r3, r2, r3
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a09      	ldr	r2, [pc, #36]	@ (8007b64 <LL_DMA_SetPeriphSize+0x48>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	0019      	movs	r1, r3
 8007b42:	4a07      	ldr	r2, [pc, #28]	@ (8007b60 <LL_DMA_SetPeriphSize+0x44>)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	18d3      	adds	r3, r2, r3
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	001a      	movs	r2, r3
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	18d3      	adds	r3, r2, r3
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b006      	add	sp, #24
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	46c0      	nop			@ (mov r8, r8)
 8007b60:	08017354 	.word	0x08017354
 8007b64:	fffffcff 	.word	0xfffffcff

08007b68 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8007b78:	4a0c      	ldr	r2, [pc, #48]	@ (8007bac <LL_DMA_SetMemorySize+0x44>)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	18d3      	adds	r3, r2, r3
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	001a      	movs	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	18d3      	adds	r3, r2, r3
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a09      	ldr	r2, [pc, #36]	@ (8007bb0 <LL_DMA_SetMemorySize+0x48>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	0019      	movs	r1, r3
 8007b8e:	4a07      	ldr	r2, [pc, #28]	@ (8007bac <LL_DMA_SetMemorySize+0x44>)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	18d3      	adds	r3, r2, r3
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	001a      	movs	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	18d3      	adds	r3, r2, r3
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8007ba2:	46c0      	nop			@ (mov r8, r8)
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b006      	add	sp, #24
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	46c0      	nop			@ (mov r8, r8)
 8007bac:	08017354 	.word	0x08017354
 8007bb0:	fffff3ff 	.word	0xfffff3ff

08007bb4 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8007bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8007bf8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	18d3      	adds	r3, r2, r3
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	001a      	movs	r2, r3
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	18d3      	adds	r3, r2, r3
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a09      	ldr	r2, [pc, #36]	@ (8007bfc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	0019      	movs	r1, r3
 8007bda:	4a07      	ldr	r2, [pc, #28]	@ (8007bf8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	18d3      	adds	r3, r2, r3
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	001a      	movs	r2, r3
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	18d3      	adds	r3, r2, r3
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	601a      	str	r2, [r3, #0]
             Priority);
}
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b006      	add	sp, #24
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	08017354 	.word	0x08017354
 8007bfc:	ffffcfff 	.word	0xffffcfff

08007c00 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	0a9b      	lsrs	r3, r3, #10
 8007c10:	4a0f      	ldr	r2, [pc, #60]	@ (8007c50 <LL_DMA_SetPeriphRequest+0x50>)
 8007c12:	405a      	eors	r2, r3
 8007c14:	0013      	movs	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	18d3      	adds	r3, r2, r3
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4a0b      	ldr	r2, [pc, #44]	@ (8007c54 <LL_DMA_SetPeriphRequest+0x54>)
 8007c26:	4694      	mov	ip, r2
 8007c28:	4463      	add	r3, ip
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	227f      	movs	r2, #127	@ 0x7f
 8007c2e:	4393      	bics	r3, r2
 8007c30:	0019      	movs	r1, r3
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	18d3      	adds	r3, r2, r3
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4a06      	ldr	r2, [pc, #24]	@ (8007c54 <LL_DMA_SetPeriphRequest+0x54>)
 8007c3c:	4694      	mov	ip, r2
 8007c3e:	4463      	add	r3, ip
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	601a      	str	r2, [r3, #0]
}
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b006      	add	sp, #24
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	00100080 	.word	0x00100080
 8007c54:	40020800 	.word	0x40020800

08007c58 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8007c60:	4b07      	ldr	r3, [pc, #28]	@ (8007c80 <LL_APB1_GRP1_EnableClock+0x28>)
 8007c62:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007c64:	4b06      	ldr	r3, [pc, #24]	@ (8007c80 <LL_APB1_GRP1_EnableClock+0x28>)
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8007c6c:	4b04      	ldr	r3, [pc, #16]	@ (8007c80 <LL_APB1_GRP1_EnableClock+0x28>)
 8007c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	4013      	ands	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	46c0      	nop			@ (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b004      	add	sp, #16
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	40021000 	.word	0x40021000

08007c84 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8007c8c:	4b07      	ldr	r3, [pc, #28]	@ (8007cac <LL_IOP_GRP1_EnableClock+0x28>)
 8007c8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007c90:	4b06      	ldr	r3, [pc, #24]	@ (8007cac <LL_IOP_GRP1_EnableClock+0x28>)
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8007c98:	4b04      	ldr	r3, [pc, #16]	@ (8007cac <LL_IOP_GRP1_EnableClock+0x28>)
 8007c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
}
 8007ca4:	46c0      	nop			@ (mov r8, r8)
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	b004      	add	sp, #16
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40021000 	.word	0x40021000

08007cb0 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cb6:	003b      	movs	r3, r7
 8007cb8:	0018      	movs	r0, r3
 8007cba:	2318      	movs	r3, #24
 8007cbc:	001a      	movs	r2, r3
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	f00e fede 	bl	8016a80 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8007cc4:	2380      	movs	r3, #128	@ 0x80
 8007cc6:	049b      	lsls	r3, r3, #18
 8007cc8:	0018      	movs	r0, r3
 8007cca:	f7ff ffc5 	bl	8007c58 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8007cce:	2002      	movs	r0, #2
 8007cd0:	f7ff ffd8 	bl	8007c84 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f7ff ffd5 	bl	8007c84 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8007cda:	003b      	movs	r3, r7
 8007cdc:	2280      	movs	r2, #128	@ 0x80
 8007cde:	0212      	lsls	r2, r2, #8
 8007ce0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007ce2:	003b      	movs	r3, r7
 8007ce4:	2203      	movs	r2, #3
 8007ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ce8:	003b      	movs	r3, r7
 8007cea:	2200      	movs	r2, #0
 8007cec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cee:	003b      	movs	r3, r7
 8007cf0:	4a40      	ldr	r2, [pc, #256]	@ (8007df4 <MX_UCPD1_Init+0x144>)
 8007cf2:	0019      	movs	r1, r3
 8007cf4:	0010      	movs	r0, r2
 8007cf6:	f006 fb9b 	bl	800e430 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8007cfa:	003b      	movs	r3, r7
 8007cfc:	2280      	movs	r2, #128	@ 0x80
 8007cfe:	0052      	lsls	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007d02:	003b      	movs	r3, r7
 8007d04:	2203      	movs	r2, #3
 8007d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007d08:	003b      	movs	r3, r7
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d0e:	003a      	movs	r2, r7
 8007d10:	23a0      	movs	r3, #160	@ 0xa0
 8007d12:	05db      	lsls	r3, r3, #23
 8007d14:	0011      	movs	r1, r2
 8007d16:	0018      	movs	r0, r3
 8007d18:	f006 fb8a 	bl	800e430 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD1_RX);
 8007d1c:	4b36      	ldr	r3, [pc, #216]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d1e:	223a      	movs	r2, #58	@ 0x3a
 8007d20:	2102      	movs	r1, #2
 8007d22:	0018      	movs	r0, r3
 8007d24:	f7ff ff6c 	bl	8007c00 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007d28:	4b33      	ldr	r3, [pc, #204]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2102      	movs	r1, #2
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f7ff fe62 	bl	80079f8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8007d34:	4b30      	ldr	r3, [pc, #192]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	2102      	movs	r1, #2
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f7ff ff3a 	bl	8007bb4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8007d40:	4b2d      	ldr	r3, [pc, #180]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	2102      	movs	r1, #2
 8007d46:	0018      	movs	r0, r3
 8007d48:	f7ff fe7c 	bl	8007a44 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8007d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2102      	movs	r1, #2
 8007d52:	0018      	movs	r0, r3
 8007d54:	f7ff fe9a 	bl	8007a8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8007d58:	4b27      	ldr	r3, [pc, #156]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d5a:	2280      	movs	r2, #128	@ 0x80
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f7ff feb8 	bl	8007ad4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8007d64:	4b24      	ldr	r3, [pc, #144]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	2102      	movs	r1, #2
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f7ff fed6 	bl	8007b1c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8007d70:	4b21      	ldr	r3, [pc, #132]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	2102      	movs	r1, #2
 8007d76:	0018      	movs	r0, r3
 8007d78:	f7ff fef6 	bl	8007b68 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD1_TX);
 8007d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d7e:	223b      	movs	r2, #59	@ 0x3b
 8007d80:	2103      	movs	r1, #3
 8007d82:	0018      	movs	r0, r3
 8007d84:	f7ff ff3c 	bl	8007c00 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007d88:	4b1b      	ldr	r3, [pc, #108]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d8a:	2210      	movs	r2, #16
 8007d8c:	2103      	movs	r1, #3
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f7ff fe32 	bl	80079f8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8007d94:	4b18      	ldr	r3, [pc, #96]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	2103      	movs	r1, #3
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f7ff ff0a 	bl	8007bb4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8007da0:	4b15      	ldr	r3, [pc, #84]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	2103      	movs	r1, #3
 8007da6:	0018      	movs	r0, r3
 8007da8:	f7ff fe4c 	bl	8007a44 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8007dac:	4b12      	ldr	r3, [pc, #72]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	2103      	movs	r1, #3
 8007db2:	0018      	movs	r0, r3
 8007db4:	f7ff fe6a 	bl	8007a8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8007db8:	4b0f      	ldr	r3, [pc, #60]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007dba:	2280      	movs	r2, #128	@ 0x80
 8007dbc:	2103      	movs	r1, #3
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	f7ff fe88 	bl	8007ad4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2103      	movs	r1, #3
 8007dca:	0018      	movs	r0, r3
 8007dcc:	f7ff fea6 	bl	8007b1c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8007dd0:	4b09      	ldr	r3, [pc, #36]	@ (8007df8 <MX_UCPD1_Init+0x148>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2103      	movs	r1, #3
 8007dd6:	0018      	movs	r0, r3
 8007dd8:	f7ff fec6 	bl	8007b68 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 8007ddc:	2100      	movs	r1, #0
 8007dde:	2008      	movs	r0, #8
 8007de0:	f7ff fd9c 	bl	800791c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8007de4:	2008      	movs	r0, #8
 8007de6:	f7ff fd7f 	bl	80078e8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8007dea:	46c0      	nop			@ (mov r8, r8)
 8007dec:	46bd      	mov	sp, r7
 8007dee:	b006      	add	sp, #24
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	46c0      	nop			@ (mov r8, r8)
 8007df4:	50000400 	.word	0x50000400
 8007df8:	40020000 	.word	0x40020000

08007dfc <MX_UCPD2_Init>:
/* UCPD2 init function */
void MX_UCPD2_Init(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD2_Init 0 */

  /* USER CODE END UCPD2_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e02:	003b      	movs	r3, r7
 8007e04:	0018      	movs	r0, r3
 8007e06:	2318      	movs	r3, #24
 8007e08:	001a      	movs	r2, r3
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	f00e fe38 	bl	8016a80 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8007e10:	2380      	movs	r3, #128	@ 0x80
 8007e12:	04db      	lsls	r3, r3, #19
 8007e14:	0018      	movs	r0, r3
 8007e16:	f7ff ff1f 	bl	8007c58 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 8007e1a:	2008      	movs	r0, #8
 8007e1c:	f7ff ff32 	bl	8007c84 <LL_IOP_GRP1_EnableClock>
  /**UCPD2 GPIO Configuration
  PD0   ------> UCPD2_CC1
  PD2   ------> UCPD2_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8007e20:	003b      	movs	r3, r7
 8007e22:	2201      	movs	r2, #1
 8007e24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007e26:	003b      	movs	r3, r7
 8007e28:	2203      	movs	r2, #3
 8007e2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e2c:	003b      	movs	r3, r7
 8007e2e:	2200      	movs	r2, #0
 8007e30:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e32:	003b      	movs	r3, r7
 8007e34:	4a3f      	ldr	r2, [pc, #252]	@ (8007f34 <MX_UCPD2_Init+0x138>)
 8007e36:	0019      	movs	r1, r3
 8007e38:	0010      	movs	r0, r2
 8007e3a:	f006 faf9 	bl	800e430 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8007e3e:	003b      	movs	r3, r7
 8007e40:	2204      	movs	r2, #4
 8007e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007e44:	003b      	movs	r3, r7
 8007e46:	2203      	movs	r2, #3
 8007e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e4a:	003b      	movs	r3, r7
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e50:	003b      	movs	r3, r7
 8007e52:	4a38      	ldr	r2, [pc, #224]	@ (8007f34 <MX_UCPD2_Init+0x138>)
 8007e54:	0019      	movs	r1, r3
 8007e56:	0010      	movs	r0, r2
 8007e58:	f006 faea 	bl	800e430 <LL_GPIO_Init>

  /* UCPD2 DMA Init */

  /* UCPD2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD2_RX);
 8007e5c:	4b36      	ldr	r3, [pc, #216]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007e5e:	223c      	movs	r2, #60	@ 0x3c
 8007e60:	2100      	movs	r1, #0
 8007e62:	0018      	movs	r0, r3
 8007e64:	f7ff fecc 	bl	8007c00 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007e68:	4b33      	ldr	r3, [pc, #204]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	0018      	movs	r0, r3
 8007e70:	f7ff fdc2 	bl	80079f8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8007e74:	4b30      	ldr	r3, [pc, #192]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f7ff fe9a 	bl	8007bb4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8007e80:	4b2d      	ldr	r3, [pc, #180]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	0018      	movs	r0, r3
 8007e88:	f7ff fddc 	bl	8007a44 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8007e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	0018      	movs	r0, r3
 8007e94:	f7ff fdfa 	bl	8007a8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8007e98:	4b27      	ldr	r3, [pc, #156]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007e9a:	2280      	movs	r2, #128	@ 0x80
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f7ff fe18 	bl	8007ad4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8007ea4:	4b24      	ldr	r3, [pc, #144]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f7ff fe36 	bl	8007b1c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8007eb0:	4b21      	ldr	r3, [pc, #132]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	f7ff fe56 	bl	8007b68 <LL_DMA_SetMemorySize>

  /* UCPD2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD2_TX);
 8007ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007ebe:	223d      	movs	r2, #61	@ 0x3d
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f7ff fe9c 	bl	8007c00 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007eca:	2210      	movs	r2, #16
 8007ecc:	2101      	movs	r1, #1
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f7ff fd92 	bl	80079f8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8007ed4:	4b18      	ldr	r3, [pc, #96]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2101      	movs	r1, #1
 8007eda:	0018      	movs	r0, r3
 8007edc:	f7ff fe6a 	bl	8007bb4 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8007ee0:	4b15      	ldr	r3, [pc, #84]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f7ff fdac 	bl	8007a44 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8007eec:	4b12      	ldr	r3, [pc, #72]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f7ff fdca 	bl	8007a8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007efa:	2280      	movs	r2, #128	@ 0x80
 8007efc:	2101      	movs	r1, #1
 8007efe:	0018      	movs	r0, r3
 8007f00:	f7ff fde8 	bl	8007ad4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8007f04:	4b0c      	ldr	r3, [pc, #48]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	2101      	movs	r1, #1
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f7ff fe06 	bl	8007b1c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8007f10:	4b09      	ldr	r3, [pc, #36]	@ (8007f38 <MX_UCPD2_Init+0x13c>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	2101      	movs	r1, #1
 8007f16:	0018      	movs	r0, r3
 8007f18:	f7ff fe26 	bl	8007b68 <LL_DMA_SetMemorySize>

  /* UCPD2 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	2008      	movs	r0, #8
 8007f20:	f7ff fcfc 	bl	800791c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8007f24:	2008      	movs	r0, #8
 8007f26:	f7ff fcdf 	bl	80078e8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD2_Init 1 */
  /* USER CODE BEGIN UCPD2_Init 2 */

  /* USER CODE END UCPD2_Init 2 */

}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b006      	add	sp, #24
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	46c0      	nop			@ (mov r8, r8)
 8007f34:	50000c00 	.word	0x50000c00
 8007f38:	40020000 	.word	0x40020000

08007f3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007f40:	4b23      	ldr	r3, [pc, #140]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f42:	4a24      	ldr	r2, [pc, #144]	@ (8007fd4 <MX_USART3_UART_Init+0x98>)
 8007f44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007f46:	4b22      	ldr	r3, [pc, #136]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f48:	22e1      	movs	r2, #225	@ 0xe1
 8007f4a:	0252      	lsls	r2, r2, #9
 8007f4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007f4e:	4b20      	ldr	r3, [pc, #128]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007f54:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007f60:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f62:	220c      	movs	r2, #12
 8007f64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f66:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f6c:	4b18      	ldr	r3, [pc, #96]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f72:	4b17      	ldr	r3, [pc, #92]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f78:	4b15      	ldr	r3, [pc, #84]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f7e:	4b14      	ldr	r3, [pc, #80]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007f84:	4b12      	ldr	r3, [pc, #72]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f86:	0018      	movs	r0, r3
 8007f88:	f005 f920 	bl	800d1cc <HAL_UART_Init>
 8007f8c:	1e03      	subs	r3, r0, #0
 8007f8e:	d001      	beq.n	8007f94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007f90:	f7ff fa0e 	bl	80073b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f94:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007f96:	2100      	movs	r1, #0
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f005 ffa3 	bl	800dee4 <HAL_UARTEx_SetTxFifoThreshold>
 8007f9e:	1e03      	subs	r3, r0, #0
 8007fa0:	d001      	beq.n	8007fa6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8007fa2:	f7ff fa05 	bl	80073b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007fa8:	2100      	movs	r1, #0
 8007faa:	0018      	movs	r0, r3
 8007fac:	f005 ffda 	bl	800df64 <HAL_UARTEx_SetRxFifoThreshold>
 8007fb0:	1e03      	subs	r3, r0, #0
 8007fb2:	d001      	beq.n	8007fb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007fb4:	f7ff f9fc 	bl	80073b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007fb8:	4b05      	ldr	r3, [pc, #20]	@ (8007fd0 <MX_USART3_UART_Init+0x94>)
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f005 ff58 	bl	800de70 <HAL_UARTEx_DisableFifoMode>
 8007fc0:	1e03      	subs	r3, r0, #0
 8007fc2:	d001      	beq.n	8007fc8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007fc4:	f7ff f9f4 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007fc8:	46c0      	nop			@ (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	46c0      	nop			@ (mov r8, r8)
 8007fd0:	20000460 	.word	0x20000460
 8007fd4:	40004800 	.word	0x40004800

08007fd8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8007fdc:	4b17      	ldr	r3, [pc, #92]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8007fde:	4a18      	ldr	r2, [pc, #96]	@ (8008040 <MX_USART6_UART_Init+0x68>)
 8007fe0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8007fe2:	4b16      	ldr	r3, [pc, #88]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8007fe4:	22e1      	movs	r2, #225	@ 0xe1
 8007fe6:	0252      	lsls	r2, r2, #9
 8007fe8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007fea:	4b14      	ldr	r3, [pc, #80]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007ff0:	4b12      	ldr	r3, [pc, #72]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007ff6:	4b11      	ldr	r3, [pc, #68]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8007ffe:	220c      	movs	r2, #12
 8008000:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008002:	4b0e      	ldr	r3, [pc, #56]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8008004:	2200      	movs	r2, #0
 8008006:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008008:	4b0c      	ldr	r3, [pc, #48]	@ (800803c <MX_USART6_UART_Init+0x64>)
 800800a:	2200      	movs	r2, #0
 800800c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800800e:	4b0b      	ldr	r3, [pc, #44]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8008010:	2200      	movs	r2, #0
 8008012:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008014:	4b09      	ldr	r3, [pc, #36]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8008016:	2200      	movs	r2, #0
 8008018:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800801a:	4b08      	ldr	r3, [pc, #32]	@ (800803c <MX_USART6_UART_Init+0x64>)
 800801c:	2200      	movs	r2, #0
 800801e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8008020:	4806      	ldr	r0, [pc, #24]	@ (800803c <MX_USART6_UART_Init+0x64>)
 8008022:	2300      	movs	r3, #0
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	f005 feb0 	bl	800dd8c <HAL_RS485Ex_Init>
 800802c:	1e03      	subs	r3, r0, #0
 800802e:	d001      	beq.n	8008034 <MX_USART6_UART_Init+0x5c>
  {
    Error_Handler();
 8008030:	f7ff f9be 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008034:	46c0      	nop			@ (mov r8, r8)
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	46c0      	nop			@ (mov r8, r8)
 800803c:	200004f4 	.word	0x200004f4
 8008040:	40013c00 	.word	0x40013c00

08008044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008044:	b590      	push	{r4, r7, lr}
 8008046:	b0a1      	sub	sp, #132	@ 0x84
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800804c:	236c      	movs	r3, #108	@ 0x6c
 800804e:	18fb      	adds	r3, r7, r3
 8008050:	0018      	movs	r0, r3
 8008052:	2314      	movs	r3, #20
 8008054:	001a      	movs	r2, r3
 8008056:	2100      	movs	r1, #0
 8008058:	f00e fd12 	bl	8016a80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800805c:	241c      	movs	r4, #28
 800805e:	193b      	adds	r3, r7, r4
 8008060:	0018      	movs	r0, r3
 8008062:	2350      	movs	r3, #80	@ 0x50
 8008064:	001a      	movs	r2, r3
 8008066:	2100      	movs	r1, #0
 8008068:	f00e fd0a 	bl	8016a80 <memset>
  if(uartHandle->Instance==USART3)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a4f      	ldr	r2, [pc, #316]	@ (80081b0 <HAL_UART_MspInit+0x16c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d13f      	bne.n	80080f6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008076:	193b      	adds	r3, r7, r4
 8008078:	2204      	movs	r2, #4
 800807a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800807c:	193b      	adds	r3, r7, r4
 800807e:	2200      	movs	r2, #0
 8008080:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008082:	193b      	adds	r3, r7, r4
 8008084:	0018      	movs	r0, r3
 8008086:	f003 fe35 	bl	800bcf4 <HAL_RCCEx_PeriphCLKConfig>
 800808a:	1e03      	subs	r3, r0, #0
 800808c:	d001      	beq.n	8008092 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800808e:	f7ff f98f 	bl	80073b0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008092:	4b48      	ldr	r3, [pc, #288]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 8008094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008096:	4b47      	ldr	r3, [pc, #284]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 8008098:	2180      	movs	r1, #128	@ 0x80
 800809a:	02c9      	lsls	r1, r1, #11
 800809c:	430a      	orrs	r2, r1
 800809e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80080a0:	4b44      	ldr	r3, [pc, #272]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 80080a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	02db      	lsls	r3, r3, #11
 80080a8:	4013      	ands	r3, r2
 80080aa:	61bb      	str	r3, [r7, #24]
 80080ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080ae:	4b41      	ldr	r3, [pc, #260]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 80080b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080b2:	4b40      	ldr	r3, [pc, #256]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 80080b4:	2104      	movs	r1, #4
 80080b6:	430a      	orrs	r2, r1
 80080b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80080ba:	4b3e      	ldr	r3, [pc, #248]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 80080bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080be:	2204      	movs	r2, #4
 80080c0:	4013      	ands	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = BOOTLOADER_TX_Pin|BOOTLOADER_RX_Pin;
 80080c6:	216c      	movs	r1, #108	@ 0x6c
 80080c8:	187b      	adds	r3, r7, r1
 80080ca:	22c0      	movs	r2, #192	@ 0xc0
 80080cc:	0112      	lsls	r2, r2, #4
 80080ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d0:	187b      	adds	r3, r7, r1
 80080d2:	2202      	movs	r2, #2
 80080d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d6:	187b      	adds	r3, r7, r1
 80080d8:	2200      	movs	r2, #0
 80080da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	2200      	movs	r2, #0
 80080e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80080e2:	187b      	adds	r3, r7, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080e8:	187b      	adds	r3, r7, r1
 80080ea:	4a33      	ldr	r2, [pc, #204]	@ (80081b8 <HAL_UART_MspInit+0x174>)
 80080ec:	0019      	movs	r1, r3
 80080ee:	0010      	movs	r0, r2
 80080f0:	f001 f868 	bl	80091c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80080f4:	e057      	b.n	80081a6 <HAL_UART_MspInit+0x162>
  else if(uartHandle->Instance==USART6)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a30      	ldr	r2, [pc, #192]	@ (80081bc <HAL_UART_MspInit+0x178>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d152      	bne.n	80081a6 <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008100:	4b2c      	ldr	r3, [pc, #176]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 8008102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008104:	4b2b      	ldr	r3, [pc, #172]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 8008106:	2180      	movs	r1, #128	@ 0x80
 8008108:	0089      	lsls	r1, r1, #2
 800810a:	430a      	orrs	r2, r1
 800810c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800810e:	4b29      	ldr	r3, [pc, #164]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 8008110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008112:	2380      	movs	r3, #128	@ 0x80
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4013      	ands	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800811c:	4b25      	ldr	r3, [pc, #148]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 800811e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008120:	4b24      	ldr	r3, [pc, #144]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 8008122:	2104      	movs	r1, #4
 8008124:	430a      	orrs	r2, r1
 8008126:	635a      	str	r2, [r3, #52]	@ 0x34
 8008128:	4b22      	ldr	r3, [pc, #136]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 800812a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812c:	2204      	movs	r2, #4
 800812e:	4013      	ands	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008134:	4b1f      	ldr	r3, [pc, #124]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 8008136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008138:	4b1e      	ldr	r3, [pc, #120]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 800813a:	2101      	movs	r1, #1
 800813c:	430a      	orrs	r2, r1
 800813e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008140:	4b1c      	ldr	r3, [pc, #112]	@ (80081b4 <HAL_UART_MspInit+0x170>)
 8008142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008144:	2201      	movs	r2, #1
 8008146:	4013      	ands	r3, r2
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 800814c:	246c      	movs	r4, #108	@ 0x6c
 800814e:	193b      	adds	r3, r7, r4
 8008150:	2203      	movs	r2, #3
 8008152:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008154:	193b      	adds	r3, r7, r4
 8008156:	2202      	movs	r2, #2
 8008158:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815a:	193b      	adds	r3, r7, r4
 800815c:	2200      	movs	r2, #0
 800815e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008160:	193b      	adds	r3, r7, r4
 8008162:	2200      	movs	r2, #0
 8008164:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART6;
 8008166:	193b      	adds	r3, r7, r4
 8008168:	2204      	movs	r2, #4
 800816a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800816c:	193b      	adds	r3, r7, r4
 800816e:	4a12      	ldr	r2, [pc, #72]	@ (80081b8 <HAL_UART_MspInit+0x174>)
 8008170:	0019      	movs	r1, r3
 8008172:	0010      	movs	r0, r2
 8008174:	f001 f826 	bl	80091c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_ENABLE_Pin;
 8008178:	0021      	movs	r1, r4
 800817a:	187b      	adds	r3, r7, r1
 800817c:	2280      	movs	r2, #128	@ 0x80
 800817e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008180:	187b      	adds	r3, r7, r1
 8008182:	2202      	movs	r2, #2
 8008184:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008186:	187b      	adds	r3, r7, r1
 8008188:	2200      	movs	r2, #0
 800818a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800818c:	187b      	adds	r3, r7, r1
 800818e:	2200      	movs	r2, #0
 8008190:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART6;
 8008192:	187b      	adds	r3, r7, r1
 8008194:	2203      	movs	r2, #3
 8008196:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RS485_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8008198:	187a      	adds	r2, r7, r1
 800819a:	23a0      	movs	r3, #160	@ 0xa0
 800819c:	05db      	lsls	r3, r3, #23
 800819e:	0011      	movs	r1, r2
 80081a0:	0018      	movs	r0, r3
 80081a2:	f001 f80f 	bl	80091c4 <HAL_GPIO_Init>
}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b021      	add	sp, #132	@ 0x84
 80081ac:	bd90      	pop	{r4, r7, pc}
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	40004800 	.word	0x40004800
 80081b4:	40021000 	.word	0x40021000
 80081b8:	50000800 	.word	0x50000800
 80081bc:	40013c00 	.word	0x40013c00

080081c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80081c0:	480d      	ldr	r0, [pc, #52]	@ (80081f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80081c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80081c4:	f7ff f990 	bl	80074e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80081c8:	480c      	ldr	r0, [pc, #48]	@ (80081fc <LoopForever+0x6>)
  ldr r1, =_edata
 80081ca:	490d      	ldr	r1, [pc, #52]	@ (8008200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80081cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008204 <LoopForever+0xe>)
  movs r3, #0
 80081ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80081d0:	e002      	b.n	80081d8 <LoopCopyDataInit>

080081d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80081d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80081d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80081d6:	3304      	adds	r3, #4

080081d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80081d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80081da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80081dc:	d3f9      	bcc.n	80081d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80081de:	4a0a      	ldr	r2, [pc, #40]	@ (8008208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80081e0:	4c0a      	ldr	r4, [pc, #40]	@ (800820c <LoopForever+0x16>)
  movs r3, #0
 80081e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80081e4:	e001      	b.n	80081ea <LoopFillZerobss>

080081e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80081e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80081e8:	3204      	adds	r2, #4

080081ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80081ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80081ec:	d3fb      	bcc.n	80081e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80081ee:	f00e fc67 	bl	8016ac0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80081f2:	f7ff f803 	bl	80071fc <main>

080081f6 <LoopForever>:

LoopForever:
  b LoopForever
 80081f6:	e7fe      	b.n	80081f6 <LoopForever>
  ldr   r0, =_estack
 80081f8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80081fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008200:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8008204:	080175c0 	.word	0x080175c0
  ldr r2, =_sbss
 8008208:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800820c:	20002178 	.word	0x20002178

08008210 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008210:	e7fe      	b.n	8008210 <ADC1_COMP_IRQHandler>
	...

08008214 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800821a:	1dfb      	adds	r3, r7, #7
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008220:	4b0b      	ldr	r3, [pc, #44]	@ (8008250 <HAL_Init+0x3c>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	4b0a      	ldr	r3, [pc, #40]	@ (8008250 <HAL_Init+0x3c>)
 8008226:	2180      	movs	r1, #128	@ 0x80
 8008228:	0049      	lsls	r1, r1, #1
 800822a:	430a      	orrs	r2, r1
 800822c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800822e:	2003      	movs	r0, #3
 8008230:	f000 f810 	bl	8008254 <HAL_InitTick>
 8008234:	1e03      	subs	r3, r0, #0
 8008236:	d003      	beq.n	8008240 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008238:	1dfb      	adds	r3, r7, #7
 800823a:	2201      	movs	r2, #1
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	e001      	b.n	8008244 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008240:	f7ff f8bc 	bl	80073bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008244:	1dfb      	adds	r3, r7, #7
 8008246:	781b      	ldrb	r3, [r3, #0]
}
 8008248:	0018      	movs	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	b002      	add	sp, #8
 800824e:	bd80      	pop	{r7, pc}
 8008250:	40022000 	.word	0x40022000

08008254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008254:	b590      	push	{r4, r7, lr}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800825c:	230f      	movs	r3, #15
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008264:	4b1d      	ldr	r3, [pc, #116]	@ (80082dc <HAL_InitTick+0x88>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d02b      	beq.n	80082c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800826c:	4b1c      	ldr	r3, [pc, #112]	@ (80082e0 <HAL_InitTick+0x8c>)
 800826e:	681c      	ldr	r4, [r3, #0]
 8008270:	4b1a      	ldr	r3, [pc, #104]	@ (80082dc <HAL_InitTick+0x88>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	0019      	movs	r1, r3
 8008276:	23fa      	movs	r3, #250	@ 0xfa
 8008278:	0098      	lsls	r0, r3, #2
 800827a:	f7fd ffb9 	bl	80061f0 <__udivsi3>
 800827e:	0003      	movs	r3, r0
 8008280:	0019      	movs	r1, r3
 8008282:	0020      	movs	r0, r4
 8008284:	f7fd ffb4 	bl	80061f0 <__udivsi3>
 8008288:	0003      	movs	r3, r0
 800828a:	0018      	movs	r0, r3
 800828c:	f000 fdbb 	bl	8008e06 <HAL_SYSTICK_Config>
 8008290:	1e03      	subs	r3, r0, #0
 8008292:	d112      	bne.n	80082ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b03      	cmp	r3, #3
 8008298:	d80a      	bhi.n	80082b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	2301      	movs	r3, #1
 800829e:	425b      	negs	r3, r3
 80082a0:	2200      	movs	r2, #0
 80082a2:	0018      	movs	r0, r3
 80082a4:	f000 fd8a 	bl	8008dbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80082a8:	4b0e      	ldr	r3, [pc, #56]	@ (80082e4 <HAL_InitTick+0x90>)
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e00d      	b.n	80082cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80082b0:	230f      	movs	r3, #15
 80082b2:	18fb      	adds	r3, r7, r3
 80082b4:	2201      	movs	r2, #1
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	e008      	b.n	80082cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80082ba:	230f      	movs	r3, #15
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	2201      	movs	r2, #1
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	e003      	b.n	80082cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80082c4:	230f      	movs	r3, #15
 80082c6:	18fb      	adds	r3, r7, r3
 80082c8:	2201      	movs	r2, #1
 80082ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80082cc:	230f      	movs	r3, #15
 80082ce:	18fb      	adds	r3, r7, r3
 80082d0:	781b      	ldrb	r3, [r3, #0]
}
 80082d2:	0018      	movs	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b005      	add	sp, #20
 80082d8:	bd90      	pop	{r4, r7, pc}
 80082da:	46c0      	nop			@ (mov r8, r8)
 80082dc:	2000000c 	.word	0x2000000c
 80082e0:	20000004 	.word	0x20000004
 80082e4:	20000008 	.word	0x20000008

080082e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80082ec:	4b05      	ldr	r3, [pc, #20]	@ (8008304 <HAL_IncTick+0x1c>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	001a      	movs	r2, r3
 80082f2:	4b05      	ldr	r3, [pc, #20]	@ (8008308 <HAL_IncTick+0x20>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	18d2      	adds	r2, r2, r3
 80082f8:	4b03      	ldr	r3, [pc, #12]	@ (8008308 <HAL_IncTick+0x20>)
 80082fa:	601a      	str	r2, [r3, #0]
}
 80082fc:	46c0      	nop			@ (mov r8, r8)
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	46c0      	nop			@ (mov r8, r8)
 8008304:	2000000c 	.word	0x2000000c
 8008308:	20000588 	.word	0x20000588

0800830c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  return uwTick;
 8008310:	4b02      	ldr	r3, [pc, #8]	@ (800831c <HAL_GetTick+0x10>)
 8008312:	681b      	ldr	r3, [r3, #0]
}
 8008314:	0018      	movs	r0, r3
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	20000588 	.word	0x20000588

08008320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008328:	f7ff fff0 	bl	800830c <HAL_GetTick>
 800832c:	0003      	movs	r3, r0
 800832e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3301      	adds	r3, #1
 8008338:	d005      	beq.n	8008346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800833a:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <HAL_Delay+0x44>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	001a      	movs	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	189b      	adds	r3, r3, r2
 8008344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008346:	46c0      	nop			@ (mov r8, r8)
 8008348:	f7ff ffe0 	bl	800830c <HAL_GetTick>
 800834c:	0002      	movs	r2, r0
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	429a      	cmp	r2, r3
 8008356:	d8f7      	bhi.n	8008348 <HAL_Delay+0x28>
  {
  }
}
 8008358:	46c0      	nop			@ (mov r8, r8)
 800835a:	46c0      	nop			@ (mov r8, r8)
 800835c:	46bd      	mov	sp, r7
 800835e:	b004      	add	sp, #16
 8008360:	bd80      	pop	{r7, pc}
 8008362:	46c0      	nop			@ (mov r8, r8)
 8008364:	2000000c 	.word	0x2000000c

08008368 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a05      	ldr	r2, [pc, #20]	@ (800838c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8008378:	401a      	ands	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	601a      	str	r2, [r3, #0]
}
 8008382:	46c0      	nop			@ (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b002      	add	sp, #8
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	fe3fffff 	.word	0xfe3fffff

08008390 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	23e0      	movs	r3, #224	@ 0xe0
 800839e:	045b      	lsls	r3, r3, #17
 80083a0:	4013      	ands	r3, r2
}
 80083a2:	0018      	movs	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b002      	add	sp, #8
 80083a8:	bd80      	pop	{r7, pc}

080083aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	2104      	movs	r1, #4
 80083be:	400a      	ands	r2, r1
 80083c0:	2107      	movs	r1, #7
 80083c2:	4091      	lsls	r1, r2
 80083c4:	000a      	movs	r2, r1
 80083c6:	43d2      	mvns	r2, r2
 80083c8:	401a      	ands	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2104      	movs	r1, #4
 80083ce:	400b      	ands	r3, r1
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4099      	lsls	r1, r3
 80083d4:	000b      	movs	r3, r1
 80083d6:	431a      	orrs	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80083dc:	46c0      	nop			@ (mov r8, r8)
 80083de:	46bd      	mov	sp, r7
 80083e0:	b004      	add	sp, #16
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	2104      	movs	r1, #4
 80083f6:	400a      	ands	r2, r1
 80083f8:	2107      	movs	r1, #7
 80083fa:	4091      	lsls	r1, r2
 80083fc:	000a      	movs	r2, r1
 80083fe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2104      	movs	r1, #4
 8008404:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8008406:	40da      	lsrs	r2, r3
 8008408:	0013      	movs	r3, r2
}
 800840a:	0018      	movs	r0, r3
 800840c:	46bd      	mov	sp, r7
 800840e:	b002      	add	sp, #8
 8008410:	bd80      	pop	{r7, pc}

08008412 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	211f      	movs	r1, #31
 8008426:	400a      	ands	r2, r1
 8008428:	210f      	movs	r1, #15
 800842a:	4091      	lsls	r1, r2
 800842c:	000a      	movs	r2, r1
 800842e:	43d2      	mvns	r2, r2
 8008430:	401a      	ands	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	0e9b      	lsrs	r3, r3, #26
 8008436:	210f      	movs	r1, #15
 8008438:	4019      	ands	r1, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	201f      	movs	r0, #31
 800843e:	4003      	ands	r3, r0
 8008440:	4099      	lsls	r1, r3
 8008442:	000b      	movs	r3, r1
 8008444:	431a      	orrs	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800844a:	46c0      	nop			@ (mov r8, r8)
 800844c:	46bd      	mov	sp, r7
 800844e:	b004      	add	sp, #16
 8008450:	bd80      	pop	{r7, pc}

08008452 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	035b      	lsls	r3, r3, #13
 8008464:	0b5b      	lsrs	r3, r3, #13
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800846c:	46c0      	nop			@ (mov r8, r8)
 800846e:	46bd      	mov	sp, r7
 8008470:	b002      	add	sp, #8
 8008472:	bd80      	pop	{r7, pc}

08008474 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	0352      	lsls	r2, r2, #13
 8008486:	0b52      	lsrs	r2, r2, #13
 8008488:	43d2      	mvns	r2, r2
 800848a:	401a      	ands	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008490:	46c0      	nop			@ (mov r8, r8)
 8008492:	46bd      	mov	sp, r7
 8008494:	b002      	add	sp, #8
 8008496:	bd80      	pop	{r7, pc}

08008498 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	0212      	lsls	r2, r2, #8
 80084ac:	43d2      	mvns	r2, r2
 80084ae:	401a      	ands	r2, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	021b      	lsls	r3, r3, #8
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	400b      	ands	r3, r1
 80084b8:	4904      	ldr	r1, [pc, #16]	@ (80084cc <LL_ADC_SetChannelSamplingTime+0x34>)
 80084ba:	400b      	ands	r3, r1
 80084bc:	431a      	orrs	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80084c2:	46c0      	nop			@ (mov r8, r8)
 80084c4:	46bd      	mov	sp, r7
 80084c6:	b004      	add	sp, #16
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	46c0      	nop			@ (mov r8, r8)
 80084cc:	07ffff00 	.word	0x07ffff00

080084d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	4a05      	ldr	r2, [pc, #20]	@ (80084f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80084de:	4013      	ands	r3, r2
 80084e0:	2280      	movs	r2, #128	@ 0x80
 80084e2:	0552      	lsls	r2, r2, #21
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80084ea:	46c0      	nop			@ (mov r8, r8)
 80084ec:	46bd      	mov	sp, r7
 80084ee:	b002      	add	sp, #8
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	46c0      	nop			@ (mov r8, r8)
 80084f4:	6fffffe8 	.word	0x6fffffe8

080084f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	2380      	movs	r3, #128	@ 0x80
 8008506:	055b      	lsls	r3, r3, #21
 8008508:	401a      	ands	r2, r3
 800850a:	2380      	movs	r3, #128	@ 0x80
 800850c:	055b      	lsls	r3, r3, #21
 800850e:	429a      	cmp	r2, r3
 8008510:	d101      	bne.n	8008516 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8008512:	2301      	movs	r3, #1
 8008514:	e000      	b.n	8008518 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8008516:	2300      	movs	r3, #0
}
 8008518:	0018      	movs	r0, r3
 800851a:	46bd      	mov	sp, r7
 800851c:	b002      	add	sp, #8
 800851e:	bd80      	pop	{r7, pc}

08008520 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	2201      	movs	r2, #1
 800852e:	4013      	ands	r3, r2
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <LL_ADC_IsEnabled+0x18>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <LL_ADC_IsEnabled+0x1a>
 8008538:	2300      	movs	r3, #0
}
 800853a:	0018      	movs	r0, r3
 800853c:	46bd      	mov	sp, r7
 800853e:	b002      	add	sp, #8
 8008540:	bd80      	pop	{r7, pc}

08008542 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2204      	movs	r2, #4
 8008550:	4013      	ands	r3, r2
 8008552:	2b04      	cmp	r3, #4
 8008554:	d101      	bne.n	800855a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800855a:	2300      	movs	r3, #0
}
 800855c:	0018      	movs	r0, r3
 800855e:	46bd      	mov	sp, r7
 8008560:	b002      	add	sp, #8
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800856c:	231f      	movs	r3, #31
 800856e:	18fb      	adds	r3, r7, r3
 8008570:	2200      	movs	r2, #0
 8008572:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8008574:	2300      	movs	r3, #0
 8008576:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8008578:	2300      	movs	r3, #0
 800857a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e17f      	b.n	800888a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	0018      	movs	r0, r3
 8008596:	f7fe f9d1 	bl	800693c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2254      	movs	r2, #84	@ 0x54
 80085a4:	2100      	movs	r1, #0
 80085a6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	0018      	movs	r0, r3
 80085ae:	f7ff ffa3 	bl	80084f8 <LL_ADC_IsInternalRegulatorEnabled>
 80085b2:	1e03      	subs	r3, r0, #0
 80085b4:	d115      	bne.n	80085e2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	0018      	movs	r0, r3
 80085bc:	f7ff ff88 	bl	80084d0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80085c0:	4bb4      	ldr	r3, [pc, #720]	@ (8008894 <HAL_ADC_Init+0x330>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	49b4      	ldr	r1, [pc, #720]	@ (8008898 <HAL_ADC_Init+0x334>)
 80085c6:	0018      	movs	r0, r3
 80085c8:	f7fd fe12 	bl	80061f0 <__udivsi3>
 80085cc:	0003      	movs	r3, r0
 80085ce:	3301      	adds	r3, #1
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80085d4:	e002      	b.n	80085dc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3b01      	subs	r3, #1
 80085da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f9      	bne.n	80085d6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	0018      	movs	r0, r3
 80085e8:	f7ff ff86 	bl	80084f8 <LL_ADC_IsInternalRegulatorEnabled>
 80085ec:	1e03      	subs	r3, r0, #0
 80085ee:	d10f      	bne.n	8008610 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f4:	2210      	movs	r2, #16
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008600:	2201      	movs	r2, #1
 8008602:	431a      	orrs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008608:	231f      	movs	r3, #31
 800860a:	18fb      	adds	r3, r7, r3
 800860c:	2201      	movs	r2, #1
 800860e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	0018      	movs	r0, r3
 8008616:	f7ff ff94 	bl	8008542 <LL_ADC_REG_IsConversionOngoing>
 800861a:	0003      	movs	r3, r0
 800861c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008622:	2210      	movs	r2, #16
 8008624:	4013      	ands	r3, r2
 8008626:	d000      	beq.n	800862a <HAL_ADC_Init+0xc6>
 8008628:	e122      	b.n	8008870 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d000      	beq.n	8008632 <HAL_ADC_Init+0xce>
 8008630:	e11e      	b.n	8008870 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008636:	4a99      	ldr	r2, [pc, #612]	@ (800889c <HAL_ADC_Init+0x338>)
 8008638:	4013      	ands	r3, r2
 800863a:	2202      	movs	r2, #2
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	0018      	movs	r0, r3
 8008648:	f7ff ff6a 	bl	8008520 <LL_ADC_IsEnabled>
 800864c:	1e03      	subs	r3, r0, #0
 800864e:	d000      	beq.n	8008652 <HAL_ADC_Init+0xee>
 8008650:	e0ad      	b.n	80087ae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	7e1b      	ldrb	r3, [r3, #24]
 800865a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800865c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7e5b      	ldrb	r3, [r3, #25]
 8008662:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8008664:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7e9b      	ldrb	r3, [r3, #26]
 800866a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800866c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_ADC_Init+0x118>
 8008676:	2380      	movs	r3, #128	@ 0x80
 8008678:	015b      	lsls	r3, r3, #5
 800867a:	e000      	b.n	800867e <HAL_ADC_Init+0x11a>
 800867c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800867e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8008684:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da04      	bge.n	8008698 <HAL_ADC_Init+0x134>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	085b      	lsrs	r3, r3, #1
 8008696:	e001      	b.n	800869c <HAL_ADC_Init+0x138>
 8008698:	2380      	movs	r3, #128	@ 0x80
 800869a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800869c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	212c      	movs	r1, #44	@ 0x2c
 80086a2:	5c5b      	ldrb	r3, [r3, r1]
 80086a4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80086a6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	5c9b      	ldrb	r3, [r3, r2]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d115      	bne.n	80086e4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	7e9b      	ldrb	r3, [r3, #26]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d105      	bne.n	80086cc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	2280      	movs	r2, #128	@ 0x80
 80086c4:	0252      	lsls	r2, r2, #9
 80086c6:	4313      	orrs	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	e00b      	b.n	80086e4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d0:	2220      	movs	r2, #32
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086dc:	2201      	movs	r2, #1
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086f0:	23e0      	movs	r3, #224	@ 0xe0
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80086fa:	4313      	orrs	r3, r2
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4313      	orrs	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	4a65      	ldr	r2, [pc, #404]	@ (80088a0 <HAL_ADC_Init+0x33c>)
 800870a:	4013      	ands	r3, r2
 800870c:	0019      	movs	r1, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	430a      	orrs	r2, r1
 8008716:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	0f9b      	lsrs	r3, r3, #30
 800871e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008724:	4313      	orrs	r3, r2
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	223c      	movs	r2, #60	@ 0x3c
 8008730:	5c9b      	ldrb	r3, [r3, r2]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d111      	bne.n	800875a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	0f9b      	lsrs	r3, r3, #30
 800873c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8008742:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8008748:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800874e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	2201      	movs	r2, #1
 8008756:	4313      	orrs	r3, r2
 8008758:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	4a50      	ldr	r2, [pc, #320]	@ (80088a4 <HAL_ADC_Init+0x340>)
 8008762:	4013      	ands	r3, r2
 8008764:	0019      	movs	r1, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	430a      	orrs	r2, r1
 800876e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	23c0      	movs	r3, #192	@ 0xc0
 8008776:	061b      	lsls	r3, r3, #24
 8008778:	429a      	cmp	r2, r3
 800877a:	d018      	beq.n	80087ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8008780:	2380      	movs	r3, #128	@ 0x80
 8008782:	05db      	lsls	r3, r3, #23
 8008784:	429a      	cmp	r2, r3
 8008786:	d012      	beq.n	80087ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800878c:	2380      	movs	r3, #128	@ 0x80
 800878e:	061b      	lsls	r3, r3, #24
 8008790:	429a      	cmp	r2, r3
 8008792:	d00c      	beq.n	80087ae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8008794:	4b44      	ldr	r3, [pc, #272]	@ (80088a8 <HAL_ADC_Init+0x344>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a44      	ldr	r2, [pc, #272]	@ (80088ac <HAL_ADC_Init+0x348>)
 800879a:	4013      	ands	r3, r2
 800879c:	0019      	movs	r1, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	23f0      	movs	r3, #240	@ 0xf0
 80087a4:	039b      	lsls	r3, r3, #14
 80087a6:	401a      	ands	r2, r3
 80087a8:	4b3f      	ldr	r3, [pc, #252]	@ (80088a8 <HAL_ADC_Init+0x344>)
 80087aa:	430a      	orrs	r2, r1
 80087ac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087b6:	001a      	movs	r2, r3
 80087b8:	2100      	movs	r1, #0
 80087ba:	f7ff fdf6 	bl	80083aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c6:	493a      	ldr	r1, [pc, #232]	@ (80088b0 <HAL_ADC_Init+0x34c>)
 80087c8:	001a      	movs	r2, r3
 80087ca:	f7ff fdee 	bl	80083aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d109      	bne.n	80087ea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2110      	movs	r1, #16
 80087e2:	4249      	negs	r1, r1
 80087e4:	430a      	orrs	r2, r1
 80087e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80087e8:	e018      	b.n	800881c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691a      	ldr	r2, [r3, #16]
 80087ee:	2380      	movs	r3, #128	@ 0x80
 80087f0:	039b      	lsls	r3, r3, #14
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d112      	bne.n	800881c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	3b01      	subs	r3, #1
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	221c      	movs	r2, #28
 8008806:	4013      	ands	r3, r2
 8008808:	2210      	movs	r2, #16
 800880a:	4252      	negs	r2, r2
 800880c:	409a      	lsls	r2, r3
 800880e:	0011      	movs	r1, r2
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2100      	movs	r1, #0
 8008822:	0018      	movs	r0, r3
 8008824:	f7ff fdde 	bl	80083e4 <LL_ADC_GetSamplingTimeCommonChannels>
 8008828:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800882e:	429a      	cmp	r2, r3
 8008830:	d10b      	bne.n	800884a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883c:	2203      	movs	r2, #3
 800883e:	4393      	bics	r3, r2
 8008840:	2201      	movs	r2, #1
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8008848:	e01c      	b.n	8008884 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884e:	2212      	movs	r2, #18
 8008850:	4393      	bics	r3, r2
 8008852:	2210      	movs	r2, #16
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800885e:	2201      	movs	r2, #1
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8008866:	231f      	movs	r3, #31
 8008868:	18fb      	adds	r3, r7, r3
 800886a:	2201      	movs	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800886e:	e009      	b.n	8008884 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008874:	2210      	movs	r2, #16
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800887c:	231f      	movs	r3, #31
 800887e:	18fb      	adds	r3, r7, r3
 8008880:	2201      	movs	r2, #1
 8008882:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8008884:	231f      	movs	r3, #31
 8008886:	18fb      	adds	r3, r7, r3
 8008888:	781b      	ldrb	r3, [r3, #0]
}
 800888a:	0018      	movs	r0, r3
 800888c:	46bd      	mov	sp, r7
 800888e:	b008      	add	sp, #32
 8008890:	bd80      	pop	{r7, pc}
 8008892:	46c0      	nop			@ (mov r8, r8)
 8008894:	20000004 	.word	0x20000004
 8008898:	00030d40 	.word	0x00030d40
 800889c:	fffffefd 	.word	0xfffffefd
 80088a0:	ffde0201 	.word	0xffde0201
 80088a4:	1ffffc02 	.word	0x1ffffc02
 80088a8:	40012708 	.word	0x40012708
 80088ac:	ffc3ffff 	.word	0xffc3ffff
 80088b0:	07ffff04 	.word	0x07ffff04

080088b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088be:	2317      	movs	r3, #23
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2254      	movs	r2, #84	@ 0x54
 80088ce:	5c9b      	ldrb	r3, [r3, r2]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d101      	bne.n	80088d8 <HAL_ADC_ConfigChannel+0x24>
 80088d4:	2302      	movs	r3, #2
 80088d6:	e1c0      	b.n	8008c5a <HAL_ADC_ConfigChannel+0x3a6>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2254      	movs	r2, #84	@ 0x54
 80088dc:	2101      	movs	r1, #1
 80088de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7ff fe2c 	bl	8008542 <LL_ADC_REG_IsConversionOngoing>
 80088ea:	1e03      	subs	r3, r0, #0
 80088ec:	d000      	beq.n	80088f0 <HAL_ADC_ConfigChannel+0x3c>
 80088ee:	e1a3      	b.n	8008c38 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d100      	bne.n	80088fa <HAL_ADC_ConfigChannel+0x46>
 80088f8:	e143      	b.n	8008b82 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691a      	ldr	r2, [r3, #16]
 80088fe:	2380      	movs	r3, #128	@ 0x80
 8008900:	061b      	lsls	r3, r3, #24
 8008902:	429a      	cmp	r2, r3
 8008904:	d004      	beq.n	8008910 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800890a:	4ac1      	ldr	r2, [pc, #772]	@ (8008c10 <HAL_ADC_ConfigChannel+0x35c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d108      	bne.n	8008922 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	0019      	movs	r1, r3
 800891a:	0010      	movs	r0, r2
 800891c:	f7ff fd99 	bl	8008452 <LL_ADC_REG_SetSequencerChAdd>
 8008920:	e0c9      	b.n	8008ab6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	211f      	movs	r1, #31
 800892c:	400b      	ands	r3, r1
 800892e:	210f      	movs	r1, #15
 8008930:	4099      	lsls	r1, r3
 8008932:	000b      	movs	r3, r1
 8008934:	43db      	mvns	r3, r3
 8008936:	4013      	ands	r3, r2
 8008938:	0019      	movs	r1, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	035b      	lsls	r3, r3, #13
 8008940:	0b5b      	lsrs	r3, r3, #13
 8008942:	d105      	bne.n	8008950 <HAL_ADC_ConfigChannel+0x9c>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	0e9b      	lsrs	r3, r3, #26
 800894a:	221f      	movs	r2, #31
 800894c:	4013      	ands	r3, r2
 800894e:	e098      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2201      	movs	r2, #1
 8008956:	4013      	ands	r3, r2
 8008958:	d000      	beq.n	800895c <HAL_ADC_ConfigChannel+0xa8>
 800895a:	e091      	b.n	8008a80 <HAL_ADC_ConfigChannel+0x1cc>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2202      	movs	r2, #2
 8008962:	4013      	ands	r3, r2
 8008964:	d000      	beq.n	8008968 <HAL_ADC_ConfigChannel+0xb4>
 8008966:	e089      	b.n	8008a7c <HAL_ADC_ConfigChannel+0x1c8>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2204      	movs	r2, #4
 800896e:	4013      	ands	r3, r2
 8008970:	d000      	beq.n	8008974 <HAL_ADC_ConfigChannel+0xc0>
 8008972:	e081      	b.n	8008a78 <HAL_ADC_ConfigChannel+0x1c4>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2208      	movs	r2, #8
 800897a:	4013      	ands	r3, r2
 800897c:	d000      	beq.n	8008980 <HAL_ADC_ConfigChannel+0xcc>
 800897e:	e079      	b.n	8008a74 <HAL_ADC_ConfigChannel+0x1c0>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2210      	movs	r2, #16
 8008986:	4013      	ands	r3, r2
 8008988:	d000      	beq.n	800898c <HAL_ADC_ConfigChannel+0xd8>
 800898a:	e071      	b.n	8008a70 <HAL_ADC_ConfigChannel+0x1bc>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2220      	movs	r2, #32
 8008992:	4013      	ands	r3, r2
 8008994:	d000      	beq.n	8008998 <HAL_ADC_ConfigChannel+0xe4>
 8008996:	e069      	b.n	8008a6c <HAL_ADC_ConfigChannel+0x1b8>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2240      	movs	r2, #64	@ 0x40
 800899e:	4013      	ands	r3, r2
 80089a0:	d000      	beq.n	80089a4 <HAL_ADC_ConfigChannel+0xf0>
 80089a2:	e061      	b.n	8008a68 <HAL_ADC_ConfigChannel+0x1b4>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2280      	movs	r2, #128	@ 0x80
 80089aa:	4013      	ands	r3, r2
 80089ac:	d000      	beq.n	80089b0 <HAL_ADC_ConfigChannel+0xfc>
 80089ae:	e059      	b.n	8008a64 <HAL_ADC_ConfigChannel+0x1b0>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	2380      	movs	r3, #128	@ 0x80
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	4013      	ands	r3, r2
 80089ba:	d151      	bne.n	8008a60 <HAL_ADC_ConfigChannel+0x1ac>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	2380      	movs	r3, #128	@ 0x80
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4013      	ands	r3, r2
 80089c6:	d149      	bne.n	8008a5c <HAL_ADC_ConfigChannel+0x1a8>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	2380      	movs	r3, #128	@ 0x80
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	4013      	ands	r3, r2
 80089d2:	d141      	bne.n	8008a58 <HAL_ADC_ConfigChannel+0x1a4>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	2380      	movs	r3, #128	@ 0x80
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	4013      	ands	r3, r2
 80089de:	d139      	bne.n	8008a54 <HAL_ADC_ConfigChannel+0x1a0>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	2380      	movs	r3, #128	@ 0x80
 80089e6:	015b      	lsls	r3, r3, #5
 80089e8:	4013      	ands	r3, r2
 80089ea:	d131      	bne.n	8008a50 <HAL_ADC_ConfigChannel+0x19c>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	2380      	movs	r3, #128	@ 0x80
 80089f2:	019b      	lsls	r3, r3, #6
 80089f4:	4013      	ands	r3, r2
 80089f6:	d129      	bne.n	8008a4c <HAL_ADC_ConfigChannel+0x198>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	2380      	movs	r3, #128	@ 0x80
 80089fe:	01db      	lsls	r3, r3, #7
 8008a00:	4013      	ands	r3, r2
 8008a02:	d121      	bne.n	8008a48 <HAL_ADC_ConfigChannel+0x194>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	2380      	movs	r3, #128	@ 0x80
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	d119      	bne.n	8008a44 <HAL_ADC_ConfigChannel+0x190>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	2380      	movs	r3, #128	@ 0x80
 8008a16:	025b      	lsls	r3, r3, #9
 8008a18:	4013      	ands	r3, r2
 8008a1a:	d111      	bne.n	8008a40 <HAL_ADC_ConfigChannel+0x18c>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	2380      	movs	r3, #128	@ 0x80
 8008a22:	029b      	lsls	r3, r3, #10
 8008a24:	4013      	ands	r3, r2
 8008a26:	d109      	bne.n	8008a3c <HAL_ADC_ConfigChannel+0x188>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	2380      	movs	r3, #128	@ 0x80
 8008a2e:	02db      	lsls	r3, r3, #11
 8008a30:	4013      	ands	r3, r2
 8008a32:	d001      	beq.n	8008a38 <HAL_ADC_ConfigChannel+0x184>
 8008a34:	2312      	movs	r3, #18
 8008a36:	e024      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e022      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a3c:	2311      	movs	r3, #17
 8008a3e:	e020      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a40:	2310      	movs	r3, #16
 8008a42:	e01e      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a44:	230f      	movs	r3, #15
 8008a46:	e01c      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a48:	230e      	movs	r3, #14
 8008a4a:	e01a      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a4c:	230d      	movs	r3, #13
 8008a4e:	e018      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a50:	230c      	movs	r3, #12
 8008a52:	e016      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a54:	230b      	movs	r3, #11
 8008a56:	e014      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a58:	230a      	movs	r3, #10
 8008a5a:	e012      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a5c:	2309      	movs	r3, #9
 8008a5e:	e010      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a60:	2308      	movs	r3, #8
 8008a62:	e00e      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a64:	2307      	movs	r3, #7
 8008a66:	e00c      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a68:	2306      	movs	r3, #6
 8008a6a:	e00a      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a6c:	2305      	movs	r3, #5
 8008a6e:	e008      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a70:	2304      	movs	r3, #4
 8008a72:	e006      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a74:	2303      	movs	r3, #3
 8008a76:	e004      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e002      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <HAL_ADC_ConfigChannel+0x1ce>
 8008a80:	2300      	movs	r3, #0
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	6852      	ldr	r2, [r2, #4]
 8008a86:	201f      	movs	r0, #31
 8008a88:	4002      	ands	r2, r0
 8008a8a:	4093      	lsls	r3, r2
 8008a8c:	000a      	movs	r2, r1
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	089b      	lsrs	r3, r3, #2
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d808      	bhi.n	8008ab6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	6859      	ldr	r1, [r3, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	f7ff fcae 	bl	8008412 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6818      	ldr	r0, [r3, #0]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6819      	ldr	r1, [r3, #0]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	001a      	movs	r2, r3
 8008ac4:	f7ff fce8 	bl	8008498 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	db00      	blt.n	8008ad2 <HAL_ADC_ConfigChannel+0x21e>
 8008ad0:	e0bc      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008ad2:	4b50      	ldr	r3, [pc, #320]	@ (8008c14 <HAL_ADC_ConfigChannel+0x360>)
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f7ff fc5b 	bl	8008390 <LL_ADC_GetCommonPathInternalCh>
 8008ada:	0003      	movs	r3, r0
 8008adc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a4d      	ldr	r2, [pc, #308]	@ (8008c18 <HAL_ADC_ConfigChannel+0x364>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d122      	bne.n	8008b2e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	2380      	movs	r3, #128	@ 0x80
 8008aec:	041b      	lsls	r3, r3, #16
 8008aee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008af0:	d11d      	bne.n	8008b2e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2280      	movs	r2, #128	@ 0x80
 8008af6:	0412      	lsls	r2, r2, #16
 8008af8:	4313      	orrs	r3, r2
 8008afa:	4a46      	ldr	r2, [pc, #280]	@ (8008c14 <HAL_ADC_ConfigChannel+0x360>)
 8008afc:	0019      	movs	r1, r3
 8008afe:	0010      	movs	r0, r2
 8008b00:	f7ff fc32 	bl	8008368 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008b04:	4b45      	ldr	r3, [pc, #276]	@ (8008c1c <HAL_ADC_ConfigChannel+0x368>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4945      	ldr	r1, [pc, #276]	@ (8008c20 <HAL_ADC_ConfigChannel+0x36c>)
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f7fd fb70 	bl	80061f0 <__udivsi3>
 8008b10:	0003      	movs	r3, r0
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	0013      	movs	r3, r2
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	189b      	adds	r3, r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008b1e:	e002      	b.n	8008b26 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1f9      	bne.n	8008b20 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008b2c:	e08e      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a3c      	ldr	r2, [pc, #240]	@ (8008c24 <HAL_ADC_ConfigChannel+0x370>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d10e      	bne.n	8008b56 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	2380      	movs	r3, #128	@ 0x80
 8008b3c:	045b      	lsls	r3, r3, #17
 8008b3e:	4013      	ands	r3, r2
 8008b40:	d109      	bne.n	8008b56 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2280      	movs	r2, #128	@ 0x80
 8008b46:	0452      	lsls	r2, r2, #17
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	4a32      	ldr	r2, [pc, #200]	@ (8008c14 <HAL_ADC_ConfigChannel+0x360>)
 8008b4c:	0019      	movs	r1, r3
 8008b4e:	0010      	movs	r0, r2
 8008b50:	f7ff fc0a 	bl	8008368 <LL_ADC_SetCommonPathInternalCh>
 8008b54:	e07a      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a33      	ldr	r2, [pc, #204]	@ (8008c28 <HAL_ADC_ConfigChannel+0x374>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d000      	beq.n	8008b62 <HAL_ADC_ConfigChannel+0x2ae>
 8008b60:	e074      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	2380      	movs	r3, #128	@ 0x80
 8008b66:	03db      	lsls	r3, r3, #15
 8008b68:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8008b6a:	d000      	beq.n	8008b6e <HAL_ADC_ConfigChannel+0x2ba>
 8008b6c:	e06e      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2280      	movs	r2, #128	@ 0x80
 8008b72:	03d2      	lsls	r2, r2, #15
 8008b74:	4313      	orrs	r3, r2
 8008b76:	4a27      	ldr	r2, [pc, #156]	@ (8008c14 <HAL_ADC_ConfigChannel+0x360>)
 8008b78:	0019      	movs	r1, r3
 8008b7a:	0010      	movs	r0, r2
 8008b7c:	f7ff fbf4 	bl	8008368 <LL_ADC_SetCommonPathInternalCh>
 8008b80:	e064      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	691a      	ldr	r2, [r3, #16]
 8008b86:	2380      	movs	r3, #128	@ 0x80
 8008b88:	061b      	lsls	r3, r3, #24
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d004      	beq.n	8008b98 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8008b92:	4a1f      	ldr	r2, [pc, #124]	@ (8008c10 <HAL_ADC_ConfigChannel+0x35c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d107      	bne.n	8008ba8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	0010      	movs	r0, r2
 8008ba4:	f7ff fc66 	bl	8008474 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da4d      	bge.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008bb0:	4b18      	ldr	r3, [pc, #96]	@ (8008c14 <HAL_ADC_ConfigChannel+0x360>)
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f7ff fbec 	bl	8008390 <LL_ADC_GetCommonPathInternalCh>
 8008bb8:	0003      	movs	r3, r0
 8008bba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a15      	ldr	r2, [pc, #84]	@ (8008c18 <HAL_ADC_ConfigChannel+0x364>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d108      	bne.n	8008bd8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	4a18      	ldr	r2, [pc, #96]	@ (8008c2c <HAL_ADC_ConfigChannel+0x378>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	4a11      	ldr	r2, [pc, #68]	@ (8008c14 <HAL_ADC_ConfigChannel+0x360>)
 8008bce:	0019      	movs	r1, r3
 8008bd0:	0010      	movs	r0, r2
 8008bd2:	f7ff fbc9 	bl	8008368 <LL_ADC_SetCommonPathInternalCh>
 8008bd6:	e039      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a11      	ldr	r2, [pc, #68]	@ (8008c24 <HAL_ADC_ConfigChannel+0x370>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d108      	bne.n	8008bf4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	4a12      	ldr	r2, [pc, #72]	@ (8008c30 <HAL_ADC_ConfigChannel+0x37c>)
 8008be6:	4013      	ands	r3, r2
 8008be8:	4a0a      	ldr	r2, [pc, #40]	@ (8008c14 <HAL_ADC_ConfigChannel+0x360>)
 8008bea:	0019      	movs	r1, r3
 8008bec:	0010      	movs	r0, r2
 8008bee:	f7ff fbbb 	bl	8008368 <LL_ADC_SetCommonPathInternalCh>
 8008bf2:	e02b      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8008c28 <HAL_ADC_ConfigChannel+0x374>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d126      	bne.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	4a0c      	ldr	r2, [pc, #48]	@ (8008c34 <HAL_ADC_ConfigChannel+0x380>)
 8008c02:	4013      	ands	r3, r2
 8008c04:	4a03      	ldr	r2, [pc, #12]	@ (8008c14 <HAL_ADC_ConfigChannel+0x360>)
 8008c06:	0019      	movs	r1, r3
 8008c08:	0010      	movs	r0, r2
 8008c0a:	f7ff fbad 	bl	8008368 <LL_ADC_SetCommonPathInternalCh>
 8008c0e:	e01d      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x398>
 8008c10:	80000004 	.word	0x80000004
 8008c14:	40012708 	.word	0x40012708
 8008c18:	b0001000 	.word	0xb0001000
 8008c1c:	20000004 	.word	0x20000004
 8008c20:	00030d40 	.word	0x00030d40
 8008c24:	b8004000 	.word	0xb8004000
 8008c28:	b4002000 	.word	0xb4002000
 8008c2c:	ff7fffff 	.word	0xff7fffff
 8008c30:	feffffff 	.word	0xfeffffff
 8008c34:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8008c44:	2317      	movs	r3, #23
 8008c46:	18fb      	adds	r3, r7, r3
 8008c48:	2201      	movs	r2, #1
 8008c4a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2254      	movs	r2, #84	@ 0x54
 8008c50:	2100      	movs	r1, #0
 8008c52:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8008c54:	2317      	movs	r3, #23
 8008c56:	18fb      	adds	r3, r7, r3
 8008c58:	781b      	ldrb	r3, [r3, #0]
}
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	b006      	add	sp, #24
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	46c0      	nop			@ (mov r8, r8)

08008c64 <__NVIC_EnableIRQ>:
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	0002      	movs	r2, r0
 8008c6c:	1dfb      	adds	r3, r7, #7
 8008c6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008c70:	1dfb      	adds	r3, r7, #7
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c76:	d809      	bhi.n	8008c8c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c78:	1dfb      	adds	r3, r7, #7
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	001a      	movs	r2, r3
 8008c7e:	231f      	movs	r3, #31
 8008c80:	401a      	ands	r2, r3
 8008c82:	4b04      	ldr	r3, [pc, #16]	@ (8008c94 <__NVIC_EnableIRQ+0x30>)
 8008c84:	2101      	movs	r1, #1
 8008c86:	4091      	lsls	r1, r2
 8008c88:	000a      	movs	r2, r1
 8008c8a:	601a      	str	r2, [r3, #0]
}
 8008c8c:	46c0      	nop			@ (mov r8, r8)
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	b002      	add	sp, #8
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	e000e100 	.word	0xe000e100

08008c98 <__NVIC_SetPriority>:
{
 8008c98:	b590      	push	{r4, r7, lr}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	0002      	movs	r2, r0
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	1dfb      	adds	r3, r7, #7
 8008ca4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008ca6:	1dfb      	adds	r3, r7, #7
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b7f      	cmp	r3, #127	@ 0x7f
 8008cac:	d828      	bhi.n	8008d00 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008cae:	4a2f      	ldr	r2, [pc, #188]	@ (8008d6c <__NVIC_SetPriority+0xd4>)
 8008cb0:	1dfb      	adds	r3, r7, #7
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	b25b      	sxtb	r3, r3
 8008cb6:	089b      	lsrs	r3, r3, #2
 8008cb8:	33c0      	adds	r3, #192	@ 0xc0
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	589b      	ldr	r3, [r3, r2]
 8008cbe:	1dfa      	adds	r2, r7, #7
 8008cc0:	7812      	ldrb	r2, [r2, #0]
 8008cc2:	0011      	movs	r1, r2
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	400a      	ands	r2, r1
 8008cc8:	00d2      	lsls	r2, r2, #3
 8008cca:	21ff      	movs	r1, #255	@ 0xff
 8008ccc:	4091      	lsls	r1, r2
 8008cce:	000a      	movs	r2, r1
 8008cd0:	43d2      	mvns	r2, r2
 8008cd2:	401a      	ands	r2, r3
 8008cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	019b      	lsls	r3, r3, #6
 8008cda:	22ff      	movs	r2, #255	@ 0xff
 8008cdc:	401a      	ands	r2, r3
 8008cde:	1dfb      	adds	r3, r7, #7
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	4003      	ands	r3, r0
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008cec:	481f      	ldr	r0, [pc, #124]	@ (8008d6c <__NVIC_SetPriority+0xd4>)
 8008cee:	1dfb      	adds	r3, r7, #7
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	b25b      	sxtb	r3, r3
 8008cf4:	089b      	lsrs	r3, r3, #2
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	33c0      	adds	r3, #192	@ 0xc0
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	501a      	str	r2, [r3, r0]
}
 8008cfe:	e031      	b.n	8008d64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008d00:	4a1b      	ldr	r2, [pc, #108]	@ (8008d70 <__NVIC_SetPriority+0xd8>)
 8008d02:	1dfb      	adds	r3, r7, #7
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	0019      	movs	r1, r3
 8008d08:	230f      	movs	r3, #15
 8008d0a:	400b      	ands	r3, r1
 8008d0c:	3b08      	subs	r3, #8
 8008d0e:	089b      	lsrs	r3, r3, #2
 8008d10:	3306      	adds	r3, #6
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	18d3      	adds	r3, r2, r3
 8008d16:	3304      	adds	r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	1dfa      	adds	r2, r7, #7
 8008d1c:	7812      	ldrb	r2, [r2, #0]
 8008d1e:	0011      	movs	r1, r2
 8008d20:	2203      	movs	r2, #3
 8008d22:	400a      	ands	r2, r1
 8008d24:	00d2      	lsls	r2, r2, #3
 8008d26:	21ff      	movs	r1, #255	@ 0xff
 8008d28:	4091      	lsls	r1, r2
 8008d2a:	000a      	movs	r2, r1
 8008d2c:	43d2      	mvns	r2, r2
 8008d2e:	401a      	ands	r2, r3
 8008d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	019b      	lsls	r3, r3, #6
 8008d36:	22ff      	movs	r2, #255	@ 0xff
 8008d38:	401a      	ands	r2, r3
 8008d3a:	1dfb      	adds	r3, r7, #7
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	0018      	movs	r0, r3
 8008d40:	2303      	movs	r3, #3
 8008d42:	4003      	ands	r3, r0
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008d48:	4809      	ldr	r0, [pc, #36]	@ (8008d70 <__NVIC_SetPriority+0xd8>)
 8008d4a:	1dfb      	adds	r3, r7, #7
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	001c      	movs	r4, r3
 8008d50:	230f      	movs	r3, #15
 8008d52:	4023      	ands	r3, r4
 8008d54:	3b08      	subs	r3, #8
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	3306      	adds	r3, #6
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	18c3      	adds	r3, r0, r3
 8008d60:	3304      	adds	r3, #4
 8008d62:	601a      	str	r2, [r3, #0]
}
 8008d64:	46c0      	nop			@ (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b003      	add	sp, #12
 8008d6a:	bd90      	pop	{r4, r7, pc}
 8008d6c:	e000e100 	.word	0xe000e100
 8008d70:	e000ed00 	.word	0xe000ed00

08008d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	1e5a      	subs	r2, r3, #1
 8008d80:	2380      	movs	r3, #128	@ 0x80
 8008d82:	045b      	lsls	r3, r3, #17
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d301      	bcc.n	8008d8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e010      	b.n	8008dae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <SysTick_Config+0x44>)
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	3a01      	subs	r2, #1
 8008d92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d94:	2301      	movs	r3, #1
 8008d96:	425b      	negs	r3, r3
 8008d98:	2103      	movs	r1, #3
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f7ff ff7c 	bl	8008c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008da0:	4b05      	ldr	r3, [pc, #20]	@ (8008db8 <SysTick_Config+0x44>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008da6:	4b04      	ldr	r3, [pc, #16]	@ (8008db8 <SysTick_Config+0x44>)
 8008da8:	2207      	movs	r2, #7
 8008daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	0018      	movs	r0, r3
 8008db0:	46bd      	mov	sp, r7
 8008db2:	b002      	add	sp, #8
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	46c0      	nop			@ (mov r8, r8)
 8008db8:	e000e010 	.word	0xe000e010

08008dbc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	210f      	movs	r1, #15
 8008dc8:	187b      	adds	r3, r7, r1
 8008dca:	1c02      	adds	r2, r0, #0
 8008dcc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	187b      	adds	r3, r7, r1
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	b25b      	sxtb	r3, r3
 8008dd6:	0011      	movs	r1, r2
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f7ff ff5d 	bl	8008c98 <__NVIC_SetPriority>
}
 8008dde:	46c0      	nop			@ (mov r8, r8)
 8008de0:	46bd      	mov	sp, r7
 8008de2:	b004      	add	sp, #16
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	0002      	movs	r2, r0
 8008dee:	1dfb      	adds	r3, r7, #7
 8008df0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008df2:	1dfb      	adds	r3, r7, #7
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	b25b      	sxtb	r3, r3
 8008df8:	0018      	movs	r0, r3
 8008dfa:	f7ff ff33 	bl	8008c64 <__NVIC_EnableIRQ>
}
 8008dfe:	46c0      	nop			@ (mov r8, r8)
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b002      	add	sp, #8
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7ff ffaf 	bl	8008d74 <SysTick_Config>
 8008e16:	0003      	movs	r3, r0
}
 8008e18:	0018      	movs	r0, r3
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	b002      	add	sp, #8
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e14e      	b.n	80090d0 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	225c      	movs	r2, #92	@ 0x5c
 8008e36:	5c9b      	ldrb	r3, [r3, r2]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d107      	bne.n	8008e4e <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	225d      	movs	r2, #93	@ 0x5d
 8008e42:	2100      	movs	r1, #0
 8008e44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f7fd fef3 	bl	8006c34 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	699a      	ldr	r2, [r3, #24]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2110      	movs	r1, #16
 8008e5a:	438a      	bics	r2, r1
 8008e5c:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e5e:	f7ff fa55 	bl	800830c <HAL_GetTick>
 8008e62:	0003      	movs	r3, r0
 8008e64:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008e66:	e012      	b.n	8008e8e <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008e68:	f7ff fa50 	bl	800830c <HAL_GetTick>
 8008e6c:	0002      	movs	r2, r0
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b0a      	cmp	r3, #10
 8008e74:	d90b      	bls.n	8008e8e <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	225c      	movs	r2, #92	@ 0x5c
 8008e86:	2103      	movs	r1, #3
 8008e88:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e120      	b.n	80090d0 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	2208      	movs	r2, #8
 8008e96:	4013      	ands	r3, r2
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	d0e5      	beq.n	8008e68 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008eac:	f7ff fa2e 	bl	800830c <HAL_GetTick>
 8008eb0:	0003      	movs	r3, r0
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008eb4:	e012      	b.n	8008edc <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008eb6:	f7ff fa29 	bl	800830c <HAL_GetTick>
 8008eba:	0002      	movs	r2, r0
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b0a      	cmp	r3, #10
 8008ec2:	d90b      	bls.n	8008edc <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ec8:	2201      	movs	r2, #1
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	225c      	movs	r2, #92	@ 0x5c
 8008ed4:	2103      	movs	r1, #3
 8008ed6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0f9      	b.n	80090d0 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	d0e6      	beq.n	8008eb6 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	699a      	ldr	r2, [r3, #24]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2102      	movs	r1, #2
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a76      	ldr	r2, [pc, #472]	@ (80090d8 <HAL_FDCAN_Init+0x2b8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d103      	bne.n	8008f0a <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008f02:	4a76      	ldr	r2, [pc, #472]	@ (80090dc <HAL_FDCAN_Init+0x2bc>)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7c1b      	ldrb	r3, [r3, #16]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d108      	bne.n	8008f24 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699a      	ldr	r2, [r3, #24]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2140      	movs	r1, #64	@ 0x40
 8008f1e:	438a      	bics	r2, r1
 8008f20:	619a      	str	r2, [r3, #24]
 8008f22:	e007      	b.n	8008f34 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699a      	ldr	r2, [r3, #24]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2140      	movs	r1, #64	@ 0x40
 8008f30:	430a      	orrs	r2, r1
 8008f32:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	7c5b      	ldrb	r3, [r3, #17]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d109      	bne.n	8008f50 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2180      	movs	r1, #128	@ 0x80
 8008f48:	01c9      	lsls	r1, r1, #7
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	619a      	str	r2, [r3, #24]
 8008f4e:	e007      	b.n	8008f60 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	699a      	ldr	r2, [r3, #24]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4961      	ldr	r1, [pc, #388]	@ (80090e0 <HAL_FDCAN_Init+0x2c0>)
 8008f5c:	400a      	ands	r2, r1
 8008f5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7c9b      	ldrb	r3, [r3, #18]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d108      	bne.n	8008f7a <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	495c      	ldr	r1, [pc, #368]	@ (80090e4 <HAL_FDCAN_Init+0x2c4>)
 8008f74:	400a      	ands	r2, r1
 8008f76:	619a      	str	r2, [r3, #24]
 8008f78:	e008      	b.n	8008f8c <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	699a      	ldr	r2, [r3, #24]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2180      	movs	r1, #128	@ 0x80
 8008f86:	0149      	lsls	r1, r1, #5
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	4a55      	ldr	r2, [pc, #340]	@ (80090e8 <HAL_FDCAN_Init+0x2c8>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	0019      	movs	r1, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	21a4      	movs	r1, #164	@ 0xa4
 8008fb0:	438a      	bics	r2, r1
 8008fb2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	691a      	ldr	r2, [r3, #16]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2110      	movs	r1, #16
 8008fc0:	438a      	bics	r2, r1
 8008fc2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d108      	bne.n	8008fde <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699a      	ldr	r2, [r3, #24]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2104      	movs	r1, #4
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	619a      	str	r2, [r3, #24]
 8008fdc:	e02c      	b.n	8009038 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d028      	beq.n	8009038 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d01c      	beq.n	8009028 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2180      	movs	r1, #128	@ 0x80
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2110      	movs	r1, #16
 800900a:	430a      	orrs	r2, r1
 800900c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d110      	bne.n	8009038 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	699a      	ldr	r2, [r3, #24]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2120      	movs	r1, #32
 8009022:	430a      	orrs	r2, r1
 8009024:	619a      	str	r2, [r3, #24]
 8009026:	e007      	b.n	8009038 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	699a      	ldr	r2, [r3, #24]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2120      	movs	r1, #32
 8009034:	430a      	orrs	r2, r1
 8009036:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	3b01      	subs	r3, #1
 800903e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	3b01      	subs	r3, #1
 8009046:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009048:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009050:	431a      	orrs	r2, r3
 8009052:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	3b01      	subs	r3, #1
 800905a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009060:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009062:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	23c0      	movs	r3, #192	@ 0xc0
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	429a      	cmp	r2, r3
 800906e:	d115      	bne.n	800909c <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009074:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907a:	3b01      	subs	r3, #1
 800907c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800907e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009084:	3b01      	subs	r3, #1
 8009086:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009088:	431a      	orrs	r2, r3
 800908a:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009090:	3b01      	subs	r3, #1
 8009092:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009098:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800909a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	22c0      	movs	r2, #192	@ 0xc0
 80090a2:	5899      	ldr	r1, [r3, r2]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	21c0      	movs	r1, #192	@ 0xc0
 80090b0:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	0018      	movs	r0, r3
 80090b6:	f000 f819 	bl	80090ec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	225c      	movs	r2, #92	@ 0x5c
 80090ca:	2101      	movs	r1, #1
 80090cc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	0018      	movs	r0, r3
 80090d2:	46bd      	mov	sp, r7
 80090d4:	b004      	add	sp, #16
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40006400 	.word	0x40006400
 80090dc:	40006500 	.word	0x40006500
 80090e0:	ffffbfff 	.word	0xffffbfff
 80090e4:	ffffefff 	.word	0xffffefff
 80090e8:	fffffcff 	.word	0xfffffcff

080090ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80090f4:	4b2f      	ldr	r3, [pc, #188]	@ (80091b4 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 80090f6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a2e      	ldr	r2, [pc, #184]	@ (80091b8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d105      	bne.n	800910e <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	22d4      	movs	r2, #212	@ 0xd4
 8009106:	0092      	lsls	r2, r2, #2
 8009108:	4694      	mov	ip, r2
 800910a:	4463      	add	r3, ip
 800910c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2280      	movs	r2, #128	@ 0x80
 800911a:	589b      	ldr	r3, [r3, r2]
 800911c:	4a27      	ldr	r2, [pc, #156]	@ (80091bc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800911e:	4013      	ands	r3, r2
 8009120:	0019      	movs	r1, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009126:	041a      	lsls	r2, r3, #16
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	2180      	movs	r1, #128	@ 0x80
 8009130:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	3370      	adds	r3, #112	@ 0x70
 8009136:	001a      	movs	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2280      	movs	r2, #128	@ 0x80
 8009142:	589b      	ldr	r3, [r3, r2]
 8009144:	4a1e      	ldr	r2, [pc, #120]	@ (80091c0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8009146:	4013      	ands	r3, r2
 8009148:	0019      	movs	r1, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914e:	061a      	lsls	r2, r3, #24
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	2180      	movs	r1, #128	@ 0x80
 8009158:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	33b0      	adds	r3, #176	@ 0xb0
 800915e:	001a      	movs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	3389      	adds	r3, #137	@ 0x89
 8009168:	33ff      	adds	r3, #255	@ 0xff
 800916a:	001a      	movs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2298      	movs	r2, #152	@ 0x98
 8009174:	0092      	lsls	r2, r2, #2
 8009176:	189a      	adds	r2, r3, r2
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	229e      	movs	r2, #158	@ 0x9e
 8009180:	0092      	lsls	r2, r2, #2
 8009182:	189a      	adds	r2, r3, r2
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	e005      	b.n	800919a <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3304      	adds	r3, #4
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	22d4      	movs	r2, #212	@ 0xd4
 800919e:	0092      	lsls	r2, r2, #2
 80091a0:	4694      	mov	ip, r2
 80091a2:	4463      	add	r3, ip
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d3f1      	bcc.n	800918e <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80091aa:	46c0      	nop			@ (mov r8, r8)
 80091ac:	46c0      	nop			@ (mov r8, r8)
 80091ae:	46bd      	mov	sp, r7
 80091b0:	b004      	add	sp, #16
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	4000b400 	.word	0x4000b400
 80091b8:	40006800 	.word	0x40006800
 80091bc:	ffe0ffff 	.word	0xffe0ffff
 80091c0:	f0ffffff 	.word	0xf0ffffff

080091c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091d2:	e14d      	b.n	8009470 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2101      	movs	r1, #1
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4091      	lsls	r1, r2
 80091de:	000a      	movs	r2, r1
 80091e0:	4013      	ands	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d100      	bne.n	80091ec <HAL_GPIO_Init+0x28>
 80091ea:	e13e      	b.n	800946a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2203      	movs	r2, #3
 80091f2:	4013      	ands	r3, r2
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d005      	beq.n	8009204 <HAL_GPIO_Init+0x40>
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2203      	movs	r2, #3
 80091fe:	4013      	ands	r3, r2
 8009200:	2b02      	cmp	r3, #2
 8009202:	d130      	bne.n	8009266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	2203      	movs	r2, #3
 8009210:	409a      	lsls	r2, r3
 8009212:	0013      	movs	r3, r2
 8009214:	43da      	mvns	r2, r3
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	4013      	ands	r3, r2
 800921a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	68da      	ldr	r2, [r3, #12]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	409a      	lsls	r2, r3
 8009226:	0013      	movs	r3, r2
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4313      	orrs	r3, r2
 800922c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800923a:	2201      	movs	r2, #1
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	409a      	lsls	r2, r3
 8009240:	0013      	movs	r3, r2
 8009242:	43da      	mvns	r2, r3
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	4013      	ands	r3, r2
 8009248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	091b      	lsrs	r3, r3, #4
 8009250:	2201      	movs	r2, #1
 8009252:	401a      	ands	r2, r3
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	409a      	lsls	r2, r3
 8009258:	0013      	movs	r3, r2
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	4313      	orrs	r3, r2
 800925e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	2203      	movs	r2, #3
 800926c:	4013      	ands	r3, r2
 800926e:	2b03      	cmp	r3, #3
 8009270:	d017      	beq.n	80092a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	2203      	movs	r2, #3
 800927e:	409a      	lsls	r2, r3
 8009280:	0013      	movs	r3, r2
 8009282:	43da      	mvns	r2, r3
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	4013      	ands	r3, r2
 8009288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	409a      	lsls	r2, r3
 8009294:	0013      	movs	r3, r2
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	4313      	orrs	r3, r2
 800929a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2203      	movs	r2, #3
 80092a8:	4013      	ands	r3, r2
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d123      	bne.n	80092f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	08da      	lsrs	r2, r3, #3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3208      	adds	r2, #8
 80092b6:	0092      	lsls	r2, r2, #2
 80092b8:	58d3      	ldr	r3, [r2, r3]
 80092ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2207      	movs	r2, #7
 80092c0:	4013      	ands	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	220f      	movs	r2, #15
 80092c6:	409a      	lsls	r2, r3
 80092c8:	0013      	movs	r3, r2
 80092ca:	43da      	mvns	r2, r3
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	4013      	ands	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	691a      	ldr	r2, [r3, #16]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2107      	movs	r1, #7
 80092da:	400b      	ands	r3, r1
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	409a      	lsls	r2, r3
 80092e0:	0013      	movs	r3, r2
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	08da      	lsrs	r2, r3, #3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3208      	adds	r2, #8
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	6939      	ldr	r1, [r7, #16]
 80092f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	2203      	movs	r2, #3
 8009302:	409a      	lsls	r2, r3
 8009304:	0013      	movs	r3, r2
 8009306:	43da      	mvns	r2, r3
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	4013      	ands	r3, r2
 800930c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	2203      	movs	r2, #3
 8009314:	401a      	ands	r2, r3
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	409a      	lsls	r2, r3
 800931c:	0013      	movs	r3, r2
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4313      	orrs	r3, r2
 8009322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	23c0      	movs	r3, #192	@ 0xc0
 8009330:	029b      	lsls	r3, r3, #10
 8009332:	4013      	ands	r3, r2
 8009334:	d100      	bne.n	8009338 <HAL_GPIO_Init+0x174>
 8009336:	e098      	b.n	800946a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009338:	4a53      	ldr	r2, [pc, #332]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	089b      	lsrs	r3, r3, #2
 800933e:	3318      	adds	r3, #24
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	589b      	ldr	r3, [r3, r2]
 8009344:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2203      	movs	r2, #3
 800934a:	4013      	ands	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	220f      	movs	r2, #15
 8009350:	409a      	lsls	r2, r3
 8009352:	0013      	movs	r3, r2
 8009354:	43da      	mvns	r2, r3
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	4013      	ands	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	23a0      	movs	r3, #160	@ 0xa0
 8009360:	05db      	lsls	r3, r3, #23
 8009362:	429a      	cmp	r2, r3
 8009364:	d019      	beq.n	800939a <HAL_GPIO_Init+0x1d6>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a48      	ldr	r2, [pc, #288]	@ (800948c <HAL_GPIO_Init+0x2c8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d013      	beq.n	8009396 <HAL_GPIO_Init+0x1d2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a47      	ldr	r2, [pc, #284]	@ (8009490 <HAL_GPIO_Init+0x2cc>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d00d      	beq.n	8009392 <HAL_GPIO_Init+0x1ce>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a46      	ldr	r2, [pc, #280]	@ (8009494 <HAL_GPIO_Init+0x2d0>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d007      	beq.n	800938e <HAL_GPIO_Init+0x1ca>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a45      	ldr	r2, [pc, #276]	@ (8009498 <HAL_GPIO_Init+0x2d4>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d101      	bne.n	800938a <HAL_GPIO_Init+0x1c6>
 8009386:	2304      	movs	r3, #4
 8009388:	e008      	b.n	800939c <HAL_GPIO_Init+0x1d8>
 800938a:	2305      	movs	r3, #5
 800938c:	e006      	b.n	800939c <HAL_GPIO_Init+0x1d8>
 800938e:	2303      	movs	r3, #3
 8009390:	e004      	b.n	800939c <HAL_GPIO_Init+0x1d8>
 8009392:	2302      	movs	r3, #2
 8009394:	e002      	b.n	800939c <HAL_GPIO_Init+0x1d8>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <HAL_GPIO_Init+0x1d8>
 800939a:	2300      	movs	r3, #0
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	2103      	movs	r1, #3
 80093a0:	400a      	ands	r2, r1
 80093a2:	00d2      	lsls	r2, r2, #3
 80093a4:	4093      	lsls	r3, r2
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80093ac:	4936      	ldr	r1, [pc, #216]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	089b      	lsrs	r3, r3, #2
 80093b2:	3318      	adds	r3, #24
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80093ba:	4b33      	ldr	r3, [pc, #204]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	43da      	mvns	r2, r3
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	4013      	ands	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	2380      	movs	r3, #128	@ 0x80
 80093d0:	035b      	lsls	r3, r3, #13
 80093d2:	4013      	ands	r3, r2
 80093d4:	d003      	beq.n	80093de <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80093de:	4b2a      	ldr	r3, [pc, #168]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80093e4:	4b28      	ldr	r3, [pc, #160]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	43da      	mvns	r2, r3
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	4013      	ands	r3, r2
 80093f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	2380      	movs	r3, #128	@ 0x80
 80093fa:	039b      	lsls	r3, r3, #14
 80093fc:	4013      	ands	r3, r2
 80093fe:	d003      	beq.n	8009408 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4313      	orrs	r3, r2
 8009406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009408:	4b1f      	ldr	r3, [pc, #124]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800940e:	4a1e      	ldr	r2, [pc, #120]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 8009410:	2384      	movs	r3, #132	@ 0x84
 8009412:	58d3      	ldr	r3, [r2, r3]
 8009414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	43da      	mvns	r2, r3
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	4013      	ands	r3, r2
 800941e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	2380      	movs	r3, #128	@ 0x80
 8009426:	029b      	lsls	r3, r3, #10
 8009428:	4013      	ands	r3, r2
 800942a:	d003      	beq.n	8009434 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009434:	4914      	ldr	r1, [pc, #80]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 8009436:	2284      	movs	r2, #132	@ 0x84
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800943c:	4a12      	ldr	r2, [pc, #72]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 800943e:	2380      	movs	r3, #128	@ 0x80
 8009440:	58d3      	ldr	r3, [r2, r3]
 8009442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	43da      	mvns	r2, r3
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	4013      	ands	r3, r2
 800944c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	2380      	movs	r3, #128	@ 0x80
 8009454:	025b      	lsls	r3, r3, #9
 8009456:	4013      	ands	r3, r2
 8009458:	d003      	beq.n	8009462 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009462:	4909      	ldr	r1, [pc, #36]	@ (8009488 <HAL_GPIO_Init+0x2c4>)
 8009464:	2280      	movs	r2, #128	@ 0x80
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	3301      	adds	r3, #1
 800946e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	40da      	lsrs	r2, r3
 8009478:	1e13      	subs	r3, r2, #0
 800947a:	d000      	beq.n	800947e <HAL_GPIO_Init+0x2ba>
 800947c:	e6aa      	b.n	80091d4 <HAL_GPIO_Init+0x10>
  }
}
 800947e:	46c0      	nop			@ (mov r8, r8)
 8009480:	46c0      	nop			@ (mov r8, r8)
 8009482:	46bd      	mov	sp, r7
 8009484:	b006      	add	sp, #24
 8009486:	bd80      	pop	{r7, pc}
 8009488:	40021800 	.word	0x40021800
 800948c:	50000400 	.word	0x50000400
 8009490:	50000800 	.word	0x50000800
 8009494:	50000c00 	.word	0x50000c00
 8009498:	50001000 	.word	0x50001000

0800949c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	0008      	movs	r0, r1
 80094a6:	0011      	movs	r1, r2
 80094a8:	1cbb      	adds	r3, r7, #2
 80094aa:	1c02      	adds	r2, r0, #0
 80094ac:	801a      	strh	r2, [r3, #0]
 80094ae:	1c7b      	adds	r3, r7, #1
 80094b0:	1c0a      	adds	r2, r1, #0
 80094b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80094b4:	1c7b      	adds	r3, r7, #1
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d004      	beq.n	80094c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80094bc:	1cbb      	adds	r3, r7, #2
 80094be:	881a      	ldrh	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80094c4:	e003      	b.n	80094ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80094c6:	1cbb      	adds	r3, r7, #2
 80094c8:	881a      	ldrh	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80094ce:	46c0      	nop			@ (mov r8, r8)
 80094d0:	46bd      	mov	sp, r7
 80094d2:	b002      	add	sp, #8
 80094d4:	bd80      	pop	{r7, pc}
	...

080094d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e08f      	b.n	800960a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2241      	movs	r2, #65	@ 0x41
 80094ee:	5c9b      	ldrb	r3, [r3, r2]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d107      	bne.n	8009506 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2240      	movs	r2, #64	@ 0x40
 80094fa:	2100      	movs	r1, #0
 80094fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	0018      	movs	r0, r3
 8009502:	f7fd fdd1 	bl	80070a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2241      	movs	r2, #65	@ 0x41
 800950a:	2124      	movs	r1, #36	@ 0x24
 800950c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2101      	movs	r1, #1
 800951a:	438a      	bics	r2, r1
 800951c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	493b      	ldr	r1, [pc, #236]	@ (8009614 <HAL_I2C_Init+0x13c>)
 8009528:	400a      	ands	r2, r1
 800952a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4938      	ldr	r1, [pc, #224]	@ (8009618 <HAL_I2C_Init+0x140>)
 8009538:	400a      	ands	r2, r1
 800953a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d108      	bne.n	8009556 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2180      	movs	r1, #128	@ 0x80
 800954e:	0209      	lsls	r1, r1, #8
 8009550:	430a      	orrs	r2, r1
 8009552:	609a      	str	r2, [r3, #8]
 8009554:	e007      	b.n	8009566 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689a      	ldr	r2, [r3, #8]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2184      	movs	r1, #132	@ 0x84
 8009560:	0209      	lsls	r1, r1, #8
 8009562:	430a      	orrs	r2, r1
 8009564:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d109      	bne.n	8009582 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2180      	movs	r1, #128	@ 0x80
 800957a:	0109      	lsls	r1, r1, #4
 800957c:	430a      	orrs	r2, r1
 800957e:	605a      	str	r2, [r3, #4]
 8009580:	e007      	b.n	8009592 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4923      	ldr	r1, [pc, #140]	@ (800961c <HAL_I2C_Init+0x144>)
 800958e:	400a      	ands	r2, r1
 8009590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4920      	ldr	r1, [pc, #128]	@ (8009620 <HAL_I2C_Init+0x148>)
 800959e:	430a      	orrs	r2, r1
 80095a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	491a      	ldr	r1, [pc, #104]	@ (8009618 <HAL_I2C_Init+0x140>)
 80095ae:	400a      	ands	r2, r1
 80095b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691a      	ldr	r2, [r3, #16]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	69d9      	ldr	r1, [r3, #28]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1a      	ldr	r2, [r3, #32]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2101      	movs	r1, #1
 80095e8:	430a      	orrs	r2, r1
 80095ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2241      	movs	r2, #65	@ 0x41
 80095f6:	2120      	movs	r1, #32
 80095f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2242      	movs	r2, #66	@ 0x42
 8009604:	2100      	movs	r1, #0
 8009606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	0018      	movs	r0, r3
 800960c:	46bd      	mov	sp, r7
 800960e:	b002      	add	sp, #8
 8009610:	bd80      	pop	{r7, pc}
 8009612:	46c0      	nop			@ (mov r8, r8)
 8009614:	f0ffffff 	.word	0xf0ffffff
 8009618:	ffff7fff 	.word	0xffff7fff
 800961c:	fffff7ff 	.word	0xfffff7ff
 8009620:	02008000 	.word	0x02008000

08009624 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2241      	movs	r2, #65	@ 0x41
 8009632:	5c9b      	ldrb	r3, [r3, r2]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b20      	cmp	r3, #32
 8009638:	d138      	bne.n	80096ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2240      	movs	r2, #64	@ 0x40
 800963e:	5c9b      	ldrb	r3, [r3, r2]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009644:	2302      	movs	r3, #2
 8009646:	e032      	b.n	80096ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2240      	movs	r2, #64	@ 0x40
 800964c:	2101      	movs	r1, #1
 800964e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2241      	movs	r2, #65	@ 0x41
 8009654:	2124      	movs	r1, #36	@ 0x24
 8009656:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2101      	movs	r1, #1
 8009664:	438a      	bics	r2, r1
 8009666:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4911      	ldr	r1, [pc, #68]	@ (80096b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009674:	400a      	ands	r2, r1
 8009676:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6819      	ldr	r1, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2101      	movs	r1, #1
 8009694:	430a      	orrs	r2, r1
 8009696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2241      	movs	r2, #65	@ 0x41
 800969c:	2120      	movs	r1, #32
 800969e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2240      	movs	r2, #64	@ 0x40
 80096a4:	2100      	movs	r1, #0
 80096a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	e000      	b.n	80096ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096ac:	2302      	movs	r3, #2
  }
}
 80096ae:	0018      	movs	r0, r3
 80096b0:	46bd      	mov	sp, r7
 80096b2:	b002      	add	sp, #8
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	46c0      	nop			@ (mov r8, r8)
 80096b8:	ffffefff 	.word	0xffffefff

080096bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2241      	movs	r2, #65	@ 0x41
 80096ca:	5c9b      	ldrb	r3, [r3, r2]
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d139      	bne.n	8009746 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2240      	movs	r2, #64	@ 0x40
 80096d6:	5c9b      	ldrb	r3, [r3, r2]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80096dc:	2302      	movs	r3, #2
 80096de:	e033      	b.n	8009748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2240      	movs	r2, #64	@ 0x40
 80096e4:	2101      	movs	r1, #1
 80096e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2241      	movs	r2, #65	@ 0x41
 80096ec:	2124      	movs	r1, #36	@ 0x24
 80096ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2101      	movs	r1, #1
 80096fc:	438a      	bics	r2, r1
 80096fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4a11      	ldr	r2, [pc, #68]	@ (8009750 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800970c:	4013      	ands	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2101      	movs	r1, #1
 800972e:	430a      	orrs	r2, r1
 8009730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2241      	movs	r2, #65	@ 0x41
 8009736:	2120      	movs	r1, #32
 8009738:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2240      	movs	r2, #64	@ 0x40
 800973e:	2100      	movs	r1, #0
 8009740:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	e000      	b.n	8009748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009746:	2302      	movs	r3, #2
  }
}
 8009748:	0018      	movs	r0, r3
 800974a:	46bd      	mov	sp, r7
 800974c:	b004      	add	sp, #16
 800974e:	bd80      	pop	{r7, pc}
 8009750:	fffff0ff 	.word	0xfffff0ff

08009754 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	000a      	movs	r2, r1
 800975e:	1cbb      	adds	r3, r7, #2
 8009760:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8009762:	230a      	movs	r3, #10
 8009764:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8009766:	e002      	b.n	800976e <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3b01      	subs	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1f9      	bne.n	8009768 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8009774:	1cbb      	adds	r3, r7, #2
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	4a06      	ldr	r2, [pc, #24]	@ (8009794 <PCD_GET_EP_RX_CNT+0x40>)
 800977c:	4694      	mov	ip, r2
 800977e:	4463      	add	r3, ip
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	0c1b      	lsrs	r3, r3, #16
 8009784:	b29b      	uxth	r3, r3
 8009786:	059b      	lsls	r3, r3, #22
 8009788:	0d9b      	lsrs	r3, r3, #22
 800978a:	b29b      	uxth	r3, r3
}
 800978c:	0018      	movs	r0, r3
 800978e:	46bd      	mov	sp, r7
 8009790:	b004      	add	sp, #16
 8009792:	bd80      	pop	{r7, pc}
 8009794:	40009800 	.word	0x40009800

08009798 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	000a      	movs	r2, r1
 80097a2:	1cbb      	adds	r3, r7, #2
 80097a4:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80097a6:	230a      	movs	r3, #10
 80097a8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80097aa:	e002      	b.n	80097b2 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1f9      	bne.n	80097ac <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80097b8:	1cbb      	adds	r3, r7, #2
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	4a06      	ldr	r2, [pc, #24]	@ (80097d8 <PCD_GET_EP_DBUF0_CNT+0x40>)
 80097c0:	4694      	mov	ip, r2
 80097c2:	4463      	add	r3, ip
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	0c1b      	lsrs	r3, r3, #16
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	059b      	lsls	r3, r3, #22
 80097cc:	0d9b      	lsrs	r3, r3, #22
 80097ce:	b29b      	uxth	r3, r3
}
 80097d0:	0018      	movs	r0, r3
 80097d2:	46bd      	mov	sp, r7
 80097d4:	b004      	add	sp, #16
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	40009800 	.word	0x40009800

080097dc <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	000a      	movs	r2, r1
 80097e6:	1cbb      	adds	r3, r7, #2
 80097e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80097ea:	230a      	movs	r3, #10
 80097ec:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80097ee:	e002      	b.n	80097f6 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1f9      	bne.n	80097f0 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80097fc:	1cbb      	adds	r3, r7, #2
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	4a06      	ldr	r2, [pc, #24]	@ (800981c <PCD_GET_EP_DBUF1_CNT+0x40>)
 8009804:	4694      	mov	ip, r2
 8009806:	4463      	add	r3, ip
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	0c1b      	lsrs	r3, r3, #16
 800980c:	b29b      	uxth	r3, r3
 800980e:	059b      	lsls	r3, r3, #22
 8009810:	0d9b      	lsrs	r3, r3, #22
 8009812:	b29b      	uxth	r3, r3
}
 8009814:	0018      	movs	r0, r3
 8009816:	46bd      	mov	sp, r7
 8009818:	b004      	add	sp, #16
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40009800 	.word	0x40009800

08009820 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b087      	sub	sp, #28
 8009824:	af02      	add	r7, sp, #8
 8009826:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e0ea      	b.n	8009a08 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a76      	ldr	r2, [pc, #472]	@ (8009a10 <HAL_PCD_Init+0x1f0>)
 8009836:	5c9b      	ldrb	r3, [r3, r2]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d108      	bne.n	8009850 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	23a5      	movs	r3, #165	@ 0xa5
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	2100      	movs	r1, #0
 8009846:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	0018      	movs	r0, r3
 800984c:	f00c fc6c 	bl	8016128 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a6f      	ldr	r2, [pc, #444]	@ (8009a10 <HAL_PCD_Init+0x1f0>)
 8009854:	2103      	movs	r1, #3
 8009856:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	0018      	movs	r0, r3
 800985e:	f004 fecb 	bl	800e5f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009862:	230f      	movs	r3, #15
 8009864:	18fb      	adds	r3, r7, r3
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	e049      	b.n	8009900 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800986c:	200f      	movs	r0, #15
 800986e:	183b      	adds	r3, r7, r0
 8009870:	781a      	ldrb	r2, [r3, #0]
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	0013      	movs	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	189b      	adds	r3, r3, r2
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	18cb      	adds	r3, r1, r3
 800987e:	3315      	adds	r3, #21
 8009880:	2201      	movs	r2, #1
 8009882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009884:	183b      	adds	r3, r7, r0
 8009886:	781a      	ldrb	r2, [r3, #0]
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	0013      	movs	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	189b      	adds	r3, r3, r2
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	18cb      	adds	r3, r1, r3
 8009894:	3314      	adds	r3, #20
 8009896:	183a      	adds	r2, r7, r0
 8009898:	7812      	ldrb	r2, [r2, #0]
 800989a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800989c:	183b      	adds	r3, r7, r0
 800989e:	781a      	ldrb	r2, [r3, #0]
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	0013      	movs	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	189b      	adds	r3, r3, r2
 80098a8:	00db      	lsls	r3, r3, #3
 80098aa:	18cb      	adds	r3, r1, r3
 80098ac:	3317      	adds	r3, #23
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80098b2:	183b      	adds	r3, r7, r0
 80098b4:	781a      	ldrb	r2, [r3, #0]
 80098b6:	6879      	ldr	r1, [r7, #4]
 80098b8:	0013      	movs	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	189b      	adds	r3, r3, r2
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	18cb      	adds	r3, r1, r3
 80098c2:	3324      	adds	r3, #36	@ 0x24
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80098c8:	183b      	adds	r3, r7, r0
 80098ca:	781a      	ldrb	r2, [r3, #0]
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	0013      	movs	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	189b      	adds	r3, r3, r2
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	18cb      	adds	r3, r1, r3
 80098d8:	3328      	adds	r3, #40	@ 0x28
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80098de:	183b      	adds	r3, r7, r0
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	0013      	movs	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	189b      	adds	r3, r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	18cb      	adds	r3, r1, r3
 80098f0:	3304      	adds	r3, #4
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098f6:	183b      	adds	r3, r7, r0
 80098f8:	781a      	ldrb	r2, [r3, #0]
 80098fa:	183b      	adds	r3, r7, r0
 80098fc:	3201      	adds	r2, #1
 80098fe:	701a      	strb	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	791b      	ldrb	r3, [r3, #4]
 8009904:	210f      	movs	r1, #15
 8009906:	187a      	adds	r2, r7, r1
 8009908:	7812      	ldrb	r2, [r2, #0]
 800990a:	429a      	cmp	r2, r3
 800990c:	d3ae      	bcc.n	800986c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800990e:	187b      	adds	r3, r7, r1
 8009910:	2200      	movs	r2, #0
 8009912:	701a      	strb	r2, [r3, #0]
 8009914:	e056      	b.n	80099c4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009916:	240f      	movs	r4, #15
 8009918:	193b      	adds	r3, r7, r4
 800991a:	781a      	ldrb	r2, [r3, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	2356      	movs	r3, #86	@ 0x56
 8009920:	33ff      	adds	r3, #255	@ 0xff
 8009922:	0019      	movs	r1, r3
 8009924:	0013      	movs	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	189b      	adds	r3, r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	18c3      	adds	r3, r0, r3
 800992e:	185b      	adds	r3, r3, r1
 8009930:	2200      	movs	r2, #0
 8009932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009934:	193b      	adds	r3, r7, r4
 8009936:	781a      	ldrb	r2, [r3, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	23aa      	movs	r3, #170	@ 0xaa
 800993c:	0059      	lsls	r1, r3, #1
 800993e:	0013      	movs	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	189b      	adds	r3, r3, r2
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	18c3      	adds	r3, r0, r3
 8009948:	185b      	adds	r3, r3, r1
 800994a:	193a      	adds	r2, r7, r4
 800994c:	7812      	ldrb	r2, [r2, #0]
 800994e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009950:	193b      	adds	r3, r7, r4
 8009952:	781a      	ldrb	r2, [r3, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	2358      	movs	r3, #88	@ 0x58
 8009958:	33ff      	adds	r3, #255	@ 0xff
 800995a:	0019      	movs	r1, r3
 800995c:	0013      	movs	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	189b      	adds	r3, r3, r2
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	18c3      	adds	r3, r0, r3
 8009966:	185b      	adds	r3, r3, r1
 8009968:	2200      	movs	r2, #0
 800996a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800996c:	193b      	adds	r3, r7, r4
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	23b2      	movs	r3, #178	@ 0xb2
 8009974:	0059      	lsls	r1, r3, #1
 8009976:	0013      	movs	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	189b      	adds	r3, r3, r2
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	18c3      	adds	r3, r0, r3
 8009980:	185b      	adds	r3, r3, r1
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009986:	193b      	adds	r3, r7, r4
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	23b4      	movs	r3, #180	@ 0xb4
 800998e:	0059      	lsls	r1, r3, #1
 8009990:	0013      	movs	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	189b      	adds	r3, r3, r2
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	18c3      	adds	r3, r0, r3
 800999a:	185b      	adds	r3, r3, r1
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80099a0:	193b      	adds	r3, r7, r4
 80099a2:	781a      	ldrb	r2, [r3, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	23b6      	movs	r3, #182	@ 0xb6
 80099a8:	0059      	lsls	r1, r3, #1
 80099aa:	0013      	movs	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	189b      	adds	r3, r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	18c3      	adds	r3, r0, r3
 80099b4:	185b      	adds	r3, r3, r1
 80099b6:	2200      	movs	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099ba:	193b      	adds	r3, r7, r4
 80099bc:	781a      	ldrb	r2, [r3, #0]
 80099be:	193b      	adds	r3, r7, r4
 80099c0:	3201      	adds	r2, #1
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	791b      	ldrb	r3, [r3, #4]
 80099c8:	220f      	movs	r2, #15
 80099ca:	18ba      	adds	r2, r7, r2
 80099cc:	7812      	ldrb	r2, [r2, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d3a1      	bcc.n	8009916 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	466a      	mov	r2, sp
 80099da:	7c19      	ldrb	r1, [r3, #16]
 80099dc:	7011      	strb	r1, [r2, #0]
 80099de:	6859      	ldr	r1, [r3, #4]
 80099e0:	689a      	ldr	r2, [r3, #8]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f004 fe41 	bl	800e66a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a07      	ldr	r2, [pc, #28]	@ (8009a10 <HAL_PCD_Init+0x1f0>)
 80099f2:	2101      	movs	r1, #1
 80099f4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7b1b      	ldrb	r3, [r3, #12]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d103      	bne.n	8009a06 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	0018      	movs	r0, r3
 8009a02:	f001 fbf1 	bl	800b1e8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	0018      	movs	r0, r3
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	b005      	add	sp, #20
 8009a0e:	bd90      	pop	{r4, r7, pc}
 8009a10:	00000295 	.word	0x00000295

08009a14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	23a5      	movs	r3, #165	@ 0xa5
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	5cd3      	ldrb	r3, [r2, r3]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_PCD_Start+0x18>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e014      	b.n	8009a56 <HAL_PCD_Start+0x42>
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	23a5      	movs	r3, #165	@ 0xa5
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	2101      	movs	r1, #1
 8009a34:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f004 fdc8 	bl	800e5d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	0018      	movs	r0, r3
 8009a46:	f006 fbd2 	bl	80101ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	23a5      	movs	r3, #165	@ 0xa5
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	2100      	movs	r1, #0
 8009a52:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	0018      	movs	r0, r3
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	b002      	add	sp, #8
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f006 fbce 	bl	801020e <USB_ReadInterrupts>
 8009a72:	0003      	movs	r3, r0
 8009a74:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8009a76:	4a7c      	ldr	r2, [pc, #496]	@ (8009c68 <HAL_PCD_IRQHandler+0x208>)
 8009a78:	23a0      	movs	r3, #160	@ 0xa0
 8009a7a:	58d3      	ldr	r3, [r2, r3]
 8009a7c:	2204      	movs	r2, #4
 8009a7e:	4013      	ands	r3, r2
 8009a80:	d100      	bne.n	8009a84 <HAL_PCD_IRQHandler+0x24>
 8009a82:	e0ed      	b.n	8009c60 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	2380      	movs	r3, #128	@ 0x80
 8009a88:	021b      	lsls	r3, r3, #8
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	d004      	beq.n	8009a98 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	0018      	movs	r0, r3
 8009a92:	f000 fb35 	bl	800a100 <PCD_EP_ISR_Handler>

    return;
 8009a96:	e0e4      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	2380      	movs	r3, #128	@ 0x80
 8009a9c:	00db      	lsls	r3, r3, #3
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	d011      	beq.n	8009ac6 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	496f      	ldr	r1, [pc, #444]	@ (8009c6c <HAL_PCD_IRQHandler+0x20c>)
 8009aae:	400a      	ands	r2, r1
 8009ab0:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f00c fbfa 	bl	80162ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2100      	movs	r1, #0
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f000 f8e4 	bl	8009c8c <HAL_PCD_SetAddress>

    return;
 8009ac4:	e0cd      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	2380      	movs	r3, #128	@ 0x80
 8009aca:	01db      	lsls	r3, r3, #7
 8009acc:	4013      	ands	r3, r2
 8009ace:	d008      	beq.n	8009ae2 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4965      	ldr	r1, [pc, #404]	@ (8009c70 <HAL_PCD_IRQHandler+0x210>)
 8009adc:	400a      	ands	r2, r1
 8009ade:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009ae0:	e0bf      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	2380      	movs	r3, #128	@ 0x80
 8009ae6:	019b      	lsls	r3, r3, #6
 8009ae8:	4013      	ands	r3, r2
 8009aea:	d008      	beq.n	8009afe <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	495f      	ldr	r1, [pc, #380]	@ (8009c74 <HAL_PCD_IRQHandler+0x214>)
 8009af8:	400a      	ands	r2, r1
 8009afa:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009afc:	e0b1      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	2380      	movs	r3, #128	@ 0x80
 8009b02:	015b      	lsls	r3, r3, #5
 8009b04:	4013      	ands	r3, r2
 8009b06:	d02c      	beq.n	8009b62 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2104      	movs	r1, #4
 8009b14:	438a      	bics	r2, r1
 8009b16:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2108      	movs	r1, #8
 8009b24:	438a      	bics	r2, r1
 8009b26:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	23b3      	movs	r3, #179	@ 0xb3
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	5cd3      	ldrb	r3, [r2, r3]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d109      	bne.n	8009b48 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	23b3      	movs	r3, #179	@ 0xb3
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2100      	movs	r1, #0
 8009b42:	0018      	movs	r0, r3
 8009b44:	f00c fe32 	bl	80167ac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f00c fbf0 	bl	8016330 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4947      	ldr	r1, [pc, #284]	@ (8009c78 <HAL_PCD_IRQHandler+0x218>)
 8009b5c:	400a      	ands	r2, r1
 8009b5e:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009b60:	e07f      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	2380      	movs	r3, #128	@ 0x80
 8009b66:	011b      	lsls	r3, r3, #4
 8009b68:	4013      	ands	r3, r2
 8009b6a:	d01c      	beq.n	8009ba6 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2108      	movs	r1, #8
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	493d      	ldr	r1, [pc, #244]	@ (8009c7c <HAL_PCD_IRQHandler+0x21c>)
 8009b88:	400a      	ands	r2, r1
 8009b8a:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2104      	movs	r1, #4
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f00c fbaa 	bl	80162f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009ba4:	e05d      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2280      	movs	r2, #128	@ 0x80
 8009baa:	4013      	ands	r3, r2
 8009bac:	d038      	beq.n	8009c20 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4931      	ldr	r1, [pc, #196]	@ (8009c80 <HAL_PCD_IRQHandler+0x220>)
 8009bba:	400a      	ands	r2, r1
 8009bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	23b3      	movs	r3, #179	@ 0xb3
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	5cd3      	ldrb	r3, [r2, r3]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d125      	bne.n	8009c16 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2104      	movs	r1, #4
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2108      	movs	r1, #8
 8009be6:	430a      	orrs	r2, r1
 8009be8:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	23b3      	movs	r3, #179	@ 0xb3
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bfa:	089b      	lsrs	r3, r3, #2
 8009bfc:	223c      	movs	r2, #60	@ 0x3c
 8009bfe:	4013      	ands	r3, r2
 8009c00:	0019      	movs	r1, r3
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	23b4      	movs	r3, #180	@ 0xb4
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f00c fdcc 	bl	80167ac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009c14:	e025      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	0018      	movs	r0, r3
 8009c1a:	f00c fb6d 	bl	80162f8 <HAL_PCD_SuspendCallback>
    return;
 8009c1e:	e020      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	2380      	movs	r3, #128	@ 0x80
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4013      	ands	r3, r2
 8009c28:	d00c      	beq.n	8009c44 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4913      	ldr	r1, [pc, #76]	@ (8009c84 <HAL_PCD_IRQHandler+0x224>)
 8009c36:	400a      	ands	r2, r1
 8009c38:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	f00c fb27 	bl	8016290 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009c42:	e00e      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	2380      	movs	r3, #128	@ 0x80
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	d009      	beq.n	8009c62 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	490b      	ldr	r1, [pc, #44]	@ (8009c88 <HAL_PCD_IRQHandler+0x228>)
 8009c5a:	400a      	ands	r2, r1
 8009c5c:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009c5e:	e000      	b.n	8009c62 <HAL_PCD_IRQHandler+0x202>
    return;
 8009c60:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009c62:	46bd      	mov	sp, r7
 8009c64:	b004      	add	sp, #16
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	40010000 	.word	0x40010000
 8009c6c:	0000fbff 	.word	0x0000fbff
 8009c70:	0000bfff 	.word	0x0000bfff
 8009c74:	0000dfff 	.word	0x0000dfff
 8009c78:	0000efff 	.word	0x0000efff
 8009c7c:	0000f7ff 	.word	0x0000f7ff
 8009c80:	0000ff7f 	.word	0x0000ff7f
 8009c84:	0000fdff 	.word	0x0000fdff
 8009c88:	0000feff 	.word	0x0000feff

08009c8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	000a      	movs	r2, r1
 8009c96:	1cfb      	adds	r3, r7, #3
 8009c98:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	23a5      	movs	r3, #165	@ 0xa5
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	5cd3      	ldrb	r3, [r2, r3]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <HAL_PCD_SetAddress+0x1e>
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e016      	b.n	8009cd8 <HAL_PCD_SetAddress+0x4c>
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	23a5      	movs	r3, #165	@ 0xa5
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	1cfa      	adds	r2, r7, #3
 8009cb8:	7812      	ldrb	r2, [r2, #0]
 8009cba:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	1cfb      	adds	r3, r7, #3
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	0019      	movs	r1, r3
 8009cc6:	0010      	movs	r0, r2
 8009cc8:	f006 fa7e 	bl	80101c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	23a5      	movs	r3, #165	@ 0xa5
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	0018      	movs	r0, r3
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	b002      	add	sp, #8
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009ce0:	b590      	push	{r4, r7, lr}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	000c      	movs	r4, r1
 8009cea:	0010      	movs	r0, r2
 8009cec:	0019      	movs	r1, r3
 8009cee:	1cfb      	adds	r3, r7, #3
 8009cf0:	1c22      	adds	r2, r4, #0
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	003b      	movs	r3, r7
 8009cf6:	1c02      	adds	r2, r0, #0
 8009cf8:	801a      	strh	r2, [r3, #0]
 8009cfa:	1cbb      	adds	r3, r7, #2
 8009cfc:	1c0a      	adds	r2, r1, #0
 8009cfe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009d00:	230b      	movs	r3, #11
 8009d02:	18fb      	adds	r3, r7, r3
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d08:	1cfb      	adds	r3, r7, #3
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	b25b      	sxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da10      	bge.n	8009d34 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d12:	1cfb      	adds	r3, r7, #3
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2207      	movs	r2, #7
 8009d18:	401a      	ands	r2, r3
 8009d1a:	0013      	movs	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	189b      	adds	r3, r3, r2
 8009d20:	00db      	lsls	r3, r3, #3
 8009d22:	3310      	adds	r3, #16
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	18d3      	adds	r3, r2, r3
 8009d28:	3304      	adds	r3, #4
 8009d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	705a      	strb	r2, [r3, #1]
 8009d32:	e010      	b.n	8009d56 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d34:	1cfb      	adds	r3, r7, #3
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2207      	movs	r2, #7
 8009d3a:	401a      	ands	r2, r3
 8009d3c:	0013      	movs	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	189b      	adds	r3, r3, r2
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	3351      	adds	r3, #81	@ 0x51
 8009d46:	33ff      	adds	r3, #255	@ 0xff
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	18d3      	adds	r3, r2, r3
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009d56:	1cfb      	adds	r3, r7, #3
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2207      	movs	r2, #7
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009d64:	003b      	movs	r3, r7
 8009d66:	881a      	ldrh	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	1cba      	adds	r2, r7, #2
 8009d70:	7812      	ldrb	r2, [r2, #0]
 8009d72:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009d74:	1cbb      	adds	r3, r7, #2
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d102      	bne.n	8009d82 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	23a5      	movs	r3, #165	@ 0xa5
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	5cd3      	ldrb	r3, [r2, r3]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d101      	bne.n	8009d92 <HAL_PCD_EP_Open+0xb2>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	e013      	b.n	8009dba <HAL_PCD_EP_Open+0xda>
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	23a5      	movs	r3, #165	@ 0xa5
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	2101      	movs	r1, #1
 8009d9a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	0011      	movs	r1, r2
 8009da4:	0018      	movs	r0, r3
 8009da6:	f004 fc8b 	bl	800e6c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	23a5      	movs	r3, #165	@ 0xa5
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	2100      	movs	r1, #0
 8009db2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8009db4:	230b      	movs	r3, #11
 8009db6:	18fb      	adds	r3, r7, r3
 8009db8:	781b      	ldrb	r3, [r3, #0]
}
 8009dba:	0018      	movs	r0, r3
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	b005      	add	sp, #20
 8009dc0:	bd90      	pop	{r4, r7, pc}

08009dc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	000a      	movs	r2, r1
 8009dcc:	1cfb      	adds	r3, r7, #3
 8009dce:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009dd0:	1cfb      	adds	r3, r7, #3
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	b25b      	sxtb	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da10      	bge.n	8009dfc <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009dda:	1cfb      	adds	r3, r7, #3
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2207      	movs	r2, #7
 8009de0:	401a      	ands	r2, r3
 8009de2:	0013      	movs	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	189b      	adds	r3, r3, r2
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	3310      	adds	r3, #16
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	18d3      	adds	r3, r2, r3
 8009df0:	3304      	adds	r3, #4
 8009df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2201      	movs	r2, #1
 8009df8:	705a      	strb	r2, [r3, #1]
 8009dfa:	e010      	b.n	8009e1e <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dfc:	1cfb      	adds	r3, r7, #3
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2207      	movs	r2, #7
 8009e02:	401a      	ands	r2, r3
 8009e04:	0013      	movs	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	189b      	adds	r3, r3, r2
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	3351      	adds	r3, #81	@ 0x51
 8009e0e:	33ff      	adds	r3, #255	@ 0xff
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	18d3      	adds	r3, r2, r3
 8009e14:	3304      	adds	r3, #4
 8009e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e1e:	1cfb      	adds	r3, r7, #3
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2207      	movs	r2, #7
 8009e24:	4013      	ands	r3, r2
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	23a5      	movs	r3, #165	@ 0xa5
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	5cd3      	ldrb	r3, [r2, r3]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d101      	bne.n	8009e3c <HAL_PCD_EP_Close+0x7a>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e011      	b.n	8009e60 <HAL_PCD_EP_Close+0x9e>
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	23a5      	movs	r3, #165	@ 0xa5
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	2101      	movs	r1, #1
 8009e44:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	0011      	movs	r1, r2
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f004 ff6a 	bl	800ed28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	23a5      	movs	r3, #165	@ 0xa5
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	0018      	movs	r0, r3
 8009e62:	46bd      	mov	sp, r7
 8009e64:	b004      	add	sp, #16
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	200b      	movs	r0, #11
 8009e76:	183b      	adds	r3, r7, r0
 8009e78:	1c0a      	adds	r2, r1, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e7c:	0001      	movs	r1, r0
 8009e7e:	187b      	adds	r3, r7, r1
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2207      	movs	r2, #7
 8009e84:	401a      	ands	r2, r3
 8009e86:	0013      	movs	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	189b      	adds	r3, r3, r2
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	3351      	adds	r3, #81	@ 0x51
 8009e90:	33ff      	adds	r3, #255	@ 0xff
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	18d3      	adds	r3, r2, r3
 8009e96:	3304      	adds	r3, #4
 8009e98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009eb2:	187b      	adds	r3, r7, r1
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	2207      	movs	r2, #7
 8009eb8:	4013      	ands	r3, r2
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	0011      	movs	r1, r2
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f005 f893 	bl	800eff4 <USB_EPStartXfer>

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	b006      	add	sp, #24
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	000a      	movs	r2, r1
 8009ee2:	1cfb      	adds	r3, r7, #3
 8009ee4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009ee6:	1cfb      	adds	r3, r7, #3
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2207      	movs	r2, #7
 8009eec:	401a      	ands	r2, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	23b8      	movs	r3, #184	@ 0xb8
 8009ef2:	0059      	lsls	r1, r3, #1
 8009ef4:	0013      	movs	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	189b      	adds	r3, r3, r2
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	18c3      	adds	r3, r0, r3
 8009efe:	185b      	adds	r3, r3, r1
 8009f00:	681b      	ldr	r3, [r3, #0]
}
 8009f02:	0018      	movs	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	b002      	add	sp, #8
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]
 8009f16:	200b      	movs	r0, #11
 8009f18:	183b      	adds	r3, r7, r0
 8009f1a:	1c0a      	adds	r2, r1, #0
 8009f1c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f1e:	183b      	adds	r3, r7, r0
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	2207      	movs	r2, #7
 8009f24:	401a      	ands	r2, r3
 8009f26:	0013      	movs	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	189b      	adds	r3, r3, r2
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	3310      	adds	r3, #16
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	18d3      	adds	r3, r2, r3
 8009f34:	3304      	adds	r3, #4
 8009f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2224      	movs	r2, #36	@ 0x24
 8009f48:	2101      	movs	r1, #1
 8009f4a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2200      	movs	r2, #0
 8009f56:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f5e:	183b      	adds	r3, r7, r0
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	2207      	movs	r2, #7
 8009f64:	4013      	ands	r3, r2
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	0011      	movs	r1, r2
 8009f74:	0018      	movs	r0, r3
 8009f76:	f005 f83d 	bl	800eff4 <USB_EPStartXfer>

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	0018      	movs	r0, r3
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	b006      	add	sp, #24
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	000a      	movs	r2, r1
 8009f8e:	1cfb      	adds	r3, r7, #3
 8009f90:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009f92:	1cfb      	adds	r3, r7, #3
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2207      	movs	r2, #7
 8009f98:	4013      	ands	r3, r2
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	7912      	ldrb	r2, [r2, #4]
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d901      	bls.n	8009fa6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e048      	b.n	800a038 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009fa6:	1cfb      	adds	r3, r7, #3
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	b25b      	sxtb	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	da10      	bge.n	8009fd2 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fb0:	1cfb      	adds	r3, r7, #3
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2207      	movs	r2, #7
 8009fb6:	401a      	ands	r2, r3
 8009fb8:	0013      	movs	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	189b      	adds	r3, r3, r2
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	3310      	adds	r3, #16
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	18d3      	adds	r3, r2, r3
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	705a      	strb	r2, [r3, #1]
 8009fd0:	e00e      	b.n	8009ff0 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009fd2:	1cfb      	adds	r3, r7, #3
 8009fd4:	781a      	ldrb	r2, [r3, #0]
 8009fd6:	0013      	movs	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	189b      	adds	r3, r3, r2
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	3351      	adds	r3, #81	@ 0x51
 8009fe0:	33ff      	adds	r3, #255	@ 0xff
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	18d3      	adds	r3, r2, r3
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ff6:	1cfb      	adds	r3, r7, #3
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	2207      	movs	r2, #7
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	23a5      	movs	r3, #165	@ 0xa5
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	5cd3      	ldrb	r3, [r2, r3]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d101      	bne.n	800a014 <HAL_PCD_EP_SetStall+0x90>
 800a010:	2302      	movs	r3, #2
 800a012:	e011      	b.n	800a038 <HAL_PCD_EP_SetStall+0xb4>
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	23a5      	movs	r3, #165	@ 0xa5
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	2101      	movs	r1, #1
 800a01c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	0011      	movs	r1, r2
 800a026:	0018      	movs	r0, r3
 800a028:	f005 fffa 	bl	8010020 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	23a5      	movs	r3, #165	@ 0xa5
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	2100      	movs	r1, #0
 800a034:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	0018      	movs	r0, r3
 800a03a:	46bd      	mov	sp, r7
 800a03c:	b004      	add	sp, #16
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	000a      	movs	r2, r1
 800a04a:	1cfb      	adds	r3, r7, #3
 800a04c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a04e:	1cfb      	adds	r3, r7, #3
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	220f      	movs	r2, #15
 800a054:	4013      	ands	r3, r2
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	7912      	ldrb	r2, [r2, #4]
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d901      	bls.n	800a062 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e04a      	b.n	800a0f8 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a062:	1cfb      	adds	r3, r7, #3
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	b25b      	sxtb	r3, r3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	da10      	bge.n	800a08e <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a06c:	1cfb      	adds	r3, r7, #3
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2207      	movs	r2, #7
 800a072:	401a      	ands	r2, r3
 800a074:	0013      	movs	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	189b      	adds	r3, r3, r2
 800a07a:	00db      	lsls	r3, r3, #3
 800a07c:	3310      	adds	r3, #16
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	18d3      	adds	r3, r2, r3
 800a082:	3304      	adds	r3, #4
 800a084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	705a      	strb	r2, [r3, #1]
 800a08c:	e010      	b.n	800a0b0 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a08e:	1cfb      	adds	r3, r7, #3
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2207      	movs	r2, #7
 800a094:	401a      	ands	r2, r3
 800a096:	0013      	movs	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	189b      	adds	r3, r3, r2
 800a09c:	00db      	lsls	r3, r3, #3
 800a09e:	3351      	adds	r3, #81	@ 0x51
 800a0a0:	33ff      	adds	r3, #255	@ 0xff
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	18d3      	adds	r3, r2, r3
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0b6:	1cfb      	adds	r3, r7, #3
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2207      	movs	r2, #7
 800a0bc:	4013      	ands	r3, r2
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	23a5      	movs	r3, #165	@ 0xa5
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	5cd3      	ldrb	r3, [r2, r3]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d101      	bne.n	800a0d4 <HAL_PCD_EP_ClrStall+0x94>
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	e011      	b.n	800a0f8 <HAL_PCD_EP_ClrStall+0xb8>
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	23a5      	movs	r3, #165	@ 0xa5
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	2101      	movs	r1, #1
 800a0dc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	0011      	movs	r1, r2
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	f005 ffdc 	bl	80100a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	23a5      	movs	r3, #165	@ 0xa5
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b004      	add	sp, #16
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a100:	b5b0      	push	{r4, r5, r7, lr}
 800a102:	b08e      	sub	sp, #56	@ 0x38
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a108:	e355      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a110:	2022      	movs	r0, #34	@ 0x22
 800a112:	183b      	adds	r3, r7, r0
 800a114:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800a116:	183b      	adds	r3, r7, r0
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	2421      	movs	r4, #33	@ 0x21
 800a11e:	193b      	adds	r3, r7, r4
 800a120:	210f      	movs	r1, #15
 800a122:	400a      	ands	r2, r1
 800a124:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800a126:	193b      	adds	r3, r7, r4
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d000      	beq.n	800a130 <PCD_EP_ISR_Handler+0x30>
 800a12e:	e12b      	b.n	800a388 <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a130:	183b      	adds	r3, r7, r0
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	2210      	movs	r2, #16
 800a136:	4013      	ands	r3, r2
 800a138:	d140      	bne.n	800a1bc <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4ac5      	ldr	r2, [pc, #788]	@ (800a458 <PCD_EP_ISR_Handler+0x358>)
 800a142:	4013      	ands	r3, r2
 800a144:	60bb      	str	r3, [r7, #8]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	2180      	movs	r1, #128	@ 0x80
 800a14e:	0209      	lsls	r1, r1, #8
 800a150:	430a      	orrs	r2, r1
 800a152:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3314      	adds	r3, #20
 800a158:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4abe      	ldr	r2, [pc, #760]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a162:	4694      	mov	ip, r2
 800a164:	4463      	add	r3, ip
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	0c1b      	lsrs	r3, r3, #16
 800a16a:	059b      	lsls	r3, r3, #22
 800a16c:	0d9a      	lsrs	r2, r3, #22
 800a16e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a170:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a174:	695a      	ldr	r2, [r3, #20]
 800a176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	18d2      	adds	r2, r2, r3
 800a17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2100      	movs	r1, #0
 800a184:	0018      	movs	r0, r3
 800a186:	f00c f865 	bl	8016254 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	7c5b      	ldrb	r3, [r3, #17]
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d100      	bne.n	800a196 <PCD_EP_ISR_Handler+0x96>
 800a194:	e30f      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
 800a196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d000      	beq.n	800a1a0 <PCD_EP_ISR_Handler+0xa0>
 800a19e:	e30a      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7c5b      	ldrb	r3, [r3, #17]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2280      	movs	r2, #128	@ 0x80
 800a1a8:	4252      	negs	r2, r2
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	745a      	strb	r2, [r3, #17]
 800a1ba:	e2fc      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3355      	adds	r3, #85	@ 0x55
 800a1c0:	33ff      	adds	r3, #255	@ 0xff
 800a1c2:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	2132      	movs	r1, #50	@ 0x32
 800a1cc:	187b      	adds	r3, r7, r1
 800a1ce:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a1d0:	187b      	adds	r3, r7, r1
 800a1d2:	881a      	ldrh	r2, [r3, #0]
 800a1d4:	2380      	movs	r3, #128	@ 0x80
 800a1d6:	011b      	lsls	r3, r3, #4
 800a1d8:	4013      	ands	r3, r2
 800a1da:	d029      	beq.n	800a230 <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	0019      	movs	r1, r3
 800a1e6:	0010      	movs	r0, r2
 800a1e8:	f7ff fab4 	bl	8009754 <PCD_GET_EP_RX_CNT>
 800a1ec:	0003      	movs	r3, r0
 800a1ee:	001a      	movs	r2, r3
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	22a7      	movs	r2, #167	@ 0xa7
 800a1fc:	0092      	lsls	r2, r2, #2
 800a1fe:	1899      	adds	r1, r3, r2
 800a200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a202:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a206:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a208:	b29b      	uxth	r3, r3
 800a20a:	f006 f883 	bl	8010314 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a92      	ldr	r2, [pc, #584]	@ (800a460 <PCD_EP_ISR_Handler+0x360>)
 800a216:	4013      	ands	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	2180      	movs	r1, #128	@ 0x80
 800a222:	430a      	orrs	r2, r1
 800a224:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	0018      	movs	r0, r3
 800a22a:	f00b ffdd 	bl	80161e8 <HAL_PCD_SetupStageCallback>
 800a22e:	e2c2      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800a230:	2332      	movs	r3, #50	@ 0x32
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	2200      	movs	r2, #0
 800a236:	5e9b      	ldrsh	r3, [r3, r2]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	db00      	blt.n	800a23e <PCD_EP_ISR_Handler+0x13e>
 800a23c:	e2bb      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a86      	ldr	r2, [pc, #536]	@ (800a460 <PCD_EP_ISR_Handler+0x360>)
 800a246:	4013      	ands	r3, r2
 800a248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a250:	2180      	movs	r1, #128	@ 0x80
 800a252:	430a      	orrs	r2, r1
 800a254:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	0019      	movs	r1, r3
 800a260:	0010      	movs	r0, r2
 800a262:	f7ff fa77 	bl	8009754 <PCD_GET_EP_RX_CNT>
 800a266:	0003      	movs	r3, r0
 800a268:	001a      	movs	r2, r3
 800a26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01a      	beq.n	800a2ac <PCD_EP_ISR_Handler+0x1ac>
 800a276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a278:	695b      	ldr	r3, [r3, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d016      	beq.n	800a2ac <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a284:	6959      	ldr	r1, [r3, #20]
 800a286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a288:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f006 f840 	bl	8010314 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a296:	695a      	ldr	r2, [r3, #20]
 800a298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	18d2      	adds	r2, r2, r3
 800a29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f00b ffb3 	bl	8016212 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	2132      	movs	r1, #50	@ 0x32
 800a2b4:	187b      	adds	r3, r7, r1
 800a2b6:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a2b8:	187b      	adds	r3, r7, r1
 800a2ba:	881a      	ldrh	r2, [r3, #0]
 800a2bc:	2380      	movs	r3, #128	@ 0x80
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	d000      	beq.n	800a2c6 <PCD_EP_ISR_Handler+0x1c6>
 800a2c4:	e277      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
 800a2c6:	187b      	adds	r3, r7, r1
 800a2c8:	881a      	ldrh	r2, [r3, #0]
 800a2ca:	23c0      	movs	r3, #192	@ 0xc0
 800a2cc:	019b      	lsls	r3, r3, #6
 800a2ce:	401a      	ands	r2, r3
 800a2d0:	23c0      	movs	r3, #192	@ 0xc0
 800a2d2:	019b      	lsls	r3, r3, #6
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d100      	bne.n	800a2da <PCD_EP_ISR_Handler+0x1da>
 800a2d8:	e26d      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a2da:	4b60      	ldr	r3, [pc, #384]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	4b5f      	ldr	r3, [pc, #380]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a2e0:	0192      	lsls	r2, r2, #6
 800a2e2:	0992      	lsrs	r2, r2, #6
 800a2e4:	605a      	str	r2, [r3, #4]
 800a2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2ec:	d916      	bls.n	800a31c <PCD_EP_ISR_Handler+0x21c>
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	095b      	lsrs	r3, r3, #5
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	221f      	movs	r2, #31
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	d102      	bne.n	800a306 <PCD_EP_ISR_Handler+0x206>
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	3b01      	subs	r3, #1
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	4b55      	ldr	r3, [pc, #340]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	069b      	lsls	r3, r3, #26
 800a30e:	431a      	orrs	r2, r3
 800a310:	4b52      	ldr	r3, [pc, #328]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a312:	2180      	movs	r1, #128	@ 0x80
 800a314:	0609      	lsls	r1, r1, #24
 800a316:	430a      	orrs	r2, r1
 800a318:	605a      	str	r2, [r3, #4]
 800a31a:	e01e      	b.n	800a35a <PCD_EP_ISR_Handler+0x25a>
 800a31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d107      	bne.n	800a334 <PCD_EP_ISR_Handler+0x234>
 800a324:	4b4d      	ldr	r3, [pc, #308]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	4b4c      	ldr	r3, [pc, #304]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a32a:	2180      	movs	r1, #128	@ 0x80
 800a32c:	0609      	lsls	r1, r1, #24
 800a32e:	430a      	orrs	r2, r1
 800a330:	605a      	str	r2, [r3, #4]
 800a332:	e012      	b.n	800a35a <PCD_EP_ISR_Handler+0x25a>
 800a334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	085b      	lsrs	r3, r3, #1
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	2201      	movs	r2, #1
 800a342:	4013      	ands	r3, r2
 800a344:	d002      	beq.n	800a34c <PCD_EP_ISR_Handler+0x24c>
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	3301      	adds	r3, #1
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	4b43      	ldr	r3, [pc, #268]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a34e:	6859      	ldr	r1, [r3, #4]
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	069a      	lsls	r2, r3, #26
 800a354:	4b41      	ldr	r3, [pc, #260]	@ (800a45c <PCD_EP_ISR_Handler+0x35c>)
 800a356:	430a      	orrs	r2, r1
 800a358:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a40      	ldr	r2, [pc, #256]	@ (800a464 <PCD_EP_ISR_Handler+0x364>)
 800a362:	4013      	ands	r3, r2
 800a364:	613b      	str	r3, [r7, #16]
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	2280      	movs	r2, #128	@ 0x80
 800a36a:	0152      	lsls	r2, r2, #5
 800a36c:	4053      	eors	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2280      	movs	r2, #128	@ 0x80
 800a374:	0192      	lsls	r2, r2, #6
 800a376:	4053      	eors	r3, r2
 800a378:	613b      	str	r3, [r7, #16]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4939      	ldr	r1, [pc, #228]	@ (800a468 <PCD_EP_ISR_Handler+0x368>)
 800a382:	430a      	orrs	r2, r1
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	e216      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	001a      	movs	r2, r3
 800a38e:	2121      	movs	r1, #33	@ 0x21
 800a390:	187b      	adds	r3, r7, r1
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	18d3      	adds	r3, r2, r3
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	2032      	movs	r0, #50	@ 0x32
 800a39c:	183b      	adds	r3, r7, r0
 800a39e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800a3a0:	183b      	adds	r3, r7, r0
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	db00      	blt.n	800a3ac <PCD_EP_ISR_Handler+0x2ac>
 800a3aa:	e0e0      	b.n	800a56e <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	001a      	movs	r2, r3
 800a3b2:	187b      	adds	r3, r7, r1
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	18d3      	adds	r3, r2, r3
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a28      	ldr	r2, [pc, #160]	@ (800a460 <PCD_EP_ISR_Handler+0x360>)
 800a3be:	4013      	ands	r3, r2
 800a3c0:	61fb      	str	r3, [r7, #28]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	001a      	movs	r2, r3
 800a3c8:	0008      	movs	r0, r1
 800a3ca:	187b      	adds	r3, r7, r1
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	18d3      	adds	r3, r2, r3
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	2180      	movs	r1, #128	@ 0x80
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a3da:	183b      	adds	r3, r7, r0
 800a3dc:	781a      	ldrb	r2, [r3, #0]
 800a3de:	0013      	movs	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	189b      	adds	r3, r3, r2
 800a3e4:	00db      	lsls	r3, r3, #3
 800a3e6:	3351      	adds	r3, #81	@ 0x51
 800a3e8:	33ff      	adds	r3, #255	@ 0xff
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	18d3      	adds	r3, r2, r3
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f4:	7b1b      	ldrb	r3, [r3, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d11c      	bne.n	800a434 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2524      	movs	r5, #36	@ 0x24
 800a404:	197c      	adds	r4, r7, r5
 800a406:	0019      	movs	r1, r3
 800a408:	0010      	movs	r0, r2
 800a40a:	f7ff f9a3 	bl	8009754 <PCD_GET_EP_RX_CNT>
 800a40e:	0003      	movs	r3, r0
 800a410:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800a412:	002c      	movs	r4, r5
 800a414:	193b      	adds	r3, r7, r4
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d100      	bne.n	800a41e <PCD_EP_ISR_Handler+0x31e>
 800a41c:	e07f      	b.n	800a51e <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6818      	ldr	r0, [r3, #0]
 800a422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a424:	6959      	ldr	r1, [r3, #20]
 800a426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a428:	88da      	ldrh	r2, [r3, #6]
 800a42a:	193b      	adds	r3, r7, r4
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	f005 ff71 	bl	8010314 <USB_ReadPMA>
 800a432:	e074      	b.n	800a51e <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a436:	78db      	ldrb	r3, [r3, #3]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d117      	bne.n	800a46c <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a43c:	2324      	movs	r3, #36	@ 0x24
 800a43e:	18fc      	adds	r4, r7, r3
 800a440:	2332      	movs	r3, #50	@ 0x32
 800a442:	18fb      	adds	r3, r7, r3
 800a444:	881a      	ldrh	r2, [r3, #0]
 800a446:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	0018      	movs	r0, r3
 800a44c:	f000 f9c8 	bl	800a7e0 <HAL_PCD_EP_DB_Receive>
 800a450:	0003      	movs	r3, r0
 800a452:	8023      	strh	r3, [r4, #0]
 800a454:	e063      	b.n	800a51e <PCD_EP_ISR_Handler+0x41e>
 800a456:	46c0      	nop			@ (mov r8, r8)
 800a458:	07ff8f0f 	.word	0x07ff8f0f
 800a45c:	40009800 	.word	0x40009800
 800a460:	07ff0f8f 	.word	0x07ff0f8f
 800a464:	07ffbf8f 	.word	0x07ffbf8f
 800a468:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	001a      	movs	r2, r3
 800a472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	18d3      	adds	r3, r2, r3
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4ad4      	ldr	r2, [pc, #848]	@ (800a7d0 <PCD_EP_ISR_Handler+0x6d0>)
 800a47e:	4013      	ands	r3, r2
 800a480:	61bb      	str	r3, [r7, #24]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	001a      	movs	r2, r3
 800a488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	18d3      	adds	r3, r2, r3
 800a490:	69ba      	ldr	r2, [r7, #24]
 800a492:	49d0      	ldr	r1, [pc, #832]	@ (800a7d4 <PCD_EP_ISR_Handler+0x6d4>)
 800a494:	430a      	orrs	r2, r1
 800a496:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	001a      	movs	r2, r3
 800a49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	18d3      	adds	r3, r2, r3
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	2380      	movs	r3, #128	@ 0x80
 800a4aa:	01db      	lsls	r3, r3, #7
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	d01b      	beq.n	800a4e8 <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2524      	movs	r5, #36	@ 0x24
 800a4ba:	197c      	adds	r4, r7, r5
 800a4bc:	0019      	movs	r1, r3
 800a4be:	0010      	movs	r0, r2
 800a4c0:	f7ff f96a 	bl	8009798 <PCD_GET_EP_DBUF0_CNT>
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800a4c8:	002c      	movs	r4, r5
 800a4ca:	193b      	adds	r3, r7, r4
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d025      	beq.n	800a51e <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d8:	6959      	ldr	r1, [r3, #20]
 800a4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4dc:	891a      	ldrh	r2, [r3, #8]
 800a4de:	193b      	adds	r3, r7, r4
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	f005 ff17 	bl	8010314 <USB_ReadPMA>
 800a4e6:	e01a      	b.n	800a51e <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2524      	movs	r5, #36	@ 0x24
 800a4f2:	197c      	adds	r4, r7, r5
 800a4f4:	0019      	movs	r1, r3
 800a4f6:	0010      	movs	r0, r2
 800a4f8:	f7ff f970 	bl	80097dc <PCD_GET_EP_DBUF1_CNT>
 800a4fc:	0003      	movs	r3, r0
 800a4fe:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800a500:	002c      	movs	r4, r5
 800a502:	193b      	adds	r3, r7, r4
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d009      	beq.n	800a51e <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a510:	6959      	ldr	r1, [r3, #20]
 800a512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a514:	895a      	ldrh	r2, [r3, #10]
 800a516:	193b      	adds	r3, r7, r4
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	f005 fefb 	bl	8010314 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a520:	69da      	ldr	r2, [r3, #28]
 800a522:	2124      	movs	r1, #36	@ 0x24
 800a524:	187b      	adds	r3, r7, r1
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	18d2      	adds	r2, r2, r3
 800a52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a530:	695a      	ldr	r2, [r3, #20]
 800a532:	187b      	adds	r3, r7, r1
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	18d2      	adds	r2, r2, r3
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d005      	beq.n	800a550 <PCD_EP_ISR_Handler+0x450>
 800a544:	187b      	adds	r3, r7, r1
 800a546:	881a      	ldrh	r2, [r3, #0]
 800a548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d207      	bcs.n	800a560 <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	0011      	movs	r1, r2
 800a558:	0018      	movs	r0, r3
 800a55a:	f00b fe5a 	bl	8016212 <HAL_PCD_DataOutStageCallback>
 800a55e:	e006      	b.n	800a56e <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a566:	0011      	movs	r1, r2
 800a568:	0018      	movs	r0, r3
 800a56a:	f004 fd43 	bl	800eff4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800a56e:	2032      	movs	r0, #50	@ 0x32
 800a570:	183b      	adds	r3, r7, r0
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	2280      	movs	r2, #128	@ 0x80
 800a576:	4013      	ands	r3, r2
 800a578:	d100      	bne.n	800a57c <PCD_EP_ISR_Handler+0x47c>
 800a57a:	e11c      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 800a57c:	2121      	movs	r1, #33	@ 0x21
 800a57e:	187b      	adds	r3, r7, r1
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	0013      	movs	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	189b      	adds	r3, r3, r2
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	3310      	adds	r3, #16
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	18d3      	adds	r3, r2, r3
 800a590:	3304      	adds	r3, #4
 800a592:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	001a      	movs	r2, r3
 800a59a:	187b      	adds	r3, r7, r1
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	18d3      	adds	r3, r2, r3
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a8c      	ldr	r2, [pc, #560]	@ (800a7d8 <PCD_EP_ISR_Handler+0x6d8>)
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	001a      	movs	r2, r3
 800a5b0:	187b      	adds	r3, r7, r1
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	18d3      	adds	r3, r2, r3
 800a5b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5ba:	2180      	movs	r1, #128	@ 0x80
 800a5bc:	0209      	lsls	r1, r1, #8
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c4:	78db      	ldrb	r3, [r3, #3]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d000      	beq.n	800a5cc <PCD_EP_ISR_Handler+0x4cc>
 800a5ca:	e0a3      	b.n	800a714 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d4:	7b1b      	ldrb	r3, [r3, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d100      	bne.n	800a5dc <PCD_EP_ISR_Handler+0x4dc>
 800a5da:	e093      	b.n	800a704 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a5dc:	183b      	adds	r3, r7, r0
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	2240      	movs	r2, #64	@ 0x40
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	d047      	beq.n	800a676 <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d121      	bne.n	800a632 <PCD_EP_ISR_Handler+0x532>
 800a5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	4a79      	ldr	r2, [pc, #484]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a5f6:	4694      	mov	ip, r2
 800a5f8:	4463      	add	r3, ip
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	4976      	ldr	r1, [pc, #472]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a604:	468c      	mov	ip, r1
 800a606:	4463      	add	r3, ip
 800a608:	0192      	lsls	r2, r2, #6
 800a60a:	0992      	lsrs	r2, r2, #6
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	4a71      	ldr	r2, [pc, #452]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a616:	4694      	mov	ip, r2
 800a618:	4463      	add	r3, ip
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	00db      	lsls	r3, r3, #3
 800a622:	496e      	ldr	r1, [pc, #440]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a624:	468c      	mov	ip, r1
 800a626:	4463      	add	r3, ip
 800a628:	2180      	movs	r1, #128	@ 0x80
 800a62a:	0609      	lsls	r1, r1, #24
 800a62c:	430a      	orrs	r2, r1
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	e068      	b.n	800a704 <PCD_EP_ISR_Handler+0x604>
 800a632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d164      	bne.n	800a704 <PCD_EP_ISR_Handler+0x604>
 800a63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	4a66      	ldr	r2, [pc, #408]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a642:	4694      	mov	ip, r2
 800a644:	4463      	add	r3, ip
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	4963      	ldr	r1, [pc, #396]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a650:	468c      	mov	ip, r1
 800a652:	4463      	add	r3, ip
 800a654:	0412      	lsls	r2, r2, #16
 800a656:	0c12      	lsrs	r2, r2, #16
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	00db      	lsls	r3, r3, #3
 800a660:	4a5e      	ldr	r2, [pc, #376]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a662:	189a      	adds	r2, r3, r2
 800a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	00db      	lsls	r3, r3, #3
 800a66a:	495c      	ldr	r1, [pc, #368]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a66c:	468c      	mov	ip, r1
 800a66e:	4463      	add	r3, ip
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	e046      	b.n	800a704 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d121      	bne.n	800a6c2 <PCD_EP_ISR_Handler+0x5c2>
 800a67e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	4a55      	ldr	r2, [pc, #340]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a686:	4694      	mov	ip, r2
 800a688:	4463      	add	r3, ip
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	4952      	ldr	r1, [pc, #328]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a694:	468c      	mov	ip, r1
 800a696:	4463      	add	r3, ip
 800a698:	0192      	lsls	r2, r2, #6
 800a69a:	0992      	lsrs	r2, r2, #6
 800a69c:	605a      	str	r2, [r3, #4]
 800a69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	4a4d      	ldr	r2, [pc, #308]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a6a6:	4694      	mov	ip, r2
 800a6a8:	4463      	add	r3, ip
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	494a      	ldr	r1, [pc, #296]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a6b4:	468c      	mov	ip, r1
 800a6b6:	4463      	add	r3, ip
 800a6b8:	2180      	movs	r1, #128	@ 0x80
 800a6ba:	0609      	lsls	r1, r1, #24
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	605a      	str	r2, [r3, #4]
 800a6c0:	e020      	b.n	800a704 <PCD_EP_ISR_Handler+0x604>
 800a6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d11c      	bne.n	800a704 <PCD_EP_ISR_Handler+0x604>
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	4a42      	ldr	r2, [pc, #264]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a6d2:	4694      	mov	ip, r2
 800a6d4:	4463      	add	r3, ip
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	493f      	ldr	r1, [pc, #252]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a6e0:	468c      	mov	ip, r1
 800a6e2:	4463      	add	r3, ip
 800a6e4:	0412      	lsls	r2, r2, #16
 800a6e6:	0c12      	lsrs	r2, r2, #16
 800a6e8:	605a      	str	r2, [r3, #4]
 800a6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	00db      	lsls	r3, r3, #3
 800a6f0:	4a3a      	ldr	r2, [pc, #232]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a6f2:	189a      	adds	r2, r3, r2
 800a6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	4938      	ldr	r1, [pc, #224]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a6fc:	468c      	mov	ip, r1
 800a6fe:	4463      	add	r3, ip
 800a700:	6852      	ldr	r2, [r2, #4]
 800a702:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a706:	781a      	ldrb	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	0011      	movs	r1, r2
 800a70c:	0018      	movs	r0, r3
 800a70e:	f00b fda1 	bl	8016254 <HAL_PCD_DataInStageCallback>
 800a712:	e050      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a714:	2332      	movs	r3, #50	@ 0x32
 800a716:	18fb      	adds	r3, r7, r3
 800a718:	881a      	ldrh	r2, [r3, #0]
 800a71a:	2380      	movs	r3, #128	@ 0x80
 800a71c:	005b      	lsls	r3, r3, #1
 800a71e:	4013      	ands	r3, r2
 800a720:	d141      	bne.n	800a7a6 <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	4a2c      	ldr	r2, [pc, #176]	@ (800a7dc <PCD_EP_ISR_Handler+0x6dc>)
 800a72a:	4694      	mov	ip, r2
 800a72c:	4463      	add	r3, ip
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	0c1b      	lsrs	r3, r3, #16
 800a732:	b29a      	uxth	r2, r3
 800a734:	2126      	movs	r1, #38	@ 0x26
 800a736:	187b      	adds	r3, r7, r1
 800a738:	0592      	lsls	r2, r2, #22
 800a73a:	0d92      	lsrs	r2, r2, #22
 800a73c:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800a73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	187b      	adds	r3, r7, r1
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d907      	bls.n	800a75a <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 800a74a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74c:	699a      	ldr	r2, [r3, #24]
 800a74e:	187b      	adds	r3, r7, r1
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	1ad2      	subs	r2, r2, r3
 800a754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a756:	619a      	str	r2, [r3, #24]
 800a758:	e002      	b.n	800a760 <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 800a75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75c:	2200      	movs	r2, #0
 800a75e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d107      	bne.n	800a778 <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76a:	781a      	ldrb	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	0011      	movs	r1, r2
 800a770:	0018      	movs	r0, r3
 800a772:	f00b fd6f 	bl	8016254 <HAL_PCD_DataInStageCallback>
 800a776:	e01e      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77a:	695a      	ldr	r2, [r3, #20]
 800a77c:	2126      	movs	r1, #38	@ 0x26
 800a77e:	187b      	adds	r3, r7, r1
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	18d2      	adds	r2, r2, r3
 800a784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a786:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78a:	69da      	ldr	r2, [r3, #28]
 800a78c:	187b      	adds	r3, r7, r1
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	18d2      	adds	r2, r2, r3
 800a792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a794:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a79c:	0011      	movs	r1, r2
 800a79e:	0018      	movs	r0, r3
 800a7a0:	f004 fc28 	bl	800eff4 <USB_EPStartXfer>
 800a7a4:	e007      	b.n	800a7b6 <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a7a6:	2332      	movs	r3, #50	@ 0x32
 800a7a8:	18fb      	adds	r3, r7, r3
 800a7aa:	881a      	ldrh	r2, [r3, #0]
 800a7ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	f000 f8ff 	bl	800a9b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7bc:	2380      	movs	r3, #128	@ 0x80
 800a7be:	021b      	lsls	r3, r3, #8
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	d000      	beq.n	800a7c6 <PCD_EP_ISR_Handler+0x6c6>
 800a7c4:	e4a1      	b.n	800a10a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	b00e      	add	sp, #56	@ 0x38
 800a7ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a7d0:	07ff8f8f 	.word	0x07ff8f8f
 800a7d4:	000080c0 	.word	0x000080c0
 800a7d8:	07ff8f0f 	.word	0x07ff8f0f
 800a7dc:	40009800 	.word	0x40009800

0800a7e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a7e0:	b5b0      	push	{r4, r5, r7, lr}
 800a7e2:	b08a      	sub	sp, #40	@ 0x28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	1dbb      	adds	r3, r7, #6
 800a7ec:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a7ee:	1dbb      	adds	r3, r7, #6
 800a7f0:	881a      	ldrh	r2, [r3, #0]
 800a7f2:	2380      	movs	r3, #128	@ 0x80
 800a7f4:	01db      	lsls	r3, r3, #7
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	d067      	beq.n	800a8ca <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	251e      	movs	r5, #30
 800a804:	197c      	adds	r4, r7, r5
 800a806:	0019      	movs	r1, r3
 800a808:	0010      	movs	r0, r2
 800a80a:	f7fe ffc5 	bl	8009798 <PCD_GET_EP_DBUF0_CNT>
 800a80e:	0003      	movs	r3, r0
 800a810:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	699a      	ldr	r2, [r3, #24]
 800a816:	197b      	adds	r3, r7, r5
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d307      	bcc.n	800a82e <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	699a      	ldr	r2, [r3, #24]
 800a822:	197b      	adds	r3, r7, r5
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	1ad2      	subs	r2, r2, r3
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	619a      	str	r2, [r3, #24]
 800a82c:	e002      	b.n	800a834 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2200      	movs	r2, #0
 800a832:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d11a      	bne.n	800a872 <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	001a      	movs	r2, r3
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	18d3      	adds	r3, r2, r3
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a55      	ldr	r2, [pc, #340]	@ (800a9a4 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800a84e:	4013      	ands	r3, r2
 800a850:	61bb      	str	r3, [r7, #24]
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	2280      	movs	r2, #128	@ 0x80
 800a856:	0192      	lsls	r2, r2, #6
 800a858:	4053      	eors	r3, r2
 800a85a:	61bb      	str	r3, [r7, #24]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	001a      	movs	r2, r3
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	18d3      	adds	r3, r2, r3
 800a86a:	69ba      	ldr	r2, [r7, #24]
 800a86c:	494e      	ldr	r1, [pc, #312]	@ (800a9a8 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800a86e:	430a      	orrs	r2, r1
 800a870:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a872:	1dbb      	adds	r3, r7, #6
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	2240      	movs	r2, #64	@ 0x40
 800a878:	4013      	ands	r3, r2
 800a87a:	d015      	beq.n	800a8a8 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	001a      	movs	r2, r3
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	18d3      	adds	r3, r2, r3
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a47      	ldr	r2, [pc, #284]	@ (800a9ac <HAL_PCD_EP_DB_Receive+0x1cc>)
 800a88e:	4013      	ands	r3, r2
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	001a      	movs	r2, r3
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	18d3      	adds	r3, r2, r3
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	4943      	ldr	r1, [pc, #268]	@ (800a9b0 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800a8a8:	241e      	movs	r4, #30
 800a8aa:	193b      	adds	r3, r7, r4
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d100      	bne.n	800a8b4 <HAL_PCD_EP_DB_Receive+0xd4>
 800a8b2:	e070      	b.n	800a996 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6818      	ldr	r0, [r3, #0]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6959      	ldr	r1, [r3, #20]
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	891a      	ldrh	r2, [r3, #8]
 800a8c0:	193b      	adds	r3, r7, r4
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	f005 fd26 	bl	8010314 <USB_ReadPMA>
 800a8c8:	e065      	b.n	800a996 <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	251e      	movs	r5, #30
 800a8d4:	197c      	adds	r4, r7, r5
 800a8d6:	0019      	movs	r1, r3
 800a8d8:	0010      	movs	r0, r2
 800a8da:	f7fe ff7f 	bl	80097dc <PCD_GET_EP_DBUF1_CNT>
 800a8de:	0003      	movs	r3, r0
 800a8e0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	699a      	ldr	r2, [r3, #24]
 800a8e6:	197b      	adds	r3, r7, r5
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d307      	bcc.n	800a8fe <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	699a      	ldr	r2, [r3, #24]
 800a8f2:	197b      	adds	r3, r7, r5
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	1ad2      	subs	r2, r2, r3
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	619a      	str	r2, [r3, #24]
 800a8fc:	e002      	b.n	800a904 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2200      	movs	r2, #0
 800a902:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d11a      	bne.n	800a942 <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	001a      	movs	r2, r3
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	18d3      	adds	r3, r2, r3
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a21      	ldr	r2, [pc, #132]	@ (800a9a4 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800a91e:	4013      	ands	r3, r2
 800a920:	627b      	str	r3, [r7, #36]	@ 0x24
 800a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a924:	2280      	movs	r2, #128	@ 0x80
 800a926:	0192      	lsls	r2, r2, #6
 800a928:	4053      	eors	r3, r2
 800a92a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	001a      	movs	r2, r3
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	18d3      	adds	r3, r2, r3
 800a93a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a93c:	491a      	ldr	r1, [pc, #104]	@ (800a9a8 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800a93e:	430a      	orrs	r2, r1
 800a940:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a942:	1dbb      	adds	r3, r7, #6
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	2240      	movs	r2, #64	@ 0x40
 800a948:	4013      	ands	r3, r2
 800a94a:	d115      	bne.n	800a978 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	001a      	movs	r2, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	18d3      	adds	r3, r2, r3
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a13      	ldr	r2, [pc, #76]	@ (800a9ac <HAL_PCD_EP_DB_Receive+0x1cc>)
 800a95e:	4013      	ands	r3, r2
 800a960:	623b      	str	r3, [r7, #32]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	001a      	movs	r2, r3
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	18d3      	adds	r3, r2, r3
 800a970:	6a3a      	ldr	r2, [r7, #32]
 800a972:	490f      	ldr	r1, [pc, #60]	@ (800a9b0 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800a974:	430a      	orrs	r2, r1
 800a976:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800a978:	241e      	movs	r4, #30
 800a97a:	193b      	adds	r3, r7, r4
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d009      	beq.n	800a996 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6959      	ldr	r1, [r3, #20]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	895a      	ldrh	r2, [r3, #10]
 800a98e:	193b      	adds	r3, r7, r4
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	f005 fcbf 	bl	8010314 <USB_ReadPMA>
    }
  }

  return count;
 800a996:	231e      	movs	r3, #30
 800a998:	18fb      	adds	r3, r7, r3
 800a99a:	881b      	ldrh	r3, [r3, #0]
}
 800a99c:	0018      	movs	r0, r3
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	b00a      	add	sp, #40	@ 0x28
 800a9a2:	bdb0      	pop	{r4, r5, r7, pc}
 800a9a4:	07ffbf8f 	.word	0x07ffbf8f
 800a9a8:	00008080 	.word	0x00008080
 800a9ac:	07ff8f8f 	.word	0x07ff8f8f
 800a9b0:	000080c0 	.word	0x000080c0

0800a9b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a9b4:	b5b0      	push	{r4, r5, r7, lr}
 800a9b6:	b08e      	sub	sp, #56	@ 0x38
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	1dbb      	adds	r3, r7, #6
 800a9c0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a9c2:	1dbb      	adds	r3, r7, #6
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	2240      	movs	r2, #64	@ 0x40
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	d100      	bne.n	800a9ce <HAL_PCD_EP_DB_Transmit+0x1a>
 800a9cc:	e1c3      	b.n	800ad56 <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	251e      	movs	r5, #30
 800a9d8:	197c      	adds	r4, r7, r5
 800a9da:	0019      	movs	r1, r3
 800a9dc:	0010      	movs	r0, r2
 800a9de:	f7fe fedb 	bl	8009798 <PCD_GET_EP_DBUF0_CNT>
 800a9e2:	0003      	movs	r3, r0
 800a9e4:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	197b      	adds	r3, r7, r5
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d907      	bls.n	800aa02 <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	699a      	ldr	r2, [r3, #24]
 800a9f6:	197b      	adds	r3, r7, r5
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	1ad2      	subs	r2, r2, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	619a      	str	r2, [r3, #24]
 800aa00:	e002      	b.n	800aa08 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2200      	movs	r2, #0
 800aa06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d000      	beq.n	800aa12 <HAL_PCD_EP_DB_Transmit+0x5e>
 800aa10:	e0b2      	b.n	800ab78 <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	785b      	ldrb	r3, [r3, #1]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d121      	bne.n	800aa5e <HAL_PCD_EP_DB_Transmit+0xaa>
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	4ada      	ldr	r2, [pc, #872]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa22:	4694      	mov	ip, r2
 800aa24:	4463      	add	r3, ip
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	00db      	lsls	r3, r3, #3
 800aa2e:	49d7      	ldr	r1, [pc, #860]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa30:	468c      	mov	ip, r1
 800aa32:	4463      	add	r3, ip
 800aa34:	0192      	lsls	r2, r2, #6
 800aa36:	0992      	lsrs	r2, r2, #6
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	4ad2      	ldr	r2, [pc, #840]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa42:	4694      	mov	ip, r2
 800aa44:	4463      	add	r3, ip
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	49cf      	ldr	r1, [pc, #828]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa50:	468c      	mov	ip, r1
 800aa52:	4463      	add	r3, ip
 800aa54:	2180      	movs	r1, #128	@ 0x80
 800aa56:	0609      	lsls	r1, r1, #24
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	e020      	b.n	800aaa0 <HAL_PCD_EP_DB_Transmit+0xec>
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	785b      	ldrb	r3, [r3, #1]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d11c      	bne.n	800aaa0 <HAL_PCD_EP_DB_Transmit+0xec>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	4ac7      	ldr	r2, [pc, #796]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa6e:	4694      	mov	ip, r2
 800aa70:	4463      	add	r3, ip
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	49c4      	ldr	r1, [pc, #784]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa7c:	468c      	mov	ip, r1
 800aa7e:	4463      	add	r3, ip
 800aa80:	0412      	lsls	r2, r2, #16
 800aa82:	0c12      	lsrs	r2, r2, #16
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	00db      	lsls	r3, r3, #3
 800aa8c:	4abf      	ldr	r2, [pc, #764]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa8e:	189a      	adds	r2, r3, r2
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	49bd      	ldr	r1, [pc, #756]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aa98:	468c      	mov	ip, r1
 800aa9a:	4463      	add	r3, ip
 800aa9c:	6812      	ldr	r2, [r2, #0]
 800aa9e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d121      	bne.n	800aaec <HAL_PCD_EP_DB_Transmit+0x138>
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	4ab7      	ldr	r2, [pc, #732]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aab0:	4694      	mov	ip, r2
 800aab2:	4463      	add	r3, ip
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	00db      	lsls	r3, r3, #3
 800aabc:	49b3      	ldr	r1, [pc, #716]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aabe:	468c      	mov	ip, r1
 800aac0:	4463      	add	r3, ip
 800aac2:	0192      	lsls	r2, r2, #6
 800aac4:	0992      	lsrs	r2, r2, #6
 800aac6:	605a      	str	r2, [r3, #4]
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	4aaf      	ldr	r2, [pc, #700]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aad0:	4694      	mov	ip, r2
 800aad2:	4463      	add	r3, ip
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	49ab      	ldr	r1, [pc, #684]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aade:	468c      	mov	ip, r1
 800aae0:	4463      	add	r3, ip
 800aae2:	2180      	movs	r1, #128	@ 0x80
 800aae4:	0609      	lsls	r1, r1, #24
 800aae6:	430a      	orrs	r2, r1
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	e020      	b.n	800ab2e <HAL_PCD_EP_DB_Transmit+0x17a>
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	785b      	ldrb	r3, [r3, #1]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d11c      	bne.n	800ab2e <HAL_PCD_EP_DB_Transmit+0x17a>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	00db      	lsls	r3, r3, #3
 800aafa:	4aa4      	ldr	r2, [pc, #656]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aafc:	4694      	mov	ip, r2
 800aafe:	4463      	add	r3, ip
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	49a0      	ldr	r1, [pc, #640]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ab0a:	468c      	mov	ip, r1
 800ab0c:	4463      	add	r3, ip
 800ab0e:	0412      	lsls	r2, r2, #16
 800ab10:	0c12      	lsrs	r2, r2, #16
 800ab12:	605a      	str	r2, [r3, #4]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	00db      	lsls	r3, r3, #3
 800ab1a:	4a9c      	ldr	r2, [pc, #624]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ab1c:	189a      	adds	r2, r3, r2
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	4999      	ldr	r1, [pc, #612]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ab26:	468c      	mov	ip, r1
 800ab28:	4463      	add	r3, ip
 800ab2a:	6852      	ldr	r2, [r2, #4]
 800ab2c:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	781a      	ldrb	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	0011      	movs	r1, r2
 800ab36:	0018      	movs	r0, r3
 800ab38:	f00b fb8c 	bl	8016254 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ab3c:	1dbb      	adds	r3, r7, #6
 800ab3e:	881a      	ldrh	r2, [r3, #0]
 800ab40:	2380      	movs	r3, #128	@ 0x80
 800ab42:	01db      	lsls	r3, r3, #7
 800ab44:	4013      	ands	r3, r2
 800ab46:	d100      	bne.n	800ab4a <HAL_PCD_EP_DB_Transmit+0x196>
 800ab48:	e2d5      	b.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	001a      	movs	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	18d3      	adds	r3, r2, r3
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a8d      	ldr	r2, [pc, #564]	@ (800ad90 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	001a      	movs	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	18d3      	adds	r3, r2, r3
 800ab6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab70:	4988      	ldr	r1, [pc, #544]	@ (800ad94 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800ab72:	430a      	orrs	r2, r1
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	e2be      	b.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ab78:	1dbb      	adds	r3, r7, #6
 800ab7a:	881a      	ldrh	r2, [r3, #0]
 800ab7c:	2380      	movs	r3, #128	@ 0x80
 800ab7e:	01db      	lsls	r3, r3, #7
 800ab80:	4013      	ands	r3, r2
 800ab82:	d015      	beq.n	800abb0 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	001a      	movs	r2, r3
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	18d3      	adds	r3, r2, r3
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a7e      	ldr	r2, [pc, #504]	@ (800ad90 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800ab96:	4013      	ands	r3, r2
 800ab98:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	001a      	movs	r2, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	18d3      	adds	r3, r2, r3
 800aba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abaa:	497a      	ldr	r1, [pc, #488]	@ (800ad94 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800abac:	430a      	orrs	r2, r1
 800abae:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2224      	movs	r2, #36	@ 0x24
 800abb4:	5c9b      	ldrb	r3, [r3, r2]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d000      	beq.n	800abbc <HAL_PCD_EP_DB_Transmit+0x208>
 800abba:	e29c      	b.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	695a      	ldr	r2, [r3, #20]
 800abc0:	211e      	movs	r1, #30
 800abc2:	187b      	adds	r3, r7, r1
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	18d2      	adds	r2, r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	69da      	ldr	r2, [r3, #28]
 800abd0:	187b      	adds	r3, r7, r1
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	18d2      	adds	r2, r2, r3
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	6a1a      	ldr	r2, [r3, #32]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d309      	bcc.n	800abfa <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	6a1a      	ldr	r2, [r3, #32]
 800abf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf2:	1ad2      	subs	r2, r2, r3
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	621a      	str	r2, [r3, #32]
 800abf8:	e016      	b.n	800ac28 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d108      	bne.n	800ac14 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 800ac02:	231e      	movs	r3, #30
 800ac04:	18fb      	adds	r3, r7, r3
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2224      	movs	r2, #36	@ 0x24
 800ac0e:	2100      	movs	r1, #0
 800ac10:	5499      	strb	r1, [r3, r2]
 800ac12:	e009      	b.n	800ac28 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2224      	movs	r2, #36	@ 0x24
 800ac18:	2100      	movs	r1, #0
 800ac1a:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2200      	movs	r2, #0
 800ac26:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	785b      	ldrb	r3, [r3, #1]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d162      	bne.n	800acf6 <HAL_PCD_EP_DB_Transmit+0x342>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	4a55      	ldr	r2, [pc, #340]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ac38:	4694      	mov	ip, r2
 800ac3a:	4463      	add	r3, ip
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	4951      	ldr	r1, [pc, #324]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ac46:	468c      	mov	ip, r1
 800ac48:	4463      	add	r3, ip
 800ac4a:	0192      	lsls	r2, r2, #6
 800ac4c:	0992      	lsrs	r2, r2, #6
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac54:	d91e      	bls.n	800ac94 <HAL_PCD_EP_DB_Transmit+0x2e0>
 800ac56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac58:	095b      	lsrs	r3, r3, #5
 800ac5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5e:	221f      	movs	r2, #31
 800ac60:	4013      	ands	r3, r2
 800ac62:	d102      	bne.n	800ac6a <HAL_PCD_EP_DB_Transmit+0x2b6>
 800ac64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac66:	3b01      	subs	r3, #1
 800ac68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	4a46      	ldr	r2, [pc, #280]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ac72:	4694      	mov	ip, r2
 800ac74:	4463      	add	r3, ip
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7a:	069b      	lsls	r3, r3, #26
 800ac7c:	431a      	orrs	r2, r3
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	00db      	lsls	r3, r3, #3
 800ac84:	4941      	ldr	r1, [pc, #260]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ac86:	468c      	mov	ip, r1
 800ac88:	4463      	add	r3, ip
 800ac8a:	2180      	movs	r1, #128	@ 0x80
 800ac8c:	0609      	lsls	r1, r1, #24
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	e055      	b.n	800ad40 <HAL_PCD_EP_DB_Transmit+0x38c>
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d111      	bne.n	800acbe <HAL_PCD_EP_DB_Transmit+0x30a>
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	4a3a      	ldr	r2, [pc, #232]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800aca2:	4694      	mov	ip, r2
 800aca4:	4463      	add	r3, ip
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4937      	ldr	r1, [pc, #220]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800acb0:	468c      	mov	ip, r1
 800acb2:	4463      	add	r3, ip
 800acb4:	2180      	movs	r1, #128	@ 0x80
 800acb6:	0609      	lsls	r1, r1, #24
 800acb8:	430a      	orrs	r2, r1
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	e040      	b.n	800ad40 <HAL_PCD_EP_DB_Transmit+0x38c>
 800acbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc0:	085b      	lsrs	r3, r3, #1
 800acc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc6:	2201      	movs	r2, #1
 800acc8:	4013      	ands	r3, r2
 800acca:	d002      	beq.n	800acd2 <HAL_PCD_EP_DB_Transmit+0x31e>
 800accc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acce:	3301      	adds	r3, #1
 800acd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	4a2c      	ldr	r2, [pc, #176]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800acda:	4694      	mov	ip, r2
 800acdc:	4463      	add	r3, ip
 800acde:	6819      	ldr	r1, [r3, #0]
 800ace0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace2:	069a      	lsls	r2, r3, #26
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	00db      	lsls	r3, r3, #3
 800acea:	4828      	ldr	r0, [pc, #160]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800acec:	4684      	mov	ip, r0
 800acee:	4463      	add	r3, ip
 800acf0:	430a      	orrs	r2, r1
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	e024      	b.n	800ad40 <HAL_PCD_EP_DB_Transmit+0x38c>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	785b      	ldrb	r3, [r3, #1]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d120      	bne.n	800ad40 <HAL_PCD_EP_DB_Transmit+0x38c>
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	4a21      	ldr	r2, [pc, #132]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ad06:	4694      	mov	ip, r2
 800ad08:	4463      	add	r3, ip
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	491e      	ldr	r1, [pc, #120]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ad14:	468c      	mov	ip, r1
 800ad16:	4463      	add	r3, ip
 800ad18:	0412      	lsls	r2, r2, #16
 800ad1a:	0c12      	lsrs	r2, r2, #16
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	4a19      	ldr	r2, [pc, #100]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ad26:	4694      	mov	ip, r2
 800ad28:	4463      	add	r3, ip
 800ad2a:	6819      	ldr	r1, [r3, #0]
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	041a      	lsls	r2, r3, #16
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	4815      	ldr	r0, [pc, #84]	@ (800ad8c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800ad38:	4684      	mov	ip, r0
 800ad3a:	4463      	add	r3, ip
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6818      	ldr	r0, [r3, #0]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	6959      	ldr	r1, [r3, #20]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	891a      	ldrh	r2, [r3, #8]
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	f005 fa6a 	bl	8010228 <USB_WritePMA>
 800ad54:	e1cf      	b.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	251e      	movs	r5, #30
 800ad60:	197c      	adds	r4, r7, r5
 800ad62:	0019      	movs	r1, r3
 800ad64:	0010      	movs	r0, r2
 800ad66:	f7fe fd39 	bl	80097dc <PCD_GET_EP_DBUF1_CNT>
 800ad6a:	0003      	movs	r3, r0
 800ad6c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	197b      	adds	r3, r7, r5
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d30e      	bcc.n	800ad98 <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	197b      	adds	r3, r7, r5
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	1ad2      	subs	r2, r2, r3
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	619a      	str	r2, [r3, #24]
 800ad88:	e009      	b.n	800ad9e <HAL_PCD_EP_DB_Transmit+0x3ea>
 800ad8a:	46c0      	nop			@ (mov r8, r8)
 800ad8c:	40009800 	.word	0x40009800
 800ad90:	07ff8f8f 	.word	0x07ff8f8f
 800ad94:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d000      	beq.n	800ada8 <HAL_PCD_EP_DB_Transmit+0x3f4>
 800ada6:	e0b2      	b.n	800af0e <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d121      	bne.n	800adf4 <HAL_PCD_EP_DB_Transmit+0x440>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	00db      	lsls	r3, r3, #3
 800adb6:	4ab5      	ldr	r2, [pc, #724]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800adb8:	4694      	mov	ip, r2
 800adba:	4463      	add	r3, ip
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	49b1      	ldr	r1, [pc, #708]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800adc6:	468c      	mov	ip, r1
 800adc8:	4463      	add	r3, ip
 800adca:	0192      	lsls	r2, r2, #6
 800adcc:	0992      	lsrs	r2, r2, #6
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	4aad      	ldr	r2, [pc, #692]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800add8:	4694      	mov	ip, r2
 800adda:	4463      	add	r3, ip
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	49a9      	ldr	r1, [pc, #676]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ade6:	468c      	mov	ip, r1
 800ade8:	4463      	add	r3, ip
 800adea:	2180      	movs	r1, #128	@ 0x80
 800adec:	0609      	lsls	r1, r1, #24
 800adee:	430a      	orrs	r2, r1
 800adf0:	601a      	str	r2, [r3, #0]
 800adf2:	e020      	b.n	800ae36 <HAL_PCD_EP_DB_Transmit+0x482>
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	785b      	ldrb	r3, [r3, #1]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d11c      	bne.n	800ae36 <HAL_PCD_EP_DB_Transmit+0x482>
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	4aa2      	ldr	r2, [pc, #648]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae04:	4694      	mov	ip, r2
 800ae06:	4463      	add	r3, ip
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	499e      	ldr	r1, [pc, #632]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae12:	468c      	mov	ip, r1
 800ae14:	4463      	add	r3, ip
 800ae16:	0412      	lsls	r2, r2, #16
 800ae18:	0c12      	lsrs	r2, r2, #16
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	00db      	lsls	r3, r3, #3
 800ae22:	4a9a      	ldr	r2, [pc, #616]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae24:	189a      	adds	r2, r3, r2
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	4997      	ldr	r1, [pc, #604]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae2e:	468c      	mov	ip, r1
 800ae30:	4463      	add	r3, ip
 800ae32:	6812      	ldr	r2, [r2, #0]
 800ae34:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d121      	bne.n	800ae82 <HAL_PCD_EP_DB_Transmit+0x4ce>
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	4a91      	ldr	r2, [pc, #580]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae46:	4694      	mov	ip, r2
 800ae48:	4463      	add	r3, ip
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	498e      	ldr	r1, [pc, #568]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae54:	468c      	mov	ip, r1
 800ae56:	4463      	add	r3, ip
 800ae58:	0192      	lsls	r2, r2, #6
 800ae5a:	0992      	lsrs	r2, r2, #6
 800ae5c:	605a      	str	r2, [r3, #4]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	00db      	lsls	r3, r3, #3
 800ae64:	4a89      	ldr	r2, [pc, #548]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae66:	4694      	mov	ip, r2
 800ae68:	4463      	add	r3, ip
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	00db      	lsls	r3, r3, #3
 800ae72:	4986      	ldr	r1, [pc, #536]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae74:	468c      	mov	ip, r1
 800ae76:	4463      	add	r3, ip
 800ae78:	2180      	movs	r1, #128	@ 0x80
 800ae7a:	0609      	lsls	r1, r1, #24
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	605a      	str	r2, [r3, #4]
 800ae80:	e020      	b.n	800aec4 <HAL_PCD_EP_DB_Transmit+0x510>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	785b      	ldrb	r3, [r3, #1]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d11c      	bne.n	800aec4 <HAL_PCD_EP_DB_Transmit+0x510>
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	4a7e      	ldr	r2, [pc, #504]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ae92:	4694      	mov	ip, r2
 800ae94:	4463      	add	r3, ip
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	00db      	lsls	r3, r3, #3
 800ae9e:	497b      	ldr	r1, [pc, #492]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aea0:	468c      	mov	ip, r1
 800aea2:	4463      	add	r3, ip
 800aea4:	0412      	lsls	r2, r2, #16
 800aea6:	0c12      	lsrs	r2, r2, #16
 800aea8:	605a      	str	r2, [r3, #4]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	00db      	lsls	r3, r3, #3
 800aeb0:	4a76      	ldr	r2, [pc, #472]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aeb2:	189a      	adds	r2, r3, r2
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	00db      	lsls	r3, r3, #3
 800aeba:	4974      	ldr	r1, [pc, #464]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aebc:	468c      	mov	ip, r1
 800aebe:	4463      	add	r3, ip
 800aec0:	6852      	ldr	r2, [r2, #4]
 800aec2:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	0011      	movs	r1, r2
 800aecc:	0018      	movs	r0, r3
 800aece:	f00b f9c1 	bl	8016254 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800aed2:	1dbb      	adds	r3, r7, #6
 800aed4:	881a      	ldrh	r2, [r3, #0]
 800aed6:	2380      	movs	r3, #128	@ 0x80
 800aed8:	01db      	lsls	r3, r3, #7
 800aeda:	4013      	ands	r3, r2
 800aedc:	d000      	beq.n	800aee0 <HAL_PCD_EP_DB_Transmit+0x52c>
 800aede:	e10a      	b.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	001a      	movs	r2, r3
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	18d3      	adds	r3, r2, r3
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a67      	ldr	r2, [pc, #412]	@ (800b090 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800aef2:	4013      	ands	r3, r2
 800aef4:	623b      	str	r3, [r7, #32]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	001a      	movs	r2, r3
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	18d3      	adds	r3, r2, r3
 800af04:	6a3a      	ldr	r2, [r7, #32]
 800af06:	4963      	ldr	r1, [pc, #396]	@ (800b094 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800af08:	430a      	orrs	r2, r1
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	e0f3      	b.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800af0e:	1dbb      	adds	r3, r7, #6
 800af10:	881a      	ldrh	r2, [r3, #0]
 800af12:	2380      	movs	r3, #128	@ 0x80
 800af14:	01db      	lsls	r3, r3, #7
 800af16:	4013      	ands	r3, r2
 800af18:	d115      	bne.n	800af46 <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	001a      	movs	r2, r3
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	18d3      	adds	r3, r2, r3
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a59      	ldr	r2, [pc, #356]	@ (800b090 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800af2c:	4013      	ands	r3, r2
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	001a      	movs	r2, r3
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	18d3      	adds	r3, r2, r3
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	4954      	ldr	r1, [pc, #336]	@ (800b094 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800af42:	430a      	orrs	r2, r1
 800af44:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	2224      	movs	r2, #36	@ 0x24
 800af4a:	5c9b      	ldrb	r3, [r3, r2]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d000      	beq.n	800af52 <HAL_PCD_EP_DB_Transmit+0x59e>
 800af50:	e0d1      	b.n	800b0f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	695a      	ldr	r2, [r3, #20]
 800af56:	211e      	movs	r1, #30
 800af58:	187b      	adds	r3, r7, r1
 800af5a:	881b      	ldrh	r3, [r3, #0]
 800af5c:	18d2      	adds	r2, r2, r3
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	69da      	ldr	r2, [r3, #28]
 800af66:	187b      	adds	r3, r7, r1
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	18d2      	adds	r2, r2, r3
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6a1a      	ldr	r2, [r3, #32]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d309      	bcc.n	800af90 <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6a1a      	ldr	r2, [r3, #32]
 800af86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af88:	1ad2      	subs	r2, r2, r3
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	621a      	str	r2, [r3, #32]
 800af8e:	e016      	b.n	800afbe <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d108      	bne.n	800afaa <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 800af98:	231e      	movs	r3, #30
 800af9a:	18fb      	adds	r3, r7, r3
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2224      	movs	r2, #36	@ 0x24
 800afa4:	2100      	movs	r1, #0
 800afa6:	5499      	strb	r1, [r3, r2]
 800afa8:	e009      	b.n	800afbe <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2200      	movs	r2, #0
 800afb4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2224      	movs	r2, #36	@ 0x24
 800afba:	2100      	movs	r1, #0
 800afbc:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	785b      	ldrb	r3, [r3, #1]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d168      	bne.n	800b098 <HAL_PCD_EP_DB_Transmit+0x6e4>
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	00db      	lsls	r3, r3, #3
 800afcc:	4a2f      	ldr	r2, [pc, #188]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800afce:	4694      	mov	ip, r2
 800afd0:	4463      	add	r3, ip
 800afd2:	685a      	ldr	r2, [r3, #4]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	492c      	ldr	r1, [pc, #176]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800afdc:	468c      	mov	ip, r1
 800afde:	4463      	add	r3, ip
 800afe0:	0192      	lsls	r2, r2, #6
 800afe2:	0992      	lsrs	r2, r2, #6
 800afe4:	605a      	str	r2, [r3, #4]
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	2b3e      	cmp	r3, #62	@ 0x3e
 800afea:	d91e      	bls.n	800b02a <HAL_PCD_EP_DB_Transmit+0x676>
 800afec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afee:	095b      	lsrs	r3, r3, #5
 800aff0:	61bb      	str	r3, [r7, #24]
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	221f      	movs	r2, #31
 800aff6:	4013      	ands	r3, r2
 800aff8:	d102      	bne.n	800b000 <HAL_PCD_EP_DB_Transmit+0x64c>
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	3b01      	subs	r3, #1
 800affe:	61bb      	str	r3, [r7, #24]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	4a21      	ldr	r2, [pc, #132]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b008:	4694      	mov	ip, r2
 800b00a:	4463      	add	r3, ip
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	069b      	lsls	r3, r3, #26
 800b012:	431a      	orrs	r2, r3
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	00db      	lsls	r3, r3, #3
 800b01a:	491c      	ldr	r1, [pc, #112]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b01c:	468c      	mov	ip, r1
 800b01e:	4463      	add	r3, ip
 800b020:	2180      	movs	r1, #128	@ 0x80
 800b022:	0609      	lsls	r1, r1, #24
 800b024:	430a      	orrs	r2, r1
 800b026:	605a      	str	r2, [r3, #4]
 800b028:	e05b      	b.n	800b0e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d111      	bne.n	800b054 <HAL_PCD_EP_DB_Transmit+0x6a0>
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	4a15      	ldr	r2, [pc, #84]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b038:	4694      	mov	ip, r2
 800b03a:	4463      	add	r3, ip
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	00db      	lsls	r3, r3, #3
 800b044:	4911      	ldr	r1, [pc, #68]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b046:	468c      	mov	ip, r1
 800b048:	4463      	add	r3, ip
 800b04a:	2180      	movs	r1, #128	@ 0x80
 800b04c:	0609      	lsls	r1, r1, #24
 800b04e:	430a      	orrs	r2, r1
 800b050:	605a      	str	r2, [r3, #4]
 800b052:	e046      	b.n	800b0e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b056:	085b      	lsrs	r3, r3, #1
 800b058:	61bb      	str	r3, [r7, #24]
 800b05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05c:	2201      	movs	r2, #1
 800b05e:	4013      	ands	r3, r2
 800b060:	d002      	beq.n	800b068 <HAL_PCD_EP_DB_Transmit+0x6b4>
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	3301      	adds	r3, #1
 800b066:	61bb      	str	r3, [r7, #24]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	00db      	lsls	r3, r3, #3
 800b06e:	4a07      	ldr	r2, [pc, #28]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b070:	4694      	mov	ip, r2
 800b072:	4463      	add	r3, ip
 800b074:	6859      	ldr	r1, [r3, #4]
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	069a      	lsls	r2, r3, #26
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	4802      	ldr	r0, [pc, #8]	@ (800b08c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800b082:	4684      	mov	ip, r0
 800b084:	4463      	add	r3, ip
 800b086:	430a      	orrs	r2, r1
 800b088:	605a      	str	r2, [r3, #4]
 800b08a:	e02a      	b.n	800b0e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800b08c:	40009800 	.word	0x40009800
 800b090:	07ff8f8f 	.word	0x07ff8f8f
 800b094:	0000c080 	.word	0x0000c080
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d120      	bne.n	800b0e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	4a25      	ldr	r2, [pc, #148]	@ (800b13c <HAL_PCD_EP_DB_Transmit+0x788>)
 800b0a8:	4694      	mov	ip, r2
 800b0aa:	4463      	add	r3, ip
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	4921      	ldr	r1, [pc, #132]	@ (800b13c <HAL_PCD_EP_DB_Transmit+0x788>)
 800b0b6:	468c      	mov	ip, r1
 800b0b8:	4463      	add	r3, ip
 800b0ba:	0412      	lsls	r2, r2, #16
 800b0bc:	0c12      	lsrs	r2, r2, #16
 800b0be:	605a      	str	r2, [r3, #4]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	00db      	lsls	r3, r3, #3
 800b0c6:	4a1d      	ldr	r2, [pc, #116]	@ (800b13c <HAL_PCD_EP_DB_Transmit+0x788>)
 800b0c8:	4694      	mov	ip, r2
 800b0ca:	4463      	add	r3, ip
 800b0cc:	6859      	ldr	r1, [r3, #4]
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d0:	041a      	lsls	r2, r3, #16
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	4818      	ldr	r0, [pc, #96]	@ (800b13c <HAL_PCD_EP_DB_Transmit+0x788>)
 800b0da:	4684      	mov	ip, r0
 800b0dc:	4463      	add	r3, ip
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	6959      	ldr	r1, [r3, #20]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	895a      	ldrh	r2, [r3, #10]
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	f005 f899 	bl	8010228 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	001a      	movs	r2, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	18d3      	adds	r3, r2, r3
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a0e      	ldr	r2, [pc, #56]	@ (800b140 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800b108:	4013      	ands	r3, r2
 800b10a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10e:	2210      	movs	r2, #16
 800b110:	4053      	eors	r3, r2
 800b112:	633b      	str	r3, [r7, #48]	@ 0x30
 800b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b116:	2220      	movs	r2, #32
 800b118:	4053      	eors	r3, r2
 800b11a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	001a      	movs	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	18d3      	adds	r3, r2, r3
 800b12a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b12c:	4905      	ldr	r1, [pc, #20]	@ (800b144 <HAL_PCD_EP_DB_Transmit+0x790>)
 800b12e:	430a      	orrs	r2, r1
 800b130:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	0018      	movs	r0, r3
 800b136:	46bd      	mov	sp, r7
 800b138:	b00e      	add	sp, #56	@ 0x38
 800b13a:	bdb0      	pop	{r4, r5, r7, pc}
 800b13c:	40009800 	.word	0x40009800
 800b140:	07ff8fbf 	.word	0x07ff8fbf
 800b144:	00008080 	.word	0x00008080

0800b148 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b148:	b590      	push	{r4, r7, lr}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	0008      	movs	r0, r1
 800b152:	0011      	movs	r1, r2
 800b154:	607b      	str	r3, [r7, #4]
 800b156:	240a      	movs	r4, #10
 800b158:	193b      	adds	r3, r7, r4
 800b15a:	1c02      	adds	r2, r0, #0
 800b15c:	801a      	strh	r2, [r3, #0]
 800b15e:	2308      	movs	r3, #8
 800b160:	18fb      	adds	r3, r7, r3
 800b162:	1c0a      	adds	r2, r1, #0
 800b164:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b166:	0021      	movs	r1, r4
 800b168:	187b      	adds	r3, r7, r1
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	2280      	movs	r2, #128	@ 0x80
 800b16e:	4013      	ands	r3, r2
 800b170:	b29b      	uxth	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00d      	beq.n	800b192 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b176:	187b      	adds	r3, r7, r1
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	2207      	movs	r2, #7
 800b17c:	401a      	ands	r2, r3
 800b17e:	0013      	movs	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	189b      	adds	r3, r3, r2
 800b184:	00db      	lsls	r3, r3, #3
 800b186:	3310      	adds	r3, #16
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	18d3      	adds	r3, r2, r3
 800b18c:	3304      	adds	r3, #4
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	e00c      	b.n	800b1ac <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b192:	230a      	movs	r3, #10
 800b194:	18fb      	adds	r3, r7, r3
 800b196:	881a      	ldrh	r2, [r3, #0]
 800b198:	0013      	movs	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	189b      	adds	r3, r3, r2
 800b19e:	00db      	lsls	r3, r3, #3
 800b1a0:	3351      	adds	r3, #81	@ 0x51
 800b1a2:	33ff      	adds	r3, #255	@ 0xff
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	18d3      	adds	r3, r2, r3
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b1ac:	2308      	movs	r3, #8
 800b1ae:	18fb      	adds	r3, r7, r3
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d107      	bne.n	800b1c6 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	80da      	strh	r2, [r3, #6]
 800b1c4:	e00b      	b.n	800b1de <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	0c1b      	lsrs	r3, r3, #16
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	b007      	add	sp, #28
 800b1e6:	bd90      	pop	{r4, r7, pc}

0800b1e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	23b5      	movs	r3, #181	@ 0xb5
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	23b3      	movs	r3, #179	@ 0xb3
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	2100      	movs	r1, #0
 800b208:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b20e:	2201      	movs	r2, #1
 800b210:	431a      	orrs	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b21a:	2202      	movs	r2, #2
 800b21c:	431a      	orrs	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	0018      	movs	r0, r3
 800b226:	46bd      	mov	sp, r7
 800b228:	b004      	add	sp, #16
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b230:	4b04      	ldr	r3, [pc, #16]	@ (800b244 <HAL_PWREx_EnableVddUSB+0x18>)
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	4b03      	ldr	r3, [pc, #12]	@ (800b244 <HAL_PWREx_EnableVddUSB+0x18>)
 800b236:	2180      	movs	r1, #128	@ 0x80
 800b238:	00c9      	lsls	r1, r1, #3
 800b23a:	430a      	orrs	r2, r1
 800b23c:	605a      	str	r2, [r3, #4]
}
 800b23e:	46c0      	nop			@ (mov r8, r8)
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	40007000 	.word	0x40007000

0800b248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800b250:	4b19      	ldr	r3, [pc, #100]	@ (800b2b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a19      	ldr	r2, [pc, #100]	@ (800b2bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 800b256:	4013      	ands	r3, r2
 800b258:	0019      	movs	r1, r3
 800b25a:	4b17      	ldr	r3, [pc, #92]	@ (800b2b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	430a      	orrs	r2, r1
 800b260:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	2380      	movs	r3, #128	@ 0x80
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	429a      	cmp	r2, r3
 800b26a:	d11f      	bne.n	800b2ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800b26c:	4b14      	ldr	r3, [pc, #80]	@ (800b2c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	0013      	movs	r3, r2
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	189b      	adds	r3, r3, r2
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	4912      	ldr	r1, [pc, #72]	@ (800b2c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800b27a:	0018      	movs	r0, r3
 800b27c:	f7fa ffb8 	bl	80061f0 <__udivsi3>
 800b280:	0003      	movs	r3, r0
 800b282:	3301      	adds	r3, #1
 800b284:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b286:	e008      	b.n	800b29a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3b01      	subs	r3, #1
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e001      	b.n	800b29a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e009      	b.n	800b2ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b29a:	4b07      	ldr	r3, [pc, #28]	@ (800b2b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800b29c:	695a      	ldr	r2, [r3, #20]
 800b29e:	2380      	movs	r3, #128	@ 0x80
 800b2a0:	00db      	lsls	r3, r3, #3
 800b2a2:	401a      	ands	r2, r3
 800b2a4:	2380      	movs	r3, #128	@ 0x80
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d0ed      	beq.n	800b288 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	b004      	add	sp, #16
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	46c0      	nop			@ (mov r8, r8)
 800b2b8:	40007000 	.word	0x40007000
 800b2bc:	fffff9ff 	.word	0xfffff9ff
 800b2c0:	20000004 	.word	0x20000004
 800b2c4:	000f4240 	.word	0x000f4240

0800b2c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800b2cc:	4b03      	ldr	r3, [pc, #12]	@ (800b2dc <LL_RCC_GetAPB1Prescaler+0x14>)
 800b2ce:	689a      	ldr	r2, [r3, #8]
 800b2d0:	23e0      	movs	r3, #224	@ 0xe0
 800b2d2:	01db      	lsls	r3, r3, #7
 800b2d4:	4013      	ands	r3, r2
}
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	40021000 	.word	0x40021000

0800b2e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d102      	bne.n	800b2f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	f000 fb50 	bl	800b994 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	d100      	bne.n	800b300 <HAL_RCC_OscConfig+0x20>
 800b2fe:	e07c      	b.n	800b3fa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b300:	4bc3      	ldr	r3, [pc, #780]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	2238      	movs	r2, #56	@ 0x38
 800b306:	4013      	ands	r3, r2
 800b308:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b30a:	4bc1      	ldr	r3, [pc, #772]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	2203      	movs	r2, #3
 800b310:	4013      	ands	r3, r2
 800b312:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	2b10      	cmp	r3, #16
 800b318:	d102      	bne.n	800b320 <HAL_RCC_OscConfig+0x40>
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d002      	beq.n	800b326 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	2b08      	cmp	r3, #8
 800b324:	d10b      	bne.n	800b33e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b326:	4bba      	ldr	r3, [pc, #744]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	2380      	movs	r3, #128	@ 0x80
 800b32c:	029b      	lsls	r3, r3, #10
 800b32e:	4013      	ands	r3, r2
 800b330:	d062      	beq.n	800b3f8 <HAL_RCC_OscConfig+0x118>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d15e      	bne.n	800b3f8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e32a      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	2380      	movs	r3, #128	@ 0x80
 800b344:	025b      	lsls	r3, r3, #9
 800b346:	429a      	cmp	r2, r3
 800b348:	d107      	bne.n	800b35a <HAL_RCC_OscConfig+0x7a>
 800b34a:	4bb1      	ldr	r3, [pc, #708]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	4bb0      	ldr	r3, [pc, #704]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b350:	2180      	movs	r1, #128	@ 0x80
 800b352:	0249      	lsls	r1, r1, #9
 800b354:	430a      	orrs	r2, r1
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	e020      	b.n	800b39c <HAL_RCC_OscConfig+0xbc>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	23a0      	movs	r3, #160	@ 0xa0
 800b360:	02db      	lsls	r3, r3, #11
 800b362:	429a      	cmp	r2, r3
 800b364:	d10e      	bne.n	800b384 <HAL_RCC_OscConfig+0xa4>
 800b366:	4baa      	ldr	r3, [pc, #680]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	4ba9      	ldr	r3, [pc, #676]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b36c:	2180      	movs	r1, #128	@ 0x80
 800b36e:	02c9      	lsls	r1, r1, #11
 800b370:	430a      	orrs	r2, r1
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	4ba6      	ldr	r3, [pc, #664]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	4ba5      	ldr	r3, [pc, #660]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b37a:	2180      	movs	r1, #128	@ 0x80
 800b37c:	0249      	lsls	r1, r1, #9
 800b37e:	430a      	orrs	r2, r1
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	e00b      	b.n	800b39c <HAL_RCC_OscConfig+0xbc>
 800b384:	4ba2      	ldr	r3, [pc, #648]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	4ba1      	ldr	r3, [pc, #644]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b38a:	49a2      	ldr	r1, [pc, #648]	@ (800b614 <HAL_RCC_OscConfig+0x334>)
 800b38c:	400a      	ands	r2, r1
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	4b9f      	ldr	r3, [pc, #636]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	4b9e      	ldr	r3, [pc, #632]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b396:	49a0      	ldr	r1, [pc, #640]	@ (800b618 <HAL_RCC_OscConfig+0x338>)
 800b398:	400a      	ands	r2, r1
 800b39a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d014      	beq.n	800b3ce <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a4:	f7fc ffb2 	bl	800830c <HAL_GetTick>
 800b3a8:	0003      	movs	r3, r0
 800b3aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3ac:	e008      	b.n	800b3c0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3ae:	f7fc ffad 	bl	800830c <HAL_GetTick>
 800b3b2:	0002      	movs	r2, r0
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	2b64      	cmp	r3, #100	@ 0x64
 800b3ba:	d901      	bls.n	800b3c0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800b3bc:	2303      	movs	r3, #3
 800b3be:	e2e9      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b3c0:	4b93      	ldr	r3, [pc, #588]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	2380      	movs	r3, #128	@ 0x80
 800b3c6:	029b      	lsls	r3, r3, #10
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	d0f0      	beq.n	800b3ae <HAL_RCC_OscConfig+0xce>
 800b3cc:	e015      	b.n	800b3fa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3ce:	f7fc ff9d 	bl	800830c <HAL_GetTick>
 800b3d2:	0003      	movs	r3, r0
 800b3d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b3d6:	e008      	b.n	800b3ea <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3d8:	f7fc ff98 	bl	800830c <HAL_GetTick>
 800b3dc:	0002      	movs	r2, r0
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b64      	cmp	r3, #100	@ 0x64
 800b3e4:	d901      	bls.n	800b3ea <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e2d4      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b3ea:	4b89      	ldr	r3, [pc, #548]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	2380      	movs	r3, #128	@ 0x80
 800b3f0:	029b      	lsls	r3, r3, #10
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	d1f0      	bne.n	800b3d8 <HAL_RCC_OscConfig+0xf8>
 800b3f6:	e000      	b.n	800b3fa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3f8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2202      	movs	r2, #2
 800b400:	4013      	ands	r3, r2
 800b402:	d100      	bne.n	800b406 <HAL_RCC_OscConfig+0x126>
 800b404:	e099      	b.n	800b53a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b406:	4b82      	ldr	r3, [pc, #520]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	2238      	movs	r2, #56	@ 0x38
 800b40c:	4013      	ands	r3, r2
 800b40e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b410:	4b7f      	ldr	r3, [pc, #508]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	2203      	movs	r2, #3
 800b416:	4013      	ands	r3, r2
 800b418:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	2b10      	cmp	r3, #16
 800b41e:	d102      	bne.n	800b426 <HAL_RCC_OscConfig+0x146>
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d002      	beq.n	800b42c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d135      	bne.n	800b498 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b42c:	4b78      	ldr	r3, [pc, #480]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	2380      	movs	r3, #128	@ 0x80
 800b432:	00db      	lsls	r3, r3, #3
 800b434:	4013      	ands	r3, r2
 800b436:	d005      	beq.n	800b444 <HAL_RCC_OscConfig+0x164>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e2a7      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b444:	4b72      	ldr	r3, [pc, #456]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	4a74      	ldr	r2, [pc, #464]	@ (800b61c <HAL_RCC_OscConfig+0x33c>)
 800b44a:	4013      	ands	r3, r2
 800b44c:	0019      	movs	r1, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	021a      	lsls	r2, r3, #8
 800b454:	4b6e      	ldr	r3, [pc, #440]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b456:	430a      	orrs	r2, r1
 800b458:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d112      	bne.n	800b486 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b460:	4b6b      	ldr	r3, [pc, #428]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a6e      	ldr	r2, [pc, #440]	@ (800b620 <HAL_RCC_OscConfig+0x340>)
 800b466:	4013      	ands	r3, r2
 800b468:	0019      	movs	r1, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691a      	ldr	r2, [r3, #16]
 800b46e:	4b68      	ldr	r3, [pc, #416]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b470:	430a      	orrs	r2, r1
 800b472:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b474:	4b66      	ldr	r3, [pc, #408]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	0adb      	lsrs	r3, r3, #11
 800b47a:	2207      	movs	r2, #7
 800b47c:	4013      	ands	r3, r2
 800b47e:	4a69      	ldr	r2, [pc, #420]	@ (800b624 <HAL_RCC_OscConfig+0x344>)
 800b480:	40da      	lsrs	r2, r3
 800b482:	4b69      	ldr	r3, [pc, #420]	@ (800b628 <HAL_RCC_OscConfig+0x348>)
 800b484:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b486:	4b69      	ldr	r3, [pc, #420]	@ (800b62c <HAL_RCC_OscConfig+0x34c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	0018      	movs	r0, r3
 800b48c:	f7fc fee2 	bl	8008254 <HAL_InitTick>
 800b490:	1e03      	subs	r3, r0, #0
 800b492:	d051      	beq.n	800b538 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e27d      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d030      	beq.n	800b502 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b4a0:	4b5b      	ldr	r3, [pc, #364]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a5e      	ldr	r2, [pc, #376]	@ (800b620 <HAL_RCC_OscConfig+0x340>)
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	0019      	movs	r1, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	691a      	ldr	r2, [r3, #16]
 800b4ae:	4b58      	ldr	r3, [pc, #352]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b4b0:	430a      	orrs	r2, r1
 800b4b2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b4b4:	4b56      	ldr	r3, [pc, #344]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	4b55      	ldr	r3, [pc, #340]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b4ba:	2180      	movs	r1, #128	@ 0x80
 800b4bc:	0049      	lsls	r1, r1, #1
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4c2:	f7fc ff23 	bl	800830c <HAL_GetTick>
 800b4c6:	0003      	movs	r3, r0
 800b4c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b4ca:	e008      	b.n	800b4de <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4cc:	f7fc ff1e 	bl	800830c <HAL_GetTick>
 800b4d0:	0002      	movs	r2, r0
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d901      	bls.n	800b4de <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e25a      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b4de:	4b4c      	ldr	r3, [pc, #304]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	2380      	movs	r3, #128	@ 0x80
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	d0f0      	beq.n	800b4cc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4ea:	4b49      	ldr	r3, [pc, #292]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	4a4b      	ldr	r2, [pc, #300]	@ (800b61c <HAL_RCC_OscConfig+0x33c>)
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	0019      	movs	r1, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	021a      	lsls	r2, r3, #8
 800b4fa:	4b45      	ldr	r3, [pc, #276]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	605a      	str	r2, [r3, #4]
 800b500:	e01b      	b.n	800b53a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b502:	4b43      	ldr	r3, [pc, #268]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4b42      	ldr	r3, [pc, #264]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b508:	4949      	ldr	r1, [pc, #292]	@ (800b630 <HAL_RCC_OscConfig+0x350>)
 800b50a:	400a      	ands	r2, r1
 800b50c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b50e:	f7fc fefd 	bl	800830c <HAL_GetTick>
 800b512:	0003      	movs	r3, r0
 800b514:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b516:	e008      	b.n	800b52a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b518:	f7fc fef8 	bl	800830c <HAL_GetTick>
 800b51c:	0002      	movs	r2, r0
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	2b02      	cmp	r3, #2
 800b524:	d901      	bls.n	800b52a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800b526:	2303      	movs	r3, #3
 800b528:	e234      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b52a:	4b39      	ldr	r3, [pc, #228]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	2380      	movs	r3, #128	@ 0x80
 800b530:	00db      	lsls	r3, r3, #3
 800b532:	4013      	ands	r3, r2
 800b534:	d1f0      	bne.n	800b518 <HAL_RCC_OscConfig+0x238>
 800b536:	e000      	b.n	800b53a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b538:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2208      	movs	r2, #8
 800b540:	4013      	ands	r3, r2
 800b542:	d047      	beq.n	800b5d4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b544:	4b32      	ldr	r3, [pc, #200]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	2238      	movs	r2, #56	@ 0x38
 800b54a:	4013      	ands	r3, r2
 800b54c:	2b18      	cmp	r3, #24
 800b54e:	d10a      	bne.n	800b566 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b550:	4b2f      	ldr	r3, [pc, #188]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b554:	2202      	movs	r2, #2
 800b556:	4013      	ands	r3, r2
 800b558:	d03c      	beq.n	800b5d4 <HAL_RCC_OscConfig+0x2f4>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d138      	bne.n	800b5d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e216      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d019      	beq.n	800b5a2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b56e:	4b28      	ldr	r3, [pc, #160]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b570:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b572:	4b27      	ldr	r3, [pc, #156]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b574:	2101      	movs	r1, #1
 800b576:	430a      	orrs	r2, r1
 800b578:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b57a:	f7fc fec7 	bl	800830c <HAL_GetTick>
 800b57e:	0003      	movs	r3, r0
 800b580:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b582:	e008      	b.n	800b596 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b584:	f7fc fec2 	bl	800830c <HAL_GetTick>
 800b588:	0002      	movs	r2, r0
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d901      	bls.n	800b596 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e1fe      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b596:	4b1e      	ldr	r3, [pc, #120]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b59a:	2202      	movs	r2, #2
 800b59c:	4013      	ands	r3, r2
 800b59e:	d0f1      	beq.n	800b584 <HAL_RCC_OscConfig+0x2a4>
 800b5a0:	e018      	b.n	800b5d4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b5a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b5a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	438a      	bics	r2, r1
 800b5ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5ae:	f7fc fead 	bl	800830c <HAL_GetTick>
 800b5b2:	0003      	movs	r3, r0
 800b5b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b5b6:	e008      	b.n	800b5ca <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5b8:	f7fc fea8 	bl	800830c <HAL_GetTick>
 800b5bc:	0002      	movs	r2, r0
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d901      	bls.n	800b5ca <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e1e4      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b5ca:	4b11      	ldr	r3, [pc, #68]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b5cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	d1f1      	bne.n	800b5b8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2204      	movs	r2, #4
 800b5da:	4013      	ands	r3, r2
 800b5dc:	d100      	bne.n	800b5e0 <HAL_RCC_OscConfig+0x300>
 800b5de:	e0c7      	b.n	800b770 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5e0:	231f      	movs	r3, #31
 800b5e2:	18fb      	adds	r3, r7, r3
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b5e8:	4b09      	ldr	r3, [pc, #36]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	2238      	movs	r2, #56	@ 0x38
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	2b20      	cmp	r3, #32
 800b5f2:	d11f      	bne.n	800b634 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b5f4:	4b06      	ldr	r3, [pc, #24]	@ (800b610 <HAL_RCC_OscConfig+0x330>)
 800b5f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	d100      	bne.n	800b600 <HAL_RCC_OscConfig+0x320>
 800b5fe:	e0b7      	b.n	800b770 <HAL_RCC_OscConfig+0x490>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d000      	beq.n	800b60a <HAL_RCC_OscConfig+0x32a>
 800b608:	e0b2      	b.n	800b770 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e1c2      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
 800b60e:	46c0      	nop			@ (mov r8, r8)
 800b610:	40021000 	.word	0x40021000
 800b614:	fffeffff 	.word	0xfffeffff
 800b618:	fffbffff 	.word	0xfffbffff
 800b61c:	ffff80ff 	.word	0xffff80ff
 800b620:	ffffc7ff 	.word	0xffffc7ff
 800b624:	00f42400 	.word	0x00f42400
 800b628:	20000004 	.word	0x20000004
 800b62c:	20000008 	.word	0x20000008
 800b630:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b634:	4bb5      	ldr	r3, [pc, #724]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b636:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b638:	2380      	movs	r3, #128	@ 0x80
 800b63a:	055b      	lsls	r3, r3, #21
 800b63c:	4013      	ands	r3, r2
 800b63e:	d101      	bne.n	800b644 <HAL_RCC_OscConfig+0x364>
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <HAL_RCC_OscConfig+0x366>
 800b644:	2300      	movs	r3, #0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d011      	beq.n	800b66e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b64a:	4bb0      	ldr	r3, [pc, #704]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b64c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b64e:	4baf      	ldr	r3, [pc, #700]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b650:	2180      	movs	r1, #128	@ 0x80
 800b652:	0549      	lsls	r1, r1, #21
 800b654:	430a      	orrs	r2, r1
 800b656:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b658:	4bac      	ldr	r3, [pc, #688]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b65a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b65c:	2380      	movs	r3, #128	@ 0x80
 800b65e:	055b      	lsls	r3, r3, #21
 800b660:	4013      	ands	r3, r2
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800b666:	231f      	movs	r3, #31
 800b668:	18fb      	adds	r3, r7, r3
 800b66a:	2201      	movs	r2, #1
 800b66c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b66e:	4ba8      	ldr	r3, [pc, #672]	@ (800b910 <HAL_RCC_OscConfig+0x630>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	2380      	movs	r3, #128	@ 0x80
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	4013      	ands	r3, r2
 800b678:	d11a      	bne.n	800b6b0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b67a:	4ba5      	ldr	r3, [pc, #660]	@ (800b910 <HAL_RCC_OscConfig+0x630>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	4ba4      	ldr	r3, [pc, #656]	@ (800b910 <HAL_RCC_OscConfig+0x630>)
 800b680:	2180      	movs	r1, #128	@ 0x80
 800b682:	0049      	lsls	r1, r1, #1
 800b684:	430a      	orrs	r2, r1
 800b686:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800b688:	f7fc fe40 	bl	800830c <HAL_GetTick>
 800b68c:	0003      	movs	r3, r0
 800b68e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b690:	e008      	b.n	800b6a4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b692:	f7fc fe3b 	bl	800830c <HAL_GetTick>
 800b696:	0002      	movs	r2, r0
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d901      	bls.n	800b6a4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e177      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b6a4:	4b9a      	ldr	r3, [pc, #616]	@ (800b910 <HAL_RCC_OscConfig+0x630>)
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	2380      	movs	r3, #128	@ 0x80
 800b6aa:	005b      	lsls	r3, r3, #1
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	d0f0      	beq.n	800b692 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d106      	bne.n	800b6c6 <HAL_RCC_OscConfig+0x3e6>
 800b6b8:	4b94      	ldr	r3, [pc, #592]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b6bc:	4b93      	ldr	r3, [pc, #588]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6be:	2101      	movs	r1, #1
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6c4:	e01c      	b.n	800b700 <HAL_RCC_OscConfig+0x420>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	2b05      	cmp	r3, #5
 800b6cc:	d10c      	bne.n	800b6e8 <HAL_RCC_OscConfig+0x408>
 800b6ce:	4b8f      	ldr	r3, [pc, #572]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b6d2:	4b8e      	ldr	r3, [pc, #568]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6d4:	2104      	movs	r1, #4
 800b6d6:	430a      	orrs	r2, r1
 800b6d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6da:	4b8c      	ldr	r3, [pc, #560]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b6de:	4b8b      	ldr	r3, [pc, #556]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	430a      	orrs	r2, r1
 800b6e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6e6:	e00b      	b.n	800b700 <HAL_RCC_OscConfig+0x420>
 800b6e8:	4b88      	ldr	r3, [pc, #544]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b6ec:	4b87      	ldr	r3, [pc, #540]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	438a      	bics	r2, r1
 800b6f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6f4:	4b85      	ldr	r3, [pc, #532]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b6f8:	4b84      	ldr	r3, [pc, #528]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b6fa:	2104      	movs	r1, #4
 800b6fc:	438a      	bics	r2, r1
 800b6fe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d014      	beq.n	800b732 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b708:	f7fc fe00 	bl	800830c <HAL_GetTick>
 800b70c:	0003      	movs	r3, r0
 800b70e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b710:	e009      	b.n	800b726 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b712:	f7fc fdfb 	bl	800830c <HAL_GetTick>
 800b716:	0002      	movs	r2, r0
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	4a7d      	ldr	r2, [pc, #500]	@ (800b914 <HAL_RCC_OscConfig+0x634>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d901      	bls.n	800b726 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800b722:	2303      	movs	r3, #3
 800b724:	e136      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b726:	4b79      	ldr	r3, [pc, #484]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b72a:	2202      	movs	r2, #2
 800b72c:	4013      	ands	r3, r2
 800b72e:	d0f0      	beq.n	800b712 <HAL_RCC_OscConfig+0x432>
 800b730:	e013      	b.n	800b75a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b732:	f7fc fdeb 	bl	800830c <HAL_GetTick>
 800b736:	0003      	movs	r3, r0
 800b738:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b73a:	e009      	b.n	800b750 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b73c:	f7fc fde6 	bl	800830c <HAL_GetTick>
 800b740:	0002      	movs	r2, r0
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	4a73      	ldr	r2, [pc, #460]	@ (800b914 <HAL_RCC_OscConfig+0x634>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d901      	bls.n	800b750 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e121      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b750:	4b6e      	ldr	r3, [pc, #440]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b754:	2202      	movs	r2, #2
 800b756:	4013      	ands	r3, r2
 800b758:	d1f0      	bne.n	800b73c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b75a:	231f      	movs	r3, #31
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d105      	bne.n	800b770 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b764:	4b69      	ldr	r3, [pc, #420]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b766:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b768:	4b68      	ldr	r3, [pc, #416]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b76a:	496b      	ldr	r1, [pc, #428]	@ (800b918 <HAL_RCC_OscConfig+0x638>)
 800b76c:	400a      	ands	r2, r1
 800b76e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2220      	movs	r2, #32
 800b776:	4013      	ands	r3, r2
 800b778:	d039      	beq.n	800b7ee <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d01b      	beq.n	800b7ba <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b782:	4b62      	ldr	r3, [pc, #392]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4b61      	ldr	r3, [pc, #388]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b788:	2180      	movs	r1, #128	@ 0x80
 800b78a:	03c9      	lsls	r1, r1, #15
 800b78c:	430a      	orrs	r2, r1
 800b78e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b790:	f7fc fdbc 	bl	800830c <HAL_GetTick>
 800b794:	0003      	movs	r3, r0
 800b796:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b798:	e008      	b.n	800b7ac <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b79a:	f7fc fdb7 	bl	800830c <HAL_GetTick>
 800b79e:	0002      	movs	r2, r0
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d901      	bls.n	800b7ac <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	e0f3      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b7ac:	4b57      	ldr	r3, [pc, #348]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	2380      	movs	r3, #128	@ 0x80
 800b7b2:	041b      	lsls	r3, r3, #16
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	d0f0      	beq.n	800b79a <HAL_RCC_OscConfig+0x4ba>
 800b7b8:	e019      	b.n	800b7ee <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b7ba:	4b54      	ldr	r3, [pc, #336]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	4b53      	ldr	r3, [pc, #332]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b7c0:	4956      	ldr	r1, [pc, #344]	@ (800b91c <HAL_RCC_OscConfig+0x63c>)
 800b7c2:	400a      	ands	r2, r1
 800b7c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7c6:	f7fc fda1 	bl	800830c <HAL_GetTick>
 800b7ca:	0003      	movs	r3, r0
 800b7cc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b7ce:	e008      	b.n	800b7e2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7d0:	f7fc fd9c 	bl	800830c <HAL_GetTick>
 800b7d4:	0002      	movs	r2, r0
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d901      	bls.n	800b7e2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e0d8      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b7e2:	4b4a      	ldr	r3, [pc, #296]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	2380      	movs	r3, #128	@ 0x80
 800b7e8:	041b      	lsls	r3, r3, #16
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	d1f0      	bne.n	800b7d0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d100      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x518>
 800b7f6:	e0cc      	b.n	800b992 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b7f8:	4b44      	ldr	r3, [pc, #272]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	2238      	movs	r2, #56	@ 0x38
 800b7fe:	4013      	ands	r3, r2
 800b800:	2b10      	cmp	r3, #16
 800b802:	d100      	bne.n	800b806 <HAL_RCC_OscConfig+0x526>
 800b804:	e07b      	b.n	800b8fe <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d156      	bne.n	800b8bc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b80e:	4b3f      	ldr	r3, [pc, #252]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	4b3e      	ldr	r3, [pc, #248]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b814:	4942      	ldr	r1, [pc, #264]	@ (800b920 <HAL_RCC_OscConfig+0x640>)
 800b816:	400a      	ands	r2, r1
 800b818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b81a:	f7fc fd77 	bl	800830c <HAL_GetTick>
 800b81e:	0003      	movs	r3, r0
 800b820:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b822:	e008      	b.n	800b836 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b824:	f7fc fd72 	bl	800830c <HAL_GetTick>
 800b828:	0002      	movs	r2, r0
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d901      	bls.n	800b836 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e0ae      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b836:	4b35      	ldr	r3, [pc, #212]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	2380      	movs	r3, #128	@ 0x80
 800b83c:	049b      	lsls	r3, r3, #18
 800b83e:	4013      	ands	r3, r2
 800b840:	d1f0      	bne.n	800b824 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b842:	4b32      	ldr	r3, [pc, #200]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	4a37      	ldr	r2, [pc, #220]	@ (800b924 <HAL_RCC_OscConfig+0x644>)
 800b848:	4013      	ands	r3, r2
 800b84a:	0019      	movs	r1, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b854:	431a      	orrs	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85a:	021b      	lsls	r3, r3, #8
 800b85c:	431a      	orrs	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b868:	431a      	orrs	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b86e:	431a      	orrs	r2, r3
 800b870:	4b26      	ldr	r3, [pc, #152]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b872:	430a      	orrs	r2, r1
 800b874:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b876:	4b25      	ldr	r3, [pc, #148]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	4b24      	ldr	r3, [pc, #144]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b87c:	2180      	movs	r1, #128	@ 0x80
 800b87e:	0449      	lsls	r1, r1, #17
 800b880:	430a      	orrs	r2, r1
 800b882:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800b884:	4b21      	ldr	r3, [pc, #132]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b886:	68da      	ldr	r2, [r3, #12]
 800b888:	4b20      	ldr	r3, [pc, #128]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b88a:	2180      	movs	r1, #128	@ 0x80
 800b88c:	0549      	lsls	r1, r1, #21
 800b88e:	430a      	orrs	r2, r1
 800b890:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b892:	f7fc fd3b 	bl	800830c <HAL_GetTick>
 800b896:	0003      	movs	r3, r0
 800b898:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b89a:	e008      	b.n	800b8ae <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b89c:	f7fc fd36 	bl	800830c <HAL_GetTick>
 800b8a0:	0002      	movs	r2, r0
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d901      	bls.n	800b8ae <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e072      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b8ae:	4b17      	ldr	r3, [pc, #92]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	2380      	movs	r3, #128	@ 0x80
 800b8b4:	049b      	lsls	r3, r3, #18
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	d0f0      	beq.n	800b89c <HAL_RCC_OscConfig+0x5bc>
 800b8ba:	e06a      	b.n	800b992 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8bc:	4b13      	ldr	r3, [pc, #76]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	4b12      	ldr	r3, [pc, #72]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b8c2:	4917      	ldr	r1, [pc, #92]	@ (800b920 <HAL_RCC_OscConfig+0x640>)
 800b8c4:	400a      	ands	r2, r1
 800b8c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8c8:	f7fc fd20 	bl	800830c <HAL_GetTick>
 800b8cc:	0003      	movs	r3, r0
 800b8ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8d0:	e008      	b.n	800b8e4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8d2:	f7fc fd1b 	bl	800830c <HAL_GetTick>
 800b8d6:	0002      	movs	r2, r0
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d901      	bls.n	800b8e4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e057      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8e4:	4b09      	ldr	r3, [pc, #36]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	2380      	movs	r3, #128	@ 0x80
 800b8ea:	049b      	lsls	r3, r3, #18
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	d1f0      	bne.n	800b8d2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800b8f0:	4b06      	ldr	r3, [pc, #24]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	4b05      	ldr	r3, [pc, #20]	@ (800b90c <HAL_RCC_OscConfig+0x62c>)
 800b8f6:	490c      	ldr	r1, [pc, #48]	@ (800b928 <HAL_RCC_OscConfig+0x648>)
 800b8f8:	400a      	ands	r2, r1
 800b8fa:	60da      	str	r2, [r3, #12]
 800b8fc:	e049      	b.n	800b992 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d112      	bne.n	800b92c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e044      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
 800b90a:	46c0      	nop			@ (mov r8, r8)
 800b90c:	40021000 	.word	0x40021000
 800b910:	40007000 	.word	0x40007000
 800b914:	00001388 	.word	0x00001388
 800b918:	efffffff 	.word	0xefffffff
 800b91c:	ffbfffff 	.word	0xffbfffff
 800b920:	feffffff 	.word	0xfeffffff
 800b924:	11c1808c 	.word	0x11c1808c
 800b928:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800b92c:	4b1b      	ldr	r3, [pc, #108]	@ (800b99c <HAL_RCC_OscConfig+0x6bc>)
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2203      	movs	r2, #3
 800b936:	401a      	ands	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d126      	bne.n	800b98e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	2270      	movs	r2, #112	@ 0x70
 800b944:	401a      	ands	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d11f      	bne.n	800b98e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	23fe      	movs	r3, #254	@ 0xfe
 800b952:	01db      	lsls	r3, r3, #7
 800b954:	401a      	ands	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d116      	bne.n	800b98e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	23f8      	movs	r3, #248	@ 0xf8
 800b964:	039b      	lsls	r3, r3, #14
 800b966:	401a      	ands	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d10e      	bne.n	800b98e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b970:	697a      	ldr	r2, [r7, #20]
 800b972:	23e0      	movs	r3, #224	@ 0xe0
 800b974:	051b      	lsls	r3, r3, #20
 800b976:	401a      	ands	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d106      	bne.n	800b98e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	0f5b      	lsrs	r3, r3, #29
 800b984:	075a      	lsls	r2, r3, #29
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d001      	beq.n	800b992 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	0018      	movs	r0, r3
 800b996:	46bd      	mov	sp, r7
 800b998:	b008      	add	sp, #32
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	40021000 	.word	0x40021000

0800b9a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d101      	bne.n	800b9b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e0e9      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9b4:	4b76      	ldr	r3, [pc, #472]	@ (800bb90 <HAL_RCC_ClockConfig+0x1f0>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2207      	movs	r2, #7
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d91e      	bls.n	800ba00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9c2:	4b73      	ldr	r3, [pc, #460]	@ (800bb90 <HAL_RCC_ClockConfig+0x1f0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2207      	movs	r2, #7
 800b9c8:	4393      	bics	r3, r2
 800b9ca:	0019      	movs	r1, r3
 800b9cc:	4b70      	ldr	r3, [pc, #448]	@ (800bb90 <HAL_RCC_ClockConfig+0x1f0>)
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b9d4:	f7fc fc9a 	bl	800830c <HAL_GetTick>
 800b9d8:	0003      	movs	r3, r0
 800b9da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b9dc:	e009      	b.n	800b9f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9de:	f7fc fc95 	bl	800830c <HAL_GetTick>
 800b9e2:	0002      	movs	r2, r0
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	4a6a      	ldr	r2, [pc, #424]	@ (800bb94 <HAL_RCC_ClockConfig+0x1f4>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d901      	bls.n	800b9f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	e0ca      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b9f2:	4b67      	ldr	r3, [pc, #412]	@ (800bb90 <HAL_RCC_ClockConfig+0x1f0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2207      	movs	r2, #7
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d1ee      	bne.n	800b9de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2202      	movs	r2, #2
 800ba06:	4013      	ands	r3, r2
 800ba08:	d015      	beq.n	800ba36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2204      	movs	r2, #4
 800ba10:	4013      	ands	r3, r2
 800ba12:	d006      	beq.n	800ba22 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800ba14:	4b60      	ldr	r3, [pc, #384]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	4b5f      	ldr	r3, [pc, #380]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800ba1a:	21e0      	movs	r1, #224	@ 0xe0
 800ba1c:	01c9      	lsls	r1, r1, #7
 800ba1e:	430a      	orrs	r2, r1
 800ba20:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba22:	4b5d      	ldr	r3, [pc, #372]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	4a5d      	ldr	r2, [pc, #372]	@ (800bb9c <HAL_RCC_ClockConfig+0x1fc>)
 800ba28:	4013      	ands	r3, r2
 800ba2a:	0019      	movs	r1, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	4b59      	ldr	r3, [pc, #356]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800ba32:	430a      	orrs	r2, r1
 800ba34:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	d057      	beq.n	800baf0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d107      	bne.n	800ba58 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba48:	4b53      	ldr	r3, [pc, #332]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	2380      	movs	r3, #128	@ 0x80
 800ba4e:	029b      	lsls	r3, r3, #10
 800ba50:	4013      	ands	r3, r2
 800ba52:	d12b      	bne.n	800baac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e097      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	d107      	bne.n	800ba70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba60:	4b4d      	ldr	r3, [pc, #308]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	2380      	movs	r3, #128	@ 0x80
 800ba66:	049b      	lsls	r3, r3, #18
 800ba68:	4013      	ands	r3, r2
 800ba6a:	d11f      	bne.n	800baac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e08b      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d107      	bne.n	800ba88 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ba78:	4b47      	ldr	r3, [pc, #284]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	2380      	movs	r3, #128	@ 0x80
 800ba7e:	00db      	lsls	r3, r3, #3
 800ba80:	4013      	ands	r3, r2
 800ba82:	d113      	bne.n	800baac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e07f      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d106      	bne.n	800ba9e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ba90:	4b41      	ldr	r3, [pc, #260]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800ba92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba94:	2202      	movs	r2, #2
 800ba96:	4013      	ands	r3, r2
 800ba98:	d108      	bne.n	800baac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e074      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba9e:	4b3e      	ldr	r3, [pc, #248]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800baa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baa2:	2202      	movs	r2, #2
 800baa4:	4013      	ands	r3, r2
 800baa6:	d101      	bne.n	800baac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	e06d      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800baac:	4b3a      	ldr	r3, [pc, #232]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	2207      	movs	r2, #7
 800bab2:	4393      	bics	r3, r2
 800bab4:	0019      	movs	r1, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	4b37      	ldr	r3, [pc, #220]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800babc:	430a      	orrs	r2, r1
 800babe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bac0:	f7fc fc24 	bl	800830c <HAL_GetTick>
 800bac4:	0003      	movs	r3, r0
 800bac6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bac8:	e009      	b.n	800bade <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800baca:	f7fc fc1f 	bl	800830c <HAL_GetTick>
 800bace:	0002      	movs	r2, r0
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	4a2f      	ldr	r2, [pc, #188]	@ (800bb94 <HAL_RCC_ClockConfig+0x1f4>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d901      	bls.n	800bade <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	e054      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bade:	4b2e      	ldr	r3, [pc, #184]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	2238      	movs	r2, #56	@ 0x38
 800bae4:	401a      	ands	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	429a      	cmp	r2, r3
 800baee:	d1ec      	bne.n	800baca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800baf0:	4b27      	ldr	r3, [pc, #156]	@ (800bb90 <HAL_RCC_ClockConfig+0x1f0>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2207      	movs	r2, #7
 800baf6:	4013      	ands	r3, r2
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d21e      	bcs.n	800bb3c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bafe:	4b24      	ldr	r3, [pc, #144]	@ (800bb90 <HAL_RCC_ClockConfig+0x1f0>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2207      	movs	r2, #7
 800bb04:	4393      	bics	r3, r2
 800bb06:	0019      	movs	r1, r3
 800bb08:	4b21      	ldr	r3, [pc, #132]	@ (800bb90 <HAL_RCC_ClockConfig+0x1f0>)
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bb10:	f7fc fbfc 	bl	800830c <HAL_GetTick>
 800bb14:	0003      	movs	r3, r0
 800bb16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bb18:	e009      	b.n	800bb2e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb1a:	f7fc fbf7 	bl	800830c <HAL_GetTick>
 800bb1e:	0002      	movs	r2, r0
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	4a1b      	ldr	r2, [pc, #108]	@ (800bb94 <HAL_RCC_ClockConfig+0x1f4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d901      	bls.n	800bb2e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e02c      	b.n	800bb88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bb2e:	4b18      	ldr	r3, [pc, #96]	@ (800bb90 <HAL_RCC_ClockConfig+0x1f0>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2207      	movs	r2, #7
 800bb34:	4013      	ands	r3, r2
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d1ee      	bne.n	800bb1a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2204      	movs	r2, #4
 800bb42:	4013      	ands	r3, r2
 800bb44:	d009      	beq.n	800bb5a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800bb46:	4b14      	ldr	r3, [pc, #80]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	4a15      	ldr	r2, [pc, #84]	@ (800bba0 <HAL_RCC_ClockConfig+0x200>)
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	0019      	movs	r1, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	4b10      	ldr	r3, [pc, #64]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800bb56:	430a      	orrs	r2, r1
 800bb58:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800bb5a:	f000 f829 	bl	800bbb0 <HAL_RCC_GetSysClockFreq>
 800bb5e:	0001      	movs	r1, r0
 800bb60:	4b0d      	ldr	r3, [pc, #52]	@ (800bb98 <HAL_RCC_ClockConfig+0x1f8>)
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	0a1b      	lsrs	r3, r3, #8
 800bb66:	220f      	movs	r2, #15
 800bb68:	401a      	ands	r2, r3
 800bb6a:	4b0e      	ldr	r3, [pc, #56]	@ (800bba4 <HAL_RCC_ClockConfig+0x204>)
 800bb6c:	0092      	lsls	r2, r2, #2
 800bb6e:	58d3      	ldr	r3, [r2, r3]
 800bb70:	221f      	movs	r2, #31
 800bb72:	4013      	ands	r3, r2
 800bb74:	000a      	movs	r2, r1
 800bb76:	40da      	lsrs	r2, r3
 800bb78:	4b0b      	ldr	r3, [pc, #44]	@ (800bba8 <HAL_RCC_ClockConfig+0x208>)
 800bb7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bb7c:	4b0b      	ldr	r3, [pc, #44]	@ (800bbac <HAL_RCC_ClockConfig+0x20c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	0018      	movs	r0, r3
 800bb82:	f7fc fb67 	bl	8008254 <HAL_InitTick>
 800bb86:	0003      	movs	r3, r0
}
 800bb88:	0018      	movs	r0, r3
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	b004      	add	sp, #16
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	40022000 	.word	0x40022000
 800bb94:	00001388 	.word	0x00001388
 800bb98:	40021000 	.word	0x40021000
 800bb9c:	fffff0ff 	.word	0xfffff0ff
 800bba0:	ffff8fff 	.word	0xffff8fff
 800bba4:	080172f4 	.word	0x080172f4
 800bba8:	20000004 	.word	0x20000004
 800bbac:	20000008 	.word	0x20000008

0800bbb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bbb6:	4b3c      	ldr	r3, [pc, #240]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	2238      	movs	r2, #56	@ 0x38
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	d10f      	bne.n	800bbe0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bbc0:	4b39      	ldr	r3, [pc, #228]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	0adb      	lsrs	r3, r3, #11
 800bbc6:	2207      	movs	r2, #7
 800bbc8:	4013      	ands	r3, r2
 800bbca:	2201      	movs	r2, #1
 800bbcc:	409a      	lsls	r2, r3
 800bbce:	0013      	movs	r3, r2
 800bbd0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	4835      	ldr	r0, [pc, #212]	@ (800bcac <HAL_RCC_GetSysClockFreq+0xfc>)
 800bbd6:	f7fa fb0b 	bl	80061f0 <__udivsi3>
 800bbda:	0003      	movs	r3, r0
 800bbdc:	613b      	str	r3, [r7, #16]
 800bbde:	e05d      	b.n	800bc9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bbe0:	4b31      	ldr	r3, [pc, #196]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	2238      	movs	r2, #56	@ 0x38
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d102      	bne.n	800bbf2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bbec:	4b30      	ldr	r3, [pc, #192]	@ (800bcb0 <HAL_RCC_GetSysClockFreq+0x100>)
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	e054      	b.n	800bc9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bbf2:	4b2d      	ldr	r3, [pc, #180]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	2238      	movs	r2, #56	@ 0x38
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	2b10      	cmp	r3, #16
 800bbfc:	d138      	bne.n	800bc70 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bbfe:	4b2a      	ldr	r3, [pc, #168]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	2203      	movs	r2, #3
 800bc04:	4013      	ands	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bc08:	4b27      	ldr	r3, [pc, #156]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	091b      	lsrs	r3, r3, #4
 800bc0e:	2207      	movs	r2, #7
 800bc10:	4013      	ands	r3, r2
 800bc12:	3301      	adds	r3, #1
 800bc14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d10d      	bne.n	800bc38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bc1c:	68b9      	ldr	r1, [r7, #8]
 800bc1e:	4824      	ldr	r0, [pc, #144]	@ (800bcb0 <HAL_RCC_GetSysClockFreq+0x100>)
 800bc20:	f7fa fae6 	bl	80061f0 <__udivsi3>
 800bc24:	0003      	movs	r3, r0
 800bc26:	0019      	movs	r1, r3
 800bc28:	4b1f      	ldr	r3, [pc, #124]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	0a1b      	lsrs	r3, r3, #8
 800bc2e:	227f      	movs	r2, #127	@ 0x7f
 800bc30:	4013      	ands	r3, r2
 800bc32:	434b      	muls	r3, r1
 800bc34:	617b      	str	r3, [r7, #20]
        break;
 800bc36:	e00d      	b.n	800bc54 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800bc38:	68b9      	ldr	r1, [r7, #8]
 800bc3a:	481c      	ldr	r0, [pc, #112]	@ (800bcac <HAL_RCC_GetSysClockFreq+0xfc>)
 800bc3c:	f7fa fad8 	bl	80061f0 <__udivsi3>
 800bc40:	0003      	movs	r3, r0
 800bc42:	0019      	movs	r1, r3
 800bc44:	4b18      	ldr	r3, [pc, #96]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	0a1b      	lsrs	r3, r3, #8
 800bc4a:	227f      	movs	r2, #127	@ 0x7f
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	434b      	muls	r3, r1
 800bc50:	617b      	str	r3, [r7, #20]
        break;
 800bc52:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800bc54:	4b14      	ldr	r3, [pc, #80]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	0f5b      	lsrs	r3, r3, #29
 800bc5a:	2207      	movs	r2, #7
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	3301      	adds	r3, #1
 800bc60:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	6978      	ldr	r0, [r7, #20]
 800bc66:	f7fa fac3 	bl	80061f0 <__udivsi3>
 800bc6a:	0003      	movs	r3, r0
 800bc6c:	613b      	str	r3, [r7, #16]
 800bc6e:	e015      	b.n	800bc9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800bc70:	4b0d      	ldr	r3, [pc, #52]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	2238      	movs	r2, #56	@ 0x38
 800bc76:	4013      	ands	r3, r2
 800bc78:	2b20      	cmp	r3, #32
 800bc7a:	d103      	bne.n	800bc84 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800bc7c:	2380      	movs	r3, #128	@ 0x80
 800bc7e:	021b      	lsls	r3, r3, #8
 800bc80:	613b      	str	r3, [r7, #16]
 800bc82:	e00b      	b.n	800bc9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800bc84:	4b08      	ldr	r3, [pc, #32]	@ (800bca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	2238      	movs	r2, #56	@ 0x38
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	2b18      	cmp	r3, #24
 800bc8e:	d103      	bne.n	800bc98 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800bc90:	23fa      	movs	r3, #250	@ 0xfa
 800bc92:	01db      	lsls	r3, r3, #7
 800bc94:	613b      	str	r3, [r7, #16]
 800bc96:	e001      	b.n	800bc9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bc9c:	693b      	ldr	r3, [r7, #16]
}
 800bc9e:	0018      	movs	r0, r3
 800bca0:	46bd      	mov	sp, r7
 800bca2:	b006      	add	sp, #24
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	46c0      	nop			@ (mov r8, r8)
 800bca8:	40021000 	.word	0x40021000
 800bcac:	00f42400 	.word	0x00f42400
 800bcb0:	007a1200 	.word	0x007a1200

0800bcb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bcb8:	4b02      	ldr	r3, [pc, #8]	@ (800bcc4 <HAL_RCC_GetHCLKFreq+0x10>)
 800bcba:	681b      	ldr	r3, [r3, #0]
}
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	46c0      	nop			@ (mov r8, r8)
 800bcc4:	20000004 	.word	0x20000004

0800bcc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bcc8:	b5b0      	push	{r4, r5, r7, lr}
 800bcca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800bccc:	f7ff fff2 	bl	800bcb4 <HAL_RCC_GetHCLKFreq>
 800bcd0:	0004      	movs	r4, r0
 800bcd2:	f7ff faf9 	bl	800b2c8 <LL_RCC_GetAPB1Prescaler>
 800bcd6:	0003      	movs	r3, r0
 800bcd8:	0b1a      	lsrs	r2, r3, #12
 800bcda:	4b05      	ldr	r3, [pc, #20]	@ (800bcf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bcdc:	0092      	lsls	r2, r2, #2
 800bcde:	58d3      	ldr	r3, [r2, r3]
 800bce0:	221f      	movs	r2, #31
 800bce2:	4013      	ands	r3, r2
 800bce4:	40dc      	lsrs	r4, r3
 800bce6:	0023      	movs	r3, r4
}
 800bce8:	0018      	movs	r0, r3
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bdb0      	pop	{r4, r5, r7, pc}
 800bcee:	46c0      	nop			@ (mov r8, r8)
 800bcf0:	08017334 	.word	0x08017334

0800bcf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800bcfc:	2313      	movs	r3, #19
 800bcfe:	18fb      	adds	r3, r7, r3
 800bd00:	2200      	movs	r2, #0
 800bd02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd04:	2312      	movs	r3, #18
 800bd06:	18fb      	adds	r3, r7, r3
 800bd08:	2200      	movs	r2, #0
 800bd0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	2380      	movs	r3, #128	@ 0x80
 800bd12:	029b      	lsls	r3, r3, #10
 800bd14:	4013      	ands	r3, r2
 800bd16:	d100      	bne.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800bd18:	e0ad      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd1a:	2011      	movs	r0, #17
 800bd1c:	183b      	adds	r3, r7, r0
 800bd1e:	2200      	movs	r2, #0
 800bd20:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd22:	4b47      	ldr	r3, [pc, #284]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd26:	2380      	movs	r3, #128	@ 0x80
 800bd28:	055b      	lsls	r3, r3, #21
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	d110      	bne.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd2e:	4b44      	ldr	r3, [pc, #272]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd32:	4b43      	ldr	r3, [pc, #268]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd34:	2180      	movs	r1, #128	@ 0x80
 800bd36:	0549      	lsls	r1, r1, #21
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bd3c:	4b40      	ldr	r3, [pc, #256]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd40:	2380      	movs	r3, #128	@ 0x80
 800bd42:	055b      	lsls	r3, r3, #21
 800bd44:	4013      	ands	r3, r2
 800bd46:	60bb      	str	r3, [r7, #8]
 800bd48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd4a:	183b      	adds	r3, r7, r0
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd50:	4b3c      	ldr	r3, [pc, #240]	@ (800be44 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	4b3b      	ldr	r3, [pc, #236]	@ (800be44 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bd56:	2180      	movs	r1, #128	@ 0x80
 800bd58:	0049      	lsls	r1, r1, #1
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd5e:	f7fc fad5 	bl	800830c <HAL_GetTick>
 800bd62:	0003      	movs	r3, r0
 800bd64:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd66:	e00b      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd68:	f7fc fad0 	bl	800830c <HAL_GetTick>
 800bd6c:	0002      	movs	r2, r0
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d904      	bls.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800bd76:	2313      	movs	r3, #19
 800bd78:	18fb      	adds	r3, r7, r3
 800bd7a:	2203      	movs	r2, #3
 800bd7c:	701a      	strb	r2, [r3, #0]
        break;
 800bd7e:	e005      	b.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd80:	4b30      	ldr	r3, [pc, #192]	@ (800be44 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	2380      	movs	r3, #128	@ 0x80
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	4013      	ands	r3, r2
 800bd8a:	d0ed      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800bd8c:	2313      	movs	r3, #19
 800bd8e:	18fb      	adds	r3, r7, r3
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d15e      	bne.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bd96:	4b2a      	ldr	r3, [pc, #168]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bd98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd9a:	23c0      	movs	r3, #192	@ 0xc0
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4013      	ands	r3, r2
 800bda0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d019      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d014      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bdb2:	4b23      	ldr	r3, [pc, #140]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bdb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdb6:	4a24      	ldr	r2, [pc, #144]	@ (800be48 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bdbc:	4b20      	ldr	r3, [pc, #128]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bdbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdc0:	4b1f      	ldr	r3, [pc, #124]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bdc2:	2180      	movs	r1, #128	@ 0x80
 800bdc4:	0249      	lsls	r1, r1, #9
 800bdc6:	430a      	orrs	r2, r1
 800bdc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bdca:	4b1d      	ldr	r3, [pc, #116]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bdcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdce:	4b1c      	ldr	r3, [pc, #112]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bdd0:	491e      	ldr	r1, [pc, #120]	@ (800be4c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800bdd2:	400a      	ands	r2, r1
 800bdd4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bdd6:	4b1a      	ldr	r3, [pc, #104]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	2201      	movs	r2, #1
 800bde0:	4013      	ands	r3, r2
 800bde2:	d016      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bde4:	f7fc fa92 	bl	800830c <HAL_GetTick>
 800bde8:	0003      	movs	r3, r0
 800bdea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bdec:	e00c      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdee:	f7fc fa8d 	bl	800830c <HAL_GetTick>
 800bdf2:	0002      	movs	r2, r0
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	4a15      	ldr	r2, [pc, #84]	@ (800be50 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d904      	bls.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800bdfe:	2313      	movs	r3, #19
 800be00:	18fb      	adds	r3, r7, r3
 800be02:	2203      	movs	r2, #3
 800be04:	701a      	strb	r2, [r3, #0]
            break;
 800be06:	e004      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be08:	4b0d      	ldr	r3, [pc, #52]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800be0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be0c:	2202      	movs	r2, #2
 800be0e:	4013      	ands	r3, r2
 800be10:	d0ed      	beq.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800be12:	2313      	movs	r3, #19
 800be14:	18fb      	adds	r3, r7, r3
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10a      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be1c:	4b08      	ldr	r3, [pc, #32]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800be1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be20:	4a09      	ldr	r2, [pc, #36]	@ (800be48 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800be22:	4013      	ands	r3, r2
 800be24:	0019      	movs	r1, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be2a:	4b05      	ldr	r3, [pc, #20]	@ (800be40 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800be2c:	430a      	orrs	r2, r1
 800be2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800be30:	e016      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be32:	2312      	movs	r3, #18
 800be34:	18fb      	adds	r3, r7, r3
 800be36:	2213      	movs	r2, #19
 800be38:	18ba      	adds	r2, r7, r2
 800be3a:	7812      	ldrb	r2, [r2, #0]
 800be3c:	701a      	strb	r2, [r3, #0]
 800be3e:	e00f      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800be40:	40021000 	.word	0x40021000
 800be44:	40007000 	.word	0x40007000
 800be48:	fffffcff 	.word	0xfffffcff
 800be4c:	fffeffff 	.word	0xfffeffff
 800be50:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be54:	2312      	movs	r3, #18
 800be56:	18fb      	adds	r3, r7, r3
 800be58:	2213      	movs	r2, #19
 800be5a:	18ba      	adds	r2, r7, r2
 800be5c:	7812      	ldrb	r2, [r2, #0]
 800be5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800be60:	2311      	movs	r3, #17
 800be62:	18fb      	adds	r3, r7, r3
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d105      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be6a:	4bc5      	ldr	r3, [pc, #788]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be6e:	4bc4      	ldr	r3, [pc, #784]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be70:	49c4      	ldr	r1, [pc, #784]	@ (800c184 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800be72:	400a      	ands	r2, r1
 800be74:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2201      	movs	r2, #1
 800be7c:	4013      	ands	r3, r2
 800be7e:	d009      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800be80:	4bbf      	ldr	r3, [pc, #764]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be84:	2203      	movs	r2, #3
 800be86:	4393      	bics	r3, r2
 800be88:	0019      	movs	r1, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	4bbc      	ldr	r3, [pc, #752]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800be90:	430a      	orrs	r2, r1
 800be92:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2202      	movs	r2, #2
 800be9a:	4013      	ands	r3, r2
 800be9c:	d009      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800be9e:	4bb8      	ldr	r3, [pc, #736]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bea2:	220c      	movs	r2, #12
 800bea4:	4393      	bics	r3, r2
 800bea6:	0019      	movs	r1, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689a      	ldr	r2, [r3, #8]
 800beac:	4bb4      	ldr	r3, [pc, #720]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800beae:	430a      	orrs	r2, r1
 800beb0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2204      	movs	r2, #4
 800beb8:	4013      	ands	r3, r2
 800beba:	d009      	beq.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bebc:	4bb0      	ldr	r3, [pc, #704]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bec0:	2230      	movs	r2, #48	@ 0x30
 800bec2:	4393      	bics	r3, r2
 800bec4:	0019      	movs	r1, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68da      	ldr	r2, [r3, #12]
 800beca:	4bad      	ldr	r3, [pc, #692]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800becc:	430a      	orrs	r2, r1
 800bece:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2210      	movs	r2, #16
 800bed6:	4013      	ands	r3, r2
 800bed8:	d009      	beq.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800beda:	4ba9      	ldr	r3, [pc, #676]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bedc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bede:	4aaa      	ldr	r2, [pc, #680]	@ (800c188 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	0019      	movs	r1, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	691a      	ldr	r2, [r3, #16]
 800bee8:	4ba5      	ldr	r3, [pc, #660]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800beea:	430a      	orrs	r2, r1
 800beec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	2380      	movs	r3, #128	@ 0x80
 800bef4:	015b      	lsls	r3, r3, #5
 800bef6:	4013      	ands	r3, r2
 800bef8:	d009      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800befa:	4ba1      	ldr	r3, [pc, #644]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800befc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800befe:	4aa3      	ldr	r2, [pc, #652]	@ (800c18c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bf00:	4013      	ands	r3, r2
 800bf02:	0019      	movs	r1, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	695a      	ldr	r2, [r3, #20]
 800bf08:	4b9d      	ldr	r3, [pc, #628]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf0a:	430a      	orrs	r2, r1
 800bf0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	2380      	movs	r3, #128	@ 0x80
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4013      	ands	r3, r2
 800bf18:	d009      	beq.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf1a:	4b99      	ldr	r3, [pc, #612]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf1e:	4a9c      	ldr	r2, [pc, #624]	@ (800c190 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 800bf20:	4013      	ands	r3, r2
 800bf22:	0019      	movs	r1, r3
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf28:	4b95      	ldr	r3, [pc, #596]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	2380      	movs	r3, #128	@ 0x80
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	4013      	ands	r3, r2
 800bf38:	d009      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf3a:	4b91      	ldr	r3, [pc, #580]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf3e:	4a95      	ldr	r2, [pc, #596]	@ (800c194 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bf40:	4013      	ands	r3, r2
 800bf42:	0019      	movs	r1, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf48:	4b8d      	ldr	r3, [pc, #564]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2220      	movs	r2, #32
 800bf54:	4013      	ands	r3, r2
 800bf56:	d009      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf58:	4b89      	ldr	r3, [pc, #548]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf5c:	4a8e      	ldr	r2, [pc, #568]	@ (800c198 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bf5e:	4013      	ands	r3, r2
 800bf60:	0019      	movs	r1, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	699a      	ldr	r2, [r3, #24]
 800bf66:	4b86      	ldr	r3, [pc, #536]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2240      	movs	r2, #64	@ 0x40
 800bf72:	4013      	ands	r3, r2
 800bf74:	d009      	beq.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bf76:	4b82      	ldr	r3, [pc, #520]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf7a:	4a88      	ldr	r2, [pc, #544]	@ (800c19c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	0019      	movs	r1, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	69da      	ldr	r2, [r3, #28]
 800bf84:	4b7e      	ldr	r3, [pc, #504]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf86:	430a      	orrs	r2, r1
 800bf88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	2380      	movs	r3, #128	@ 0x80
 800bf90:	02db      	lsls	r3, r3, #11
 800bf92:	4013      	ands	r3, r2
 800bf94:	d016      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf96:	4b7a      	ldr	r3, [pc, #488]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bf98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf9a:	4a81      	ldr	r2, [pc, #516]	@ (800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	0019      	movs	r1, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfa4:	4b76      	ldr	r3, [pc, #472]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfae:	23c0      	movs	r3, #192	@ 0xc0
 800bfb0:	051b      	lsls	r3, r3, #20
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d106      	bne.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bfb6:	4b72      	ldr	r3, [pc, #456]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	4b71      	ldr	r3, [pc, #452]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfbc:	2180      	movs	r1, #128	@ 0x80
 800bfbe:	0449      	lsls	r1, r1, #17
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	2380      	movs	r3, #128	@ 0x80
 800bfca:	01db      	lsls	r3, r3, #7
 800bfcc:	4013      	ands	r3, r2
 800bfce:	d015      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x308>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bfd0:	4b6b      	ldr	r3, [pc, #428]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	0899      	lsrs	r1, r3, #2
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfdc:	4b68      	ldr	r3, [pc, #416]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfe6:	2380      	movs	r3, #128	@ 0x80
 800bfe8:	05db      	lsls	r3, r3, #23
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d106      	bne.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bfee:	4b64      	ldr	r3, [pc, #400]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	4b63      	ldr	r3, [pc, #396]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bff4:	2180      	movs	r1, #128	@ 0x80
 800bff6:	0249      	lsls	r1, r1, #9
 800bff8:	430a      	orrs	r2, r1
 800bffa:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	2380      	movs	r3, #128	@ 0x80
 800c002:	031b      	lsls	r3, r3, #12
 800c004:	4013      	ands	r3, r2
 800c006:	d009      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c008:	4b5d      	ldr	r3, [pc, #372]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c00a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c00c:	2240      	movs	r2, #64	@ 0x40
 800c00e:	4393      	bics	r3, r2
 800c010:	0019      	movs	r1, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c016:	4b5a      	ldr	r3, [pc, #360]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c018:	430a      	orrs	r2, r1
 800c01a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	2380      	movs	r3, #128	@ 0x80
 800c022:	039b      	lsls	r3, r3, #14
 800c024:	4013      	ands	r3, r2
 800c026:	d016      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800c028:	4b55      	ldr	r3, [pc, #340]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c02a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c02c:	4a5d      	ldr	r2, [pc, #372]	@ (800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800c02e:	4013      	ands	r3, r2
 800c030:	0019      	movs	r1, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c036:	4b52      	ldr	r3, [pc, #328]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c038:	430a      	orrs	r2, r1
 800c03a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c040:	2380      	movs	r3, #128	@ 0x80
 800c042:	03db      	lsls	r3, r3, #15
 800c044:	429a      	cmp	r2, r3
 800c046:	d106      	bne.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c048:	4b4d      	ldr	r3, [pc, #308]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c04a:	68da      	ldr	r2, [r3, #12]
 800c04c:	4b4c      	ldr	r3, [pc, #304]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c04e:	2180      	movs	r1, #128	@ 0x80
 800c050:	0449      	lsls	r1, r1, #17
 800c052:	430a      	orrs	r2, r1
 800c054:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	2380      	movs	r3, #128	@ 0x80
 800c05c:	03db      	lsls	r3, r3, #15
 800c05e:	4013      	ands	r3, r2
 800c060:	d016      	beq.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800c062:	4b47      	ldr	r3, [pc, #284]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c066:	4a50      	ldr	r2, [pc, #320]	@ (800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800c068:	4013      	ands	r3, r2
 800c06a:	0019      	movs	r1, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c070:	4b43      	ldr	r3, [pc, #268]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c072:	430a      	orrs	r2, r1
 800c074:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c07a:	2380      	movs	r3, #128	@ 0x80
 800c07c:	045b      	lsls	r3, r3, #17
 800c07e:	429a      	cmp	r2, r3
 800c080:	d106      	bne.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c082:	4b3f      	ldr	r3, [pc, #252]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c084:	68da      	ldr	r2, [r3, #12]
 800c086:	4b3e      	ldr	r3, [pc, #248]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c088:	2180      	movs	r1, #128	@ 0x80
 800c08a:	0449      	lsls	r1, r1, #17
 800c08c:	430a      	orrs	r2, r1
 800c08e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	2380      	movs	r3, #128	@ 0x80
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	4013      	ands	r3, r2
 800c09a:	d014      	beq.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800c09c:	4b38      	ldr	r3, [pc, #224]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c09e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a0:	2203      	movs	r2, #3
 800c0a2:	4393      	bics	r3, r2
 800c0a4:	0019      	movs	r1, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a1a      	ldr	r2, [r3, #32]
 800c0aa:	4b35      	ldr	r3, [pc, #212]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a1b      	ldr	r3, [r3, #32]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d106      	bne.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c0b8:	4b31      	ldr	r3, [pc, #196]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	4b30      	ldr	r3, [pc, #192]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0be:	2180      	movs	r1, #128	@ 0x80
 800c0c0:	0249      	lsls	r1, r1, #9
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	2380      	movs	r3, #128	@ 0x80
 800c0cc:	019b      	lsls	r3, r3, #6
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	d014      	beq.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800c0d2:	4b2b      	ldr	r3, [pc, #172]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0d6:	220c      	movs	r2, #12
 800c0d8:	4393      	bics	r3, r2
 800c0da:	0019      	movs	r1, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0e0:	4b27      	ldr	r3, [pc, #156]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ea:	2b04      	cmp	r3, #4
 800c0ec:	d106      	bne.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800c0ee:	4b24      	ldr	r3, [pc, #144]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	4b23      	ldr	r3, [pc, #140]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c0f4:	2180      	movs	r1, #128	@ 0x80
 800c0f6:	0249      	lsls	r1, r1, #9
 800c0f8:	430a      	orrs	r2, r1
 800c0fa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	2380      	movs	r3, #128	@ 0x80
 800c102:	045b      	lsls	r3, r3, #17
 800c104:	4013      	ands	r3, r2
 800c106:	d016      	beq.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c108:	4b1d      	ldr	r3, [pc, #116]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c10a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c10c:	4a22      	ldr	r2, [pc, #136]	@ (800c198 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800c10e:	4013      	ands	r3, r2
 800c110:	0019      	movs	r1, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c116:	4b1a      	ldr	r3, [pc, #104]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c118:	430a      	orrs	r2, r1
 800c11a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c120:	2380      	movs	r3, #128	@ 0x80
 800c122:	019b      	lsls	r3, r3, #6
 800c124:	429a      	cmp	r2, r3
 800c126:	d106      	bne.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c128:	4b15      	ldr	r3, [pc, #84]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c12a:	68da      	ldr	r2, [r3, #12]
 800c12c:	4b14      	ldr	r3, [pc, #80]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c12e:	2180      	movs	r1, #128	@ 0x80
 800c130:	0449      	lsls	r1, r1, #17
 800c132:	430a      	orrs	r2, r1
 800c134:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	2380      	movs	r3, #128	@ 0x80
 800c13c:	049b      	lsls	r3, r3, #18
 800c13e:	4013      	ands	r3, r2
 800c140:	d016      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c142:	4b0f      	ldr	r3, [pc, #60]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c146:	4a11      	ldr	r2, [pc, #68]	@ (800c18c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c148:	4013      	ands	r3, r2
 800c14a:	0019      	movs	r1, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c150:	4b0b      	ldr	r3, [pc, #44]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c152:	430a      	orrs	r2, r1
 800c154:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c15a:	2380      	movs	r3, #128	@ 0x80
 800c15c:	005b      	lsls	r3, r3, #1
 800c15e:	429a      	cmp	r2, r3
 800c160:	d106      	bne.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800c162:	4b07      	ldr	r3, [pc, #28]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c164:	68da      	ldr	r2, [r3, #12]
 800c166:	4b06      	ldr	r3, [pc, #24]	@ (800c180 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800c168:	2180      	movs	r1, #128	@ 0x80
 800c16a:	0449      	lsls	r1, r1, #17
 800c16c:	430a      	orrs	r2, r1
 800c16e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800c170:	2312      	movs	r3, #18
 800c172:	18fb      	adds	r3, r7, r3
 800c174:	781b      	ldrb	r3, [r3, #0]
}
 800c176:	0018      	movs	r0, r3
 800c178:	46bd      	mov	sp, r7
 800c17a:	b006      	add	sp, #24
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	46c0      	nop			@ (mov r8, r8)
 800c180:	40021000 	.word	0x40021000
 800c184:	efffffff 	.word	0xefffffff
 800c188:	fffff3ff 	.word	0xfffff3ff
 800c18c:	fffffcff 	.word	0xfffffcff
 800c190:	fff3ffff 	.word	0xfff3ffff
 800c194:	ffcfffff 	.word	0xffcfffff
 800c198:	ffffcfff 	.word	0xffffcfff
 800c19c:	ffff3fff 	.word	0xffff3fff
 800c1a0:	f3ffffff 	.word	0xf3ffffff
 800c1a4:	ffbfffff 	.word	0xffbfffff
 800c1a8:	feffffff 	.word	0xfeffffff

0800c1ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d101      	bne.n	800c1be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e04a      	b.n	800c254 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	223d      	movs	r2, #61	@ 0x3d
 800c1c2:	5c9b      	ldrb	r3, [r3, r2]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d107      	bne.n	800c1da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	223c      	movs	r2, #60	@ 0x3c
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	0018      	movs	r0, r3
 800c1d6:	f7fb faa9 	bl	800772c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	223d      	movs	r2, #61	@ 0x3d
 800c1de:	2102      	movs	r1, #2
 800c1e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	0019      	movs	r1, r3
 800c1ec:	0010      	movs	r0, r2
 800c1ee:	f000 fb5b 	bl	800c8a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2248      	movs	r2, #72	@ 0x48
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	223e      	movs	r2, #62	@ 0x3e
 800c1fe:	2101      	movs	r1, #1
 800c200:	5499      	strb	r1, [r3, r2]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	223f      	movs	r2, #63	@ 0x3f
 800c206:	2101      	movs	r1, #1
 800c208:	5499      	strb	r1, [r3, r2]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2240      	movs	r2, #64	@ 0x40
 800c20e:	2101      	movs	r1, #1
 800c210:	5499      	strb	r1, [r3, r2]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2241      	movs	r2, #65	@ 0x41
 800c216:	2101      	movs	r1, #1
 800c218:	5499      	strb	r1, [r3, r2]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2242      	movs	r2, #66	@ 0x42
 800c21e:	2101      	movs	r1, #1
 800c220:	5499      	strb	r1, [r3, r2]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2243      	movs	r2, #67	@ 0x43
 800c226:	2101      	movs	r1, #1
 800c228:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2244      	movs	r2, #68	@ 0x44
 800c22e:	2101      	movs	r1, #1
 800c230:	5499      	strb	r1, [r3, r2]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2245      	movs	r2, #69	@ 0x45
 800c236:	2101      	movs	r1, #1
 800c238:	5499      	strb	r1, [r3, r2]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2246      	movs	r2, #70	@ 0x46
 800c23e:	2101      	movs	r1, #1
 800c240:	5499      	strb	r1, [r3, r2]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2247      	movs	r2, #71	@ 0x47
 800c246:	2101      	movs	r1, #1
 800c248:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	223d      	movs	r2, #61	@ 0x3d
 800c24e:	2101      	movs	r1, #1
 800c250:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	0018      	movs	r0, r3
 800c256:	46bd      	mov	sp, r7
 800c258:	b002      	add	sp, #8
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e04a      	b.n	800c304 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	223d      	movs	r2, #61	@ 0x3d
 800c272:	5c9b      	ldrb	r3, [r3, r2]
 800c274:	b2db      	uxtb	r3, r3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d107      	bne.n	800c28a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	223c      	movs	r2, #60	@ 0x3c
 800c27e:	2100      	movs	r1, #0
 800c280:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	0018      	movs	r0, r3
 800c286:	f000 f841 	bl	800c30c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	223d      	movs	r2, #61	@ 0x3d
 800c28e:	2102      	movs	r1, #2
 800c290:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3304      	adds	r3, #4
 800c29a:	0019      	movs	r1, r3
 800c29c:	0010      	movs	r0, r2
 800c29e:	f000 fb03 	bl	800c8a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2248      	movs	r2, #72	@ 0x48
 800c2a6:	2101      	movs	r1, #1
 800c2a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	223e      	movs	r2, #62	@ 0x3e
 800c2ae:	2101      	movs	r1, #1
 800c2b0:	5499      	strb	r1, [r3, r2]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	223f      	movs	r2, #63	@ 0x3f
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	5499      	strb	r1, [r3, r2]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2240      	movs	r2, #64	@ 0x40
 800c2be:	2101      	movs	r1, #1
 800c2c0:	5499      	strb	r1, [r3, r2]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2241      	movs	r2, #65	@ 0x41
 800c2c6:	2101      	movs	r1, #1
 800c2c8:	5499      	strb	r1, [r3, r2]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2242      	movs	r2, #66	@ 0x42
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	5499      	strb	r1, [r3, r2]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2243      	movs	r2, #67	@ 0x43
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2244      	movs	r2, #68	@ 0x44
 800c2de:	2101      	movs	r1, #1
 800c2e0:	5499      	strb	r1, [r3, r2]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2245      	movs	r2, #69	@ 0x45
 800c2e6:	2101      	movs	r1, #1
 800c2e8:	5499      	strb	r1, [r3, r2]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2246      	movs	r2, #70	@ 0x46
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	5499      	strb	r1, [r3, r2]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2247      	movs	r2, #71	@ 0x47
 800c2f6:	2101      	movs	r1, #1
 800c2f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	223d      	movs	r2, #61	@ 0x3d
 800c2fe:	2101      	movs	r1, #1
 800c300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	0018      	movs	r0, r3
 800c306:	46bd      	mov	sp, r7
 800c308:	b002      	add	sp, #8
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c314:	46c0      	nop			@ (mov r8, r8)
 800c316:	46bd      	mov	sp, r7
 800c318:	b002      	add	sp, #8
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d108      	bne.n	800c33e <HAL_TIM_PWM_Start+0x22>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	223e      	movs	r2, #62	@ 0x3e
 800c330:	5c9b      	ldrb	r3, [r3, r2]
 800c332:	b2db      	uxtb	r3, r3
 800c334:	3b01      	subs	r3, #1
 800c336:	1e5a      	subs	r2, r3, #1
 800c338:	4193      	sbcs	r3, r2
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	e037      	b.n	800c3ae <HAL_TIM_PWM_Start+0x92>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b04      	cmp	r3, #4
 800c342:	d108      	bne.n	800c356 <HAL_TIM_PWM_Start+0x3a>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	223f      	movs	r2, #63	@ 0x3f
 800c348:	5c9b      	ldrb	r3, [r3, r2]
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	3b01      	subs	r3, #1
 800c34e:	1e5a      	subs	r2, r3, #1
 800c350:	4193      	sbcs	r3, r2
 800c352:	b2db      	uxtb	r3, r3
 800c354:	e02b      	b.n	800c3ae <HAL_TIM_PWM_Start+0x92>
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b08      	cmp	r3, #8
 800c35a:	d108      	bne.n	800c36e <HAL_TIM_PWM_Start+0x52>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2240      	movs	r2, #64	@ 0x40
 800c360:	5c9b      	ldrb	r3, [r3, r2]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	3b01      	subs	r3, #1
 800c366:	1e5a      	subs	r2, r3, #1
 800c368:	4193      	sbcs	r3, r2
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	e01f      	b.n	800c3ae <HAL_TIM_PWM_Start+0x92>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	2b0c      	cmp	r3, #12
 800c372:	d108      	bne.n	800c386 <HAL_TIM_PWM_Start+0x6a>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2241      	movs	r2, #65	@ 0x41
 800c378:	5c9b      	ldrb	r3, [r3, r2]
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	3b01      	subs	r3, #1
 800c37e:	1e5a      	subs	r2, r3, #1
 800c380:	4193      	sbcs	r3, r2
 800c382:	b2db      	uxtb	r3, r3
 800c384:	e013      	b.n	800c3ae <HAL_TIM_PWM_Start+0x92>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b10      	cmp	r3, #16
 800c38a:	d108      	bne.n	800c39e <HAL_TIM_PWM_Start+0x82>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2242      	movs	r2, #66	@ 0x42
 800c390:	5c9b      	ldrb	r3, [r3, r2]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	3b01      	subs	r3, #1
 800c396:	1e5a      	subs	r2, r3, #1
 800c398:	4193      	sbcs	r3, r2
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	e007      	b.n	800c3ae <HAL_TIM_PWM_Start+0x92>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2243      	movs	r2, #67	@ 0x43
 800c3a2:	5c9b      	ldrb	r3, [r3, r2]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	1e5a      	subs	r2, r3, #1
 800c3aa:	4193      	sbcs	r3, r2
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e090      	b.n	800c4d8 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d104      	bne.n	800c3c6 <HAL_TIM_PWM_Start+0xaa>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	223e      	movs	r2, #62	@ 0x3e
 800c3c0:	2102      	movs	r1, #2
 800c3c2:	5499      	strb	r1, [r3, r2]
 800c3c4:	e023      	b.n	800c40e <HAL_TIM_PWM_Start+0xf2>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b04      	cmp	r3, #4
 800c3ca:	d104      	bne.n	800c3d6 <HAL_TIM_PWM_Start+0xba>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	223f      	movs	r2, #63	@ 0x3f
 800c3d0:	2102      	movs	r1, #2
 800c3d2:	5499      	strb	r1, [r3, r2]
 800c3d4:	e01b      	b.n	800c40e <HAL_TIM_PWM_Start+0xf2>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d104      	bne.n	800c3e6 <HAL_TIM_PWM_Start+0xca>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2240      	movs	r2, #64	@ 0x40
 800c3e0:	2102      	movs	r1, #2
 800c3e2:	5499      	strb	r1, [r3, r2]
 800c3e4:	e013      	b.n	800c40e <HAL_TIM_PWM_Start+0xf2>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b0c      	cmp	r3, #12
 800c3ea:	d104      	bne.n	800c3f6 <HAL_TIM_PWM_Start+0xda>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2241      	movs	r2, #65	@ 0x41
 800c3f0:	2102      	movs	r1, #2
 800c3f2:	5499      	strb	r1, [r3, r2]
 800c3f4:	e00b      	b.n	800c40e <HAL_TIM_PWM_Start+0xf2>
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	2b10      	cmp	r3, #16
 800c3fa:	d104      	bne.n	800c406 <HAL_TIM_PWM_Start+0xea>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2242      	movs	r2, #66	@ 0x42
 800c400:	2102      	movs	r1, #2
 800c402:	5499      	strb	r1, [r3, r2]
 800c404:	e003      	b.n	800c40e <HAL_TIM_PWM_Start+0xf2>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2243      	movs	r2, #67	@ 0x43
 800c40a:	2102      	movs	r1, #2
 800c40c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	6839      	ldr	r1, [r7, #0]
 800c414:	2201      	movs	r2, #1
 800c416:	0018      	movs	r0, r3
 800c418:	f000 fe3e 	bl	800d098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a2f      	ldr	r2, [pc, #188]	@ (800c4e0 <HAL_TIM_PWM_Start+0x1c4>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d00e      	beq.n	800c444 <HAL_TIM_PWM_Start+0x128>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a2e      	ldr	r2, [pc, #184]	@ (800c4e4 <HAL_TIM_PWM_Start+0x1c8>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d009      	beq.n	800c444 <HAL_TIM_PWM_Start+0x128>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a2c      	ldr	r2, [pc, #176]	@ (800c4e8 <HAL_TIM_PWM_Start+0x1cc>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d004      	beq.n	800c444 <HAL_TIM_PWM_Start+0x128>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a2b      	ldr	r2, [pc, #172]	@ (800c4ec <HAL_TIM_PWM_Start+0x1d0>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d101      	bne.n	800c448 <HAL_TIM_PWM_Start+0x12c>
 800c444:	2301      	movs	r3, #1
 800c446:	e000      	b.n	800c44a <HAL_TIM_PWM_Start+0x12e>
 800c448:	2300      	movs	r3, #0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d008      	beq.n	800c460 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2180      	movs	r1, #128	@ 0x80
 800c45a:	0209      	lsls	r1, r1, #8
 800c45c:	430a      	orrs	r2, r1
 800c45e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a1e      	ldr	r2, [pc, #120]	@ (800c4e0 <HAL_TIM_PWM_Start+0x1c4>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d014      	beq.n	800c494 <HAL_TIM_PWM_Start+0x178>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	2380      	movs	r3, #128	@ 0x80
 800c470:	05db      	lsls	r3, r3, #23
 800c472:	429a      	cmp	r2, r3
 800c474:	d00e      	beq.n	800c494 <HAL_TIM_PWM_Start+0x178>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a1d      	ldr	r2, [pc, #116]	@ (800c4f0 <HAL_TIM_PWM_Start+0x1d4>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d009      	beq.n	800c494 <HAL_TIM_PWM_Start+0x178>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a1b      	ldr	r2, [pc, #108]	@ (800c4f4 <HAL_TIM_PWM_Start+0x1d8>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d004      	beq.n	800c494 <HAL_TIM_PWM_Start+0x178>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a15      	ldr	r2, [pc, #84]	@ (800c4e4 <HAL_TIM_PWM_Start+0x1c8>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d116      	bne.n	800c4c2 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	4a17      	ldr	r2, [pc, #92]	@ (800c4f8 <HAL_TIM_PWM_Start+0x1dc>)
 800c49c:	4013      	ands	r3, r2
 800c49e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b06      	cmp	r3, #6
 800c4a4:	d016      	beq.n	800c4d4 <HAL_TIM_PWM_Start+0x1b8>
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	2380      	movs	r3, #128	@ 0x80
 800c4aa:	025b      	lsls	r3, r3, #9
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d011      	beq.n	800c4d4 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	430a      	orrs	r2, r1
 800c4be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4c0:	e008      	b.n	800c4d4 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	e000      	b.n	800c4d6 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	0018      	movs	r0, r3
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	b004      	add	sp, #16
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	40012c00 	.word	0x40012c00
 800c4e4:	40014000 	.word	0x40014000
 800c4e8:	40014400 	.word	0x40014400
 800c4ec:	40014800 	.word	0x40014800
 800c4f0:	40000400 	.word	0x40000400
 800c4f4:	40000800 	.word	0x40000800
 800c4f8:	00010007 	.word	0x00010007

0800c4fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c508:	2317      	movs	r3, #23
 800c50a:	18fb      	adds	r3, r7, r3
 800c50c:	2200      	movs	r2, #0
 800c50e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	223c      	movs	r2, #60	@ 0x3c
 800c514:	5c9b      	ldrb	r3, [r3, r2]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d101      	bne.n	800c51e <HAL_TIM_PWM_ConfigChannel+0x22>
 800c51a:	2302      	movs	r3, #2
 800c51c:	e0e5      	b.n	800c6ea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	223c      	movs	r2, #60	@ 0x3c
 800c522:	2101      	movs	r1, #1
 800c524:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b14      	cmp	r3, #20
 800c52a:	d900      	bls.n	800c52e <HAL_TIM_PWM_ConfigChannel+0x32>
 800c52c:	e0d1      	b.n	800c6d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	009a      	lsls	r2, r3, #2
 800c532:	4b70      	ldr	r3, [pc, #448]	@ (800c6f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800c534:	18d3      	adds	r3, r2, r3
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	0011      	movs	r1, r2
 800c542:	0018      	movs	r0, r3
 800c544:	f000 fa48 	bl	800c9d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	699a      	ldr	r2, [r3, #24]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2108      	movs	r1, #8
 800c554:	430a      	orrs	r2, r1
 800c556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	699a      	ldr	r2, [r3, #24]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2104      	movs	r1, #4
 800c564:	438a      	bics	r2, r1
 800c566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6999      	ldr	r1, [r3, #24]
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	691a      	ldr	r2, [r3, #16]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	430a      	orrs	r2, r1
 800c578:	619a      	str	r2, [r3, #24]
      break;
 800c57a:	e0af      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	0011      	movs	r1, r2
 800c584:	0018      	movs	r0, r3
 800c586:	f000 fab1 	bl	800caec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	699a      	ldr	r2, [r3, #24]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2180      	movs	r1, #128	@ 0x80
 800c596:	0109      	lsls	r1, r1, #4
 800c598:	430a      	orrs	r2, r1
 800c59a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	699a      	ldr	r2, [r3, #24]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4954      	ldr	r1, [pc, #336]	@ (800c6f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c5a8:	400a      	ands	r2, r1
 800c5aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6999      	ldr	r1, [r3, #24]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	021a      	lsls	r2, r3, #8
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	430a      	orrs	r2, r1
 800c5be:	619a      	str	r2, [r3, #24]
      break;
 800c5c0:	e08c      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	0011      	movs	r1, r2
 800c5ca:	0018      	movs	r0, r3
 800c5cc:	f000 fb12 	bl	800cbf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	69da      	ldr	r2, [r3, #28]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2108      	movs	r1, #8
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	69da      	ldr	r2, [r3, #28]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2104      	movs	r1, #4
 800c5ec:	438a      	bics	r2, r1
 800c5ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	69d9      	ldr	r1, [r3, #28]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	691a      	ldr	r2, [r3, #16]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	430a      	orrs	r2, r1
 800c600:	61da      	str	r2, [r3, #28]
      break;
 800c602:	e06b      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	0011      	movs	r1, r2
 800c60c:	0018      	movs	r0, r3
 800c60e:	f000 fb79 	bl	800cd04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	69da      	ldr	r2, [r3, #28]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2180      	movs	r1, #128	@ 0x80
 800c61e:	0109      	lsls	r1, r1, #4
 800c620:	430a      	orrs	r2, r1
 800c622:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	69da      	ldr	r2, [r3, #28]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4932      	ldr	r1, [pc, #200]	@ (800c6f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c630:	400a      	ands	r2, r1
 800c632:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	69d9      	ldr	r1, [r3, #28]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	021a      	lsls	r2, r3, #8
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	430a      	orrs	r2, r1
 800c646:	61da      	str	r2, [r3, #28]
      break;
 800c648:	e048      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	0011      	movs	r1, r2
 800c652:	0018      	movs	r0, r3
 800c654:	f000 fbc0 	bl	800cdd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2108      	movs	r1, #8
 800c664:	430a      	orrs	r2, r1
 800c666:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2104      	movs	r1, #4
 800c674:	438a      	bics	r2, r1
 800c676:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	691a      	ldr	r2, [r3, #16]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	430a      	orrs	r2, r1
 800c688:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c68a:	e027      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	0011      	movs	r1, r2
 800c694:	0018      	movs	r0, r3
 800c696:	f000 fbff 	bl	800ce98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2180      	movs	r1, #128	@ 0x80
 800c6a6:	0109      	lsls	r1, r1, #4
 800c6a8:	430a      	orrs	r2, r1
 800c6aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4910      	ldr	r1, [pc, #64]	@ (800c6f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c6b8:	400a      	ands	r2, r1
 800c6ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	021a      	lsls	r2, r3, #8
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	430a      	orrs	r2, r1
 800c6ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c6d0:	e004      	b.n	800c6dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c6d2:	2317      	movs	r3, #23
 800c6d4:	18fb      	adds	r3, r7, r3
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	701a      	strb	r2, [r3, #0]
      break;
 800c6da:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	223c      	movs	r2, #60	@ 0x3c
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	5499      	strb	r1, [r3, r2]

  return status;
 800c6e4:	2317      	movs	r3, #23
 800c6e6:	18fb      	adds	r3, r7, r3
 800c6e8:	781b      	ldrb	r3, [r3, #0]
}
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	b006      	add	sp, #24
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	46c0      	nop			@ (mov r8, r8)
 800c6f4:	0801735c 	.word	0x0801735c
 800c6f8:	fffffbff 	.word	0xfffffbff

0800c6fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c706:	230f      	movs	r3, #15
 800c708:	18fb      	adds	r3, r7, r3
 800c70a:	2200      	movs	r2, #0
 800c70c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	223c      	movs	r2, #60	@ 0x3c
 800c712:	5c9b      	ldrb	r3, [r3, r2]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d101      	bne.n	800c71c <HAL_TIM_ConfigClockSource+0x20>
 800c718:	2302      	movs	r3, #2
 800c71a:	e0bc      	b.n	800c896 <HAL_TIM_ConfigClockSource+0x19a>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	223c      	movs	r2, #60	@ 0x3c
 800c720:	2101      	movs	r1, #1
 800c722:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	223d      	movs	r2, #61	@ 0x3d
 800c728:	2102      	movs	r1, #2
 800c72a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	4a5a      	ldr	r2, [pc, #360]	@ (800c8a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 800c738:	4013      	ands	r3, r2
 800c73a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	4a59      	ldr	r2, [pc, #356]	@ (800c8a4 <HAL_TIM_ConfigClockSource+0x1a8>)
 800c740:	4013      	ands	r3, r2
 800c742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2280      	movs	r2, #128	@ 0x80
 800c752:	0192      	lsls	r2, r2, #6
 800c754:	4293      	cmp	r3, r2
 800c756:	d040      	beq.n	800c7da <HAL_TIM_ConfigClockSource+0xde>
 800c758:	2280      	movs	r2, #128	@ 0x80
 800c75a:	0192      	lsls	r2, r2, #6
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d900      	bls.n	800c762 <HAL_TIM_ConfigClockSource+0x66>
 800c760:	e088      	b.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
 800c762:	2280      	movs	r2, #128	@ 0x80
 800c764:	0152      	lsls	r2, r2, #5
 800c766:	4293      	cmp	r3, r2
 800c768:	d100      	bne.n	800c76c <HAL_TIM_ConfigClockSource+0x70>
 800c76a:	e088      	b.n	800c87e <HAL_TIM_ConfigClockSource+0x182>
 800c76c:	2280      	movs	r2, #128	@ 0x80
 800c76e:	0152      	lsls	r2, r2, #5
 800c770:	4293      	cmp	r3, r2
 800c772:	d900      	bls.n	800c776 <HAL_TIM_ConfigClockSource+0x7a>
 800c774:	e07e      	b.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
 800c776:	2b70      	cmp	r3, #112	@ 0x70
 800c778:	d018      	beq.n	800c7ac <HAL_TIM_ConfigClockSource+0xb0>
 800c77a:	d900      	bls.n	800c77e <HAL_TIM_ConfigClockSource+0x82>
 800c77c:	e07a      	b.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
 800c77e:	2b60      	cmp	r3, #96	@ 0x60
 800c780:	d04f      	beq.n	800c822 <HAL_TIM_ConfigClockSource+0x126>
 800c782:	d900      	bls.n	800c786 <HAL_TIM_ConfigClockSource+0x8a>
 800c784:	e076      	b.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
 800c786:	2b50      	cmp	r3, #80	@ 0x50
 800c788:	d03b      	beq.n	800c802 <HAL_TIM_ConfigClockSource+0x106>
 800c78a:	d900      	bls.n	800c78e <HAL_TIM_ConfigClockSource+0x92>
 800c78c:	e072      	b.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
 800c78e:	2b40      	cmp	r3, #64	@ 0x40
 800c790:	d057      	beq.n	800c842 <HAL_TIM_ConfigClockSource+0x146>
 800c792:	d900      	bls.n	800c796 <HAL_TIM_ConfigClockSource+0x9a>
 800c794:	e06e      	b.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
 800c796:	2b30      	cmp	r3, #48	@ 0x30
 800c798:	d063      	beq.n	800c862 <HAL_TIM_ConfigClockSource+0x166>
 800c79a:	d86b      	bhi.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
 800c79c:	2b20      	cmp	r3, #32
 800c79e:	d060      	beq.n	800c862 <HAL_TIM_ConfigClockSource+0x166>
 800c7a0:	d868      	bhi.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d05d      	beq.n	800c862 <HAL_TIM_ConfigClockSource+0x166>
 800c7a6:	2b10      	cmp	r3, #16
 800c7a8:	d05b      	beq.n	800c862 <HAL_TIM_ConfigClockSource+0x166>
 800c7aa:	e063      	b.n	800c874 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7bc:	f000 fc4c 	bl	800d058 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2277      	movs	r2, #119	@ 0x77
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	609a      	str	r2, [r3, #8]
      break;
 800c7d8:	e052      	b.n	800c880 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7ea:	f000 fc35 	bl	800d058 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	689a      	ldr	r2, [r3, #8]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2180      	movs	r1, #128	@ 0x80
 800c7fa:	01c9      	lsls	r1, r1, #7
 800c7fc:	430a      	orrs	r2, r1
 800c7fe:	609a      	str	r2, [r3, #8]
      break;
 800c800:	e03e      	b.n	800c880 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c80e:	001a      	movs	r2, r3
 800c810:	f000 fba6 	bl	800cf60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2150      	movs	r1, #80	@ 0x50
 800c81a:	0018      	movs	r0, r3
 800c81c:	f000 fc00 	bl	800d020 <TIM_ITRx_SetConfig>
      break;
 800c820:	e02e      	b.n	800c880 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c82e:	001a      	movs	r2, r3
 800c830:	f000 fbc4 	bl	800cfbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2160      	movs	r1, #96	@ 0x60
 800c83a:	0018      	movs	r0, r3
 800c83c:	f000 fbf0 	bl	800d020 <TIM_ITRx_SetConfig>
      break;
 800c840:	e01e      	b.n	800c880 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c84e:	001a      	movs	r2, r3
 800c850:	f000 fb86 	bl	800cf60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2140      	movs	r1, #64	@ 0x40
 800c85a:	0018      	movs	r0, r3
 800c85c:	f000 fbe0 	bl	800d020 <TIM_ITRx_SetConfig>
      break;
 800c860:	e00e      	b.n	800c880 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	0019      	movs	r1, r3
 800c86c:	0010      	movs	r0, r2
 800c86e:	f000 fbd7 	bl	800d020 <TIM_ITRx_SetConfig>
      break;
 800c872:	e005      	b.n	800c880 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800c874:	230f      	movs	r3, #15
 800c876:	18fb      	adds	r3, r7, r3
 800c878:	2201      	movs	r2, #1
 800c87a:	701a      	strb	r2, [r3, #0]
      break;
 800c87c:	e000      	b.n	800c880 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800c87e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	223d      	movs	r2, #61	@ 0x3d
 800c884:	2101      	movs	r1, #1
 800c886:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	223c      	movs	r2, #60	@ 0x3c
 800c88c:	2100      	movs	r1, #0
 800c88e:	5499      	strb	r1, [r3, r2]

  return status;
 800c890:	230f      	movs	r3, #15
 800c892:	18fb      	adds	r3, r7, r3
 800c894:	781b      	ldrb	r3, [r3, #0]
}
 800c896:	0018      	movs	r0, r3
 800c898:	46bd      	mov	sp, r7
 800c89a:	b004      	add	sp, #16
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	46c0      	nop			@ (mov r8, r8)
 800c8a0:	ffceff88 	.word	0xffceff88
 800c8a4:	ffff00ff 	.word	0xffff00ff

0800c8a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a3f      	ldr	r2, [pc, #252]	@ (800c9b8 <TIM_Base_SetConfig+0x110>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00c      	beq.n	800c8da <TIM_Base_SetConfig+0x32>
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	2380      	movs	r3, #128	@ 0x80
 800c8c4:	05db      	lsls	r3, r3, #23
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d007      	beq.n	800c8da <TIM_Base_SetConfig+0x32>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a3b      	ldr	r2, [pc, #236]	@ (800c9bc <TIM_Base_SetConfig+0x114>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d003      	beq.n	800c8da <TIM_Base_SetConfig+0x32>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a3a      	ldr	r2, [pc, #232]	@ (800c9c0 <TIM_Base_SetConfig+0x118>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d108      	bne.n	800c8ec <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2270      	movs	r2, #112	@ 0x70
 800c8de:	4393      	bics	r3, r2
 800c8e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a32      	ldr	r2, [pc, #200]	@ (800c9b8 <TIM_Base_SetConfig+0x110>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d01c      	beq.n	800c92e <TIM_Base_SetConfig+0x86>
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	2380      	movs	r3, #128	@ 0x80
 800c8f8:	05db      	lsls	r3, r3, #23
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d017      	beq.n	800c92e <TIM_Base_SetConfig+0x86>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a2e      	ldr	r2, [pc, #184]	@ (800c9bc <TIM_Base_SetConfig+0x114>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d013      	beq.n	800c92e <TIM_Base_SetConfig+0x86>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a2d      	ldr	r2, [pc, #180]	@ (800c9c0 <TIM_Base_SetConfig+0x118>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d00f      	beq.n	800c92e <TIM_Base_SetConfig+0x86>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a2c      	ldr	r2, [pc, #176]	@ (800c9c4 <TIM_Base_SetConfig+0x11c>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d00b      	beq.n	800c92e <TIM_Base_SetConfig+0x86>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a2b      	ldr	r2, [pc, #172]	@ (800c9c8 <TIM_Base_SetConfig+0x120>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d007      	beq.n	800c92e <TIM_Base_SetConfig+0x86>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a2a      	ldr	r2, [pc, #168]	@ (800c9cc <TIM_Base_SetConfig+0x124>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d003      	beq.n	800c92e <TIM_Base_SetConfig+0x86>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4a29      	ldr	r2, [pc, #164]	@ (800c9d0 <TIM_Base_SetConfig+0x128>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d108      	bne.n	800c940 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	4a28      	ldr	r2, [pc, #160]	@ (800c9d4 <TIM_Base_SetConfig+0x12c>)
 800c932:	4013      	ands	r3, r2
 800c934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2280      	movs	r2, #128	@ 0x80
 800c944:	4393      	bics	r3, r2
 800c946:	001a      	movs	r2, r3
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	689a      	ldr	r2, [r3, #8]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a13      	ldr	r2, [pc, #76]	@ (800c9b8 <TIM_Base_SetConfig+0x110>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d00b      	beq.n	800c986 <TIM_Base_SetConfig+0xde>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a15      	ldr	r2, [pc, #84]	@ (800c9c8 <TIM_Base_SetConfig+0x120>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d007      	beq.n	800c986 <TIM_Base_SetConfig+0xde>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a14      	ldr	r2, [pc, #80]	@ (800c9cc <TIM_Base_SetConfig+0x124>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d003      	beq.n	800c986 <TIM_Base_SetConfig+0xde>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a13      	ldr	r2, [pc, #76]	@ (800c9d0 <TIM_Base_SetConfig+0x128>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d103      	bne.n	800c98e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	691a      	ldr	r2, [r3, #16]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	691b      	ldr	r3, [r3, #16]
 800c998:	2201      	movs	r2, #1
 800c99a:	4013      	ands	r3, r2
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d106      	bne.n	800c9ae <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	4393      	bics	r3, r2
 800c9a8:	001a      	movs	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	611a      	str	r2, [r3, #16]
  }
}
 800c9ae:	46c0      	nop			@ (mov r8, r8)
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	b004      	add	sp, #16
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	46c0      	nop			@ (mov r8, r8)
 800c9b8:	40012c00 	.word	0x40012c00
 800c9bc:	40000400 	.word	0x40000400
 800c9c0:	40000800 	.word	0x40000800
 800c9c4:	40002000 	.word	0x40002000
 800c9c8:	40014000 	.word	0x40014000
 800c9cc:	40014400 	.word	0x40014400
 800c9d0:	40014800 	.word	0x40014800
 800c9d4:	fffffcff 	.word	0xfffffcff

0800c9d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6a1b      	ldr	r3, [r3, #32]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	4393      	bics	r3, r2
 800c9f0:	001a      	movs	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	4a32      	ldr	r2, [pc, #200]	@ (800cad0 <TIM_OC1_SetConfig+0xf8>)
 800ca06:	4013      	ands	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	4393      	bics	r3, r2
 800ca10:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	4393      	bics	r3, r2
 800ca22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a28      	ldr	r2, [pc, #160]	@ (800cad4 <TIM_OC1_SetConfig+0xfc>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d00b      	beq.n	800ca4e <TIM_OC1_SetConfig+0x76>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a27      	ldr	r2, [pc, #156]	@ (800cad8 <TIM_OC1_SetConfig+0x100>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d007      	beq.n	800ca4e <TIM_OC1_SetConfig+0x76>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a26      	ldr	r2, [pc, #152]	@ (800cadc <TIM_OC1_SetConfig+0x104>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d003      	beq.n	800ca4e <TIM_OC1_SetConfig+0x76>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a25      	ldr	r2, [pc, #148]	@ (800cae0 <TIM_OC1_SetConfig+0x108>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d10c      	bne.n	800ca68 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2208      	movs	r2, #8
 800ca52:	4393      	bics	r3, r2
 800ca54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	697a      	ldr	r2, [r7, #20]
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2204      	movs	r2, #4
 800ca64:	4393      	bics	r3, r2
 800ca66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a1a      	ldr	r2, [pc, #104]	@ (800cad4 <TIM_OC1_SetConfig+0xfc>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d00b      	beq.n	800ca88 <TIM_OC1_SetConfig+0xb0>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a19      	ldr	r2, [pc, #100]	@ (800cad8 <TIM_OC1_SetConfig+0x100>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d007      	beq.n	800ca88 <TIM_OC1_SetConfig+0xb0>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a18      	ldr	r2, [pc, #96]	@ (800cadc <TIM_OC1_SetConfig+0x104>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d003      	beq.n	800ca88 <TIM_OC1_SetConfig+0xb0>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a17      	ldr	r2, [pc, #92]	@ (800cae0 <TIM_OC1_SetConfig+0x108>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d111      	bne.n	800caac <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	4a16      	ldr	r2, [pc, #88]	@ (800cae4 <TIM_OC1_SetConfig+0x10c>)
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	4a15      	ldr	r2, [pc, #84]	@ (800cae8 <TIM_OC1_SetConfig+0x110>)
 800ca94:	4013      	ands	r3, r2
 800ca96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	699b      	ldr	r3, [r3, #24]
 800caa6:	693a      	ldr	r2, [r7, #16]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	621a      	str	r2, [r3, #32]
}
 800cac6:	46c0      	nop			@ (mov r8, r8)
 800cac8:	46bd      	mov	sp, r7
 800caca:	b006      	add	sp, #24
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	46c0      	nop			@ (mov r8, r8)
 800cad0:	fffeff8f 	.word	0xfffeff8f
 800cad4:	40012c00 	.word	0x40012c00
 800cad8:	40014000 	.word	0x40014000
 800cadc:	40014400 	.word	0x40014400
 800cae0:	40014800 	.word	0x40014800
 800cae4:	fffffeff 	.word	0xfffffeff
 800cae8:	fffffdff 	.word	0xfffffdff

0800caec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a1b      	ldr	r3, [r3, #32]
 800cb00:	2210      	movs	r2, #16
 800cb02:	4393      	bics	r3, r2
 800cb04:	001a      	movs	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	4a2e      	ldr	r2, [pc, #184]	@ (800cbd4 <TIM_OC2_SetConfig+0xe8>)
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	4a2d      	ldr	r2, [pc, #180]	@ (800cbd8 <TIM_OC2_SetConfig+0xec>)
 800cb22:	4013      	ands	r3, r2
 800cb24:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	021b      	lsls	r3, r3, #8
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2220      	movs	r2, #32
 800cb36:	4393      	bics	r3, r2
 800cb38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	011b      	lsls	r3, r3, #4
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a24      	ldr	r2, [pc, #144]	@ (800cbdc <TIM_OC2_SetConfig+0xf0>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d10d      	bne.n	800cb6a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2280      	movs	r2, #128	@ 0x80
 800cb52:	4393      	bics	r3, r2
 800cb54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	011b      	lsls	r3, r3, #4
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	2240      	movs	r2, #64	@ 0x40
 800cb66:	4393      	bics	r3, r2
 800cb68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a1b      	ldr	r2, [pc, #108]	@ (800cbdc <TIM_OC2_SetConfig+0xf0>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d00b      	beq.n	800cb8a <TIM_OC2_SetConfig+0x9e>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a1a      	ldr	r2, [pc, #104]	@ (800cbe0 <TIM_OC2_SetConfig+0xf4>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d007      	beq.n	800cb8a <TIM_OC2_SetConfig+0x9e>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a19      	ldr	r2, [pc, #100]	@ (800cbe4 <TIM_OC2_SetConfig+0xf8>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d003      	beq.n	800cb8a <TIM_OC2_SetConfig+0x9e>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a18      	ldr	r2, [pc, #96]	@ (800cbe8 <TIM_OC2_SetConfig+0xfc>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d113      	bne.n	800cbb2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	4a17      	ldr	r2, [pc, #92]	@ (800cbec <TIM_OC2_SetConfig+0x100>)
 800cb8e:	4013      	ands	r3, r2
 800cb90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	4a16      	ldr	r2, [pc, #88]	@ (800cbf0 <TIM_OC2_SetConfig+0x104>)
 800cb96:	4013      	ands	r3, r2
 800cb98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	693a      	ldr	r2, [r7, #16]
 800cba2:	4313      	orrs	r3, r2
 800cba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	621a      	str	r2, [r3, #32]
}
 800cbcc:	46c0      	nop			@ (mov r8, r8)
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	b006      	add	sp, #24
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	feff8fff 	.word	0xfeff8fff
 800cbd8:	fffffcff 	.word	0xfffffcff
 800cbdc:	40012c00 	.word	0x40012c00
 800cbe0:	40014000 	.word	0x40014000
 800cbe4:	40014400 	.word	0x40014400
 800cbe8:	40014800 	.word	0x40014800
 800cbec:	fffffbff 	.word	0xfffffbff
 800cbf0:	fffff7ff 	.word	0xfffff7ff

0800cbf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a1b      	ldr	r3, [r3, #32]
 800cc08:	4a33      	ldr	r2, [pc, #204]	@ (800ccd8 <TIM_OC3_SetConfig+0xe4>)
 800cc0a:	401a      	ands	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	69db      	ldr	r3, [r3, #28]
 800cc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4a2f      	ldr	r2, [pc, #188]	@ (800ccdc <TIM_OC3_SetConfig+0xe8>)
 800cc20:	4013      	ands	r3, r2
 800cc22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2203      	movs	r2, #3
 800cc28:	4393      	bics	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	4a29      	ldr	r2, [pc, #164]	@ (800cce0 <TIM_OC3_SetConfig+0xec>)
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	021b      	lsls	r3, r3, #8
 800cc44:	697a      	ldr	r2, [r7, #20]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a25      	ldr	r2, [pc, #148]	@ (800cce4 <TIM_OC3_SetConfig+0xf0>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d10d      	bne.n	800cc6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	4a24      	ldr	r2, [pc, #144]	@ (800cce8 <TIM_OC3_SetConfig+0xf4>)
 800cc56:	4013      	ands	r3, r2
 800cc58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	021b      	lsls	r3, r3, #8
 800cc60:	697a      	ldr	r2, [r7, #20]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	4a20      	ldr	r2, [pc, #128]	@ (800ccec <TIM_OC3_SetConfig+0xf8>)
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a1c      	ldr	r2, [pc, #112]	@ (800cce4 <TIM_OC3_SetConfig+0xf0>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d00b      	beq.n	800cc8e <TIM_OC3_SetConfig+0x9a>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4a1d      	ldr	r2, [pc, #116]	@ (800ccf0 <TIM_OC3_SetConfig+0xfc>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d007      	beq.n	800cc8e <TIM_OC3_SetConfig+0x9a>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	4a1c      	ldr	r2, [pc, #112]	@ (800ccf4 <TIM_OC3_SetConfig+0x100>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d003      	beq.n	800cc8e <TIM_OC3_SetConfig+0x9a>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4a1b      	ldr	r2, [pc, #108]	@ (800ccf8 <TIM_OC3_SetConfig+0x104>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d113      	bne.n	800ccb6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	4a1a      	ldr	r2, [pc, #104]	@ (800ccfc <TIM_OC3_SetConfig+0x108>)
 800cc92:	4013      	ands	r3, r2
 800cc94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	4a19      	ldr	r2, [pc, #100]	@ (800cd00 <TIM_OC3_SetConfig+0x10c>)
 800cc9a:	4013      	ands	r3, r2
 800cc9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	695b      	ldr	r3, [r3, #20]
 800cca2:	011b      	lsls	r3, r3, #4
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	4313      	orrs	r3, r2
 800cca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	011b      	lsls	r3, r3, #4
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	685a      	ldr	r2, [r3, #4]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	621a      	str	r2, [r3, #32]
}
 800ccd0:	46c0      	nop			@ (mov r8, r8)
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	b006      	add	sp, #24
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	fffffeff 	.word	0xfffffeff
 800ccdc:	fffeff8f 	.word	0xfffeff8f
 800cce0:	fffffdff 	.word	0xfffffdff
 800cce4:	40012c00 	.word	0x40012c00
 800cce8:	fffff7ff 	.word	0xfffff7ff
 800ccec:	fffffbff 	.word	0xfffffbff
 800ccf0:	40014000 	.word	0x40014000
 800ccf4:	40014400 	.word	0x40014400
 800ccf8:	40014800 	.word	0x40014800
 800ccfc:	ffffefff 	.word	0xffffefff
 800cd00:	ffffdfff 	.word	0xffffdfff

0800cd04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6a1b      	ldr	r3, [r3, #32]
 800cd12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a1b      	ldr	r3, [r3, #32]
 800cd18:	4a26      	ldr	r2, [pc, #152]	@ (800cdb4 <TIM_OC4_SetConfig+0xb0>)
 800cd1a:	401a      	ands	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	69db      	ldr	r3, [r3, #28]
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4a22      	ldr	r2, [pc, #136]	@ (800cdb8 <TIM_OC4_SetConfig+0xb4>)
 800cd30:	4013      	ands	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	4a21      	ldr	r2, [pc, #132]	@ (800cdbc <TIM_OC4_SetConfig+0xb8>)
 800cd38:	4013      	ands	r3, r2
 800cd3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	021b      	lsls	r3, r3, #8
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	4a1d      	ldr	r2, [pc, #116]	@ (800cdc0 <TIM_OC4_SetConfig+0xbc>)
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	031b      	lsls	r3, r3, #12
 800cd56:	693a      	ldr	r2, [r7, #16]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a19      	ldr	r2, [pc, #100]	@ (800cdc4 <TIM_OC4_SetConfig+0xc0>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d00b      	beq.n	800cd7c <TIM_OC4_SetConfig+0x78>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a18      	ldr	r2, [pc, #96]	@ (800cdc8 <TIM_OC4_SetConfig+0xc4>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d007      	beq.n	800cd7c <TIM_OC4_SetConfig+0x78>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a17      	ldr	r2, [pc, #92]	@ (800cdcc <TIM_OC4_SetConfig+0xc8>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d003      	beq.n	800cd7c <TIM_OC4_SetConfig+0x78>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a16      	ldr	r2, [pc, #88]	@ (800cdd0 <TIM_OC4_SetConfig+0xcc>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d109      	bne.n	800cd90 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	4a15      	ldr	r2, [pc, #84]	@ (800cdd4 <TIM_OC4_SetConfig+0xd0>)
 800cd80:	4013      	ands	r3, r2
 800cd82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	019b      	lsls	r3, r3, #6
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	697a      	ldr	r2, [r7, #20]
 800cd94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	621a      	str	r2, [r3, #32]
}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b006      	add	sp, #24
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	46c0      	nop			@ (mov r8, r8)
 800cdb4:	ffffefff 	.word	0xffffefff
 800cdb8:	feff8fff 	.word	0xfeff8fff
 800cdbc:	fffffcff 	.word	0xfffffcff
 800cdc0:	ffffdfff 	.word	0xffffdfff
 800cdc4:	40012c00 	.word	0x40012c00
 800cdc8:	40014000 	.word	0x40014000
 800cdcc:	40014400 	.word	0x40014400
 800cdd0:	40014800 	.word	0x40014800
 800cdd4:	ffffbfff 	.word	0xffffbfff

0800cdd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a1b      	ldr	r3, [r3, #32]
 800cde6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a1b      	ldr	r3, [r3, #32]
 800cdec:	4a23      	ldr	r2, [pc, #140]	@ (800ce7c <TIM_OC5_SetConfig+0xa4>)
 800cdee:	401a      	ands	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	4a1f      	ldr	r2, [pc, #124]	@ (800ce80 <TIM_OC5_SetConfig+0xa8>)
 800ce04:	4013      	ands	r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	4a1b      	ldr	r2, [pc, #108]	@ (800ce84 <TIM_OC5_SetConfig+0xac>)
 800ce16:	4013      	ands	r3, r2
 800ce18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	041b      	lsls	r3, r3, #16
 800ce20:	693a      	ldr	r2, [r7, #16]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a17      	ldr	r2, [pc, #92]	@ (800ce88 <TIM_OC5_SetConfig+0xb0>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d00b      	beq.n	800ce46 <TIM_OC5_SetConfig+0x6e>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4a16      	ldr	r2, [pc, #88]	@ (800ce8c <TIM_OC5_SetConfig+0xb4>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d007      	beq.n	800ce46 <TIM_OC5_SetConfig+0x6e>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a15      	ldr	r2, [pc, #84]	@ (800ce90 <TIM_OC5_SetConfig+0xb8>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d003      	beq.n	800ce46 <TIM_OC5_SetConfig+0x6e>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a14      	ldr	r2, [pc, #80]	@ (800ce94 <TIM_OC5_SetConfig+0xbc>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d109      	bne.n	800ce5a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	4a0c      	ldr	r2, [pc, #48]	@ (800ce7c <TIM_OC5_SetConfig+0xa4>)
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	695b      	ldr	r3, [r3, #20]
 800ce52:	021b      	lsls	r3, r3, #8
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	697a      	ldr	r2, [r7, #20]
 800ce5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	693a      	ldr	r2, [r7, #16]
 800ce72:	621a      	str	r2, [r3, #32]
}
 800ce74:	46c0      	nop			@ (mov r8, r8)
 800ce76:	46bd      	mov	sp, r7
 800ce78:	b006      	add	sp, #24
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	fffeffff 	.word	0xfffeffff
 800ce80:	fffeff8f 	.word	0xfffeff8f
 800ce84:	fffdffff 	.word	0xfffdffff
 800ce88:	40012c00 	.word	0x40012c00
 800ce8c:	40014000 	.word	0x40014000
 800ce90:	40014400 	.word	0x40014400
 800ce94:	40014800 	.word	0x40014800

0800ce98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	4a24      	ldr	r2, [pc, #144]	@ (800cf40 <TIM_OC6_SetConfig+0xa8>)
 800ceae:	401a      	ands	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	4a20      	ldr	r2, [pc, #128]	@ (800cf44 <TIM_OC6_SetConfig+0xac>)
 800cec4:	4013      	ands	r3, r2
 800cec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	021b      	lsls	r3, r3, #8
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	4a1c      	ldr	r2, [pc, #112]	@ (800cf48 <TIM_OC6_SetConfig+0xb0>)
 800ced8:	4013      	ands	r3, r2
 800ceda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	051b      	lsls	r3, r3, #20
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a18      	ldr	r2, [pc, #96]	@ (800cf4c <TIM_OC6_SetConfig+0xb4>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d00b      	beq.n	800cf08 <TIM_OC6_SetConfig+0x70>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a17      	ldr	r2, [pc, #92]	@ (800cf50 <TIM_OC6_SetConfig+0xb8>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d007      	beq.n	800cf08 <TIM_OC6_SetConfig+0x70>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4a16      	ldr	r2, [pc, #88]	@ (800cf54 <TIM_OC6_SetConfig+0xbc>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d003      	beq.n	800cf08 <TIM_OC6_SetConfig+0x70>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a15      	ldr	r2, [pc, #84]	@ (800cf58 <TIM_OC6_SetConfig+0xc0>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d109      	bne.n	800cf1c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	4a14      	ldr	r2, [pc, #80]	@ (800cf5c <TIM_OC6_SetConfig+0xc4>)
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	029b      	lsls	r3, r3, #10
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	693a      	ldr	r2, [r7, #16]
 800cf34:	621a      	str	r2, [r3, #32]
}
 800cf36:	46c0      	nop			@ (mov r8, r8)
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	b006      	add	sp, #24
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	46c0      	nop			@ (mov r8, r8)
 800cf40:	ffefffff 	.word	0xffefffff
 800cf44:	feff8fff 	.word	0xfeff8fff
 800cf48:	ffdfffff 	.word	0xffdfffff
 800cf4c:	40012c00 	.word	0x40012c00
 800cf50:	40014000 	.word	0x40014000
 800cf54:	40014400 	.word	0x40014400
 800cf58:	40014800 	.word	0x40014800
 800cf5c:	fffbffff 	.word	0xfffbffff

0800cf60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6a1b      	ldr	r3, [r3, #32]
 800cf70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6a1b      	ldr	r3, [r3, #32]
 800cf76:	2201      	movs	r2, #1
 800cf78:	4393      	bics	r3, r2
 800cf7a:	001a      	movs	r2, r3
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	22f0      	movs	r2, #240	@ 0xf0
 800cf8a:	4393      	bics	r3, r2
 800cf8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	011b      	lsls	r3, r3, #4
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	220a      	movs	r2, #10
 800cf9c:	4393      	bics	r3, r2
 800cf9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cfa0:	697a      	ldr	r2, [r7, #20]
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	693a      	ldr	r2, [r7, #16]
 800cfac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	621a      	str	r2, [r3, #32]
}
 800cfb4:	46c0      	nop			@ (mov r8, r8)
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	b006      	add	sp, #24
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b086      	sub	sp, #24
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6a1b      	ldr	r3, [r3, #32]
 800cfcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6a1b      	ldr	r3, [r3, #32]
 800cfd2:	2210      	movs	r2, #16
 800cfd4:	4393      	bics	r3, r2
 800cfd6:	001a      	movs	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	4a0d      	ldr	r2, [pc, #52]	@ (800d01c <TIM_TI2_ConfigInputStage+0x60>)
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	031b      	lsls	r3, r3, #12
 800cfee:	693a      	ldr	r2, [r7, #16]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	22a0      	movs	r2, #160	@ 0xa0
 800cff8:	4393      	bics	r3, r2
 800cffa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	011b      	lsls	r3, r3, #4
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	4313      	orrs	r3, r2
 800d004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	621a      	str	r2, [r3, #32]
}
 800d012:	46c0      	nop			@ (mov r8, r8)
 800d014:	46bd      	mov	sp, r7
 800d016:	b006      	add	sp, #24
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	46c0      	nop			@ (mov r8, r8)
 800d01c:	ffff0fff 	.word	0xffff0fff

0800d020 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4a08      	ldr	r2, [pc, #32]	@ (800d054 <TIM_ITRx_SetConfig+0x34>)
 800d034:	4013      	ands	r3, r2
 800d036:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d038:	683a      	ldr	r2, [r7, #0]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	2207      	movs	r2, #7
 800d040:	4313      	orrs	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	609a      	str	r2, [r3, #8]
}
 800d04a:	46c0      	nop			@ (mov r8, r8)
 800d04c:	46bd      	mov	sp, r7
 800d04e:	b004      	add	sp, #16
 800d050:	bd80      	pop	{r7, pc}
 800d052:	46c0      	nop			@ (mov r8, r8)
 800d054:	ffcfff8f 	.word	0xffcfff8f

0800d058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b086      	sub	sp, #24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	4a09      	ldr	r2, [pc, #36]	@ (800d094 <TIM_ETR_SetConfig+0x3c>)
 800d070:	4013      	ands	r3, r2
 800d072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	021a      	lsls	r2, r3, #8
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	431a      	orrs	r2, r3
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	4313      	orrs	r3, r2
 800d080:	697a      	ldr	r2, [r7, #20]
 800d082:	4313      	orrs	r3, r2
 800d084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	697a      	ldr	r2, [r7, #20]
 800d08a:	609a      	str	r2, [r3, #8]
}
 800d08c:	46c0      	nop			@ (mov r8, r8)
 800d08e:	46bd      	mov	sp, r7
 800d090:	b006      	add	sp, #24
 800d092:	bd80      	pop	{r7, pc}
 800d094:	ffff00ff 	.word	0xffff00ff

0800d098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	221f      	movs	r2, #31
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	409a      	lsls	r2, r3
 800d0ae:	0013      	movs	r3, r2
 800d0b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6a1b      	ldr	r3, [r3, #32]
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	43d2      	mvns	r2, r2
 800d0ba:	401a      	ands	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6a1a      	ldr	r2, [r3, #32]
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	211f      	movs	r1, #31
 800d0c8:	400b      	ands	r3, r1
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	4099      	lsls	r1, r3
 800d0ce:	000b      	movs	r3, r1
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	621a      	str	r2, [r3, #32]
}
 800d0d6:	46c0      	nop			@ (mov r8, r8)
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	b006      	add	sp, #24
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	223c      	movs	r2, #60	@ 0x3c
 800d0ee:	5c9b      	ldrb	r3, [r3, r2]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d101      	bne.n	800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	e05a      	b.n	800d1ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	223c      	movs	r2, #60	@ 0x3c
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	223d      	movs	r2, #61	@ 0x3d
 800d104:	2102      	movs	r1, #2
 800d106:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a26      	ldr	r2, [pc, #152]	@ (800d1b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d108      	bne.n	800d134 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	4a25      	ldr	r2, [pc, #148]	@ (800d1bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d126:	4013      	ands	r3, r2
 800d128:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	4313      	orrs	r3, r2
 800d132:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2270      	movs	r2, #112	@ 0x70
 800d138:	4393      	bics	r3, r2
 800d13a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	4313      	orrs	r3, r2
 800d144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a19      	ldr	r2, [pc, #100]	@ (800d1b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d014      	beq.n	800d182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	2380      	movs	r3, #128	@ 0x80
 800d15e:	05db      	lsls	r3, r3, #23
 800d160:	429a      	cmp	r2, r3
 800d162:	d00e      	beq.n	800d182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a15      	ldr	r2, [pc, #84]	@ (800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d009      	beq.n	800d182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a14      	ldr	r2, [pc, #80]	@ (800d1c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d004      	beq.n	800d182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a12      	ldr	r2, [pc, #72]	@ (800d1c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d10c      	bne.n	800d19c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2280      	movs	r2, #128	@ 0x80
 800d186:	4393      	bics	r3, r2
 800d188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	4313      	orrs	r3, r2
 800d192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	223d      	movs	r2, #61	@ 0x3d
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	223c      	movs	r2, #60	@ 0x3c
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	0018      	movs	r0, r3
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	b004      	add	sp, #16
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	46c0      	nop			@ (mov r8, r8)
 800d1b8:	40012c00 	.word	0x40012c00
 800d1bc:	ff0fffff 	.word	0xff0fffff
 800d1c0:	40000400 	.word	0x40000400
 800d1c4:	40000800 	.word	0x40000800
 800d1c8:	40014000 	.word	0x40014000

0800d1cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d101      	bne.n	800d1de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e046      	b.n	800d26c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2288      	movs	r2, #136	@ 0x88
 800d1e2:	589b      	ldr	r3, [r3, r2]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d107      	bne.n	800d1f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2284      	movs	r2, #132	@ 0x84
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	0018      	movs	r0, r3
 800d1f4:	f7fa ff26 	bl	8008044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2288      	movs	r2, #136	@ 0x88
 800d1fc:	2124      	movs	r1, #36	@ 0x24
 800d1fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2101      	movs	r1, #1
 800d20c:	438a      	bics	r2, r1
 800d20e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d214:	2b00      	cmp	r3, #0
 800d216:	d003      	beq.n	800d220 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	0018      	movs	r0, r3
 800d21c:	f000 fb82 	bl	800d924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	0018      	movs	r0, r3
 800d224:	f000 f828 	bl	800d278 <UART_SetConfig>
 800d228:	0003      	movs	r3, r0
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d101      	bne.n	800d232 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e01c      	b.n	800d26c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	490d      	ldr	r1, [pc, #52]	@ (800d274 <HAL_UART_Init+0xa8>)
 800d23e:	400a      	ands	r2, r1
 800d240:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	689a      	ldr	r2, [r3, #8]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	212a      	movs	r1, #42	@ 0x2a
 800d24e:	438a      	bics	r2, r1
 800d250:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2101      	movs	r1, #1
 800d25e:	430a      	orrs	r2, r1
 800d260:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	0018      	movs	r0, r3
 800d266:	f000 fc11 	bl	800da8c <UART_CheckIdleState>
 800d26a:	0003      	movs	r3, r0
}
 800d26c:	0018      	movs	r0, r3
 800d26e:	46bd      	mov	sp, r7
 800d270:	b002      	add	sp, #8
 800d272:	bd80      	pop	{r7, pc}
 800d274:	ffffb7ff 	.word	0xffffb7ff

0800d278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d278:	b5b0      	push	{r4, r5, r7, lr}
 800d27a:	b090      	sub	sp, #64	@ 0x40
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d280:	231a      	movs	r3, #26
 800d282:	2220      	movs	r2, #32
 800d284:	189b      	adds	r3, r3, r2
 800d286:	19db      	adds	r3, r3, r7
 800d288:	2200      	movs	r2, #0
 800d28a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28e:	689a      	ldr	r2, [r3, #8]
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	431a      	orrs	r2, r3
 800d296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d298:	695b      	ldr	r3, [r3, #20]
 800d29a:	431a      	orrs	r2, r3
 800d29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29e:	69db      	ldr	r3, [r3, #28]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4ac1      	ldr	r2, [pc, #772]	@ (800d5b0 <UART_SetConfig+0x338>)
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	0019      	movs	r1, r3
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b6:	430b      	orrs	r3, r1
 800d2b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	4abc      	ldr	r2, [pc, #752]	@ (800d5b4 <UART_SetConfig+0x33c>)
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	0018      	movs	r0, r3
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c8:	68d9      	ldr	r1, [r3, #12]
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	0003      	movs	r3, r0
 800d2d0:	430b      	orrs	r3, r1
 800d2d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4ab6      	ldr	r2, [pc, #728]	@ (800d5b8 <UART_SetConfig+0x340>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d009      	beq.n	800d2f8 <UART_SetConfig+0x80>
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4ab4      	ldr	r2, [pc, #720]	@ (800d5bc <UART_SetConfig+0x344>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d004      	beq.n	800d2f8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f0:	6a1b      	ldr	r3, [r3, #32]
 800d2f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	4ab0      	ldr	r2, [pc, #704]	@ (800d5c0 <UART_SetConfig+0x348>)
 800d300:	4013      	ands	r3, r2
 800d302:	0019      	movs	r1, r3
 800d304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d30a:	430b      	orrs	r3, r1
 800d30c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d314:	220f      	movs	r2, #15
 800d316:	4393      	bics	r3, r2
 800d318:	0018      	movs	r0, r3
 800d31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	0003      	movs	r3, r0
 800d324:	430b      	orrs	r3, r1
 800d326:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4aa5      	ldr	r2, [pc, #660]	@ (800d5c4 <UART_SetConfig+0x34c>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d131      	bne.n	800d396 <UART_SetConfig+0x11e>
 800d332:	4ba5      	ldr	r3, [pc, #660]	@ (800d5c8 <UART_SetConfig+0x350>)
 800d334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d336:	2203      	movs	r2, #3
 800d338:	4013      	ands	r3, r2
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d01d      	beq.n	800d37a <UART_SetConfig+0x102>
 800d33e:	d823      	bhi.n	800d388 <UART_SetConfig+0x110>
 800d340:	2b02      	cmp	r3, #2
 800d342:	d00c      	beq.n	800d35e <UART_SetConfig+0xe6>
 800d344:	d820      	bhi.n	800d388 <UART_SetConfig+0x110>
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <UART_SetConfig+0xd8>
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d00e      	beq.n	800d36c <UART_SetConfig+0xf4>
 800d34e:	e01b      	b.n	800d388 <UART_SetConfig+0x110>
 800d350:	231b      	movs	r3, #27
 800d352:	2220      	movs	r2, #32
 800d354:	189b      	adds	r3, r3, r2
 800d356:	19db      	adds	r3, r3, r7
 800d358:	2200      	movs	r2, #0
 800d35a:	701a      	strb	r2, [r3, #0]
 800d35c:	e154      	b.n	800d608 <UART_SetConfig+0x390>
 800d35e:	231b      	movs	r3, #27
 800d360:	2220      	movs	r2, #32
 800d362:	189b      	adds	r3, r3, r2
 800d364:	19db      	adds	r3, r3, r7
 800d366:	2202      	movs	r2, #2
 800d368:	701a      	strb	r2, [r3, #0]
 800d36a:	e14d      	b.n	800d608 <UART_SetConfig+0x390>
 800d36c:	231b      	movs	r3, #27
 800d36e:	2220      	movs	r2, #32
 800d370:	189b      	adds	r3, r3, r2
 800d372:	19db      	adds	r3, r3, r7
 800d374:	2204      	movs	r2, #4
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	e146      	b.n	800d608 <UART_SetConfig+0x390>
 800d37a:	231b      	movs	r3, #27
 800d37c:	2220      	movs	r2, #32
 800d37e:	189b      	adds	r3, r3, r2
 800d380:	19db      	adds	r3, r3, r7
 800d382:	2208      	movs	r2, #8
 800d384:	701a      	strb	r2, [r3, #0]
 800d386:	e13f      	b.n	800d608 <UART_SetConfig+0x390>
 800d388:	231b      	movs	r3, #27
 800d38a:	2220      	movs	r2, #32
 800d38c:	189b      	adds	r3, r3, r2
 800d38e:	19db      	adds	r3, r3, r7
 800d390:	2210      	movs	r2, #16
 800d392:	701a      	strb	r2, [r3, #0]
 800d394:	e138      	b.n	800d608 <UART_SetConfig+0x390>
 800d396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a8c      	ldr	r2, [pc, #560]	@ (800d5cc <UART_SetConfig+0x354>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d131      	bne.n	800d404 <UART_SetConfig+0x18c>
 800d3a0:	4b89      	ldr	r3, [pc, #548]	@ (800d5c8 <UART_SetConfig+0x350>)
 800d3a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3a4:	220c      	movs	r2, #12
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	2b0c      	cmp	r3, #12
 800d3aa:	d01d      	beq.n	800d3e8 <UART_SetConfig+0x170>
 800d3ac:	d823      	bhi.n	800d3f6 <UART_SetConfig+0x17e>
 800d3ae:	2b08      	cmp	r3, #8
 800d3b0:	d00c      	beq.n	800d3cc <UART_SetConfig+0x154>
 800d3b2:	d820      	bhi.n	800d3f6 <UART_SetConfig+0x17e>
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <UART_SetConfig+0x146>
 800d3b8:	2b04      	cmp	r3, #4
 800d3ba:	d00e      	beq.n	800d3da <UART_SetConfig+0x162>
 800d3bc:	e01b      	b.n	800d3f6 <UART_SetConfig+0x17e>
 800d3be:	231b      	movs	r3, #27
 800d3c0:	2220      	movs	r2, #32
 800d3c2:	189b      	adds	r3, r3, r2
 800d3c4:	19db      	adds	r3, r3, r7
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	701a      	strb	r2, [r3, #0]
 800d3ca:	e11d      	b.n	800d608 <UART_SetConfig+0x390>
 800d3cc:	231b      	movs	r3, #27
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	189b      	adds	r3, r3, r2
 800d3d2:	19db      	adds	r3, r3, r7
 800d3d4:	2202      	movs	r2, #2
 800d3d6:	701a      	strb	r2, [r3, #0]
 800d3d8:	e116      	b.n	800d608 <UART_SetConfig+0x390>
 800d3da:	231b      	movs	r3, #27
 800d3dc:	2220      	movs	r2, #32
 800d3de:	189b      	adds	r3, r3, r2
 800d3e0:	19db      	adds	r3, r3, r7
 800d3e2:	2204      	movs	r2, #4
 800d3e4:	701a      	strb	r2, [r3, #0]
 800d3e6:	e10f      	b.n	800d608 <UART_SetConfig+0x390>
 800d3e8:	231b      	movs	r3, #27
 800d3ea:	2220      	movs	r2, #32
 800d3ec:	189b      	adds	r3, r3, r2
 800d3ee:	19db      	adds	r3, r3, r7
 800d3f0:	2208      	movs	r2, #8
 800d3f2:	701a      	strb	r2, [r3, #0]
 800d3f4:	e108      	b.n	800d608 <UART_SetConfig+0x390>
 800d3f6:	231b      	movs	r3, #27
 800d3f8:	2220      	movs	r2, #32
 800d3fa:	189b      	adds	r3, r3, r2
 800d3fc:	19db      	adds	r3, r3, r7
 800d3fe:	2210      	movs	r2, #16
 800d400:	701a      	strb	r2, [r3, #0]
 800d402:	e101      	b.n	800d608 <UART_SetConfig+0x390>
 800d404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a71      	ldr	r2, [pc, #452]	@ (800d5d0 <UART_SetConfig+0x358>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d131      	bne.n	800d472 <UART_SetConfig+0x1fa>
 800d40e:	4b6e      	ldr	r3, [pc, #440]	@ (800d5c8 <UART_SetConfig+0x350>)
 800d410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d412:	2230      	movs	r2, #48	@ 0x30
 800d414:	4013      	ands	r3, r2
 800d416:	2b30      	cmp	r3, #48	@ 0x30
 800d418:	d01d      	beq.n	800d456 <UART_SetConfig+0x1de>
 800d41a:	d823      	bhi.n	800d464 <UART_SetConfig+0x1ec>
 800d41c:	2b20      	cmp	r3, #32
 800d41e:	d00c      	beq.n	800d43a <UART_SetConfig+0x1c2>
 800d420:	d820      	bhi.n	800d464 <UART_SetConfig+0x1ec>
 800d422:	2b00      	cmp	r3, #0
 800d424:	d002      	beq.n	800d42c <UART_SetConfig+0x1b4>
 800d426:	2b10      	cmp	r3, #16
 800d428:	d00e      	beq.n	800d448 <UART_SetConfig+0x1d0>
 800d42a:	e01b      	b.n	800d464 <UART_SetConfig+0x1ec>
 800d42c:	231b      	movs	r3, #27
 800d42e:	2220      	movs	r2, #32
 800d430:	189b      	adds	r3, r3, r2
 800d432:	19db      	adds	r3, r3, r7
 800d434:	2200      	movs	r2, #0
 800d436:	701a      	strb	r2, [r3, #0]
 800d438:	e0e6      	b.n	800d608 <UART_SetConfig+0x390>
 800d43a:	231b      	movs	r3, #27
 800d43c:	2220      	movs	r2, #32
 800d43e:	189b      	adds	r3, r3, r2
 800d440:	19db      	adds	r3, r3, r7
 800d442:	2202      	movs	r2, #2
 800d444:	701a      	strb	r2, [r3, #0]
 800d446:	e0df      	b.n	800d608 <UART_SetConfig+0x390>
 800d448:	231b      	movs	r3, #27
 800d44a:	2220      	movs	r2, #32
 800d44c:	189b      	adds	r3, r3, r2
 800d44e:	19db      	adds	r3, r3, r7
 800d450:	2204      	movs	r2, #4
 800d452:	701a      	strb	r2, [r3, #0]
 800d454:	e0d8      	b.n	800d608 <UART_SetConfig+0x390>
 800d456:	231b      	movs	r3, #27
 800d458:	2220      	movs	r2, #32
 800d45a:	189b      	adds	r3, r3, r2
 800d45c:	19db      	adds	r3, r3, r7
 800d45e:	2208      	movs	r2, #8
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	e0d1      	b.n	800d608 <UART_SetConfig+0x390>
 800d464:	231b      	movs	r3, #27
 800d466:	2220      	movs	r2, #32
 800d468:	189b      	adds	r3, r3, r2
 800d46a:	19db      	adds	r3, r3, r7
 800d46c:	2210      	movs	r2, #16
 800d46e:	701a      	strb	r2, [r3, #0]
 800d470:	e0ca      	b.n	800d608 <UART_SetConfig+0x390>
 800d472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a57      	ldr	r2, [pc, #348]	@ (800d5d4 <UART_SetConfig+0x35c>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d106      	bne.n	800d48a <UART_SetConfig+0x212>
 800d47c:	231b      	movs	r3, #27
 800d47e:	2220      	movs	r2, #32
 800d480:	189b      	adds	r3, r3, r2
 800d482:	19db      	adds	r3, r3, r7
 800d484:	2200      	movs	r2, #0
 800d486:	701a      	strb	r2, [r3, #0]
 800d488:	e0be      	b.n	800d608 <UART_SetConfig+0x390>
 800d48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a52      	ldr	r2, [pc, #328]	@ (800d5d8 <UART_SetConfig+0x360>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d106      	bne.n	800d4a2 <UART_SetConfig+0x22a>
 800d494:	231b      	movs	r3, #27
 800d496:	2220      	movs	r2, #32
 800d498:	189b      	adds	r3, r3, r2
 800d49a:	19db      	adds	r3, r3, r7
 800d49c:	2200      	movs	r2, #0
 800d49e:	701a      	strb	r2, [r3, #0]
 800d4a0:	e0b2      	b.n	800d608 <UART_SetConfig+0x390>
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a4d      	ldr	r2, [pc, #308]	@ (800d5dc <UART_SetConfig+0x364>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d106      	bne.n	800d4ba <UART_SetConfig+0x242>
 800d4ac:	231b      	movs	r3, #27
 800d4ae:	2220      	movs	r2, #32
 800d4b0:	189b      	adds	r3, r3, r2
 800d4b2:	19db      	adds	r3, r3, r7
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	701a      	strb	r2, [r3, #0]
 800d4b8:	e0a6      	b.n	800d608 <UART_SetConfig+0x390>
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4a3e      	ldr	r2, [pc, #248]	@ (800d5b8 <UART_SetConfig+0x340>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d13e      	bne.n	800d542 <UART_SetConfig+0x2ca>
 800d4c4:	4b40      	ldr	r3, [pc, #256]	@ (800d5c8 <UART_SetConfig+0x350>)
 800d4c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4c8:	23c0      	movs	r3, #192	@ 0xc0
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	4013      	ands	r3, r2
 800d4ce:	22c0      	movs	r2, #192	@ 0xc0
 800d4d0:	0112      	lsls	r2, r2, #4
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d027      	beq.n	800d526 <UART_SetConfig+0x2ae>
 800d4d6:	22c0      	movs	r2, #192	@ 0xc0
 800d4d8:	0112      	lsls	r2, r2, #4
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d82a      	bhi.n	800d534 <UART_SetConfig+0x2bc>
 800d4de:	2280      	movs	r2, #128	@ 0x80
 800d4e0:	0112      	lsls	r2, r2, #4
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d011      	beq.n	800d50a <UART_SetConfig+0x292>
 800d4e6:	2280      	movs	r2, #128	@ 0x80
 800d4e8:	0112      	lsls	r2, r2, #4
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d822      	bhi.n	800d534 <UART_SetConfig+0x2bc>
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d004      	beq.n	800d4fc <UART_SetConfig+0x284>
 800d4f2:	2280      	movs	r2, #128	@ 0x80
 800d4f4:	00d2      	lsls	r2, r2, #3
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d00e      	beq.n	800d518 <UART_SetConfig+0x2a0>
 800d4fa:	e01b      	b.n	800d534 <UART_SetConfig+0x2bc>
 800d4fc:	231b      	movs	r3, #27
 800d4fe:	2220      	movs	r2, #32
 800d500:	189b      	adds	r3, r3, r2
 800d502:	19db      	adds	r3, r3, r7
 800d504:	2200      	movs	r2, #0
 800d506:	701a      	strb	r2, [r3, #0]
 800d508:	e07e      	b.n	800d608 <UART_SetConfig+0x390>
 800d50a:	231b      	movs	r3, #27
 800d50c:	2220      	movs	r2, #32
 800d50e:	189b      	adds	r3, r3, r2
 800d510:	19db      	adds	r3, r3, r7
 800d512:	2202      	movs	r2, #2
 800d514:	701a      	strb	r2, [r3, #0]
 800d516:	e077      	b.n	800d608 <UART_SetConfig+0x390>
 800d518:	231b      	movs	r3, #27
 800d51a:	2220      	movs	r2, #32
 800d51c:	189b      	adds	r3, r3, r2
 800d51e:	19db      	adds	r3, r3, r7
 800d520:	2204      	movs	r2, #4
 800d522:	701a      	strb	r2, [r3, #0]
 800d524:	e070      	b.n	800d608 <UART_SetConfig+0x390>
 800d526:	231b      	movs	r3, #27
 800d528:	2220      	movs	r2, #32
 800d52a:	189b      	adds	r3, r3, r2
 800d52c:	19db      	adds	r3, r3, r7
 800d52e:	2208      	movs	r2, #8
 800d530:	701a      	strb	r2, [r3, #0]
 800d532:	e069      	b.n	800d608 <UART_SetConfig+0x390>
 800d534:	231b      	movs	r3, #27
 800d536:	2220      	movs	r2, #32
 800d538:	189b      	adds	r3, r3, r2
 800d53a:	19db      	adds	r3, r3, r7
 800d53c:	2210      	movs	r2, #16
 800d53e:	701a      	strb	r2, [r3, #0]
 800d540:	e062      	b.n	800d608 <UART_SetConfig+0x390>
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a1d      	ldr	r2, [pc, #116]	@ (800d5bc <UART_SetConfig+0x344>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d157      	bne.n	800d5fc <UART_SetConfig+0x384>
 800d54c:	4b1e      	ldr	r3, [pc, #120]	@ (800d5c8 <UART_SetConfig+0x350>)
 800d54e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d550:	23c0      	movs	r3, #192	@ 0xc0
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4013      	ands	r3, r2
 800d556:	22c0      	movs	r2, #192	@ 0xc0
 800d558:	0092      	lsls	r2, r2, #2
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d040      	beq.n	800d5e0 <UART_SetConfig+0x368>
 800d55e:	22c0      	movs	r2, #192	@ 0xc0
 800d560:	0092      	lsls	r2, r2, #2
 800d562:	4293      	cmp	r3, r2
 800d564:	d843      	bhi.n	800d5ee <UART_SetConfig+0x376>
 800d566:	2280      	movs	r2, #128	@ 0x80
 800d568:	0092      	lsls	r2, r2, #2
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d011      	beq.n	800d592 <UART_SetConfig+0x31a>
 800d56e:	2280      	movs	r2, #128	@ 0x80
 800d570:	0092      	lsls	r2, r2, #2
 800d572:	4293      	cmp	r3, r2
 800d574:	d83b      	bhi.n	800d5ee <UART_SetConfig+0x376>
 800d576:	2b00      	cmp	r3, #0
 800d578:	d004      	beq.n	800d584 <UART_SetConfig+0x30c>
 800d57a:	2280      	movs	r2, #128	@ 0x80
 800d57c:	0052      	lsls	r2, r2, #1
 800d57e:	4293      	cmp	r3, r2
 800d580:	d00e      	beq.n	800d5a0 <UART_SetConfig+0x328>
 800d582:	e034      	b.n	800d5ee <UART_SetConfig+0x376>
 800d584:	231b      	movs	r3, #27
 800d586:	2220      	movs	r2, #32
 800d588:	189b      	adds	r3, r3, r2
 800d58a:	19db      	adds	r3, r3, r7
 800d58c:	2200      	movs	r2, #0
 800d58e:	701a      	strb	r2, [r3, #0]
 800d590:	e03a      	b.n	800d608 <UART_SetConfig+0x390>
 800d592:	231b      	movs	r3, #27
 800d594:	2220      	movs	r2, #32
 800d596:	189b      	adds	r3, r3, r2
 800d598:	19db      	adds	r3, r3, r7
 800d59a:	2202      	movs	r2, #2
 800d59c:	701a      	strb	r2, [r3, #0]
 800d59e:	e033      	b.n	800d608 <UART_SetConfig+0x390>
 800d5a0:	231b      	movs	r3, #27
 800d5a2:	2220      	movs	r2, #32
 800d5a4:	189b      	adds	r3, r3, r2
 800d5a6:	19db      	adds	r3, r3, r7
 800d5a8:	2204      	movs	r2, #4
 800d5aa:	701a      	strb	r2, [r3, #0]
 800d5ac:	e02c      	b.n	800d608 <UART_SetConfig+0x390>
 800d5ae:	46c0      	nop			@ (mov r8, r8)
 800d5b0:	cfff69f3 	.word	0xcfff69f3
 800d5b4:	ffffcfff 	.word	0xffffcfff
 800d5b8:	40008000 	.word	0x40008000
 800d5bc:	40008400 	.word	0x40008400
 800d5c0:	11fff4ff 	.word	0x11fff4ff
 800d5c4:	40013800 	.word	0x40013800
 800d5c8:	40021000 	.word	0x40021000
 800d5cc:	40004400 	.word	0x40004400
 800d5d0:	40004800 	.word	0x40004800
 800d5d4:	40004c00 	.word	0x40004c00
 800d5d8:	40005000 	.word	0x40005000
 800d5dc:	40013c00 	.word	0x40013c00
 800d5e0:	231b      	movs	r3, #27
 800d5e2:	2220      	movs	r2, #32
 800d5e4:	189b      	adds	r3, r3, r2
 800d5e6:	19db      	adds	r3, r3, r7
 800d5e8:	2208      	movs	r2, #8
 800d5ea:	701a      	strb	r2, [r3, #0]
 800d5ec:	e00c      	b.n	800d608 <UART_SetConfig+0x390>
 800d5ee:	231b      	movs	r3, #27
 800d5f0:	2220      	movs	r2, #32
 800d5f2:	189b      	adds	r3, r3, r2
 800d5f4:	19db      	adds	r3, r3, r7
 800d5f6:	2210      	movs	r2, #16
 800d5f8:	701a      	strb	r2, [r3, #0]
 800d5fa:	e005      	b.n	800d608 <UART_SetConfig+0x390>
 800d5fc:	231b      	movs	r3, #27
 800d5fe:	2220      	movs	r2, #32
 800d600:	189b      	adds	r3, r3, r2
 800d602:	19db      	adds	r3, r3, r7
 800d604:	2210      	movs	r2, #16
 800d606:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4ac1      	ldr	r2, [pc, #772]	@ (800d914 <UART_SetConfig+0x69c>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d005      	beq.n	800d61e <UART_SetConfig+0x3a6>
 800d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4ac0      	ldr	r2, [pc, #768]	@ (800d918 <UART_SetConfig+0x6a0>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d000      	beq.n	800d61e <UART_SetConfig+0x3a6>
 800d61c:	e093      	b.n	800d746 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d61e:	231b      	movs	r3, #27
 800d620:	2220      	movs	r2, #32
 800d622:	189b      	adds	r3, r3, r2
 800d624:	19db      	adds	r3, r3, r7
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2b08      	cmp	r3, #8
 800d62a:	d015      	beq.n	800d658 <UART_SetConfig+0x3e0>
 800d62c:	dc18      	bgt.n	800d660 <UART_SetConfig+0x3e8>
 800d62e:	2b04      	cmp	r3, #4
 800d630:	d00d      	beq.n	800d64e <UART_SetConfig+0x3d6>
 800d632:	dc15      	bgt.n	800d660 <UART_SetConfig+0x3e8>
 800d634:	2b00      	cmp	r3, #0
 800d636:	d002      	beq.n	800d63e <UART_SetConfig+0x3c6>
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d005      	beq.n	800d648 <UART_SetConfig+0x3d0>
 800d63c:	e010      	b.n	800d660 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d63e:	f7fe fb43 	bl	800bcc8 <HAL_RCC_GetPCLK1Freq>
 800d642:	0003      	movs	r3, r0
 800d644:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d646:	e014      	b.n	800d672 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d648:	4bb4      	ldr	r3, [pc, #720]	@ (800d91c <UART_SetConfig+0x6a4>)
 800d64a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d64c:	e011      	b.n	800d672 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d64e:	f7fe faaf 	bl	800bbb0 <HAL_RCC_GetSysClockFreq>
 800d652:	0003      	movs	r3, r0
 800d654:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d656:	e00c      	b.n	800d672 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d658:	2380      	movs	r3, #128	@ 0x80
 800d65a:	021b      	lsls	r3, r3, #8
 800d65c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d65e:	e008      	b.n	800d672 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800d660:	2300      	movs	r3, #0
 800d662:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d664:	231a      	movs	r3, #26
 800d666:	2220      	movs	r2, #32
 800d668:	189b      	adds	r3, r3, r2
 800d66a:	19db      	adds	r3, r3, r7
 800d66c:	2201      	movs	r2, #1
 800d66e:	701a      	strb	r2, [r3, #0]
        break;
 800d670:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d674:	2b00      	cmp	r3, #0
 800d676:	d100      	bne.n	800d67a <UART_SetConfig+0x402>
 800d678:	e135      	b.n	800d8e6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d67e:	4ba8      	ldr	r3, [pc, #672]	@ (800d920 <UART_SetConfig+0x6a8>)
 800d680:	0052      	lsls	r2, r2, #1
 800d682:	5ad3      	ldrh	r3, [r2, r3]
 800d684:	0019      	movs	r1, r3
 800d686:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d688:	f7f8 fdb2 	bl	80061f0 <__udivsi3>
 800d68c:	0003      	movs	r3, r0
 800d68e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	0013      	movs	r3, r2
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	189b      	adds	r3, r3, r2
 800d69a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d305      	bcc.n	800d6ac <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d906      	bls.n	800d6ba <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800d6ac:	231a      	movs	r3, #26
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	189b      	adds	r3, r3, r2
 800d6b2:	19db      	adds	r3, r3, r7
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	701a      	strb	r2, [r3, #0]
 800d6b8:	e044      	b.n	800d744 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6bc:	61bb      	str	r3, [r7, #24]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	61fb      	str	r3, [r7, #28]
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6c6:	4b96      	ldr	r3, [pc, #600]	@ (800d920 <UART_SetConfig+0x6a8>)
 800d6c8:	0052      	lsls	r2, r2, #1
 800d6ca:	5ad3      	ldrh	r3, [r2, r3]
 800d6cc:	613b      	str	r3, [r7, #16]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
 800d6d2:	693a      	ldr	r2, [r7, #16]
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	69b8      	ldr	r0, [r7, #24]
 800d6d8:	69f9      	ldr	r1, [r7, #28]
 800d6da:	f7f8 feff 	bl	80064dc <__aeabi_uldivmod>
 800d6de:	0002      	movs	r2, r0
 800d6e0:	000b      	movs	r3, r1
 800d6e2:	0e11      	lsrs	r1, r2, #24
 800d6e4:	021d      	lsls	r5, r3, #8
 800d6e6:	430d      	orrs	r5, r1
 800d6e8:	0214      	lsls	r4, r2, #8
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	085b      	lsrs	r3, r3, #1
 800d6f0:	60bb      	str	r3, [r7, #8]
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	60fb      	str	r3, [r7, #12]
 800d6f6:	68b8      	ldr	r0, [r7, #8]
 800d6f8:	68f9      	ldr	r1, [r7, #12]
 800d6fa:	1900      	adds	r0, r0, r4
 800d6fc:	4169      	adcs	r1, r5
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	603b      	str	r3, [r7, #0]
 800d704:	2300      	movs	r3, #0
 800d706:	607b      	str	r3, [r7, #4]
 800d708:	683a      	ldr	r2, [r7, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f7f8 fee6 	bl	80064dc <__aeabi_uldivmod>
 800d710:	0002      	movs	r2, r0
 800d712:	000b      	movs	r3, r1
 800d714:	0013      	movs	r3, r2
 800d716:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d71a:	23c0      	movs	r3, #192	@ 0xc0
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	429a      	cmp	r2, r3
 800d720:	d309      	bcc.n	800d736 <UART_SetConfig+0x4be>
 800d722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d724:	2380      	movs	r3, #128	@ 0x80
 800d726:	035b      	lsls	r3, r3, #13
 800d728:	429a      	cmp	r2, r3
 800d72a:	d204      	bcs.n	800d736 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800d72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d732:	60da      	str	r2, [r3, #12]
 800d734:	e006      	b.n	800d744 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800d736:	231a      	movs	r3, #26
 800d738:	2220      	movs	r2, #32
 800d73a:	189b      	adds	r3, r3, r2
 800d73c:	19db      	adds	r3, r3, r7
 800d73e:	2201      	movs	r2, #1
 800d740:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800d742:	e0d0      	b.n	800d8e6 <UART_SetConfig+0x66e>
 800d744:	e0cf      	b.n	800d8e6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d748:	69da      	ldr	r2, [r3, #28]
 800d74a:	2380      	movs	r3, #128	@ 0x80
 800d74c:	021b      	lsls	r3, r3, #8
 800d74e:	429a      	cmp	r2, r3
 800d750:	d000      	beq.n	800d754 <UART_SetConfig+0x4dc>
 800d752:	e070      	b.n	800d836 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800d754:	231b      	movs	r3, #27
 800d756:	2220      	movs	r2, #32
 800d758:	189b      	adds	r3, r3, r2
 800d75a:	19db      	adds	r3, r3, r7
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	2b08      	cmp	r3, #8
 800d760:	d015      	beq.n	800d78e <UART_SetConfig+0x516>
 800d762:	dc18      	bgt.n	800d796 <UART_SetConfig+0x51e>
 800d764:	2b04      	cmp	r3, #4
 800d766:	d00d      	beq.n	800d784 <UART_SetConfig+0x50c>
 800d768:	dc15      	bgt.n	800d796 <UART_SetConfig+0x51e>
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <UART_SetConfig+0x4fc>
 800d76e:	2b02      	cmp	r3, #2
 800d770:	d005      	beq.n	800d77e <UART_SetConfig+0x506>
 800d772:	e010      	b.n	800d796 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d774:	f7fe faa8 	bl	800bcc8 <HAL_RCC_GetPCLK1Freq>
 800d778:	0003      	movs	r3, r0
 800d77a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d77c:	e014      	b.n	800d7a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d77e:	4b67      	ldr	r3, [pc, #412]	@ (800d91c <UART_SetConfig+0x6a4>)
 800d780:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d782:	e011      	b.n	800d7a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d784:	f7fe fa14 	bl	800bbb0 <HAL_RCC_GetSysClockFreq>
 800d788:	0003      	movs	r3, r0
 800d78a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d78c:	e00c      	b.n	800d7a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d78e:	2380      	movs	r3, #128	@ 0x80
 800d790:	021b      	lsls	r3, r3, #8
 800d792:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d794:	e008      	b.n	800d7a8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800d796:	2300      	movs	r3, #0
 800d798:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d79a:	231a      	movs	r3, #26
 800d79c:	2220      	movs	r2, #32
 800d79e:	189b      	adds	r3, r3, r2
 800d7a0:	19db      	adds	r3, r3, r7
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	701a      	strb	r2, [r3, #0]
        break;
 800d7a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d100      	bne.n	800d7b0 <UART_SetConfig+0x538>
 800d7ae:	e09a      	b.n	800d8e6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7b4:	4b5a      	ldr	r3, [pc, #360]	@ (800d920 <UART_SetConfig+0x6a8>)
 800d7b6:	0052      	lsls	r2, r2, #1
 800d7b8:	5ad3      	ldrh	r3, [r2, r3]
 800d7ba:	0019      	movs	r1, r3
 800d7bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d7be:	f7f8 fd17 	bl	80061f0 <__udivsi3>
 800d7c2:	0003      	movs	r3, r0
 800d7c4:	005a      	lsls	r2, r3, #1
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	085b      	lsrs	r3, r3, #1
 800d7cc:	18d2      	adds	r2, r2, r3
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	0019      	movs	r1, r3
 800d7d4:	0010      	movs	r0, r2
 800d7d6:	f7f8 fd0b 	bl	80061f0 <__udivsi3>
 800d7da:	0003      	movs	r3, r0
 800d7dc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e0:	2b0f      	cmp	r3, #15
 800d7e2:	d921      	bls.n	800d828 <UART_SetConfig+0x5b0>
 800d7e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7e6:	2380      	movs	r3, #128	@ 0x80
 800d7e8:	025b      	lsls	r3, r3, #9
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d21c      	bcs.n	800d828 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	200e      	movs	r0, #14
 800d7f4:	2420      	movs	r4, #32
 800d7f6:	1903      	adds	r3, r0, r4
 800d7f8:	19db      	adds	r3, r3, r7
 800d7fa:	210f      	movs	r1, #15
 800d7fc:	438a      	bics	r2, r1
 800d7fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d802:	085b      	lsrs	r3, r3, #1
 800d804:	b29b      	uxth	r3, r3
 800d806:	2207      	movs	r2, #7
 800d808:	4013      	ands	r3, r2
 800d80a:	b299      	uxth	r1, r3
 800d80c:	1903      	adds	r3, r0, r4
 800d80e:	19db      	adds	r3, r3, r7
 800d810:	1902      	adds	r2, r0, r4
 800d812:	19d2      	adds	r2, r2, r7
 800d814:	8812      	ldrh	r2, [r2, #0]
 800d816:	430a      	orrs	r2, r1
 800d818:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	1902      	adds	r2, r0, r4
 800d820:	19d2      	adds	r2, r2, r7
 800d822:	8812      	ldrh	r2, [r2, #0]
 800d824:	60da      	str	r2, [r3, #12]
 800d826:	e05e      	b.n	800d8e6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d828:	231a      	movs	r3, #26
 800d82a:	2220      	movs	r2, #32
 800d82c:	189b      	adds	r3, r3, r2
 800d82e:	19db      	adds	r3, r3, r7
 800d830:	2201      	movs	r2, #1
 800d832:	701a      	strb	r2, [r3, #0]
 800d834:	e057      	b.n	800d8e6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d836:	231b      	movs	r3, #27
 800d838:	2220      	movs	r2, #32
 800d83a:	189b      	adds	r3, r3, r2
 800d83c:	19db      	adds	r3, r3, r7
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	2b08      	cmp	r3, #8
 800d842:	d015      	beq.n	800d870 <UART_SetConfig+0x5f8>
 800d844:	dc18      	bgt.n	800d878 <UART_SetConfig+0x600>
 800d846:	2b04      	cmp	r3, #4
 800d848:	d00d      	beq.n	800d866 <UART_SetConfig+0x5ee>
 800d84a:	dc15      	bgt.n	800d878 <UART_SetConfig+0x600>
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <UART_SetConfig+0x5de>
 800d850:	2b02      	cmp	r3, #2
 800d852:	d005      	beq.n	800d860 <UART_SetConfig+0x5e8>
 800d854:	e010      	b.n	800d878 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d856:	f7fe fa37 	bl	800bcc8 <HAL_RCC_GetPCLK1Freq>
 800d85a:	0003      	movs	r3, r0
 800d85c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d85e:	e014      	b.n	800d88a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d860:	4b2e      	ldr	r3, [pc, #184]	@ (800d91c <UART_SetConfig+0x6a4>)
 800d862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d864:	e011      	b.n	800d88a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d866:	f7fe f9a3 	bl	800bbb0 <HAL_RCC_GetSysClockFreq>
 800d86a:	0003      	movs	r3, r0
 800d86c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d86e:	e00c      	b.n	800d88a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d870:	2380      	movs	r3, #128	@ 0x80
 800d872:	021b      	lsls	r3, r3, #8
 800d874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d876:	e008      	b.n	800d88a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800d878:	2300      	movs	r3, #0
 800d87a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d87c:	231a      	movs	r3, #26
 800d87e:	2220      	movs	r2, #32
 800d880:	189b      	adds	r3, r3, r2
 800d882:	19db      	adds	r3, r3, r7
 800d884:	2201      	movs	r2, #1
 800d886:	701a      	strb	r2, [r3, #0]
        break;
 800d888:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d02a      	beq.n	800d8e6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d892:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d894:	4b22      	ldr	r3, [pc, #136]	@ (800d920 <UART_SetConfig+0x6a8>)
 800d896:	0052      	lsls	r2, r2, #1
 800d898:	5ad3      	ldrh	r3, [r2, r3]
 800d89a:	0019      	movs	r1, r3
 800d89c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d89e:	f7f8 fca7 	bl	80061f0 <__udivsi3>
 800d8a2:	0003      	movs	r3, r0
 800d8a4:	001a      	movs	r2, r3
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	085b      	lsrs	r3, r3, #1
 800d8ac:	18d2      	adds	r2, r2, r3
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	0019      	movs	r1, r3
 800d8b4:	0010      	movs	r0, r2
 800d8b6:	f7f8 fc9b 	bl	80061f0 <__udivsi3>
 800d8ba:	0003      	movs	r3, r0
 800d8bc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c0:	2b0f      	cmp	r3, #15
 800d8c2:	d90a      	bls.n	800d8da <UART_SetConfig+0x662>
 800d8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8c6:	2380      	movs	r3, #128	@ 0x80
 800d8c8:	025b      	lsls	r3, r3, #9
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d205      	bcs.n	800d8da <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60da      	str	r2, [r3, #12]
 800d8d8:	e005      	b.n	800d8e6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d8da:	231a      	movs	r3, #26
 800d8dc:	2220      	movs	r2, #32
 800d8de:	189b      	adds	r3, r3, r2
 800d8e0:	19db      	adds	r3, r3, r7
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e8:	226a      	movs	r2, #106	@ 0x6a
 800d8ea:	2101      	movs	r1, #1
 800d8ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f0:	2268      	movs	r2, #104	@ 0x68
 800d8f2:	2101      	movs	r1, #1
 800d8f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fe:	2200      	movs	r2, #0
 800d900:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d902:	231a      	movs	r3, #26
 800d904:	2220      	movs	r2, #32
 800d906:	189b      	adds	r3, r3, r2
 800d908:	19db      	adds	r3, r3, r7
 800d90a:	781b      	ldrb	r3, [r3, #0]
}
 800d90c:	0018      	movs	r0, r3
 800d90e:	46bd      	mov	sp, r7
 800d910:	b010      	add	sp, #64	@ 0x40
 800d912:	bdb0      	pop	{r4, r5, r7, pc}
 800d914:	40008000 	.word	0x40008000
 800d918:	40008400 	.word	0x40008400
 800d91c:	00f42400 	.word	0x00f42400
 800d920:	080173b0 	.word	0x080173b0

0800d924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d930:	2208      	movs	r2, #8
 800d932:	4013      	ands	r3, r2
 800d934:	d00b      	beq.n	800d94e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	4a4a      	ldr	r2, [pc, #296]	@ (800da68 <UART_AdvFeatureConfig+0x144>)
 800d93e:	4013      	ands	r3, r2
 800d940:	0019      	movs	r1, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	430a      	orrs	r2, r1
 800d94c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d952:	2201      	movs	r2, #1
 800d954:	4013      	ands	r3, r2
 800d956:	d00b      	beq.n	800d970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	4a43      	ldr	r2, [pc, #268]	@ (800da6c <UART_AdvFeatureConfig+0x148>)
 800d960:	4013      	ands	r3, r2
 800d962:	0019      	movs	r1, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	430a      	orrs	r2, r1
 800d96e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d974:	2202      	movs	r2, #2
 800d976:	4013      	ands	r3, r2
 800d978:	d00b      	beq.n	800d992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	4a3b      	ldr	r2, [pc, #236]	@ (800da70 <UART_AdvFeatureConfig+0x14c>)
 800d982:	4013      	ands	r3, r2
 800d984:	0019      	movs	r1, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	430a      	orrs	r2, r1
 800d990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d996:	2204      	movs	r2, #4
 800d998:	4013      	ands	r3, r2
 800d99a:	d00b      	beq.n	800d9b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	4a34      	ldr	r2, [pc, #208]	@ (800da74 <UART_AdvFeatureConfig+0x150>)
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	0019      	movs	r1, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	430a      	orrs	r2, r1
 800d9b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9b8:	2210      	movs	r2, #16
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	d00b      	beq.n	800d9d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	4a2c      	ldr	r2, [pc, #176]	@ (800da78 <UART_AdvFeatureConfig+0x154>)
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	0019      	movs	r1, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	430a      	orrs	r2, r1
 800d9d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9da:	2220      	movs	r2, #32
 800d9dc:	4013      	ands	r3, r2
 800d9de:	d00b      	beq.n	800d9f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	4a25      	ldr	r2, [pc, #148]	@ (800da7c <UART_AdvFeatureConfig+0x158>)
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	0019      	movs	r1, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	430a      	orrs	r2, r1
 800d9f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9fc:	2240      	movs	r2, #64	@ 0x40
 800d9fe:	4013      	ands	r3, r2
 800da00:	d01d      	beq.n	800da3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	4a1d      	ldr	r2, [pc, #116]	@ (800da80 <UART_AdvFeatureConfig+0x15c>)
 800da0a:	4013      	ands	r3, r2
 800da0c:	0019      	movs	r1, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	430a      	orrs	r2, r1
 800da18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da1e:	2380      	movs	r3, #128	@ 0x80
 800da20:	035b      	lsls	r3, r3, #13
 800da22:	429a      	cmp	r2, r3
 800da24:	d10b      	bne.n	800da3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	4a15      	ldr	r2, [pc, #84]	@ (800da84 <UART_AdvFeatureConfig+0x160>)
 800da2e:	4013      	ands	r3, r2
 800da30:	0019      	movs	r1, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	430a      	orrs	r2, r1
 800da3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da42:	2280      	movs	r2, #128	@ 0x80
 800da44:	4013      	ands	r3, r2
 800da46:	d00b      	beq.n	800da60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	4a0e      	ldr	r2, [pc, #56]	@ (800da88 <UART_AdvFeatureConfig+0x164>)
 800da50:	4013      	ands	r3, r2
 800da52:	0019      	movs	r1, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	430a      	orrs	r2, r1
 800da5e:	605a      	str	r2, [r3, #4]
  }
}
 800da60:	46c0      	nop			@ (mov r8, r8)
 800da62:	46bd      	mov	sp, r7
 800da64:	b002      	add	sp, #8
 800da66:	bd80      	pop	{r7, pc}
 800da68:	ffff7fff 	.word	0xffff7fff
 800da6c:	fffdffff 	.word	0xfffdffff
 800da70:	fffeffff 	.word	0xfffeffff
 800da74:	fffbffff 	.word	0xfffbffff
 800da78:	ffffefff 	.word	0xffffefff
 800da7c:	ffffdfff 	.word	0xffffdfff
 800da80:	ffefffff 	.word	0xffefffff
 800da84:	ff9fffff 	.word	0xff9fffff
 800da88:	fff7ffff 	.word	0xfff7ffff

0800da8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b092      	sub	sp, #72	@ 0x48
 800da90:	af02      	add	r7, sp, #8
 800da92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2290      	movs	r2, #144	@ 0x90
 800da98:	2100      	movs	r1, #0
 800da9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da9c:	f7fa fc36 	bl	800830c <HAL_GetTick>
 800daa0:	0003      	movs	r3, r0
 800daa2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2208      	movs	r2, #8
 800daac:	4013      	ands	r3, r2
 800daae:	2b08      	cmp	r3, #8
 800dab0:	d12d      	bne.n	800db0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dab4:	2280      	movs	r2, #128	@ 0x80
 800dab6:	0391      	lsls	r1, r2, #14
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	4a47      	ldr	r2, [pc, #284]	@ (800dbd8 <UART_CheckIdleState+0x14c>)
 800dabc:	9200      	str	r2, [sp, #0]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f000 f88e 	bl	800dbe0 <UART_WaitOnFlagUntilTimeout>
 800dac4:	1e03      	subs	r3, r0, #0
 800dac6:	d022      	beq.n	800db0e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dac8:	f3ef 8310 	mrs	r3, PRIMASK
 800dacc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800dace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dad0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dad2:	2301      	movs	r3, #1
 800dad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad8:	f383 8810 	msr	PRIMASK, r3
}
 800dadc:	46c0      	nop			@ (mov r8, r8)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2180      	movs	r1, #128	@ 0x80
 800daea:	438a      	bics	r2, r1
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf4:	f383 8810 	msr	PRIMASK, r3
}
 800daf8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2288      	movs	r2, #136	@ 0x88
 800dafe:	2120      	movs	r1, #32
 800db00:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2284      	movs	r2, #132	@ 0x84
 800db06:	2100      	movs	r1, #0
 800db08:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db0a:	2303      	movs	r3, #3
 800db0c:	e060      	b.n	800dbd0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2204      	movs	r2, #4
 800db16:	4013      	ands	r3, r2
 800db18:	2b04      	cmp	r3, #4
 800db1a:	d146      	bne.n	800dbaa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db1e:	2280      	movs	r2, #128	@ 0x80
 800db20:	03d1      	lsls	r1, r2, #15
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	4a2c      	ldr	r2, [pc, #176]	@ (800dbd8 <UART_CheckIdleState+0x14c>)
 800db26:	9200      	str	r2, [sp, #0]
 800db28:	2200      	movs	r2, #0
 800db2a:	f000 f859 	bl	800dbe0 <UART_WaitOnFlagUntilTimeout>
 800db2e:	1e03      	subs	r3, r0, #0
 800db30:	d03b      	beq.n	800dbaa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db32:	f3ef 8310 	mrs	r3, PRIMASK
 800db36:	60fb      	str	r3, [r7, #12]
  return(result);
 800db38:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db3c:	2301      	movs	r3, #1
 800db3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	f383 8810 	msr	PRIMASK, r3
}
 800db46:	46c0      	nop			@ (mov r8, r8)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4922      	ldr	r1, [pc, #136]	@ (800dbdc <UART_CheckIdleState+0x150>)
 800db54:	400a      	ands	r2, r1
 800db56:	601a      	str	r2, [r3, #0]
 800db58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f383 8810 	msr	PRIMASK, r3
}
 800db62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db64:	f3ef 8310 	mrs	r3, PRIMASK
 800db68:	61bb      	str	r3, [r7, #24]
  return(result);
 800db6a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800db6e:	2301      	movs	r3, #1
 800db70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	f383 8810 	msr	PRIMASK, r3
}
 800db78:	46c0      	nop			@ (mov r8, r8)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689a      	ldr	r2, [r3, #8]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2101      	movs	r1, #1
 800db86:	438a      	bics	r2, r1
 800db88:	609a      	str	r2, [r3, #8]
 800db8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	f383 8810 	msr	PRIMASK, r3
}
 800db94:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	228c      	movs	r2, #140	@ 0x8c
 800db9a:	2120      	movs	r1, #32
 800db9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2284      	movs	r2, #132	@ 0x84
 800dba2:	2100      	movs	r1, #0
 800dba4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dba6:	2303      	movs	r3, #3
 800dba8:	e012      	b.n	800dbd0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2288      	movs	r2, #136	@ 0x88
 800dbae:	2120      	movs	r1, #32
 800dbb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	228c      	movs	r2, #140	@ 0x8c
 800dbb6:	2120      	movs	r1, #32
 800dbb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2284      	movs	r2, #132	@ 0x84
 800dbca:	2100      	movs	r1, #0
 800dbcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dbce:	2300      	movs	r3, #0
}
 800dbd0:	0018      	movs	r0, r3
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	b010      	add	sp, #64	@ 0x40
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	01ffffff 	.word	0x01ffffff
 800dbdc:	fffffedf 	.word	0xfffffedf

0800dbe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	603b      	str	r3, [r7, #0]
 800dbec:	1dfb      	adds	r3, r7, #7
 800dbee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbf0:	e051      	b.n	800dc96 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	d04e      	beq.n	800dc96 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbf8:	f7fa fb88 	bl	800830c <HAL_GetTick>
 800dbfc:	0002      	movs	r2, r0
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	69ba      	ldr	r2, [r7, #24]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d302      	bcc.n	800dc0e <UART_WaitOnFlagUntilTimeout+0x2e>
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d101      	bne.n	800dc12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800dc0e:	2303      	movs	r3, #3
 800dc10:	e051      	b.n	800dcb6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2204      	movs	r2, #4
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	d03b      	beq.n	800dc96 <UART_WaitOnFlagUntilTimeout+0xb6>
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b80      	cmp	r3, #128	@ 0x80
 800dc22:	d038      	beq.n	800dc96 <UART_WaitOnFlagUntilTimeout+0xb6>
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	2b40      	cmp	r3, #64	@ 0x40
 800dc28:	d035      	beq.n	800dc96 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	69db      	ldr	r3, [r3, #28]
 800dc30:	2208      	movs	r2, #8
 800dc32:	4013      	ands	r3, r2
 800dc34:	2b08      	cmp	r3, #8
 800dc36:	d111      	bne.n	800dc5c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2208      	movs	r2, #8
 800dc3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	0018      	movs	r0, r3
 800dc44:	f000 f83c 	bl	800dcc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2290      	movs	r2, #144	@ 0x90
 800dc4c:	2108      	movs	r1, #8
 800dc4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2284      	movs	r2, #132	@ 0x84
 800dc54:	2100      	movs	r1, #0
 800dc56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e02c      	b.n	800dcb6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	69da      	ldr	r2, [r3, #28]
 800dc62:	2380      	movs	r3, #128	@ 0x80
 800dc64:	011b      	lsls	r3, r3, #4
 800dc66:	401a      	ands	r2, r3
 800dc68:	2380      	movs	r3, #128	@ 0x80
 800dc6a:	011b      	lsls	r3, r3, #4
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d112      	bne.n	800dc96 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2280      	movs	r2, #128	@ 0x80
 800dc76:	0112      	lsls	r2, r2, #4
 800dc78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	0018      	movs	r0, r3
 800dc7e:	f000 f81f 	bl	800dcc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2290      	movs	r2, #144	@ 0x90
 800dc86:	2120      	movs	r1, #32
 800dc88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2284      	movs	r2, #132	@ 0x84
 800dc8e:	2100      	movs	r1, #0
 800dc90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800dc92:	2303      	movs	r3, #3
 800dc94:	e00f      	b.n	800dcb6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	69db      	ldr	r3, [r3, #28]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	4013      	ands	r3, r2
 800dca0:	68ba      	ldr	r2, [r7, #8]
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	425a      	negs	r2, r3
 800dca6:	4153      	adcs	r3, r2
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	001a      	movs	r2, r3
 800dcac:	1dfb      	adds	r3, r7, #7
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d09e      	beq.n	800dbf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	0018      	movs	r0, r3
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	b004      	add	sp, #16
 800dcbc:	bd80      	pop	{r7, pc}
	...

0800dcc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b08e      	sub	sp, #56	@ 0x38
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcc8:	f3ef 8310 	mrs	r3, PRIMASK
 800dccc:	617b      	str	r3, [r7, #20]
  return(result);
 800dcce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	f383 8810 	msr	PRIMASK, r3
}
 800dcdc:	46c0      	nop			@ (mov r8, r8)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4926      	ldr	r1, [pc, #152]	@ (800dd84 <UART_EndRxTransfer+0xc4>)
 800dcea:	400a      	ands	r2, r1
 800dcec:	601a      	str	r2, [r3, #0]
 800dcee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	f383 8810 	msr	PRIMASK, r3
}
 800dcf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcfa:	f3ef 8310 	mrs	r3, PRIMASK
 800dcfe:	623b      	str	r3, [r7, #32]
  return(result);
 800dd00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd02:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd04:	2301      	movs	r3, #1
 800dd06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0a:	f383 8810 	msr	PRIMASK, r3
}
 800dd0e:	46c0      	nop			@ (mov r8, r8)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	689a      	ldr	r2, [r3, #8]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	491b      	ldr	r1, [pc, #108]	@ (800dd88 <UART_EndRxTransfer+0xc8>)
 800dd1c:	400a      	ands	r2, r1
 800dd1e:	609a      	str	r2, [r3, #8]
 800dd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd26:	f383 8810 	msr	PRIMASK, r3
}
 800dd2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d118      	bne.n	800dd66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd34:	f3ef 8310 	mrs	r3, PRIMASK
 800dd38:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd3e:	2301      	movs	r3, #1
 800dd40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f383 8810 	msr	PRIMASK, r3
}
 800dd48:	46c0      	nop			@ (mov r8, r8)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2110      	movs	r1, #16
 800dd56:	438a      	bics	r2, r1
 800dd58:	601a      	str	r2, [r3, #0]
 800dd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	f383 8810 	msr	PRIMASK, r3
}
 800dd64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	228c      	movs	r2, #140	@ 0x8c
 800dd6a:	2120      	movs	r1, #32
 800dd6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dd7a:	46c0      	nop			@ (mov r8, r8)
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	b00e      	add	sp, #56	@ 0x38
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	46c0      	nop			@ (mov r8, r8)
 800dd84:	fffffedf 	.word	0xfffffedf
 800dd88:	effffffe 	.word	0xeffffffe

0800dd8c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
 800dd98:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d101      	bne.n	800dda4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	e05d      	b.n	800de60 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2288      	movs	r2, #136	@ 0x88
 800dda8:	589b      	ldr	r3, [r3, r2]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d107      	bne.n	800ddbe <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2284      	movs	r2, #132	@ 0x84
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	0018      	movs	r0, r3
 800ddba:	f7fa f943 	bl	8008044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2288      	movs	r2, #136	@ 0x88
 800ddc2:	2124      	movs	r1, #36	@ 0x24
 800ddc4:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2101      	movs	r1, #1
 800ddd2:	438a      	bics	r2, r1
 800ddd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	0018      	movs	r0, r3
 800dde2:	f7ff fd9f 	bl	800d924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	0018      	movs	r0, r3
 800ddea:	f7ff fa45 	bl	800d278 <UART_SetConfig>
 800ddee:	0003      	movs	r3, r0
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d101      	bne.n	800ddf8 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	e033      	b.n	800de60 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	689a      	ldr	r2, [r3, #8]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2180      	movs	r1, #128	@ 0x80
 800de04:	01c9      	lsls	r1, r1, #7
 800de06:	430a      	orrs	r2, r1
 800de08:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	4a15      	ldr	r2, [pc, #84]	@ (800de68 <HAL_RS485Ex_Init+0xdc>)
 800de12:	4013      	ands	r3, r2
 800de14:	0019      	movs	r1, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	430a      	orrs	r2, r1
 800de1e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	055b      	lsls	r3, r3, #21
 800de24:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	041b      	lsls	r3, r3, #16
 800de2a:	697a      	ldr	r2, [r7, #20]
 800de2c:	4313      	orrs	r3, r2
 800de2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a0d      	ldr	r2, [pc, #52]	@ (800de6c <HAL_RS485Ex_Init+0xe0>)
 800de38:	4013      	ands	r3, r2
 800de3a:	0019      	movs	r1, r3
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	697a      	ldr	r2, [r7, #20]
 800de42:	430a      	orrs	r2, r1
 800de44:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2101      	movs	r1, #1
 800de52:	430a      	orrs	r2, r1
 800de54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	0018      	movs	r0, r3
 800de5a:	f7ff fe17 	bl	800da8c <UART_CheckIdleState>
 800de5e:	0003      	movs	r3, r0
}
 800de60:	0018      	movs	r0, r3
 800de62:	46bd      	mov	sp, r7
 800de64:	b006      	add	sp, #24
 800de66:	bd80      	pop	{r7, pc}
 800de68:	ffff7fff 	.word	0xffff7fff
 800de6c:	fc00ffff 	.word	0xfc00ffff

0800de70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2284      	movs	r2, #132	@ 0x84
 800de7c:	5c9b      	ldrb	r3, [r3, r2]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d101      	bne.n	800de86 <HAL_UARTEx_DisableFifoMode+0x16>
 800de82:	2302      	movs	r3, #2
 800de84:	e027      	b.n	800ded6 <HAL_UARTEx_DisableFifoMode+0x66>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2284      	movs	r2, #132	@ 0x84
 800de8a:	2101      	movs	r1, #1
 800de8c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2288      	movs	r2, #136	@ 0x88
 800de92:	2124      	movs	r1, #36	@ 0x24
 800de94:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2101      	movs	r1, #1
 800deaa:	438a      	bics	r2, r1
 800deac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	4a0b      	ldr	r2, [pc, #44]	@ (800dee0 <HAL_UARTEx_DisableFifoMode+0x70>)
 800deb2:	4013      	ands	r3, r2
 800deb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2288      	movs	r2, #136	@ 0x88
 800dec8:	2120      	movs	r1, #32
 800deca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2284      	movs	r2, #132	@ 0x84
 800ded0:	2100      	movs	r1, #0
 800ded2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	0018      	movs	r0, r3
 800ded8:	46bd      	mov	sp, r7
 800deda:	b004      	add	sp, #16
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	46c0      	nop			@ (mov r8, r8)
 800dee0:	dfffffff 	.word	0xdfffffff

0800dee4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2284      	movs	r2, #132	@ 0x84
 800def2:	5c9b      	ldrb	r3, [r3, r2]
 800def4:	2b01      	cmp	r3, #1
 800def6:	d101      	bne.n	800defc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800def8:	2302      	movs	r3, #2
 800defa:	e02e      	b.n	800df5a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2284      	movs	r2, #132	@ 0x84
 800df00:	2101      	movs	r1, #1
 800df02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2288      	movs	r2, #136	@ 0x88
 800df08:	2124      	movs	r1, #36	@ 0x24
 800df0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2101      	movs	r1, #1
 800df20:	438a      	bics	r2, r1
 800df22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	08d9      	lsrs	r1, r3, #3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	683a      	ldr	r2, [r7, #0]
 800df34:	430a      	orrs	r2, r1
 800df36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	0018      	movs	r0, r3
 800df3c:	f000 f854 	bl	800dfe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2288      	movs	r2, #136	@ 0x88
 800df4c:	2120      	movs	r1, #32
 800df4e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2284      	movs	r2, #132	@ 0x84
 800df54:	2100      	movs	r1, #0
 800df56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	0018      	movs	r0, r3
 800df5c:	46bd      	mov	sp, r7
 800df5e:	b004      	add	sp, #16
 800df60:	bd80      	pop	{r7, pc}
	...

0800df64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2284      	movs	r2, #132	@ 0x84
 800df72:	5c9b      	ldrb	r3, [r3, r2]
 800df74:	2b01      	cmp	r3, #1
 800df76:	d101      	bne.n	800df7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800df78:	2302      	movs	r3, #2
 800df7a:	e02f      	b.n	800dfdc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2284      	movs	r2, #132	@ 0x84
 800df80:	2101      	movs	r1, #1
 800df82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2288      	movs	r2, #136	@ 0x88
 800df88:	2124      	movs	r1, #36	@ 0x24
 800df8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2101      	movs	r1, #1
 800dfa0:	438a      	bics	r2, r1
 800dfa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	4a0e      	ldr	r2, [pc, #56]	@ (800dfe4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800dfac:	4013      	ands	r3, r2
 800dfae:	0019      	movs	r1, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	430a      	orrs	r2, r1
 800dfb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	0018      	movs	r0, r3
 800dfbe:	f000 f813 	bl	800dfe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	68fa      	ldr	r2, [r7, #12]
 800dfc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2288      	movs	r2, #136	@ 0x88
 800dfce:	2120      	movs	r1, #32
 800dfd0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2284      	movs	r2, #132	@ 0x84
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	0018      	movs	r0, r3
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	b004      	add	sp, #16
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	f1ffffff 	.word	0xf1ffffff

0800dfe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d108      	bne.n	800e00a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	226a      	movs	r2, #106	@ 0x6a
 800dffc:	2101      	movs	r1, #1
 800dffe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2268      	movs	r2, #104	@ 0x68
 800e004:	2101      	movs	r1, #1
 800e006:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e008:	e043      	b.n	800e092 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e00a:	260f      	movs	r6, #15
 800e00c:	19bb      	adds	r3, r7, r6
 800e00e:	2208      	movs	r2, #8
 800e010:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e012:	200e      	movs	r0, #14
 800e014:	183b      	adds	r3, r7, r0
 800e016:	2208      	movs	r2, #8
 800e018:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	0e5b      	lsrs	r3, r3, #25
 800e022:	b2da      	uxtb	r2, r3
 800e024:	240d      	movs	r4, #13
 800e026:	193b      	adds	r3, r7, r4
 800e028:	2107      	movs	r1, #7
 800e02a:	400a      	ands	r2, r1
 800e02c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	0f5b      	lsrs	r3, r3, #29
 800e036:	b2da      	uxtb	r2, r3
 800e038:	250c      	movs	r5, #12
 800e03a:	197b      	adds	r3, r7, r5
 800e03c:	2107      	movs	r1, #7
 800e03e:	400a      	ands	r2, r1
 800e040:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e042:	183b      	adds	r3, r7, r0
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	197a      	adds	r2, r7, r5
 800e048:	7812      	ldrb	r2, [r2, #0]
 800e04a:	4914      	ldr	r1, [pc, #80]	@ (800e09c <UARTEx_SetNbDataToProcess+0xb4>)
 800e04c:	5c8a      	ldrb	r2, [r1, r2]
 800e04e:	435a      	muls	r2, r3
 800e050:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800e052:	197b      	adds	r3, r7, r5
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	4a12      	ldr	r2, [pc, #72]	@ (800e0a0 <UARTEx_SetNbDataToProcess+0xb8>)
 800e058:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e05a:	0019      	movs	r1, r3
 800e05c:	f7f8 f952 	bl	8006304 <__divsi3>
 800e060:	0003      	movs	r3, r0
 800e062:	b299      	uxth	r1, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	226a      	movs	r2, #106	@ 0x6a
 800e068:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e06a:	19bb      	adds	r3, r7, r6
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	193a      	adds	r2, r7, r4
 800e070:	7812      	ldrb	r2, [r2, #0]
 800e072:	490a      	ldr	r1, [pc, #40]	@ (800e09c <UARTEx_SetNbDataToProcess+0xb4>)
 800e074:	5c8a      	ldrb	r2, [r1, r2]
 800e076:	435a      	muls	r2, r3
 800e078:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800e07a:	193b      	adds	r3, r7, r4
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	4a08      	ldr	r2, [pc, #32]	@ (800e0a0 <UARTEx_SetNbDataToProcess+0xb8>)
 800e080:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e082:	0019      	movs	r1, r3
 800e084:	f7f8 f93e 	bl	8006304 <__divsi3>
 800e088:	0003      	movs	r3, r0
 800e08a:	b299      	uxth	r1, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2268      	movs	r2, #104	@ 0x68
 800e090:	5299      	strh	r1, [r3, r2]
}
 800e092:	46c0      	nop			@ (mov r8, r8)
 800e094:	46bd      	mov	sp, r7
 800e096:	b005      	add	sp, #20
 800e098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e09a:	46c0      	nop			@ (mov r8, r8)
 800e09c:	080173c8 	.word	0x080173c8
 800e0a0:	080173d0 	.word	0x080173d0

0800e0a4 <LL_DMA_ConfigTransfer>:
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b086      	sub	sp, #24
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800e0b4:	4a0c      	ldr	r2, [pc, #48]	@ (800e0e8 <LL_DMA_ConfigTransfer+0x44>)
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	18d3      	adds	r3, r2, r3
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	001a      	movs	r2, r3
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	18d3      	adds	r3, r2, r3
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a09      	ldr	r2, [pc, #36]	@ (800e0ec <LL_DMA_ConfigTransfer+0x48>)
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	0019      	movs	r1, r3
 800e0ca:	4a07      	ldr	r2, [pc, #28]	@ (800e0e8 <LL_DMA_ConfigTransfer+0x44>)
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	18d3      	adds	r3, r2, r3
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	001a      	movs	r2, r3
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	18d3      	adds	r3, r2, r3
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	430a      	orrs	r2, r1
 800e0dc:	601a      	str	r2, [r3, #0]
}
 800e0de:	46c0      	nop			@ (mov r8, r8)
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	b006      	add	sp, #24
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	46c0      	nop			@ (mov r8, r8)
 800e0e8:	080173d8 	.word	0x080173d8
 800e0ec:	ffff800f 	.word	0xffff800f

0800e0f0 <LL_DMA_SetDataLength>:
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800e100:	4a0b      	ldr	r2, [pc, #44]	@ (800e130 <LL_DMA_SetDataLength+0x40>)
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	18d3      	adds	r3, r2, r3
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	001a      	movs	r2, r3
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	18d3      	adds	r3, r2, r3
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	0c1b      	lsrs	r3, r3, #16
 800e112:	0419      	lsls	r1, r3, #16
 800e114:	4a06      	ldr	r2, [pc, #24]	@ (800e130 <LL_DMA_SetDataLength+0x40>)
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	18d3      	adds	r3, r2, r3
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	001a      	movs	r2, r3
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	18d3      	adds	r3, r2, r3
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	430a      	orrs	r2, r1
 800e126:	605a      	str	r2, [r3, #4]
}
 800e128:	46c0      	nop			@ (mov r8, r8)
 800e12a:	46bd      	mov	sp, r7
 800e12c:	b006      	add	sp, #24
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	080173d8 	.word	0x080173d8

0800e134 <LL_DMA_SetMemoryAddress>:
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800e144:	4a06      	ldr	r2, [pc, #24]	@ (800e160 <LL_DMA_SetMemoryAddress+0x2c>)
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	18d3      	adds	r3, r2, r3
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	001a      	movs	r2, r3
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	18d3      	adds	r3, r2, r3
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	60da      	str	r2, [r3, #12]
}
 800e156:	46c0      	nop			@ (mov r8, r8)
 800e158:	46bd      	mov	sp, r7
 800e15a:	b006      	add	sp, #24
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	46c0      	nop			@ (mov r8, r8)
 800e160:	080173d8 	.word	0x080173d8

0800e164 <LL_DMA_SetPeriphAddress>:
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800e174:	4a06      	ldr	r2, [pc, #24]	@ (800e190 <LL_DMA_SetPeriphAddress+0x2c>)
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	18d3      	adds	r3, r2, r3
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	001a      	movs	r2, r3
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	18d3      	adds	r3, r2, r3
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	609a      	str	r2, [r3, #8]
}
 800e186:	46c0      	nop			@ (mov r8, r8)
 800e188:	46bd      	mov	sp, r7
 800e18a:	b006      	add	sp, #24
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	46c0      	nop			@ (mov r8, r8)
 800e190:	080173d8 	.word	0x080173d8

0800e194 <LL_DMA_SetPeriphRequest>:
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	0a9b      	lsrs	r3, r3, #10
 800e1a4:	4a0f      	ldr	r2, [pc, #60]	@ (800e1e4 <LL_DMA_SetPeriphRequest+0x50>)
 800e1a6:	405a      	eors	r2, r3
 800e1a8:	0013      	movs	r3, r2
 800e1aa:	00db      	lsls	r3, r3, #3
 800e1ac:	1a9b      	subs	r3, r3, r2
 800e1ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	18d3      	adds	r3, r2, r3
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4a0b      	ldr	r2, [pc, #44]	@ (800e1e8 <LL_DMA_SetPeriphRequest+0x54>)
 800e1ba:	4694      	mov	ip, r2
 800e1bc:	4463      	add	r3, ip
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	227f      	movs	r2, #127	@ 0x7f
 800e1c2:	4393      	bics	r3, r2
 800e1c4:	0019      	movs	r1, r3
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	18d3      	adds	r3, r2, r3
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	4a06      	ldr	r2, [pc, #24]	@ (800e1e8 <LL_DMA_SetPeriphRequest+0x54>)
 800e1d0:	4694      	mov	ip, r2
 800e1d2:	4463      	add	r3, ip
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	430a      	orrs	r2, r1
 800e1d8:	601a      	str	r2, [r3, #0]
}
 800e1da:	46c0      	nop			@ (mov r8, r8)
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	b006      	add	sp, #24
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	46c0      	nop			@ (mov r8, r8)
 800e1e4:	00100080 	.word	0x00100080
 800e1e8:	40020800 	.word	0x40020800

0800e1ec <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800e200:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800e206:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800e20c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800e212:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800e218:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800e21e:	431a      	orrs	r2, r3
 800e220:	68b9      	ldr	r1, [r7, #8]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	0018      	movs	r0, r3
 800e226:	f7ff ff3d 	bl	800e0a4 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	685a      	ldr	r2, [r3, #4]
 800e22e:	68b9      	ldr	r1, [r7, #8]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	0018      	movs	r0, r3
 800e234:	f7ff ff7e 	bl	800e134 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	68b9      	ldr	r1, [r7, #8]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	0018      	movs	r0, r3
 800e242:	f7ff ff8f 	bl	800e164 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a1a      	ldr	r2, [r3, #32]
 800e24a:	68b9      	ldr	r1, [r7, #8]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	0018      	movs	r0, r3
 800e250:	f7ff ff4e 	bl	800e0f0 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e258:	68b9      	ldr	r1, [r7, #8]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	0018      	movs	r0, r3
 800e25e:	f7ff ff99 	bl	800e194 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800e262:	2300      	movs	r3, #0
}
 800e264:	0018      	movs	r0, r3
 800e266:	46bd      	mov	sp, r7
 800e268:	b004      	add	sp, #16
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e2b6:	46c0      	nop			@ (mov r8, r8)
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	b002      	add	sp, #8
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b084      	sub	sp, #16
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	60f8      	str	r0, [r7, #12]
 800e2c6:	60b9      	str	r1, [r7, #8]
 800e2c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6819      	ldr	r1, [r3, #0]
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	435b      	muls	r3, r3
 800e2d2:	001a      	movs	r2, r3
 800e2d4:	0013      	movs	r3, r2
 800e2d6:	005b      	lsls	r3, r3, #1
 800e2d8:	189b      	adds	r3, r3, r2
 800e2da:	43db      	mvns	r3, r3
 800e2dc:	400b      	ands	r3, r1
 800e2de:	001a      	movs	r2, r3
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	435b      	muls	r3, r3
 800e2e4:	6879      	ldr	r1, [r7, #4]
 800e2e6:	434b      	muls	r3, r1
 800e2e8:	431a      	orrs	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	601a      	str	r2, [r3, #0]
}
 800e2ee:	46c0      	nop			@ (mov r8, r8)
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	b004      	add	sp, #16
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b084      	sub	sp, #16
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	60f8      	str	r0, [r7, #12]
 800e2fe:	60b9      	str	r1, [r7, #8]
 800e300:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	43d2      	mvns	r2, r2
 800e30a:	401a      	ands	r2, r3
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	6879      	ldr	r1, [r7, #4]
 800e310:	434b      	muls	r3, r1
 800e312:	431a      	orrs	r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	605a      	str	r2, [r3, #4]
}
 800e318:	46c0      	nop			@ (mov r8, r8)
 800e31a:	46bd      	mov	sp, r7
 800e31c:	b004      	add	sp, #16
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6899      	ldr	r1, [r3, #8]
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	435b      	muls	r3, r3
 800e334:	001a      	movs	r2, r3
 800e336:	0013      	movs	r3, r2
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	189b      	adds	r3, r3, r2
 800e33c:	43db      	mvns	r3, r3
 800e33e:	400b      	ands	r3, r1
 800e340:	001a      	movs	r2, r3
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	435b      	muls	r3, r3
 800e346:	6879      	ldr	r1, [r7, #4]
 800e348:	434b      	muls	r3, r1
 800e34a:	431a      	orrs	r2, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	609a      	str	r2, [r3, #8]
}
 800e350:	46c0      	nop			@ (mov r8, r8)
 800e352:	46bd      	mov	sp, r7
 800e354:	b004      	add	sp, #16
 800e356:	bd80      	pop	{r7, pc}

0800e358 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	68d9      	ldr	r1, [r3, #12]
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	435b      	muls	r3, r3
 800e36c:	001a      	movs	r2, r3
 800e36e:	0013      	movs	r3, r2
 800e370:	005b      	lsls	r3, r3, #1
 800e372:	189b      	adds	r3, r3, r2
 800e374:	43db      	mvns	r3, r3
 800e376:	400b      	ands	r3, r1
 800e378:	001a      	movs	r2, r3
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	435b      	muls	r3, r3
 800e37e:	6879      	ldr	r1, [r7, #4]
 800e380:	434b      	muls	r3, r1
 800e382:	431a      	orrs	r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	60da      	str	r2, [r3, #12]
}
 800e388:	46c0      	nop			@ (mov r8, r8)
 800e38a:	46bd      	mov	sp, r7
 800e38c:	b004      	add	sp, #16
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6a19      	ldr	r1, [r3, #32]
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	435b      	muls	r3, r3
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	4353      	muls	r3, r2
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	435a      	muls	r2, r3
 800e3ac:	0013      	movs	r3, r2
 800e3ae:	011b      	lsls	r3, r3, #4
 800e3b0:	1a9b      	subs	r3, r3, r2
 800e3b2:	43db      	mvns	r3, r3
 800e3b4:	400b      	ands	r3, r1
 800e3b6:	001a      	movs	r2, r3
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	435b      	muls	r3, r3
 800e3bc:	68b9      	ldr	r1, [r7, #8]
 800e3be:	434b      	muls	r3, r1
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	434b      	muls	r3, r1
 800e3c4:	6879      	ldr	r1, [r7, #4]
 800e3c6:	434b      	muls	r3, r1
 800e3c8:	431a      	orrs	r2, r3
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800e3ce:	46c0      	nop			@ (mov r8, r8)
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	b004      	add	sp, #16
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b084      	sub	sp, #16
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	60f8      	str	r0, [r7, #12]
 800e3de:	60b9      	str	r1, [r7, #8]
 800e3e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	0a1b      	lsrs	r3, r3, #8
 800e3ea:	68ba      	ldr	r2, [r7, #8]
 800e3ec:	0a12      	lsrs	r2, r2, #8
 800e3ee:	4353      	muls	r3, r2
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	0a12      	lsrs	r2, r2, #8
 800e3f4:	4353      	muls	r3, r2
 800e3f6:	68ba      	ldr	r2, [r7, #8]
 800e3f8:	0a12      	lsrs	r2, r2, #8
 800e3fa:	435a      	muls	r2, r3
 800e3fc:	0013      	movs	r3, r2
 800e3fe:	011b      	lsls	r3, r3, #4
 800e400:	1a9b      	subs	r3, r3, r2
 800e402:	43db      	mvns	r3, r3
 800e404:	400b      	ands	r3, r1
 800e406:	001a      	movs	r2, r3
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	0a1b      	lsrs	r3, r3, #8
 800e40c:	68b9      	ldr	r1, [r7, #8]
 800e40e:	0a09      	lsrs	r1, r1, #8
 800e410:	434b      	muls	r3, r1
 800e412:	68b9      	ldr	r1, [r7, #8]
 800e414:	0a09      	lsrs	r1, r1, #8
 800e416:	434b      	muls	r3, r1
 800e418:	68b9      	ldr	r1, [r7, #8]
 800e41a:	0a09      	lsrs	r1, r1, #8
 800e41c:	434b      	muls	r3, r1
 800e41e:	6879      	ldr	r1, [r7, #4]
 800e420:	434b      	muls	r3, r1
 800e422:	431a      	orrs	r2, r3
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800e428:	46c0      	nop			@ (mov r8, r8)
 800e42a:	46bd      	mov	sp, r7
 800e42c:	b004      	add	sp, #16
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800e43e:	e047      	b.n	800e4d0 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2101      	movs	r1, #1
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	4091      	lsls	r1, r2
 800e44a:	000a      	movs	r2, r1
 800e44c:	4013      	ands	r3, r2
 800e44e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d039      	beq.n	800e4ca <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d003      	beq.n	800e466 <LL_GPIO_Init+0x36>
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	2b02      	cmp	r3, #2
 800e464:	d10d      	bne.n	800e482 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	689a      	ldr	r2, [r3, #8]
 800e46a:	68b9      	ldr	r1, [r7, #8]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	0018      	movs	r0, r3
 800e470:	f7ff ff56 	bl	800e320 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	68da      	ldr	r2, [r3, #12]
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	0018      	movs	r0, r3
 800e47e:	f7ff ff3a 	bl	800e2f6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	691a      	ldr	r2, [r3, #16]
 800e486:	68b9      	ldr	r1, [r7, #8]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	0018      	movs	r0, r3
 800e48c:	f7ff ff64 	bl	800e358 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	2b02      	cmp	r3, #2
 800e496:	d111      	bne.n	800e4bc <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2bff      	cmp	r3, #255	@ 0xff
 800e49c:	d807      	bhi.n	800e4ae <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	695a      	ldr	r2, [r3, #20]
 800e4a2:	68b9      	ldr	r1, [r7, #8]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	0018      	movs	r0, r3
 800e4a8:	f7ff ff72 	bl	800e390 <LL_GPIO_SetAFPin_0_7>
 800e4ac:	e006      	b.n	800e4bc <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	695a      	ldr	r2, [r3, #20]
 800e4b2:	68b9      	ldr	r1, [r7, #8]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	0018      	movs	r0, r3
 800e4b8:	f7ff ff8d 	bl	800e3d6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	685a      	ldr	r2, [r3, #4]
 800e4c0:	68b9      	ldr	r1, [r7, #8]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	0018      	movs	r0, r3
 800e4c6:	f7ff fefa 	bl	800e2be <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	40da      	lsrs	r2, r3
 800e4d8:	1e13      	subs	r3, r2, #0
 800e4da:	d1b1      	bne.n	800e440 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	0018      	movs	r0, r3
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	b004      	add	sp, #16
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b082      	sub	sp, #8
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	085a      	lsrs	r2, r3, #1
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	601a      	str	r2, [r3, #0]
}
 800e4fa:	46c0      	nop			@ (mov r8, r8)
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	b002      	add	sp, #8
 800e500:	bd80      	pop	{r7, pc}
	...

0800e504 <LL_APB1_GRP1_EnableClock>:
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800e50c:	4b07      	ldr	r3, [pc, #28]	@ (800e52c <LL_APB1_GRP1_EnableClock+0x28>)
 800e50e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800e510:	4b06      	ldr	r3, [pc, #24]	@ (800e52c <LL_APB1_GRP1_EnableClock+0x28>)
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	430a      	orrs	r2, r1
 800e516:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800e518:	4b04      	ldr	r3, [pc, #16]	@ (800e52c <LL_APB1_GRP1_EnableClock+0x28>)
 800e51a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	4013      	ands	r3, r2
 800e520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e522:	68fb      	ldr	r3, [r7, #12]
}
 800e524:	46c0      	nop			@ (mov r8, r8)
 800e526:	46bd      	mov	sp, r7
 800e528:	b004      	add	sp, #16
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	40021000 	.word	0x40021000

0800e530 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4a16      	ldr	r2, [pc, #88]	@ (800e598 <LL_UCPD_Init+0x68>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d104      	bne.n	800e54c <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800e542:	2380      	movs	r3, #128	@ 0x80
 800e544:	049b      	lsls	r3, r3, #18
 800e546:	0018      	movs	r0, r3
 800e548:	f7ff ffdc 	bl	800e504 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4a13      	ldr	r2, [pc, #76]	@ (800e59c <LL_UCPD_Init+0x6c>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d104      	bne.n	800e55e <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800e554:	2380      	movs	r3, #128	@ 0x80
 800e556:	04db      	lsls	r3, r3, #19
 800e558:	0018      	movs	r0, r3
 800e55a:	f7ff ffd3 	bl	800e504 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	0018      	movs	r0, r3
 800e562:	f7ff ffc0 	bl	800e4e6 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a0d      	ldr	r2, [pc, #52]	@ (800e5a0 <LL_UCPD_Init+0x70>)
 800e56c:	401a      	ands	r2, r3
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	6819      	ldr	r1, [r3, #0]
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	02db      	lsls	r3, r3, #11
 800e578:	4319      	orrs	r1, r3
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	019b      	lsls	r3, r3, #6
 800e580:	4319      	orrs	r1, r3
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	430b      	orrs	r3, r1
 800e588:	431a      	orrs	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	0018      	movs	r0, r3
 800e592:	46bd      	mov	sp, r7
 800e594:	b002      	add	sp, #8
 800e596:	bd80      	pop	{r7, pc}
 800e598:	4000a000 	.word	0x4000a000
 800e59c:	4000a400 	.word	0x4000a400
 800e5a0:	fff10000 	.word	0xfff10000

0800e5a4 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2280      	movs	r2, #128	@ 0x80
 800e5b0:	0292      	lsls	r2, r2, #10
 800e5b2:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2207      	movs	r2, #7
 800e5b8:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2210      	movs	r2, #16
 800e5be:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	220d      	movs	r2, #13
 800e5c4:	60da      	str	r2, [r3, #12]
}
 800e5c6:	46c0      	nop			@ (mov r8, r8)
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	b002      	add	sp, #8
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e5de:	4b05      	ldr	r3, [pc, #20]	@ (800e5f4 <USB_EnableGlobalInt+0x24>)
 800e5e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	0018      	movs	r0, r3
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	b004      	add	sp, #16
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	46c0      	nop			@ (mov r8, r8)
 800e5f4:	0000bf80 	.word	0x0000bf80

0800e5f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e600:	4b06      	ldr	r3, [pc, #24]	@ (800e61c <USB_DisableGlobalInt+0x24>)
 800e602:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	43d2      	mvns	r2, r2
 800e60c:	401a      	ands	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	0018      	movs	r0, r3
 800e616:	46bd      	mov	sp, r7
 800e618:	b004      	add	sp, #16
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	0000bf80 	.word	0x0000bf80

0800e620 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	000a      	movs	r2, r1
 800e62a:	1cfb      	adds	r3, r7, #3
 800e62c:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800e62e:	1cfb      	adds	r3, r7, #3
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d106      	bne.n	800e644 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e63a:	005b      	lsls	r3, r3, #1
 800e63c:	085a      	lsrs	r2, r3, #1
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	641a      	str	r2, [r3, #64]	@ 0x40
 800e642:	e00d      	b.n	800e660 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 800e644:	1cfb      	adds	r3, r7, #3
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d107      	bne.n	800e65c <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e650:	2280      	movs	r2, #128	@ 0x80
 800e652:	0612      	lsls	r2, r2, #24
 800e654:	431a      	orrs	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	641a      	str	r2, [r3, #64]	@ 0x40
 800e65a:	e001      	b.n	800e660 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 800e65c:	2301      	movs	r3, #1
 800e65e:	e000      	b.n	800e662 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 800e660:	2300      	movs	r3, #0
}
 800e662:	0018      	movs	r0, r3
 800e664:	46bd      	mov	sp, r7
 800e666:	b002      	add	sp, #8
 800e668:	bd80      	pop	{r7, pc}

0800e66a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800e66a:	b084      	sub	sp, #16
 800e66c:	b5b0      	push	{r4, r5, r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	2004      	movs	r0, #4
 800e676:	2420      	movs	r4, #32
 800e678:	1900      	adds	r0, r0, r4
 800e67a:	19c0      	adds	r0, r0, r7
 800e67c:	6001      	str	r1, [r0, #0]
 800e67e:	6042      	str	r2, [r0, #4]
 800e680:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2201      	movs	r2, #1
 800e686:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e68c:	2201      	movs	r2, #1
 800e68e:	4393      	bics	r3, r2
 800e690:	001a      	movs	r2, r3
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800e696:	250f      	movs	r5, #15
 800e698:	197c      	adds	r4, r7, r5
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2100      	movs	r1, #0
 800e69e:	0018      	movs	r0, r3
 800e6a0:	f7ff ffbe 	bl	800e620 <USB_SetCurrentMode>
 800e6a4:	0003      	movs	r3, r0
 800e6a6:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800e6ae:	197b      	adds	r3, r7, r5
 800e6b0:	781b      	ldrb	r3, [r3, #0]
}
 800e6b2:	0018      	movs	r0, r3
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	b004      	add	sp, #16
 800e6b8:	bcb0      	pop	{r4, r5, r7}
 800e6ba:	bc08      	pop	{r3}
 800e6bc:	b004      	add	sp, #16
 800e6be:	4718      	bx	r3

0800e6c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b09e      	sub	sp, #120	@ 0x78
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e6ca:	2377      	movs	r3, #119	@ 0x77
 800e6cc:	18fb      	adds	r3, r7, r3
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	18d3      	adds	r3, r2, r3
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4adc      	ldr	r2, [pc, #880]	@ (800ea50 <USB_ActivateEndpoint+0x390>)
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	78db      	ldrb	r3, [r3, #3]
 800e6e8:	2b03      	cmp	r3, #3
 800e6ea:	d00e      	beq.n	800e70a <USB_ActivateEndpoint+0x4a>
 800e6ec:	dc19      	bgt.n	800e722 <USB_ActivateEndpoint+0x62>
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	d01c      	beq.n	800e72c <USB_ActivateEndpoint+0x6c>
 800e6f2:	dc16      	bgt.n	800e722 <USB_ActivateEndpoint+0x62>
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <USB_ActivateEndpoint+0x3e>
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d00c      	beq.n	800e716 <USB_ActivateEndpoint+0x56>
 800e6fc:	e011      	b.n	800e722 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e6fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e700:	2280      	movs	r2, #128	@ 0x80
 800e702:	0092      	lsls	r2, r2, #2
 800e704:	4313      	orrs	r3, r2
 800e706:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e708:	e011      	b.n	800e72e <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e70a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e70c:	22c0      	movs	r2, #192	@ 0xc0
 800e70e:	00d2      	lsls	r2, r2, #3
 800e710:	4313      	orrs	r3, r2
 800e712:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e714:	e00b      	b.n	800e72e <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e718:	2280      	movs	r2, #128	@ 0x80
 800e71a:	00d2      	lsls	r2, r2, #3
 800e71c:	4313      	orrs	r3, r2
 800e71e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800e720:	e005      	b.n	800e72e <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800e722:	2377      	movs	r3, #119	@ 0x77
 800e724:	18fb      	adds	r3, r7, r3
 800e726:	2201      	movs	r2, #1
 800e728:	701a      	strb	r2, [r3, #0]
      break;
 800e72a:	e000      	b.n	800e72e <USB_ActivateEndpoint+0x6e>
      break;
 800e72c:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	18d3      	adds	r3, r2, r3
 800e738:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e73a:	49c6      	ldr	r1, [pc, #792]	@ (800ea54 <USB_ActivateEndpoint+0x394>)
 800e73c:	430a      	orrs	r2, r1
 800e73e:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	18d3      	adds	r3, r2, r3
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4ac2      	ldr	r2, [pc, #776]	@ (800ea58 <USB_ActivateEndpoint+0x398>)
 800e74e:	4013      	ands	r3, r2
 800e750:	683a      	ldr	r2, [r7, #0]
 800e752:	7812      	ldrb	r2, [r2, #0]
 800e754:	4313      	orrs	r3, r2
 800e756:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	18d3      	adds	r3, r2, r3
 800e762:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e764:	49bb      	ldr	r1, [pc, #748]	@ (800ea54 <USB_ActivateEndpoint+0x394>)
 800e766:	430a      	orrs	r2, r1
 800e768:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	7b1b      	ldrb	r3, [r3, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d000      	beq.n	800e774 <USB_ActivateEndpoint+0xb4>
 800e772:	e155      	b.n	800ea20 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	785b      	ldrb	r3, [r3, #1]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d06e      	beq.n	800e85a <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	00db      	lsls	r3, r3, #3
 800e782:	4ab6      	ldr	r2, [pc, #728]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e784:	4694      	mov	ip, r2
 800e786:	4463      	add	r3, ip
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	00db      	lsls	r3, r3, #3
 800e790:	49b2      	ldr	r1, [pc, #712]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e792:	468c      	mov	ip, r1
 800e794:	4463      	add	r3, ip
 800e796:	0c12      	lsrs	r2, r2, #16
 800e798:	0412      	lsls	r2, r2, #16
 800e79a:	601a      	str	r2, [r3, #0]
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	00db      	lsls	r3, r3, #3
 800e7a2:	4aae      	ldr	r2, [pc, #696]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e7a4:	4694      	mov	ip, r2
 800e7a6:	4463      	add	r3, ip
 800e7a8:	6819      	ldr	r1, [r3, #0]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	88db      	ldrh	r3, [r3, #6]
 800e7ae:	089b      	lsrs	r3, r3, #2
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	009a      	lsls	r2, r3, #2
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	00db      	lsls	r3, r3, #3
 800e7ba:	48a8      	ldr	r0, [pc, #672]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e7bc:	4684      	mov	ip, r0
 800e7be:	4463      	add	r3, ip
 800e7c0:	430a      	orrs	r2, r1
 800e7c2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	18d3      	adds	r3, r2, r3
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	61bb      	str	r3, [r7, #24]
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	2240      	movs	r2, #64	@ 0x40
 800e7d6:	4013      	ands	r3, r2
 800e7d8:	d011      	beq.n	800e7fe <USB_ActivateEndpoint+0x13e>
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	18d3      	adds	r3, r2, r3
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a9c      	ldr	r2, [pc, #624]	@ (800ea58 <USB_ActivateEndpoint+0x398>)
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	18d3      	adds	r3, r2, r3
 800e7f6:	697a      	ldr	r2, [r7, #20]
 800e7f8:	4999      	ldr	r1, [pc, #612]	@ (800ea60 <USB_ActivateEndpoint+0x3a0>)
 800e7fa:	430a      	orrs	r2, r1
 800e7fc:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	78db      	ldrb	r3, [r3, #3]
 800e802:	2b01      	cmp	r3, #1
 800e804:	d016      	beq.n	800e834 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	18d3      	adds	r3, r2, r3
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4a94      	ldr	r2, [pc, #592]	@ (800ea64 <USB_ActivateEndpoint+0x3a4>)
 800e814:	4013      	ands	r3, r2
 800e816:	60fb      	str	r3, [r7, #12]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2220      	movs	r2, #32
 800e81c:	4053      	eors	r3, r2
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	18d3      	adds	r3, r2, r3
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	4989      	ldr	r1, [pc, #548]	@ (800ea54 <USB_ActivateEndpoint+0x394>)
 800e82e:	430a      	orrs	r2, r1
 800e830:	601a      	str	r2, [r3, #0]
 800e832:	e261      	b.n	800ecf8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	18d3      	adds	r3, r2, r3
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a88      	ldr	r2, [pc, #544]	@ (800ea64 <USB_ActivateEndpoint+0x3a4>)
 800e842:	4013      	ands	r3, r2
 800e844:	613b      	str	r3, [r7, #16]
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	18d3      	adds	r3, r2, r3
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	4980      	ldr	r1, [pc, #512]	@ (800ea54 <USB_ActivateEndpoint+0x394>)
 800e854:	430a      	orrs	r2, r1
 800e856:	601a      	str	r2, [r3, #0]
 800e858:	e24e      	b.n	800ecf8 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	4a7e      	ldr	r2, [pc, #504]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e862:	4694      	mov	ip, r2
 800e864:	4463      	add	r3, ip
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	00db      	lsls	r3, r3, #3
 800e86e:	497b      	ldr	r1, [pc, #492]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e870:	468c      	mov	ip, r1
 800e872:	4463      	add	r3, ip
 800e874:	0c12      	lsrs	r2, r2, #16
 800e876:	0412      	lsls	r2, r2, #16
 800e878:	605a      	str	r2, [r3, #4]
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	00db      	lsls	r3, r3, #3
 800e880:	4a76      	ldr	r2, [pc, #472]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e882:	4694      	mov	ip, r2
 800e884:	4463      	add	r3, ip
 800e886:	6859      	ldr	r1, [r3, #4]
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	88db      	ldrh	r3, [r3, #6]
 800e88c:	089b      	lsrs	r3, r3, #2
 800e88e:	b29b      	uxth	r3, r3
 800e890:	009a      	lsls	r2, r3, #2
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	00db      	lsls	r3, r3, #3
 800e898:	4870      	ldr	r0, [pc, #448]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e89a:	4684      	mov	ip, r0
 800e89c:	4463      	add	r3, ip
 800e89e:	430a      	orrs	r2, r1
 800e8a0:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	00db      	lsls	r3, r3, #3
 800e8a8:	4a6c      	ldr	r2, [pc, #432]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e8aa:	4694      	mov	ip, r2
 800e8ac:	4463      	add	r3, ip
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	00db      	lsls	r3, r3, #3
 800e8b6:	4969      	ldr	r1, [pc, #420]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e8b8:	468c      	mov	ip, r1
 800e8ba:	4463      	add	r3, ip
 800e8bc:	0192      	lsls	r2, r2, #6
 800e8be:	0992      	lsrs	r2, r2, #6
 800e8c0:	605a      	str	r2, [r3, #4]
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e8c8:	d920      	bls.n	800e90c <USB_ActivateEndpoint+0x24c>
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	095b      	lsrs	r3, r3, #5
 800e8d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	221f      	movs	r2, #31
 800e8d8:	4013      	ands	r3, r2
 800e8da:	d102      	bne.n	800e8e2 <USB_ActivateEndpoint+0x222>
 800e8dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	00db      	lsls	r3, r3, #3
 800e8e8:	4a5c      	ldr	r2, [pc, #368]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e8ea:	4694      	mov	ip, r2
 800e8ec:	4463      	add	r3, ip
 800e8ee:	685a      	ldr	r2, [r3, #4]
 800e8f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8f2:	069b      	lsls	r3, r3, #26
 800e8f4:	431a      	orrs	r2, r3
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	00db      	lsls	r3, r3, #3
 800e8fc:	4957      	ldr	r1, [pc, #348]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e8fe:	468c      	mov	ip, r1
 800e900:	4463      	add	r3, ip
 800e902:	2180      	movs	r1, #128	@ 0x80
 800e904:	0609      	lsls	r1, r1, #24
 800e906:	430a      	orrs	r2, r1
 800e908:	605a      	str	r2, [r3, #4]
 800e90a:	e032      	b.n	800e972 <USB_ActivateEndpoint+0x2b2>
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d111      	bne.n	800e938 <USB_ActivateEndpoint+0x278>
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	00db      	lsls	r3, r3, #3
 800e91a:	4a50      	ldr	r2, [pc, #320]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e91c:	4694      	mov	ip, r2
 800e91e:	4463      	add	r3, ip
 800e920:	685a      	ldr	r2, [r3, #4]
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	00db      	lsls	r3, r3, #3
 800e928:	494c      	ldr	r1, [pc, #304]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e92a:	468c      	mov	ip, r1
 800e92c:	4463      	add	r3, ip
 800e92e:	2180      	movs	r1, #128	@ 0x80
 800e930:	0609      	lsls	r1, r1, #24
 800e932:	430a      	orrs	r2, r1
 800e934:	605a      	str	r2, [r3, #4]
 800e936:	e01c      	b.n	800e972 <USB_ActivateEndpoint+0x2b2>
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	085b      	lsrs	r3, r3, #1
 800e93e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	2201      	movs	r2, #1
 800e946:	4013      	ands	r3, r2
 800e948:	d002      	beq.n	800e950 <USB_ActivateEndpoint+0x290>
 800e94a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e94c:	3301      	adds	r3, #1
 800e94e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	00db      	lsls	r3, r3, #3
 800e956:	4a41      	ldr	r2, [pc, #260]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e958:	4694      	mov	ip, r2
 800e95a:	4463      	add	r3, ip
 800e95c:	6859      	ldr	r1, [r3, #4]
 800e95e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e960:	069a      	lsls	r2, r3, #26
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	00db      	lsls	r3, r3, #3
 800e968:	483c      	ldr	r0, [pc, #240]	@ (800ea5c <USB_ActivateEndpoint+0x39c>)
 800e96a:	4684      	mov	ip, r0
 800e96c:	4463      	add	r3, ip
 800e96e:	430a      	orrs	r2, r1
 800e970:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	18d3      	adds	r3, r2, r3
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e982:	2380      	movs	r3, #128	@ 0x80
 800e984:	01db      	lsls	r3, r3, #7
 800e986:	4013      	ands	r3, r2
 800e988:	d011      	beq.n	800e9ae <USB_ActivateEndpoint+0x2ee>
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	18d3      	adds	r3, r2, r3
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4a30      	ldr	r2, [pc, #192]	@ (800ea58 <USB_ActivateEndpoint+0x398>)
 800e998:	4013      	ands	r3, r2
 800e99a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	009b      	lsls	r3, r3, #2
 800e9a4:	18d3      	adds	r3, r2, r3
 800e9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9a8:	492f      	ldr	r1, [pc, #188]	@ (800ea68 <USB_ActivateEndpoint+0x3a8>)
 800e9aa:	430a      	orrs	r2, r1
 800e9ac:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d11c      	bne.n	800e9f0 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	18d3      	adds	r3, r2, r3
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a2a      	ldr	r2, [pc, #168]	@ (800ea6c <USB_ActivateEndpoint+0x3ac>)
 800e9c4:	4013      	ands	r3, r2
 800e9c6:	61fb      	str	r3, [r7, #28]
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	2280      	movs	r2, #128	@ 0x80
 800e9cc:	0152      	lsls	r2, r2, #5
 800e9ce:	4053      	eors	r3, r2
 800e9d0:	61fb      	str	r3, [r7, #28]
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	2280      	movs	r2, #128	@ 0x80
 800e9d6:	0192      	lsls	r2, r2, #6
 800e9d8:	4053      	eors	r3, r2
 800e9da:	61fb      	str	r3, [r7, #28]
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	009b      	lsls	r3, r3, #2
 800e9e4:	18d3      	adds	r3, r2, r3
 800e9e6:	69fa      	ldr	r2, [r7, #28]
 800e9e8:	491a      	ldr	r1, [pc, #104]	@ (800ea54 <USB_ActivateEndpoint+0x394>)
 800e9ea:	430a      	orrs	r2, r1
 800e9ec:	601a      	str	r2, [r3, #0]
 800e9ee:	e183      	b.n	800ecf8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	18d3      	adds	r3, r2, r3
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a1b      	ldr	r2, [pc, #108]	@ (800ea6c <USB_ActivateEndpoint+0x3ac>)
 800e9fe:	4013      	ands	r3, r2
 800ea00:	623b      	str	r3, [r7, #32]
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	2280      	movs	r2, #128	@ 0x80
 800ea06:	0192      	lsls	r2, r2, #6
 800ea08:	4053      	eors	r3, r2
 800ea0a:	623b      	str	r3, [r7, #32]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	18d3      	adds	r3, r2, r3
 800ea16:	6a3a      	ldr	r2, [r7, #32]
 800ea18:	490e      	ldr	r1, [pc, #56]	@ (800ea54 <USB_ActivateEndpoint+0x394>)
 800ea1a:	430a      	orrs	r2, r1
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	e16b      	b.n	800ecf8 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	78db      	ldrb	r3, [r3, #3]
 800ea24:	2b02      	cmp	r3, #2
 800ea26:	d125      	bne.n	800ea74 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	18d3      	adds	r3, r2, r3
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a08      	ldr	r2, [pc, #32]	@ (800ea58 <USB_ActivateEndpoint+0x398>)
 800ea36:	4013      	ands	r3, r2
 800ea38:	663b      	str	r3, [r7, #96]	@ 0x60
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	009b      	lsls	r3, r3, #2
 800ea42:	18d3      	adds	r3, r2, r3
 800ea44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ea46:	490a      	ldr	r1, [pc, #40]	@ (800ea70 <USB_ActivateEndpoint+0x3b0>)
 800ea48:	430a      	orrs	r2, r1
 800ea4a:	601a      	str	r2, [r3, #0]
 800ea4c:	e024      	b.n	800ea98 <USB_ActivateEndpoint+0x3d8>
 800ea4e:	46c0      	nop			@ (mov r8, r8)
 800ea50:	07ff898f 	.word	0x07ff898f
 800ea54:	00008080 	.word	0x00008080
 800ea58:	07ff8f8f 	.word	0x07ff8f8f
 800ea5c:	40009800 	.word	0x40009800
 800ea60:	000080c0 	.word	0x000080c0
 800ea64:	07ff8fbf 	.word	0x07ff8fbf
 800ea68:	0000c080 	.word	0x0000c080
 800ea6c:	07ffbf8f 	.word	0x07ffbf8f
 800ea70:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	18d3      	adds	r3, r2, r3
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4aa1      	ldr	r2, [pc, #644]	@ (800ed08 <USB_ActivateEndpoint+0x648>)
 800ea82:	4013      	ands	r3, r2
 800ea84:	667b      	str	r3, [r7, #100]	@ 0x64
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	18d3      	adds	r3, r2, r3
 800ea90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ea92:	499e      	ldr	r1, [pc, #632]	@ (800ed0c <USB_ActivateEndpoint+0x64c>)
 800ea94:	430a      	orrs	r2, r1
 800ea96:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	00db      	lsls	r3, r3, #3
 800ea9e:	4a9c      	ldr	r2, [pc, #624]	@ (800ed10 <USB_ActivateEndpoint+0x650>)
 800eaa0:	4694      	mov	ip, r2
 800eaa2:	4463      	add	r3, ip
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	00db      	lsls	r3, r3, #3
 800eaac:	4998      	ldr	r1, [pc, #608]	@ (800ed10 <USB_ActivateEndpoint+0x650>)
 800eaae:	468c      	mov	ip, r1
 800eab0:	4463      	add	r3, ip
 800eab2:	0c12      	lsrs	r2, r2, #16
 800eab4:	0412      	lsls	r2, r2, #16
 800eab6:	601a      	str	r2, [r3, #0]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	00db      	lsls	r3, r3, #3
 800eabe:	4a94      	ldr	r2, [pc, #592]	@ (800ed10 <USB_ActivateEndpoint+0x650>)
 800eac0:	4694      	mov	ip, r2
 800eac2:	4463      	add	r3, ip
 800eac4:	6819      	ldr	r1, [r3, #0]
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	891b      	ldrh	r3, [r3, #8]
 800eaca:	089b      	lsrs	r3, r3, #2
 800eacc:	b29b      	uxth	r3, r3
 800eace:	009a      	lsls	r2, r3, #2
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	00db      	lsls	r3, r3, #3
 800ead6:	488e      	ldr	r0, [pc, #568]	@ (800ed10 <USB_ActivateEndpoint+0x650>)
 800ead8:	4684      	mov	ip, r0
 800eada:	4463      	add	r3, ip
 800eadc:	430a      	orrs	r2, r1
 800eade:	601a      	str	r2, [r3, #0]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	00db      	lsls	r3, r3, #3
 800eae6:	4a8a      	ldr	r2, [pc, #552]	@ (800ed10 <USB_ActivateEndpoint+0x650>)
 800eae8:	4694      	mov	ip, r2
 800eaea:	4463      	add	r3, ip
 800eaec:	685a      	ldr	r2, [r3, #4]
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	4986      	ldr	r1, [pc, #536]	@ (800ed10 <USB_ActivateEndpoint+0x650>)
 800eaf6:	468c      	mov	ip, r1
 800eaf8:	4463      	add	r3, ip
 800eafa:	0c12      	lsrs	r2, r2, #16
 800eafc:	0412      	lsls	r2, r2, #16
 800eafe:	605a      	str	r2, [r3, #4]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	00db      	lsls	r3, r3, #3
 800eb06:	4a82      	ldr	r2, [pc, #520]	@ (800ed10 <USB_ActivateEndpoint+0x650>)
 800eb08:	4694      	mov	ip, r2
 800eb0a:	4463      	add	r3, ip
 800eb0c:	6859      	ldr	r1, [r3, #4]
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	895b      	ldrh	r3, [r3, #10]
 800eb12:	089b      	lsrs	r3, r3, #2
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	009a      	lsls	r2, r3, #2
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	487c      	ldr	r0, [pc, #496]	@ (800ed10 <USB_ActivateEndpoint+0x650>)
 800eb20:	4684      	mov	ip, r0
 800eb22:	4463      	add	r3, ip
 800eb24:	430a      	orrs	r2, r1
 800eb26:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	785b      	ldrb	r3, [r3, #1]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d169      	bne.n	800ec04 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	18d3      	adds	r3, r2, r3
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb40:	2380      	movs	r3, #128	@ 0x80
 800eb42:	01db      	lsls	r3, r3, #7
 800eb44:	4013      	ands	r3, r2
 800eb46:	d011      	beq.n	800eb6c <USB_ActivateEndpoint+0x4ac>
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	18d3      	adds	r3, r2, r3
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a6f      	ldr	r2, [pc, #444]	@ (800ed14 <USB_ActivateEndpoint+0x654>)
 800eb56:	4013      	ands	r3, r2
 800eb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	18d3      	adds	r3, r2, r3
 800eb64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb66:	496c      	ldr	r1, [pc, #432]	@ (800ed18 <USB_ActivateEndpoint+0x658>)
 800eb68:	430a      	orrs	r2, r1
 800eb6a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	009b      	lsls	r3, r3, #2
 800eb74:	18d3      	adds	r3, r2, r3
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb7c:	2240      	movs	r2, #64	@ 0x40
 800eb7e:	4013      	ands	r3, r2
 800eb80:	d011      	beq.n	800eba6 <USB_ActivateEndpoint+0x4e6>
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	18d3      	adds	r3, r2, r3
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	4a61      	ldr	r2, [pc, #388]	@ (800ed14 <USB_ActivateEndpoint+0x654>)
 800eb90:	4013      	ands	r3, r2
 800eb92:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	18d3      	adds	r3, r2, r3
 800eb9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eba0:	495e      	ldr	r1, [pc, #376]	@ (800ed1c <USB_ActivateEndpoint+0x65c>)
 800eba2:	430a      	orrs	r2, r1
 800eba4:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	009b      	lsls	r3, r3, #2
 800ebae:	18d3      	adds	r3, r2, r3
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4a5b      	ldr	r2, [pc, #364]	@ (800ed20 <USB_ActivateEndpoint+0x660>)
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebba:	2280      	movs	r2, #128	@ 0x80
 800ebbc:	0152      	lsls	r2, r2, #5
 800ebbe:	4053      	eors	r3, r2
 800ebc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	2280      	movs	r2, #128	@ 0x80
 800ebc6:	0192      	lsls	r2, r2, #6
 800ebc8:	4053      	eors	r3, r2
 800ebca:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	18d3      	adds	r3, r2, r3
 800ebd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebd8:	494c      	ldr	r1, [pc, #304]	@ (800ed0c <USB_ActivateEndpoint+0x64c>)
 800ebda:	430a      	orrs	r2, r1
 800ebdc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	18d3      	adds	r3, r2, r3
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a4e      	ldr	r2, [pc, #312]	@ (800ed24 <USB_ActivateEndpoint+0x664>)
 800ebec:	4013      	ands	r3, r2
 800ebee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	009b      	lsls	r3, r3, #2
 800ebf8:	18d3      	adds	r3, r2, r3
 800ebfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebfc:	4943      	ldr	r1, [pc, #268]	@ (800ed0c <USB_ActivateEndpoint+0x64c>)
 800ebfe:	430a      	orrs	r2, r1
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	e079      	b.n	800ecf8 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	18d3      	adds	r3, r2, r3
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ec14:	2380      	movs	r3, #128	@ 0x80
 800ec16:	01db      	lsls	r3, r3, #7
 800ec18:	4013      	ands	r3, r2
 800ec1a:	d011      	beq.n	800ec40 <USB_ActivateEndpoint+0x580>
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	18d3      	adds	r3, r2, r3
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a3a      	ldr	r2, [pc, #232]	@ (800ed14 <USB_ActivateEndpoint+0x654>)
 800ec2a:	4013      	ands	r3, r2
 800ec2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	18d3      	adds	r3, r2, r3
 800ec38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec3a:	4937      	ldr	r1, [pc, #220]	@ (800ed18 <USB_ActivateEndpoint+0x658>)
 800ec3c:	430a      	orrs	r2, r1
 800ec3e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	18d3      	adds	r3, r2, r3
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec50:	2240      	movs	r2, #64	@ 0x40
 800ec52:	4013      	ands	r3, r2
 800ec54:	d011      	beq.n	800ec7a <USB_ActivateEndpoint+0x5ba>
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	18d3      	adds	r3, r2, r3
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a2c      	ldr	r2, [pc, #176]	@ (800ed14 <USB_ActivateEndpoint+0x654>)
 800ec64:	4013      	ands	r3, r2
 800ec66:	653b      	str	r3, [r7, #80]	@ 0x50
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	18d3      	adds	r3, r2, r3
 800ec72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ec74:	4929      	ldr	r1, [pc, #164]	@ (800ed1c <USB_ActivateEndpoint+0x65c>)
 800ec76:	430a      	orrs	r2, r1
 800ec78:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	78db      	ldrb	r3, [r3, #3]
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d016      	beq.n	800ecb0 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	18d3      	adds	r3, r2, r3
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4a25      	ldr	r2, [pc, #148]	@ (800ed24 <USB_ActivateEndpoint+0x664>)
 800ec90:	4013      	ands	r3, r2
 800ec92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec96:	2220      	movs	r2, #32
 800ec98:	4053      	eors	r3, r2
 800ec9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	18d3      	adds	r3, r2, r3
 800eca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eca8:	4918      	ldr	r1, [pc, #96]	@ (800ed0c <USB_ActivateEndpoint+0x64c>)
 800ecaa:	430a      	orrs	r2, r1
 800ecac:	601a      	str	r2, [r3, #0]
 800ecae:	e011      	b.n	800ecd4 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	18d3      	adds	r3, r2, r3
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a19      	ldr	r2, [pc, #100]	@ (800ed24 <USB_ActivateEndpoint+0x664>)
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	009b      	lsls	r3, r3, #2
 800ecca:	18d3      	adds	r3, r2, r3
 800eccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ecce:	490f      	ldr	r1, [pc, #60]	@ (800ed0c <USB_ActivateEndpoint+0x64c>)
 800ecd0:	430a      	orrs	r2, r1
 800ecd2:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	18d3      	adds	r3, r2, r3
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a0f      	ldr	r2, [pc, #60]	@ (800ed20 <USB_ActivateEndpoint+0x660>)
 800ece2:	4013      	ands	r3, r2
 800ece4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	18d3      	adds	r3, r2, r3
 800ecf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecf2:	4906      	ldr	r1, [pc, #24]	@ (800ed0c <USB_ActivateEndpoint+0x64c>)
 800ecf4:	430a      	orrs	r2, r1
 800ecf6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ecf8:	2377      	movs	r3, #119	@ 0x77
 800ecfa:	18fb      	adds	r3, r7, r3
 800ecfc:	781b      	ldrb	r3, [r3, #0]
}
 800ecfe:	0018      	movs	r0, r3
 800ed00:	46bd      	mov	sp, r7
 800ed02:	b01e      	add	sp, #120	@ 0x78
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	46c0      	nop			@ (mov r8, r8)
 800ed08:	07ff8e8f 	.word	0x07ff8e8f
 800ed0c:	00008080 	.word	0x00008080
 800ed10:	40009800 	.word	0x40009800
 800ed14:	07ff8f8f 	.word	0x07ff8f8f
 800ed18:	0000c080 	.word	0x0000c080
 800ed1c:	000080c0 	.word	0x000080c0
 800ed20:	07ffbf8f 	.word	0x07ffbf8f
 800ed24:	07ff8fbf 	.word	0x07ff8fbf

0800ed28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b096      	sub	sp, #88	@ 0x58
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	7b1b      	ldrb	r3, [r3, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d164      	bne.n	800ee04 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	785b      	ldrb	r3, [r3, #1]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d02f      	beq.n	800eda2 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	18d3      	adds	r3, r2, r3
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	613b      	str	r3, [r7, #16]
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	2240      	movs	r2, #64	@ 0x40
 800ed54:	4013      	ands	r3, r2
 800ed56:	d011      	beq.n	800ed7c <USB_DeactivateEndpoint+0x54>
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	18d3      	adds	r3, r2, r3
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a9d      	ldr	r2, [pc, #628]	@ (800efdc <USB_DeactivateEndpoint+0x2b4>)
 800ed66:	4013      	ands	r3, r2
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	18d3      	adds	r3, r2, r3
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	499a      	ldr	r1, [pc, #616]	@ (800efe0 <USB_DeactivateEndpoint+0x2b8>)
 800ed78:	430a      	orrs	r2, r1
 800ed7a:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	18d3      	adds	r3, r2, r3
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a96      	ldr	r2, [pc, #600]	@ (800efe4 <USB_DeactivateEndpoint+0x2bc>)
 800ed8a:	4013      	ands	r3, r2
 800ed8c:	60bb      	str	r3, [r7, #8]
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	18d3      	adds	r3, r2, r3
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	4993      	ldr	r1, [pc, #588]	@ (800efe8 <USB_DeactivateEndpoint+0x2c0>)
 800ed9c:	430a      	orrs	r2, r1
 800ed9e:	601a      	str	r2, [r3, #0]
 800eda0:	e117      	b.n	800efd2 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	18d3      	adds	r3, r2, r3
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	61fb      	str	r3, [r7, #28]
 800edb0:	69fa      	ldr	r2, [r7, #28]
 800edb2:	2380      	movs	r3, #128	@ 0x80
 800edb4:	01db      	lsls	r3, r3, #7
 800edb6:	4013      	ands	r3, r2
 800edb8:	d011      	beq.n	800edde <USB_DeactivateEndpoint+0xb6>
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	18d3      	adds	r3, r2, r3
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a85      	ldr	r2, [pc, #532]	@ (800efdc <USB_DeactivateEndpoint+0x2b4>)
 800edc8:	4013      	ands	r3, r2
 800edca:	61bb      	str	r3, [r7, #24]
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	18d3      	adds	r3, r2, r3
 800edd6:	69ba      	ldr	r2, [r7, #24]
 800edd8:	4984      	ldr	r1, [pc, #528]	@ (800efec <USB_DeactivateEndpoint+0x2c4>)
 800edda:	430a      	orrs	r2, r1
 800eddc:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	18d3      	adds	r3, r2, r3
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a81      	ldr	r2, [pc, #516]	@ (800eff0 <USB_DeactivateEndpoint+0x2c8>)
 800edec:	4013      	ands	r3, r2
 800edee:	617b      	str	r3, [r7, #20]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	18d3      	adds	r3, r2, r3
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	497a      	ldr	r1, [pc, #488]	@ (800efe8 <USB_DeactivateEndpoint+0x2c0>)
 800edfe:	430a      	orrs	r2, r1
 800ee00:	601a      	str	r2, [r3, #0]
 800ee02:	e0e6      	b.n	800efd2 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	785b      	ldrb	r3, [r3, #1]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d171      	bne.n	800eef0 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	18d3      	adds	r3, r2, r3
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee1c:	2380      	movs	r3, #128	@ 0x80
 800ee1e:	01db      	lsls	r3, r3, #7
 800ee20:	4013      	ands	r3, r2
 800ee22:	d011      	beq.n	800ee48 <USB_DeactivateEndpoint+0x120>
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	18d3      	adds	r3, r2, r3
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a6a      	ldr	r2, [pc, #424]	@ (800efdc <USB_DeactivateEndpoint+0x2b4>)
 800ee32:	4013      	ands	r3, r2
 800ee34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	18d3      	adds	r3, r2, r3
 800ee40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee42:	496a      	ldr	r1, [pc, #424]	@ (800efec <USB_DeactivateEndpoint+0x2c4>)
 800ee44:	430a      	orrs	r2, r1
 800ee46:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	009b      	lsls	r3, r3, #2
 800ee50:	18d3      	adds	r3, r2, r3
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee58:	2240      	movs	r2, #64	@ 0x40
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	d011      	beq.n	800ee82 <USB_DeactivateEndpoint+0x15a>
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	18d3      	adds	r3, r2, r3
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a5c      	ldr	r2, [pc, #368]	@ (800efdc <USB_DeactivateEndpoint+0x2b4>)
 800ee6c:	4013      	ands	r3, r2
 800ee6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	18d3      	adds	r3, r2, r3
 800ee7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee7c:	4958      	ldr	r1, [pc, #352]	@ (800efe0 <USB_DeactivateEndpoint+0x2b8>)
 800ee7e:	430a      	orrs	r2, r1
 800ee80:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	18d3      	adds	r3, r2, r3
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a53      	ldr	r2, [pc, #332]	@ (800efdc <USB_DeactivateEndpoint+0x2b4>)
 800ee90:	4013      	ands	r3, r2
 800ee92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	18d3      	adds	r3, r2, r3
 800ee9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eea0:	494f      	ldr	r1, [pc, #316]	@ (800efe0 <USB_DeactivateEndpoint+0x2b8>)
 800eea2:	430a      	orrs	r2, r1
 800eea4:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	18d3      	adds	r3, r2, r3
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a4f      	ldr	r2, [pc, #316]	@ (800eff0 <USB_DeactivateEndpoint+0x2c8>)
 800eeb4:	4013      	ands	r3, r2
 800eeb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	18d3      	adds	r3, r2, r3
 800eec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eec4:	4948      	ldr	r1, [pc, #288]	@ (800efe8 <USB_DeactivateEndpoint+0x2c0>)
 800eec6:	430a      	orrs	r2, r1
 800eec8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	18d3      	adds	r3, r2, r3
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4a43      	ldr	r2, [pc, #268]	@ (800efe4 <USB_DeactivateEndpoint+0x2bc>)
 800eed8:	4013      	ands	r3, r2
 800eeda:	623b      	str	r3, [r7, #32]
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	18d3      	adds	r3, r2, r3
 800eee6:	6a3a      	ldr	r2, [r7, #32]
 800eee8:	493f      	ldr	r1, [pc, #252]	@ (800efe8 <USB_DeactivateEndpoint+0x2c0>)
 800eeea:	430a      	orrs	r2, r1
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	e070      	b.n	800efd2 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	18d3      	adds	r3, r2, r3
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	657b      	str	r3, [r7, #84]	@ 0x54
 800eefe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef00:	2380      	movs	r3, #128	@ 0x80
 800ef02:	01db      	lsls	r3, r3, #7
 800ef04:	4013      	ands	r3, r2
 800ef06:	d011      	beq.n	800ef2c <USB_DeactivateEndpoint+0x204>
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	18d3      	adds	r3, r2, r3
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a31      	ldr	r2, [pc, #196]	@ (800efdc <USB_DeactivateEndpoint+0x2b4>)
 800ef16:	4013      	ands	r3, r2
 800ef18:	653b      	str	r3, [r7, #80]	@ 0x50
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	18d3      	adds	r3, r2, r3
 800ef24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef26:	4931      	ldr	r1, [pc, #196]	@ (800efec <USB_DeactivateEndpoint+0x2c4>)
 800ef28:	430a      	orrs	r2, r1
 800ef2a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	18d3      	adds	r3, r2, r3
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ef3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef3c:	2240      	movs	r2, #64	@ 0x40
 800ef3e:	4013      	ands	r3, r2
 800ef40:	d011      	beq.n	800ef66 <USB_DeactivateEndpoint+0x23e>
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	18d3      	adds	r3, r2, r3
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a23      	ldr	r2, [pc, #140]	@ (800efdc <USB_DeactivateEndpoint+0x2b4>)
 800ef50:	4013      	ands	r3, r2
 800ef52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	18d3      	adds	r3, r2, r3
 800ef5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef60:	491f      	ldr	r1, [pc, #124]	@ (800efe0 <USB_DeactivateEndpoint+0x2b8>)
 800ef62:	430a      	orrs	r2, r1
 800ef64:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	009b      	lsls	r3, r3, #2
 800ef6e:	18d3      	adds	r3, r2, r3
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a1a      	ldr	r2, [pc, #104]	@ (800efdc <USB_DeactivateEndpoint+0x2b4>)
 800ef74:	4013      	ands	r3, r2
 800ef76:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	18d3      	adds	r3, r2, r3
 800ef82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef84:	4919      	ldr	r1, [pc, #100]	@ (800efec <USB_DeactivateEndpoint+0x2c4>)
 800ef86:	430a      	orrs	r2, r1
 800ef88:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	18d3      	adds	r3, r2, r3
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a13      	ldr	r2, [pc, #76]	@ (800efe4 <USB_DeactivateEndpoint+0x2bc>)
 800ef98:	4013      	ands	r3, r2
 800ef9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	18d3      	adds	r3, r2, r3
 800efa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800efa8:	490f      	ldr	r1, [pc, #60]	@ (800efe8 <USB_DeactivateEndpoint+0x2c0>)
 800efaa:	430a      	orrs	r2, r1
 800efac:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	009b      	lsls	r3, r3, #2
 800efb6:	18d3      	adds	r3, r2, r3
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a0d      	ldr	r2, [pc, #52]	@ (800eff0 <USB_DeactivateEndpoint+0x2c8>)
 800efbc:	4013      	ands	r3, r2
 800efbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	18d3      	adds	r3, r2, r3
 800efca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800efcc:	4906      	ldr	r1, [pc, #24]	@ (800efe8 <USB_DeactivateEndpoint+0x2c0>)
 800efce:	430a      	orrs	r2, r1
 800efd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800efd2:	2300      	movs	r3, #0
}
 800efd4:	0018      	movs	r0, r3
 800efd6:	46bd      	mov	sp, r7
 800efd8:	b016      	add	sp, #88	@ 0x58
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	07ff8f8f 	.word	0x07ff8f8f
 800efe0:	000080c0 	.word	0x000080c0
 800efe4:	07ff8fbf 	.word	0x07ff8fbf
 800efe8:	00008080 	.word	0x00008080
 800efec:	0000c080 	.word	0x0000c080
 800eff0:	07ffbf8f 	.word	0x07ffbf8f

0800eff4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800eff4:	b590      	push	{r4, r7, lr}
 800eff6:	b097      	sub	sp, #92	@ 0x5c
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	785b      	ldrb	r3, [r3, #1]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d001      	beq.n	800f00a <USB_EPStartXfer+0x16>
 800f006:	f000 fcbf 	bl	800f988 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	699a      	ldr	r2, [r3, #24]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	429a      	cmp	r2, r3
 800f014:	d903      	bls.n	800f01e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	657b      	str	r3, [r7, #84]	@ 0x54
 800f01c:	e002      	b.n	800f024 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	699b      	ldr	r3, [r3, #24]
 800f022:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	7b1b      	ldrb	r3, [r3, #12]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d12b      	bne.n	800f084 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	6959      	ldr	r1, [r3, #20]
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	88da      	ldrh	r2, [r3, #6]
 800f034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f036:	b29b      	uxth	r3, r3
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f001 f8f5 	bl	8010228 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	4ace      	ldr	r2, [pc, #824]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f046:	4694      	mov	ip, r2
 800f048:	4463      	add	r3, ip
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	00db      	lsls	r3, r3, #3
 800f052:	49cb      	ldr	r1, [pc, #812]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f054:	468c      	mov	ip, r1
 800f056:	4463      	add	r3, ip
 800f058:	0412      	lsls	r2, r2, #16
 800f05a:	0c12      	lsrs	r2, r2, #16
 800f05c:	601a      	str	r2, [r3, #0]
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	4ac6      	ldr	r2, [pc, #792]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f066:	4694      	mov	ip, r2
 800f068:	4463      	add	r3, ip
 800f06a:	6819      	ldr	r1, [r3, #0]
 800f06c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f06e:	041a      	lsls	r2, r3, #16
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	00db      	lsls	r3, r3, #3
 800f076:	48c2      	ldr	r0, [pc, #776]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f078:	4684      	mov	ip, r0
 800f07a:	4463      	add	r3, ip
 800f07c:	430a      	orrs	r2, r1
 800f07e:	601a      	str	r2, [r3, #0]
 800f080:	f000 fc67 	bl	800f952 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	78db      	ldrb	r3, [r3, #3]
 800f088:	2b02      	cmp	r3, #2
 800f08a:	d000      	beq.n	800f08e <USB_EPStartXfer+0x9a>
 800f08c:	e31a      	b.n	800f6c4 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	6a1a      	ldr	r2, [r3, #32]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	429a      	cmp	r2, r3
 800f098:	d800      	bhi.n	800f09c <USB_EPStartXfer+0xa8>
 800f09a:	e2c7      	b.n	800f62c <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	18d3      	adds	r3, r2, r3
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4ab6      	ldr	r2, [pc, #728]	@ (800f384 <USB_EPStartXfer+0x390>)
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	613b      	str	r3, [r7, #16]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	009b      	lsls	r3, r3, #2
 800f0b6:	18d3      	adds	r3, r2, r3
 800f0b8:	693a      	ldr	r2, [r7, #16]
 800f0ba:	49b3      	ldr	r1, [pc, #716]	@ (800f388 <USB_EPStartXfer+0x394>)
 800f0bc:	430a      	orrs	r2, r1
 800f0be:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	6a1a      	ldr	r2, [r3, #32]
 800f0c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0c6:	1ad2      	subs	r2, r2, r3
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	18d3      	adds	r3, r2, r3
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2240      	movs	r2, #64	@ 0x40
 800f0da:	4013      	ands	r3, r2
 800f0dc:	d100      	bne.n	800f0e0 <USB_EPStartXfer+0xec>
 800f0de:	e155      	b.n	800f38c <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	785b      	ldrb	r3, [r3, #1]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d162      	bne.n	800f1ae <USB_EPStartXfer+0x1ba>
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	00db      	lsls	r3, r3, #3
 800f0ee:	4aa4      	ldr	r2, [pc, #656]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f0f0:	4694      	mov	ip, r2
 800f0f2:	4463      	add	r3, ip
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	00db      	lsls	r3, r3, #3
 800f0fc:	49a0      	ldr	r1, [pc, #640]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f0fe:	468c      	mov	ip, r1
 800f100:	4463      	add	r3, ip
 800f102:	0192      	lsls	r2, r2, #6
 800f104:	0992      	lsrs	r2, r2, #6
 800f106:	605a      	str	r2, [r3, #4]
 800f108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f10a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f10c:	d91e      	bls.n	800f14c <USB_EPStartXfer+0x158>
 800f10e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f110:	095b      	lsrs	r3, r3, #5
 800f112:	653b      	str	r3, [r7, #80]	@ 0x50
 800f114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f116:	221f      	movs	r2, #31
 800f118:	4013      	ands	r3, r2
 800f11a:	d102      	bne.n	800f122 <USB_EPStartXfer+0x12e>
 800f11c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f11e:	3b01      	subs	r3, #1
 800f120:	653b      	str	r3, [r7, #80]	@ 0x50
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	00db      	lsls	r3, r3, #3
 800f128:	4a95      	ldr	r2, [pc, #596]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f12a:	4694      	mov	ip, r2
 800f12c:	4463      	add	r3, ip
 800f12e:	685a      	ldr	r2, [r3, #4]
 800f130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f132:	069b      	lsls	r3, r3, #26
 800f134:	431a      	orrs	r2, r3
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	4990      	ldr	r1, [pc, #576]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f13e:	468c      	mov	ip, r1
 800f140:	4463      	add	r3, ip
 800f142:	2180      	movs	r1, #128	@ 0x80
 800f144:	0609      	lsls	r1, r1, #24
 800f146:	430a      	orrs	r2, r1
 800f148:	605a      	str	r2, [r3, #4]
 800f14a:	e055      	b.n	800f1f8 <USB_EPStartXfer+0x204>
 800f14c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d111      	bne.n	800f176 <USB_EPStartXfer+0x182>
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	00db      	lsls	r3, r3, #3
 800f158:	4a89      	ldr	r2, [pc, #548]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f15a:	4694      	mov	ip, r2
 800f15c:	4463      	add	r3, ip
 800f15e:	685a      	ldr	r2, [r3, #4]
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	00db      	lsls	r3, r3, #3
 800f166:	4986      	ldr	r1, [pc, #536]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f168:	468c      	mov	ip, r1
 800f16a:	4463      	add	r3, ip
 800f16c:	2180      	movs	r1, #128	@ 0x80
 800f16e:	0609      	lsls	r1, r1, #24
 800f170:	430a      	orrs	r2, r1
 800f172:	605a      	str	r2, [r3, #4]
 800f174:	e040      	b.n	800f1f8 <USB_EPStartXfer+0x204>
 800f176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f178:	085b      	lsrs	r3, r3, #1
 800f17a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f17c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f17e:	2201      	movs	r2, #1
 800f180:	4013      	ands	r3, r2
 800f182:	d002      	beq.n	800f18a <USB_EPStartXfer+0x196>
 800f184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f186:	3301      	adds	r3, #1
 800f188:	653b      	str	r3, [r7, #80]	@ 0x50
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	00db      	lsls	r3, r3, #3
 800f190:	4a7b      	ldr	r2, [pc, #492]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f192:	4694      	mov	ip, r2
 800f194:	4463      	add	r3, ip
 800f196:	6859      	ldr	r1, [r3, #4]
 800f198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f19a:	069a      	lsls	r2, r3, #26
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	00db      	lsls	r3, r3, #3
 800f1a2:	4877      	ldr	r0, [pc, #476]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f1a4:	4684      	mov	ip, r0
 800f1a6:	4463      	add	r3, ip
 800f1a8:	430a      	orrs	r2, r1
 800f1aa:	605a      	str	r2, [r3, #4]
 800f1ac:	e024      	b.n	800f1f8 <USB_EPStartXfer+0x204>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	785b      	ldrb	r3, [r3, #1]
 800f1b2:	2b01      	cmp	r3, #1
 800f1b4:	d120      	bne.n	800f1f8 <USB_EPStartXfer+0x204>
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	00db      	lsls	r3, r3, #3
 800f1bc:	4a70      	ldr	r2, [pc, #448]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f1be:	4694      	mov	ip, r2
 800f1c0:	4463      	add	r3, ip
 800f1c2:	685a      	ldr	r2, [r3, #4]
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	00db      	lsls	r3, r3, #3
 800f1ca:	496d      	ldr	r1, [pc, #436]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f1cc:	468c      	mov	ip, r1
 800f1ce:	4463      	add	r3, ip
 800f1d0:	0412      	lsls	r2, r2, #16
 800f1d2:	0c12      	lsrs	r2, r2, #16
 800f1d4:	605a      	str	r2, [r3, #4]
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	00db      	lsls	r3, r3, #3
 800f1dc:	4a68      	ldr	r2, [pc, #416]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f1de:	4694      	mov	ip, r2
 800f1e0:	4463      	add	r3, ip
 800f1e2:	6859      	ldr	r1, [r3, #4]
 800f1e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1e6:	041a      	lsls	r2, r3, #16
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	00db      	lsls	r3, r3, #3
 800f1ee:	4864      	ldr	r0, [pc, #400]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f1f0:	4684      	mov	ip, r0
 800f1f2:	4463      	add	r3, ip
 800f1f4:	430a      	orrs	r2, r1
 800f1f6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800f1f8:	201a      	movs	r0, #26
 800f1fa:	183b      	adds	r3, r7, r0
 800f1fc:	683a      	ldr	r2, [r7, #0]
 800f1fe:	8952      	ldrh	r2, [r2, #10]
 800f200:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	6959      	ldr	r1, [r3, #20]
 800f206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f208:	b29c      	uxth	r4, r3
 800f20a:	183b      	adds	r3, r7, r0
 800f20c:	881a      	ldrh	r2, [r3, #0]
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	0023      	movs	r3, r4
 800f212:	f001 f809 	bl	8010228 <USB_WritePMA>
            ep->xfer_buff += len;
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	695a      	ldr	r2, [r3, #20]
 800f21a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f21c:	18d2      	adds	r2, r2, r3
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	6a1a      	ldr	r2, [r3, #32]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	691b      	ldr	r3, [r3, #16]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d906      	bls.n	800f23c <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	6a1a      	ldr	r2, [r3, #32]
 800f232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f234:	1ad2      	subs	r2, r2, r3
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	621a      	str	r2, [r3, #32]
 800f23a:	e005      	b.n	800f248 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	6a1b      	ldr	r3, [r3, #32]
 800f240:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	2200      	movs	r2, #0
 800f246:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	785b      	ldrb	r3, [r3, #1]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d162      	bne.n	800f316 <USB_EPStartXfer+0x322>
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	00db      	lsls	r3, r3, #3
 800f256:	4a4a      	ldr	r2, [pc, #296]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f258:	4694      	mov	ip, r2
 800f25a:	4463      	add	r3, ip
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	00db      	lsls	r3, r3, #3
 800f264:	4946      	ldr	r1, [pc, #280]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f266:	468c      	mov	ip, r1
 800f268:	4463      	add	r3, ip
 800f26a:	0192      	lsls	r2, r2, #6
 800f26c:	0992      	lsrs	r2, r2, #6
 800f26e:	601a      	str	r2, [r3, #0]
 800f270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f272:	2b3e      	cmp	r3, #62	@ 0x3e
 800f274:	d91e      	bls.n	800f2b4 <USB_EPStartXfer+0x2c0>
 800f276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f278:	095b      	lsrs	r3, r3, #5
 800f27a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f27c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f27e:	221f      	movs	r2, #31
 800f280:	4013      	ands	r3, r2
 800f282:	d102      	bne.n	800f28a <USB_EPStartXfer+0x296>
 800f284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f286:	3b01      	subs	r3, #1
 800f288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	00db      	lsls	r3, r3, #3
 800f290:	4a3b      	ldr	r2, [pc, #236]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f292:	4694      	mov	ip, r2
 800f294:	4463      	add	r3, ip
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f29a:	069b      	lsls	r3, r3, #26
 800f29c:	431a      	orrs	r2, r3
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	00db      	lsls	r3, r3, #3
 800f2a4:	4936      	ldr	r1, [pc, #216]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f2a6:	468c      	mov	ip, r1
 800f2a8:	4463      	add	r3, ip
 800f2aa:	2180      	movs	r1, #128	@ 0x80
 800f2ac:	0609      	lsls	r1, r1, #24
 800f2ae:	430a      	orrs	r2, r1
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	e055      	b.n	800f360 <USB_EPStartXfer+0x36c>
 800f2b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d111      	bne.n	800f2de <USB_EPStartXfer+0x2ea>
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	00db      	lsls	r3, r3, #3
 800f2c0:	4a2f      	ldr	r2, [pc, #188]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f2c2:	4694      	mov	ip, r2
 800f2c4:	4463      	add	r3, ip
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	00db      	lsls	r3, r3, #3
 800f2ce:	492c      	ldr	r1, [pc, #176]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f2d0:	468c      	mov	ip, r1
 800f2d2:	4463      	add	r3, ip
 800f2d4:	2180      	movs	r1, #128	@ 0x80
 800f2d6:	0609      	lsls	r1, r1, #24
 800f2d8:	430a      	orrs	r2, r1
 800f2da:	601a      	str	r2, [r3, #0]
 800f2dc:	e040      	b.n	800f360 <USB_EPStartXfer+0x36c>
 800f2de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2e0:	085b      	lsrs	r3, r3, #1
 800f2e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f2e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	d002      	beq.n	800f2f2 <USB_EPStartXfer+0x2fe>
 800f2ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	00db      	lsls	r3, r3, #3
 800f2f8:	4a21      	ldr	r2, [pc, #132]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f2fa:	4694      	mov	ip, r2
 800f2fc:	4463      	add	r3, ip
 800f2fe:	6819      	ldr	r1, [r3, #0]
 800f300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f302:	069a      	lsls	r2, r3, #26
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	481d      	ldr	r0, [pc, #116]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f30c:	4684      	mov	ip, r0
 800f30e:	4463      	add	r3, ip
 800f310:	430a      	orrs	r2, r1
 800f312:	601a      	str	r2, [r3, #0]
 800f314:	e024      	b.n	800f360 <USB_EPStartXfer+0x36c>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	785b      	ldrb	r3, [r3, #1]
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d120      	bne.n	800f360 <USB_EPStartXfer+0x36c>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	4a16      	ldr	r2, [pc, #88]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f326:	4694      	mov	ip, r2
 800f328:	4463      	add	r3, ip
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	00db      	lsls	r3, r3, #3
 800f332:	4913      	ldr	r1, [pc, #76]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f334:	468c      	mov	ip, r1
 800f336:	4463      	add	r3, ip
 800f338:	0412      	lsls	r2, r2, #16
 800f33a:	0c12      	lsrs	r2, r2, #16
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	00db      	lsls	r3, r3, #3
 800f344:	4a0e      	ldr	r2, [pc, #56]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f346:	4694      	mov	ip, r2
 800f348:	4463      	add	r3, ip
 800f34a:	6819      	ldr	r1, [r3, #0]
 800f34c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f34e:	041a      	lsls	r2, r3, #16
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	00db      	lsls	r3, r3, #3
 800f356:	480a      	ldr	r0, [pc, #40]	@ (800f380 <USB_EPStartXfer+0x38c>)
 800f358:	4684      	mov	ip, r0
 800f35a:	4463      	add	r3, ip
 800f35c:	430a      	orrs	r2, r1
 800f35e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f360:	201a      	movs	r0, #26
 800f362:	183b      	adds	r3, r7, r0
 800f364:	683a      	ldr	r2, [r7, #0]
 800f366:	8912      	ldrh	r2, [r2, #8]
 800f368:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	6959      	ldr	r1, [r3, #20]
 800f36e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f370:	b29c      	uxth	r4, r3
 800f372:	183b      	adds	r3, r7, r0
 800f374:	881a      	ldrh	r2, [r3, #0]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	0023      	movs	r3, r4
 800f37a:	f000 ff55 	bl	8010228 <USB_WritePMA>
 800f37e:	e2e8      	b.n	800f952 <USB_EPStartXfer+0x95e>
 800f380:	40009800 	.word	0x40009800
 800f384:	07ff8f8f 	.word	0x07ff8f8f
 800f388:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	785b      	ldrb	r3, [r3, #1]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d162      	bne.n	800f45a <USB_EPStartXfer+0x466>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	00db      	lsls	r3, r3, #3
 800f39a:	4ac7      	ldr	r2, [pc, #796]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f39c:	4694      	mov	ip, r2
 800f39e:	4463      	add	r3, ip
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	49c3      	ldr	r1, [pc, #780]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f3aa:	468c      	mov	ip, r1
 800f3ac:	4463      	add	r3, ip
 800f3ae:	0192      	lsls	r2, r2, #6
 800f3b0:	0992      	lsrs	r2, r2, #6
 800f3b2:	601a      	str	r2, [r3, #0]
 800f3b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f3b8:	d91e      	bls.n	800f3f8 <USB_EPStartXfer+0x404>
 800f3ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3bc:	095b      	lsrs	r3, r3, #5
 800f3be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3c2:	221f      	movs	r2, #31
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	d102      	bne.n	800f3ce <USB_EPStartXfer+0x3da>
 800f3c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	4ab8      	ldr	r2, [pc, #736]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f3d6:	4694      	mov	ip, r2
 800f3d8:	4463      	add	r3, ip
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3de:	069b      	lsls	r3, r3, #26
 800f3e0:	431a      	orrs	r2, r3
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	00db      	lsls	r3, r3, #3
 800f3e8:	49b3      	ldr	r1, [pc, #716]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f3ea:	468c      	mov	ip, r1
 800f3ec:	4463      	add	r3, ip
 800f3ee:	2180      	movs	r1, #128	@ 0x80
 800f3f0:	0609      	lsls	r1, r1, #24
 800f3f2:	430a      	orrs	r2, r1
 800f3f4:	601a      	str	r2, [r3, #0]
 800f3f6:	e055      	b.n	800f4a4 <USB_EPStartXfer+0x4b0>
 800f3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d111      	bne.n	800f422 <USB_EPStartXfer+0x42e>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	00db      	lsls	r3, r3, #3
 800f404:	4aac      	ldr	r2, [pc, #688]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f406:	4694      	mov	ip, r2
 800f408:	4463      	add	r3, ip
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	00db      	lsls	r3, r3, #3
 800f412:	49a9      	ldr	r1, [pc, #676]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f414:	468c      	mov	ip, r1
 800f416:	4463      	add	r3, ip
 800f418:	2180      	movs	r1, #128	@ 0x80
 800f41a:	0609      	lsls	r1, r1, #24
 800f41c:	430a      	orrs	r2, r1
 800f41e:	601a      	str	r2, [r3, #0]
 800f420:	e040      	b.n	800f4a4 <USB_EPStartXfer+0x4b0>
 800f422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f424:	085b      	lsrs	r3, r3, #1
 800f426:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f42a:	2201      	movs	r2, #1
 800f42c:	4013      	ands	r3, r2
 800f42e:	d002      	beq.n	800f436 <USB_EPStartXfer+0x442>
 800f430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f432:	3301      	adds	r3, #1
 800f434:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	00db      	lsls	r3, r3, #3
 800f43c:	4a9e      	ldr	r2, [pc, #632]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f43e:	4694      	mov	ip, r2
 800f440:	4463      	add	r3, ip
 800f442:	6819      	ldr	r1, [r3, #0]
 800f444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f446:	069a      	lsls	r2, r3, #26
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	00db      	lsls	r3, r3, #3
 800f44e:	489a      	ldr	r0, [pc, #616]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f450:	4684      	mov	ip, r0
 800f452:	4463      	add	r3, ip
 800f454:	430a      	orrs	r2, r1
 800f456:	601a      	str	r2, [r3, #0]
 800f458:	e024      	b.n	800f4a4 <USB_EPStartXfer+0x4b0>
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	785b      	ldrb	r3, [r3, #1]
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d120      	bne.n	800f4a4 <USB_EPStartXfer+0x4b0>
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	4a93      	ldr	r2, [pc, #588]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f46a:	4694      	mov	ip, r2
 800f46c:	4463      	add	r3, ip
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	00db      	lsls	r3, r3, #3
 800f476:	4990      	ldr	r1, [pc, #576]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f478:	468c      	mov	ip, r1
 800f47a:	4463      	add	r3, ip
 800f47c:	0412      	lsls	r2, r2, #16
 800f47e:	0c12      	lsrs	r2, r2, #16
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	00db      	lsls	r3, r3, #3
 800f488:	4a8b      	ldr	r2, [pc, #556]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f48a:	4694      	mov	ip, r2
 800f48c:	4463      	add	r3, ip
 800f48e:	6819      	ldr	r1, [r3, #0]
 800f490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f492:	041a      	lsls	r2, r3, #16
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	00db      	lsls	r3, r3, #3
 800f49a:	4887      	ldr	r0, [pc, #540]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f49c:	4684      	mov	ip, r0
 800f49e:	4463      	add	r3, ip
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f4a4:	201a      	movs	r0, #26
 800f4a6:	183b      	adds	r3, r7, r0
 800f4a8:	683a      	ldr	r2, [r7, #0]
 800f4aa:	8912      	ldrh	r2, [r2, #8]
 800f4ac:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	6959      	ldr	r1, [r3, #20]
 800f4b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4b4:	b29c      	uxth	r4, r3
 800f4b6:	183b      	adds	r3, r7, r0
 800f4b8:	881a      	ldrh	r2, [r3, #0]
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	0023      	movs	r3, r4
 800f4be:	f000 feb3 	bl	8010228 <USB_WritePMA>
            ep->xfer_buff += len;
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	695a      	ldr	r2, [r3, #20]
 800f4c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4c8:	18d2      	adds	r2, r2, r3
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	6a1a      	ldr	r2, [r3, #32]
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	691b      	ldr	r3, [r3, #16]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d906      	bls.n	800f4e8 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	6a1a      	ldr	r2, [r3, #32]
 800f4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4e0:	1ad2      	subs	r2, r2, r3
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	621a      	str	r2, [r3, #32]
 800f4e6:	e005      	b.n	800f4f4 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	6a1b      	ldr	r3, [r3, #32]
 800f4ec:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	785b      	ldrb	r3, [r3, #1]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d162      	bne.n	800f5c2 <USB_EPStartXfer+0x5ce>
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	4a6d      	ldr	r2, [pc, #436]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f504:	4694      	mov	ip, r2
 800f506:	4463      	add	r3, ip
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	00db      	lsls	r3, r3, #3
 800f510:	4969      	ldr	r1, [pc, #420]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f512:	468c      	mov	ip, r1
 800f514:	4463      	add	r3, ip
 800f516:	0192      	lsls	r2, r2, #6
 800f518:	0992      	lsrs	r2, r2, #6
 800f51a:	605a      	str	r2, [r3, #4]
 800f51c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f51e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f520:	d91e      	bls.n	800f560 <USB_EPStartXfer+0x56c>
 800f522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f524:	095b      	lsrs	r3, r3, #5
 800f526:	647b      	str	r3, [r7, #68]	@ 0x44
 800f528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f52a:	221f      	movs	r2, #31
 800f52c:	4013      	ands	r3, r2
 800f52e:	d102      	bne.n	800f536 <USB_EPStartXfer+0x542>
 800f530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f532:	3b01      	subs	r3, #1
 800f534:	647b      	str	r3, [r7, #68]	@ 0x44
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	00db      	lsls	r3, r3, #3
 800f53c:	4a5e      	ldr	r2, [pc, #376]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f53e:	4694      	mov	ip, r2
 800f540:	4463      	add	r3, ip
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f546:	069b      	lsls	r3, r3, #26
 800f548:	431a      	orrs	r2, r3
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	00db      	lsls	r3, r3, #3
 800f550:	4959      	ldr	r1, [pc, #356]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f552:	468c      	mov	ip, r1
 800f554:	4463      	add	r3, ip
 800f556:	2180      	movs	r1, #128	@ 0x80
 800f558:	0609      	lsls	r1, r1, #24
 800f55a:	430a      	orrs	r2, r1
 800f55c:	605a      	str	r2, [r3, #4]
 800f55e:	e055      	b.n	800f60c <USB_EPStartXfer+0x618>
 800f560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f562:	2b00      	cmp	r3, #0
 800f564:	d111      	bne.n	800f58a <USB_EPStartXfer+0x596>
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	4a52      	ldr	r2, [pc, #328]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f56e:	4694      	mov	ip, r2
 800f570:	4463      	add	r3, ip
 800f572:	685a      	ldr	r2, [r3, #4]
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	00db      	lsls	r3, r3, #3
 800f57a:	494f      	ldr	r1, [pc, #316]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f57c:	468c      	mov	ip, r1
 800f57e:	4463      	add	r3, ip
 800f580:	2180      	movs	r1, #128	@ 0x80
 800f582:	0609      	lsls	r1, r1, #24
 800f584:	430a      	orrs	r2, r1
 800f586:	605a      	str	r2, [r3, #4]
 800f588:	e040      	b.n	800f60c <USB_EPStartXfer+0x618>
 800f58a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f58c:	085b      	lsrs	r3, r3, #1
 800f58e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f592:	2201      	movs	r2, #1
 800f594:	4013      	ands	r3, r2
 800f596:	d002      	beq.n	800f59e <USB_EPStartXfer+0x5aa>
 800f598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f59a:	3301      	adds	r3, #1
 800f59c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	4a44      	ldr	r2, [pc, #272]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f5a6:	4694      	mov	ip, r2
 800f5a8:	4463      	add	r3, ip
 800f5aa:	6859      	ldr	r1, [r3, #4]
 800f5ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5ae:	069a      	lsls	r2, r3, #26
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	4840      	ldr	r0, [pc, #256]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f5b8:	4684      	mov	ip, r0
 800f5ba:	4463      	add	r3, ip
 800f5bc:	430a      	orrs	r2, r1
 800f5be:	605a      	str	r2, [r3, #4]
 800f5c0:	e024      	b.n	800f60c <USB_EPStartXfer+0x618>
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	785b      	ldrb	r3, [r3, #1]
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d120      	bne.n	800f60c <USB_EPStartXfer+0x618>
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	00db      	lsls	r3, r3, #3
 800f5d0:	4a39      	ldr	r2, [pc, #228]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f5d2:	4694      	mov	ip, r2
 800f5d4:	4463      	add	r3, ip
 800f5d6:	685a      	ldr	r2, [r3, #4]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	00db      	lsls	r3, r3, #3
 800f5de:	4936      	ldr	r1, [pc, #216]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f5e0:	468c      	mov	ip, r1
 800f5e2:	4463      	add	r3, ip
 800f5e4:	0412      	lsls	r2, r2, #16
 800f5e6:	0c12      	lsrs	r2, r2, #16
 800f5e8:	605a      	str	r2, [r3, #4]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	4a31      	ldr	r2, [pc, #196]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f5f2:	4694      	mov	ip, r2
 800f5f4:	4463      	add	r3, ip
 800f5f6:	6859      	ldr	r1, [r3, #4]
 800f5f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5fa:	041a      	lsls	r2, r3, #16
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	00db      	lsls	r3, r3, #3
 800f602:	482d      	ldr	r0, [pc, #180]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f604:	4684      	mov	ip, r0
 800f606:	4463      	add	r3, ip
 800f608:	430a      	orrs	r2, r1
 800f60a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800f60c:	201a      	movs	r0, #26
 800f60e:	183b      	adds	r3, r7, r0
 800f610:	683a      	ldr	r2, [r7, #0]
 800f612:	8952      	ldrh	r2, [r2, #10]
 800f614:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	6959      	ldr	r1, [r3, #20]
 800f61a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f61c:	b29c      	uxth	r4, r3
 800f61e:	183b      	adds	r3, r7, r0
 800f620:	881a      	ldrh	r2, [r3, #0]
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	0023      	movs	r3, r4
 800f626:	f000 fdff 	bl	8010228 <USB_WritePMA>
 800f62a:	e192      	b.n	800f952 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	6a1b      	ldr	r3, [r3, #32]
 800f630:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	18d3      	adds	r3, r2, r3
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4a1f      	ldr	r2, [pc, #124]	@ (800f6bc <USB_EPStartXfer+0x6c8>)
 800f640:	4013      	ands	r3, r2
 800f642:	617b      	str	r3, [r7, #20]
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	18d3      	adds	r3, r2, r3
 800f64e:	697a      	ldr	r2, [r7, #20]
 800f650:	491b      	ldr	r1, [pc, #108]	@ (800f6c0 <USB_EPStartXfer+0x6cc>)
 800f652:	430a      	orrs	r2, r1
 800f654:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	00db      	lsls	r3, r3, #3
 800f65c:	4a16      	ldr	r2, [pc, #88]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f65e:	4694      	mov	ip, r2
 800f660:	4463      	add	r3, ip
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	00db      	lsls	r3, r3, #3
 800f66a:	4913      	ldr	r1, [pc, #76]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f66c:	468c      	mov	ip, r1
 800f66e:	4463      	add	r3, ip
 800f670:	0412      	lsls	r2, r2, #16
 800f672:	0c12      	lsrs	r2, r2, #16
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	00db      	lsls	r3, r3, #3
 800f67c:	4a0e      	ldr	r2, [pc, #56]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f67e:	4694      	mov	ip, r2
 800f680:	4463      	add	r3, ip
 800f682:	6819      	ldr	r1, [r3, #0]
 800f684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f686:	041a      	lsls	r2, r3, #16
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	00db      	lsls	r3, r3, #3
 800f68e:	480a      	ldr	r0, [pc, #40]	@ (800f6b8 <USB_EPStartXfer+0x6c4>)
 800f690:	4684      	mov	ip, r0
 800f692:	4463      	add	r3, ip
 800f694:	430a      	orrs	r2, r1
 800f696:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f698:	201a      	movs	r0, #26
 800f69a:	183b      	adds	r3, r7, r0
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	8912      	ldrh	r2, [r2, #8]
 800f6a0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	6959      	ldr	r1, [r3, #20]
 800f6a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6a8:	b29c      	uxth	r4, r3
 800f6aa:	183b      	adds	r3, r7, r0
 800f6ac:	881a      	ldrh	r2, [r3, #0]
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	0023      	movs	r3, r4
 800f6b2:	f000 fdb9 	bl	8010228 <USB_WritePMA>
 800f6b6:	e14c      	b.n	800f952 <USB_EPStartXfer+0x95e>
 800f6b8:	40009800 	.word	0x40009800
 800f6bc:	07ff8e8f 	.word	0x07ff8e8f
 800f6c0:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	6a1a      	ldr	r2, [r3, #32]
 800f6c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6ca:	1ad2      	subs	r2, r2, r3
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	18d3      	adds	r3, r2, r3
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2240      	movs	r2, #64	@ 0x40
 800f6de:	4013      	ands	r3, r2
 800f6e0:	d100      	bne.n	800f6e4 <USB_EPStartXfer+0x6f0>
 800f6e2:	e09b      	b.n	800f81c <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	785b      	ldrb	r3, [r3, #1]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d162      	bne.n	800f7b2 <USB_EPStartXfer+0x7be>
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	00db      	lsls	r3, r3, #3
 800f6f2:	4ad6      	ldr	r2, [pc, #856]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f6f4:	4694      	mov	ip, r2
 800f6f6:	4463      	add	r3, ip
 800f6f8:	685a      	ldr	r2, [r3, #4]
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	00db      	lsls	r3, r3, #3
 800f700:	49d2      	ldr	r1, [pc, #840]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f702:	468c      	mov	ip, r1
 800f704:	4463      	add	r3, ip
 800f706:	0192      	lsls	r2, r2, #6
 800f708:	0992      	lsrs	r2, r2, #6
 800f70a:	605a      	str	r2, [r3, #4]
 800f70c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f70e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f710:	d91e      	bls.n	800f750 <USB_EPStartXfer+0x75c>
 800f712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f714:	095b      	lsrs	r3, r3, #5
 800f716:	643b      	str	r3, [r7, #64]	@ 0x40
 800f718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f71a:	221f      	movs	r2, #31
 800f71c:	4013      	ands	r3, r2
 800f71e:	d102      	bne.n	800f726 <USB_EPStartXfer+0x732>
 800f720:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f722:	3b01      	subs	r3, #1
 800f724:	643b      	str	r3, [r7, #64]	@ 0x40
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	00db      	lsls	r3, r3, #3
 800f72c:	4ac7      	ldr	r2, [pc, #796]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f72e:	4694      	mov	ip, r2
 800f730:	4463      	add	r3, ip
 800f732:	685a      	ldr	r2, [r3, #4]
 800f734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f736:	069b      	lsls	r3, r3, #26
 800f738:	431a      	orrs	r2, r3
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	00db      	lsls	r3, r3, #3
 800f740:	49c2      	ldr	r1, [pc, #776]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f742:	468c      	mov	ip, r1
 800f744:	4463      	add	r3, ip
 800f746:	2180      	movs	r1, #128	@ 0x80
 800f748:	0609      	lsls	r1, r1, #24
 800f74a:	430a      	orrs	r2, r1
 800f74c:	605a      	str	r2, [r3, #4]
 800f74e:	e055      	b.n	800f7fc <USB_EPStartXfer+0x808>
 800f750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f752:	2b00      	cmp	r3, #0
 800f754:	d111      	bne.n	800f77a <USB_EPStartXfer+0x786>
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	00db      	lsls	r3, r3, #3
 800f75c:	4abb      	ldr	r2, [pc, #748]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f75e:	4694      	mov	ip, r2
 800f760:	4463      	add	r3, ip
 800f762:	685a      	ldr	r2, [r3, #4]
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	00db      	lsls	r3, r3, #3
 800f76a:	49b8      	ldr	r1, [pc, #736]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f76c:	468c      	mov	ip, r1
 800f76e:	4463      	add	r3, ip
 800f770:	2180      	movs	r1, #128	@ 0x80
 800f772:	0609      	lsls	r1, r1, #24
 800f774:	430a      	orrs	r2, r1
 800f776:	605a      	str	r2, [r3, #4]
 800f778:	e040      	b.n	800f7fc <USB_EPStartXfer+0x808>
 800f77a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f77c:	085b      	lsrs	r3, r3, #1
 800f77e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f782:	2201      	movs	r2, #1
 800f784:	4013      	ands	r3, r2
 800f786:	d002      	beq.n	800f78e <USB_EPStartXfer+0x79a>
 800f788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f78a:	3301      	adds	r3, #1
 800f78c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	00db      	lsls	r3, r3, #3
 800f794:	4aad      	ldr	r2, [pc, #692]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f796:	4694      	mov	ip, r2
 800f798:	4463      	add	r3, ip
 800f79a:	6859      	ldr	r1, [r3, #4]
 800f79c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f79e:	069a      	lsls	r2, r3, #26
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	00db      	lsls	r3, r3, #3
 800f7a6:	48a9      	ldr	r0, [pc, #676]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f7a8:	4684      	mov	ip, r0
 800f7aa:	4463      	add	r3, ip
 800f7ac:	430a      	orrs	r2, r1
 800f7ae:	605a      	str	r2, [r3, #4]
 800f7b0:	e024      	b.n	800f7fc <USB_EPStartXfer+0x808>
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	785b      	ldrb	r3, [r3, #1]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d120      	bne.n	800f7fc <USB_EPStartXfer+0x808>
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	00db      	lsls	r3, r3, #3
 800f7c0:	4aa2      	ldr	r2, [pc, #648]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f7c2:	4694      	mov	ip, r2
 800f7c4:	4463      	add	r3, ip
 800f7c6:	685a      	ldr	r2, [r3, #4]
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	00db      	lsls	r3, r3, #3
 800f7ce:	499f      	ldr	r1, [pc, #636]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f7d0:	468c      	mov	ip, r1
 800f7d2:	4463      	add	r3, ip
 800f7d4:	0412      	lsls	r2, r2, #16
 800f7d6:	0c12      	lsrs	r2, r2, #16
 800f7d8:	605a      	str	r2, [r3, #4]
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	00db      	lsls	r3, r3, #3
 800f7e0:	4a9a      	ldr	r2, [pc, #616]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f7e2:	4694      	mov	ip, r2
 800f7e4:	4463      	add	r3, ip
 800f7e6:	6859      	ldr	r1, [r3, #4]
 800f7e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7ea:	041a      	lsls	r2, r3, #16
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	00db      	lsls	r3, r3, #3
 800f7f2:	4896      	ldr	r0, [pc, #600]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f7f4:	4684      	mov	ip, r0
 800f7f6:	4463      	add	r3, ip
 800f7f8:	430a      	orrs	r2, r1
 800f7fa:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800f7fc:	201a      	movs	r0, #26
 800f7fe:	183b      	adds	r3, r7, r0
 800f800:	683a      	ldr	r2, [r7, #0]
 800f802:	8952      	ldrh	r2, [r2, #10]
 800f804:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	6959      	ldr	r1, [r3, #20]
 800f80a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f80c:	b29c      	uxth	r4, r3
 800f80e:	183b      	adds	r3, r7, r0
 800f810:	881a      	ldrh	r2, [r3, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	0023      	movs	r3, r4
 800f816:	f000 fd07 	bl	8010228 <USB_WritePMA>
 800f81a:	e09a      	b.n	800f952 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	785b      	ldrb	r3, [r3, #1]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d162      	bne.n	800f8ea <USB_EPStartXfer+0x8f6>
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	00db      	lsls	r3, r3, #3
 800f82a:	4a88      	ldr	r2, [pc, #544]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f82c:	4694      	mov	ip, r2
 800f82e:	4463      	add	r3, ip
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	00db      	lsls	r3, r3, #3
 800f838:	4984      	ldr	r1, [pc, #528]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f83a:	468c      	mov	ip, r1
 800f83c:	4463      	add	r3, ip
 800f83e:	0192      	lsls	r2, r2, #6
 800f840:	0992      	lsrs	r2, r2, #6
 800f842:	601a      	str	r2, [r3, #0]
 800f844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f846:	2b3e      	cmp	r3, #62	@ 0x3e
 800f848:	d91e      	bls.n	800f888 <USB_EPStartXfer+0x894>
 800f84a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f84c:	095b      	lsrs	r3, r3, #5
 800f84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f852:	221f      	movs	r2, #31
 800f854:	4013      	ands	r3, r2
 800f856:	d102      	bne.n	800f85e <USB_EPStartXfer+0x86a>
 800f858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f85a:	3b01      	subs	r3, #1
 800f85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	00db      	lsls	r3, r3, #3
 800f864:	4a79      	ldr	r2, [pc, #484]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f866:	4694      	mov	ip, r2
 800f868:	4463      	add	r3, ip
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f86e:	069b      	lsls	r3, r3, #26
 800f870:	431a      	orrs	r2, r3
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	00db      	lsls	r3, r3, #3
 800f878:	4974      	ldr	r1, [pc, #464]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f87a:	468c      	mov	ip, r1
 800f87c:	4463      	add	r3, ip
 800f87e:	2180      	movs	r1, #128	@ 0x80
 800f880:	0609      	lsls	r1, r1, #24
 800f882:	430a      	orrs	r2, r1
 800f884:	601a      	str	r2, [r3, #0]
 800f886:	e055      	b.n	800f934 <USB_EPStartXfer+0x940>
 800f888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d111      	bne.n	800f8b2 <USB_EPStartXfer+0x8be>
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	00db      	lsls	r3, r3, #3
 800f894:	4a6d      	ldr	r2, [pc, #436]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f896:	4694      	mov	ip, r2
 800f898:	4463      	add	r3, ip
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	00db      	lsls	r3, r3, #3
 800f8a2:	496a      	ldr	r1, [pc, #424]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f8a4:	468c      	mov	ip, r1
 800f8a6:	4463      	add	r3, ip
 800f8a8:	2180      	movs	r1, #128	@ 0x80
 800f8aa:	0609      	lsls	r1, r1, #24
 800f8ac:	430a      	orrs	r2, r1
 800f8ae:	601a      	str	r2, [r3, #0]
 800f8b0:	e040      	b.n	800f934 <USB_EPStartXfer+0x940>
 800f8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8b4:	085b      	lsrs	r3, r3, #1
 800f8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	4013      	ands	r3, r2
 800f8be:	d002      	beq.n	800f8c6 <USB_EPStartXfer+0x8d2>
 800f8c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	00db      	lsls	r3, r3, #3
 800f8cc:	4a5f      	ldr	r2, [pc, #380]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f8ce:	4694      	mov	ip, r2
 800f8d0:	4463      	add	r3, ip
 800f8d2:	6819      	ldr	r1, [r3, #0]
 800f8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8d6:	069a      	lsls	r2, r3, #26
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	00db      	lsls	r3, r3, #3
 800f8de:	485b      	ldr	r0, [pc, #364]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f8e0:	4684      	mov	ip, r0
 800f8e2:	4463      	add	r3, ip
 800f8e4:	430a      	orrs	r2, r1
 800f8e6:	601a      	str	r2, [r3, #0]
 800f8e8:	e024      	b.n	800f934 <USB_EPStartXfer+0x940>
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	785b      	ldrb	r3, [r3, #1]
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d120      	bne.n	800f934 <USB_EPStartXfer+0x940>
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	00db      	lsls	r3, r3, #3
 800f8f8:	4a54      	ldr	r2, [pc, #336]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f8fa:	4694      	mov	ip, r2
 800f8fc:	4463      	add	r3, ip
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	00db      	lsls	r3, r3, #3
 800f906:	4951      	ldr	r1, [pc, #324]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f908:	468c      	mov	ip, r1
 800f90a:	4463      	add	r3, ip
 800f90c:	0412      	lsls	r2, r2, #16
 800f90e:	0c12      	lsrs	r2, r2, #16
 800f910:	601a      	str	r2, [r3, #0]
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	00db      	lsls	r3, r3, #3
 800f918:	4a4c      	ldr	r2, [pc, #304]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f91a:	4694      	mov	ip, r2
 800f91c:	4463      	add	r3, ip
 800f91e:	6819      	ldr	r1, [r3, #0]
 800f920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f922:	041a      	lsls	r2, r3, #16
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	00db      	lsls	r3, r3, #3
 800f92a:	4848      	ldr	r0, [pc, #288]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f92c:	4684      	mov	ip, r0
 800f92e:	4463      	add	r3, ip
 800f930:	430a      	orrs	r2, r1
 800f932:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f934:	201a      	movs	r0, #26
 800f936:	183b      	adds	r3, r7, r0
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	8912      	ldrh	r2, [r2, #8]
 800f93c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	6959      	ldr	r1, [r3, #20]
 800f942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f944:	b29c      	uxth	r4, r3
 800f946:	183b      	adds	r3, r7, r0
 800f948:	881a      	ldrh	r2, [r3, #0]
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	0023      	movs	r3, r4
 800f94e:	f000 fc6b 	bl	8010228 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	18d3      	adds	r3, r2, r3
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4a3c      	ldr	r2, [pc, #240]	@ (800fa50 <USB_EPStartXfer+0xa5c>)
 800f960:	4013      	ands	r3, r2
 800f962:	60fb      	str	r3, [r7, #12]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2210      	movs	r2, #16
 800f968:	4053      	eors	r3, r2
 800f96a:	60fb      	str	r3, [r7, #12]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2220      	movs	r2, #32
 800f970:	4053      	eors	r3, r2
 800f972:	60fb      	str	r3, [r7, #12]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	18d3      	adds	r3, r2, r3
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	4934      	ldr	r1, [pc, #208]	@ (800fa54 <USB_EPStartXfer+0xa60>)
 800f982:	430a      	orrs	r2, r1
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	e340      	b.n	801000a <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	7b1b      	ldrb	r3, [r3, #12]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d000      	beq.n	800f992 <USB_EPStartXfer+0x99e>
 800f990:	e07e      	b.n	800fa90 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	699a      	ldr	r2, [r3, #24]
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d909      	bls.n	800f9b2 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	699a      	ldr	r2, [r3, #24]
 800f9a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9aa:	1ad2      	subs	r2, r2, r3
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	619a      	str	r2, [r3, #24]
 800f9b0:	e005      	b.n	800f9be <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	699b      	ldr	r3, [r3, #24]
 800f9b6:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	4a21      	ldr	r2, [pc, #132]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f9c6:	4694      	mov	ip, r2
 800f9c8:	4463      	add	r3, ip
 800f9ca:	685a      	ldr	r2, [r3, #4]
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	00db      	lsls	r3, r3, #3
 800f9d2:	491e      	ldr	r1, [pc, #120]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800f9d4:	468c      	mov	ip, r1
 800f9d6:	4463      	add	r3, ip
 800f9d8:	0192      	lsls	r2, r2, #6
 800f9da:	0992      	lsrs	r2, r2, #6
 800f9dc:	605a      	str	r2, [r3, #4]
 800f9de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f9e2:	d91e      	bls.n	800fa22 <USB_EPStartXfer+0xa2e>
 800f9e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9e6:	095b      	lsrs	r3, r3, #5
 800f9e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9ec:	221f      	movs	r2, #31
 800f9ee:	4013      	ands	r3, r2
 800f9f0:	d102      	bne.n	800f9f8 <USB_EPStartXfer+0xa04>
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f4:	3b01      	subs	r3, #1
 800f9f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	00db      	lsls	r3, r3, #3
 800f9fe:	4a13      	ldr	r2, [pc, #76]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800fa00:	4694      	mov	ip, r2
 800fa02:	4463      	add	r3, ip
 800fa04:	685a      	ldr	r2, [r3, #4]
 800fa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa08:	069b      	lsls	r3, r3, #26
 800fa0a:	431a      	orrs	r2, r3
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	00db      	lsls	r3, r3, #3
 800fa12:	490e      	ldr	r1, [pc, #56]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800fa14:	468c      	mov	ip, r1
 800fa16:	4463      	add	r3, ip
 800fa18:	2180      	movs	r1, #128	@ 0x80
 800fa1a:	0609      	lsls	r1, r1, #24
 800fa1c:	430a      	orrs	r2, r1
 800fa1e:	605a      	str	r2, [r3, #4]
 800fa20:	e2d7      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
 800fa22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d117      	bne.n	800fa58 <USB_EPStartXfer+0xa64>
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	00db      	lsls	r3, r3, #3
 800fa2e:	4a07      	ldr	r2, [pc, #28]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800fa30:	4694      	mov	ip, r2
 800fa32:	4463      	add	r3, ip
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	00db      	lsls	r3, r3, #3
 800fa3c:	4903      	ldr	r1, [pc, #12]	@ (800fa4c <USB_EPStartXfer+0xa58>)
 800fa3e:	468c      	mov	ip, r1
 800fa40:	4463      	add	r3, ip
 800fa42:	2180      	movs	r1, #128	@ 0x80
 800fa44:	0609      	lsls	r1, r1, #24
 800fa46:	430a      	orrs	r2, r1
 800fa48:	605a      	str	r2, [r3, #4]
 800fa4a:	e2c2      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
 800fa4c:	40009800 	.word	0x40009800
 800fa50:	07ff8fbf 	.word	0x07ff8fbf
 800fa54:	00008080 	.word	0x00008080
 800fa58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa5a:	085b      	lsrs	r3, r3, #1
 800fa5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa60:	2201      	movs	r2, #1
 800fa62:	4013      	ands	r3, r2
 800fa64:	d002      	beq.n	800fa6c <USB_EPStartXfer+0xa78>
 800fa66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa68:	3301      	adds	r3, #1
 800fa6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	4ac4      	ldr	r2, [pc, #784]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fa74:	4694      	mov	ip, r2
 800fa76:	4463      	add	r3, ip
 800fa78:	6859      	ldr	r1, [r3, #4]
 800fa7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7c:	069a      	lsls	r2, r3, #26
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	00db      	lsls	r3, r3, #3
 800fa84:	48bf      	ldr	r0, [pc, #764]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fa86:	4684      	mov	ip, r0
 800fa88:	4463      	add	r3, ip
 800fa8a:	430a      	orrs	r2, r1
 800fa8c:	605a      	str	r2, [r3, #4]
 800fa8e:	e2a0      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	78db      	ldrb	r3, [r3, #3]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d000      	beq.n	800fa9a <USB_EPStartXfer+0xaa6>
 800fa98:	e15f      	b.n	800fd5a <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	785b      	ldrb	r3, [r3, #1]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d168      	bne.n	800fb74 <USB_EPStartXfer+0xb80>
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	00db      	lsls	r3, r3, #3
 800faa8:	4ab6      	ldr	r2, [pc, #728]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800faaa:	4694      	mov	ip, r2
 800faac:	4463      	add	r3, ip
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	00db      	lsls	r3, r3, #3
 800fab6:	49b3      	ldr	r1, [pc, #716]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fab8:	468c      	mov	ip, r1
 800faba:	4463      	add	r3, ip
 800fabc:	0192      	lsls	r2, r2, #6
 800fabe:	0992      	lsrs	r2, r2, #6
 800fac0:	601a      	str	r2, [r3, #0]
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	691b      	ldr	r3, [r3, #16]
 800fac6:	2b3e      	cmp	r3, #62	@ 0x3e
 800fac8:	d920      	bls.n	800fb0c <USB_EPStartXfer+0xb18>
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	691b      	ldr	r3, [r3, #16]
 800face:	095b      	lsrs	r3, r3, #5
 800fad0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	221f      	movs	r2, #31
 800fad8:	4013      	ands	r3, r2
 800fada:	d102      	bne.n	800fae2 <USB_EPStartXfer+0xaee>
 800fadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fade:	3b01      	subs	r3, #1
 800fae0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	00db      	lsls	r3, r3, #3
 800fae8:	4aa6      	ldr	r2, [pc, #664]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800faea:	4694      	mov	ip, r2
 800faec:	4463      	add	r3, ip
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faf2:	069b      	lsls	r3, r3, #26
 800faf4:	431a      	orrs	r2, r3
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	00db      	lsls	r3, r3, #3
 800fafc:	49a1      	ldr	r1, [pc, #644]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fafe:	468c      	mov	ip, r1
 800fb00:	4463      	add	r3, ip
 800fb02:	2180      	movs	r1, #128	@ 0x80
 800fb04:	0609      	lsls	r1, r1, #24
 800fb06:	430a      	orrs	r2, r1
 800fb08:	601a      	str	r2, [r3, #0]
 800fb0a:	e059      	b.n	800fbc0 <USB_EPStartXfer+0xbcc>
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	691b      	ldr	r3, [r3, #16]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d111      	bne.n	800fb38 <USB_EPStartXfer+0xb44>
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	00db      	lsls	r3, r3, #3
 800fb1a:	4a9a      	ldr	r2, [pc, #616]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fb1c:	4694      	mov	ip, r2
 800fb1e:	4463      	add	r3, ip
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	00db      	lsls	r3, r3, #3
 800fb28:	4996      	ldr	r1, [pc, #600]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fb2a:	468c      	mov	ip, r1
 800fb2c:	4463      	add	r3, ip
 800fb2e:	2180      	movs	r1, #128	@ 0x80
 800fb30:	0609      	lsls	r1, r1, #24
 800fb32:	430a      	orrs	r2, r1
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	e043      	b.n	800fbc0 <USB_EPStartXfer+0xbcc>
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	691b      	ldr	r3, [r3, #16]
 800fb3c:	085b      	lsrs	r3, r3, #1
 800fb3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	2201      	movs	r2, #1
 800fb46:	4013      	ands	r3, r2
 800fb48:	d002      	beq.n	800fb50 <USB_EPStartXfer+0xb5c>
 800fb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	00db      	lsls	r3, r3, #3
 800fb56:	4a8b      	ldr	r2, [pc, #556]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fb58:	4694      	mov	ip, r2
 800fb5a:	4463      	add	r3, ip
 800fb5c:	6819      	ldr	r1, [r3, #0]
 800fb5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb60:	069a      	lsls	r2, r3, #26
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	00db      	lsls	r3, r3, #3
 800fb68:	4886      	ldr	r0, [pc, #536]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fb6a:	4684      	mov	ip, r0
 800fb6c:	4463      	add	r3, ip
 800fb6e:	430a      	orrs	r2, r1
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	e025      	b.n	800fbc0 <USB_EPStartXfer+0xbcc>
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	785b      	ldrb	r3, [r3, #1]
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d121      	bne.n	800fbc0 <USB_EPStartXfer+0xbcc>
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	00db      	lsls	r3, r3, #3
 800fb82:	4a80      	ldr	r2, [pc, #512]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fb84:	4694      	mov	ip, r2
 800fb86:	4463      	add	r3, ip
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	497c      	ldr	r1, [pc, #496]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fb92:	468c      	mov	ip, r1
 800fb94:	4463      	add	r3, ip
 800fb96:	0412      	lsls	r2, r2, #16
 800fb98:	0c12      	lsrs	r2, r2, #16
 800fb9a:	601a      	str	r2, [r3, #0]
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	00db      	lsls	r3, r3, #3
 800fba2:	4a78      	ldr	r2, [pc, #480]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fba4:	4694      	mov	ip, r2
 800fba6:	4463      	add	r3, ip
 800fba8:	6819      	ldr	r1, [r3, #0]
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	691b      	ldr	r3, [r3, #16]
 800fbae:	041a      	lsls	r2, r3, #16
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	00db      	lsls	r3, r3, #3
 800fbb6:	4873      	ldr	r0, [pc, #460]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fbb8:	4684      	mov	ip, r0
 800fbba:	4463      	add	r3, ip
 800fbbc:	430a      	orrs	r2, r1
 800fbbe:	601a      	str	r2, [r3, #0]
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	785b      	ldrb	r3, [r3, #1]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d168      	bne.n	800fc9a <USB_EPStartXfer+0xca6>
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	00db      	lsls	r3, r3, #3
 800fbce:	4a6d      	ldr	r2, [pc, #436]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fbd0:	4694      	mov	ip, r2
 800fbd2:	4463      	add	r3, ip
 800fbd4:	685a      	ldr	r2, [r3, #4]
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	00db      	lsls	r3, r3, #3
 800fbdc:	4969      	ldr	r1, [pc, #420]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fbde:	468c      	mov	ip, r1
 800fbe0:	4463      	add	r3, ip
 800fbe2:	0192      	lsls	r2, r2, #6
 800fbe4:	0992      	lsrs	r2, r2, #6
 800fbe6:	605a      	str	r2, [r3, #4]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	2b3e      	cmp	r3, #62	@ 0x3e
 800fbee:	d920      	bls.n	800fc32 <USB_EPStartXfer+0xc3e>
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	691b      	ldr	r3, [r3, #16]
 800fbf4:	095b      	lsrs	r3, r3, #5
 800fbf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	691b      	ldr	r3, [r3, #16]
 800fbfc:	221f      	movs	r2, #31
 800fbfe:	4013      	ands	r3, r2
 800fc00:	d102      	bne.n	800fc08 <USB_EPStartXfer+0xc14>
 800fc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc04:	3b01      	subs	r3, #1
 800fc06:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	00db      	lsls	r3, r3, #3
 800fc0e:	4a5d      	ldr	r2, [pc, #372]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fc10:	4694      	mov	ip, r2
 800fc12:	4463      	add	r3, ip
 800fc14:	685a      	ldr	r2, [r3, #4]
 800fc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc18:	069b      	lsls	r3, r3, #26
 800fc1a:	431a      	orrs	r2, r3
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	00db      	lsls	r3, r3, #3
 800fc22:	4958      	ldr	r1, [pc, #352]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fc24:	468c      	mov	ip, r1
 800fc26:	4463      	add	r3, ip
 800fc28:	2180      	movs	r1, #128	@ 0x80
 800fc2a:	0609      	lsls	r1, r1, #24
 800fc2c:	430a      	orrs	r2, r1
 800fc2e:	605a      	str	r2, [r3, #4]
 800fc30:	e059      	b.n	800fce6 <USB_EPStartXfer+0xcf2>
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	691b      	ldr	r3, [r3, #16]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d111      	bne.n	800fc5e <USB_EPStartXfer+0xc6a>
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	00db      	lsls	r3, r3, #3
 800fc40:	4a50      	ldr	r2, [pc, #320]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fc42:	4694      	mov	ip, r2
 800fc44:	4463      	add	r3, ip
 800fc46:	685a      	ldr	r2, [r3, #4]
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	00db      	lsls	r3, r3, #3
 800fc4e:	494d      	ldr	r1, [pc, #308]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fc50:	468c      	mov	ip, r1
 800fc52:	4463      	add	r3, ip
 800fc54:	2180      	movs	r1, #128	@ 0x80
 800fc56:	0609      	lsls	r1, r1, #24
 800fc58:	430a      	orrs	r2, r1
 800fc5a:	605a      	str	r2, [r3, #4]
 800fc5c:	e043      	b.n	800fce6 <USB_EPStartXfer+0xcf2>
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	691b      	ldr	r3, [r3, #16]
 800fc62:	085b      	lsrs	r3, r3, #1
 800fc64:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	d002      	beq.n	800fc76 <USB_EPStartXfer+0xc82>
 800fc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc72:	3301      	adds	r3, #1
 800fc74:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	00db      	lsls	r3, r3, #3
 800fc7c:	4a41      	ldr	r2, [pc, #260]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fc7e:	4694      	mov	ip, r2
 800fc80:	4463      	add	r3, ip
 800fc82:	6859      	ldr	r1, [r3, #4]
 800fc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc86:	069a      	lsls	r2, r3, #26
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	00db      	lsls	r3, r3, #3
 800fc8e:	483d      	ldr	r0, [pc, #244]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fc90:	4684      	mov	ip, r0
 800fc92:	4463      	add	r3, ip
 800fc94:	430a      	orrs	r2, r1
 800fc96:	605a      	str	r2, [r3, #4]
 800fc98:	e025      	b.n	800fce6 <USB_EPStartXfer+0xcf2>
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	785b      	ldrb	r3, [r3, #1]
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d121      	bne.n	800fce6 <USB_EPStartXfer+0xcf2>
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	00db      	lsls	r3, r3, #3
 800fca8:	4a36      	ldr	r2, [pc, #216]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fcaa:	4694      	mov	ip, r2
 800fcac:	4463      	add	r3, ip
 800fcae:	685a      	ldr	r2, [r3, #4]
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	00db      	lsls	r3, r3, #3
 800fcb6:	4933      	ldr	r1, [pc, #204]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fcb8:	468c      	mov	ip, r1
 800fcba:	4463      	add	r3, ip
 800fcbc:	0412      	lsls	r2, r2, #16
 800fcbe:	0c12      	lsrs	r2, r2, #16
 800fcc0:	605a      	str	r2, [r3, #4]
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	00db      	lsls	r3, r3, #3
 800fcc8:	4a2e      	ldr	r2, [pc, #184]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fcca:	4694      	mov	ip, r2
 800fccc:	4463      	add	r3, ip
 800fcce:	6859      	ldr	r1, [r3, #4]
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	041a      	lsls	r2, r3, #16
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	00db      	lsls	r3, r3, #3
 800fcdc:	4829      	ldr	r0, [pc, #164]	@ (800fd84 <USB_EPStartXfer+0xd90>)
 800fcde:	4684      	mov	ip, r0
 800fce0:	4463      	add	r3, ip
 800fce2:	430a      	orrs	r2, r1
 800fce4:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	69db      	ldr	r3, [r3, #28]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d100      	bne.n	800fcf0 <USB_EPStartXfer+0xcfc>
 800fcee:	e170      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	18d3      	adds	r3, r2, r3
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	2126      	movs	r1, #38	@ 0x26
 800fcfe:	187b      	adds	r3, r7, r1
 800fd00:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800fd02:	187b      	adds	r3, r7, r1
 800fd04:	881a      	ldrh	r2, [r3, #0]
 800fd06:	2380      	movs	r3, #128	@ 0x80
 800fd08:	01db      	lsls	r3, r3, #7
 800fd0a:	4013      	ands	r3, r2
 800fd0c:	d004      	beq.n	800fd18 <USB_EPStartXfer+0xd24>
 800fd0e:	187b      	adds	r3, r7, r1
 800fd10:	881b      	ldrh	r3, [r3, #0]
 800fd12:	2240      	movs	r2, #64	@ 0x40
 800fd14:	4013      	ands	r3, r2
 800fd16:	d10d      	bne.n	800fd34 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800fd18:	2126      	movs	r1, #38	@ 0x26
 800fd1a:	187b      	adds	r3, r7, r1
 800fd1c:	881a      	ldrh	r2, [r3, #0]
 800fd1e:	2380      	movs	r3, #128	@ 0x80
 800fd20:	01db      	lsls	r3, r3, #7
 800fd22:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800fd24:	d000      	beq.n	800fd28 <USB_EPStartXfer+0xd34>
 800fd26:	e154      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800fd28:	187b      	adds	r3, r7, r1
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	2240      	movs	r2, #64	@ 0x40
 800fd2e:	4013      	ands	r3, r2
 800fd30:	d000      	beq.n	800fd34 <USB_EPStartXfer+0xd40>
 800fd32:	e14e      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	18d3      	adds	r3, r2, r3
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4a11      	ldr	r2, [pc, #68]	@ (800fd88 <USB_EPStartXfer+0xd94>)
 800fd42:	4013      	ands	r3, r2
 800fd44:	623b      	str	r3, [r7, #32]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	18d3      	adds	r3, r2, r3
 800fd50:	6a3a      	ldr	r2, [r7, #32]
 800fd52:	490e      	ldr	r1, [pc, #56]	@ (800fd8c <USB_EPStartXfer+0xd98>)
 800fd54:	430a      	orrs	r2, r1
 800fd56:	601a      	str	r2, [r3, #0]
 800fd58:	e13b      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	78db      	ldrb	r3, [r3, #3]
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d000      	beq.n	800fd64 <USB_EPStartXfer+0xd70>
 800fd62:	e134      	b.n	800ffce <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	699a      	ldr	r2, [r3, #24]
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	691b      	ldr	r3, [r3, #16]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d90f      	bls.n	800fd90 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	691b      	ldr	r3, [r3, #16]
 800fd74:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	699a      	ldr	r2, [r3, #24]
 800fd7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd7c:	1ad2      	subs	r2, r2, r3
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	619a      	str	r2, [r3, #24]
 800fd82:	e00b      	b.n	800fd9c <USB_EPStartXfer+0xda8>
 800fd84:	40009800 	.word	0x40009800
 800fd88:	07ff8f8f 	.word	0x07ff8f8f
 800fd8c:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	699b      	ldr	r3, [r3, #24]
 800fd94:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	785b      	ldrb	r3, [r3, #1]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d162      	bne.n	800fe6a <USB_EPStartXfer+0xe76>
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	00db      	lsls	r3, r3, #3
 800fdaa:	4a9a      	ldr	r2, [pc, #616]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fdac:	4694      	mov	ip, r2
 800fdae:	4463      	add	r3, ip
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	00db      	lsls	r3, r3, #3
 800fdb8:	4996      	ldr	r1, [pc, #600]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fdba:	468c      	mov	ip, r1
 800fdbc:	4463      	add	r3, ip
 800fdbe:	0192      	lsls	r2, r2, #6
 800fdc0:	0992      	lsrs	r2, r2, #6
 800fdc2:	601a      	str	r2, [r3, #0]
 800fdc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdc6:	2b3e      	cmp	r3, #62	@ 0x3e
 800fdc8:	d91e      	bls.n	800fe08 <USB_EPStartXfer+0xe14>
 800fdca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdcc:	095b      	lsrs	r3, r3, #5
 800fdce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdd2:	221f      	movs	r2, #31
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	d102      	bne.n	800fdde <USB_EPStartXfer+0xdea>
 800fdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdda:	3b01      	subs	r3, #1
 800fddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	00db      	lsls	r3, r3, #3
 800fde4:	4a8b      	ldr	r2, [pc, #556]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fde6:	4694      	mov	ip, r2
 800fde8:	4463      	add	r3, ip
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdee:	069b      	lsls	r3, r3, #26
 800fdf0:	431a      	orrs	r2, r3
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	00db      	lsls	r3, r3, #3
 800fdf8:	4986      	ldr	r1, [pc, #536]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fdfa:	468c      	mov	ip, r1
 800fdfc:	4463      	add	r3, ip
 800fdfe:	2180      	movs	r1, #128	@ 0x80
 800fe00:	0609      	lsls	r1, r1, #24
 800fe02:	430a      	orrs	r2, r1
 800fe04:	601a      	str	r2, [r3, #0]
 800fe06:	e055      	b.n	800feb4 <USB_EPStartXfer+0xec0>
 800fe08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d111      	bne.n	800fe32 <USB_EPStartXfer+0xe3e>
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	00db      	lsls	r3, r3, #3
 800fe14:	4a7f      	ldr	r2, [pc, #508]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fe16:	4694      	mov	ip, r2
 800fe18:	4463      	add	r3, ip
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	00db      	lsls	r3, r3, #3
 800fe22:	497c      	ldr	r1, [pc, #496]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fe24:	468c      	mov	ip, r1
 800fe26:	4463      	add	r3, ip
 800fe28:	2180      	movs	r1, #128	@ 0x80
 800fe2a:	0609      	lsls	r1, r1, #24
 800fe2c:	430a      	orrs	r2, r1
 800fe2e:	601a      	str	r2, [r3, #0]
 800fe30:	e040      	b.n	800feb4 <USB_EPStartXfer+0xec0>
 800fe32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe34:	085b      	lsrs	r3, r3, #1
 800fe36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	4013      	ands	r3, r2
 800fe3e:	d002      	beq.n	800fe46 <USB_EPStartXfer+0xe52>
 800fe40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe42:	3301      	adds	r3, #1
 800fe44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	00db      	lsls	r3, r3, #3
 800fe4c:	4a71      	ldr	r2, [pc, #452]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fe4e:	4694      	mov	ip, r2
 800fe50:	4463      	add	r3, ip
 800fe52:	6819      	ldr	r1, [r3, #0]
 800fe54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe56:	069a      	lsls	r2, r3, #26
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	00db      	lsls	r3, r3, #3
 800fe5e:	486d      	ldr	r0, [pc, #436]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fe60:	4684      	mov	ip, r0
 800fe62:	4463      	add	r3, ip
 800fe64:	430a      	orrs	r2, r1
 800fe66:	601a      	str	r2, [r3, #0]
 800fe68:	e024      	b.n	800feb4 <USB_EPStartXfer+0xec0>
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	785b      	ldrb	r3, [r3, #1]
 800fe6e:	2b01      	cmp	r3, #1
 800fe70:	d120      	bne.n	800feb4 <USB_EPStartXfer+0xec0>
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	00db      	lsls	r3, r3, #3
 800fe78:	4a66      	ldr	r2, [pc, #408]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fe7a:	4694      	mov	ip, r2
 800fe7c:	4463      	add	r3, ip
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	00db      	lsls	r3, r3, #3
 800fe86:	4963      	ldr	r1, [pc, #396]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fe88:	468c      	mov	ip, r1
 800fe8a:	4463      	add	r3, ip
 800fe8c:	0412      	lsls	r2, r2, #16
 800fe8e:	0c12      	lsrs	r2, r2, #16
 800fe90:	601a      	str	r2, [r3, #0]
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	00db      	lsls	r3, r3, #3
 800fe98:	4a5e      	ldr	r2, [pc, #376]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fe9a:	4694      	mov	ip, r2
 800fe9c:	4463      	add	r3, ip
 800fe9e:	6819      	ldr	r1, [r3, #0]
 800fea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fea2:	041a      	lsls	r2, r3, #16
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	00db      	lsls	r3, r3, #3
 800feaa:	485a      	ldr	r0, [pc, #360]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800feac:	4684      	mov	ip, r0
 800feae:	4463      	add	r3, ip
 800feb0:	430a      	orrs	r2, r1
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	785b      	ldrb	r3, [r3, #1]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d162      	bne.n	800ff82 <USB_EPStartXfer+0xf8e>
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	00db      	lsls	r3, r3, #3
 800fec2:	4a54      	ldr	r2, [pc, #336]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fec4:	4694      	mov	ip, r2
 800fec6:	4463      	add	r3, ip
 800fec8:	685a      	ldr	r2, [r3, #4]
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	00db      	lsls	r3, r3, #3
 800fed0:	4950      	ldr	r1, [pc, #320]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fed2:	468c      	mov	ip, r1
 800fed4:	4463      	add	r3, ip
 800fed6:	0192      	lsls	r2, r2, #6
 800fed8:	0992      	lsrs	r2, r2, #6
 800feda:	605a      	str	r2, [r3, #4]
 800fedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fede:	2b3e      	cmp	r3, #62	@ 0x3e
 800fee0:	d91e      	bls.n	800ff20 <USB_EPStartXfer+0xf2c>
 800fee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fee4:	095b      	lsrs	r3, r3, #5
 800fee6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800feea:	221f      	movs	r2, #31
 800feec:	4013      	ands	r3, r2
 800feee:	d102      	bne.n	800fef6 <USB_EPStartXfer+0xf02>
 800fef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef2:	3b01      	subs	r3, #1
 800fef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	00db      	lsls	r3, r3, #3
 800fefc:	4a45      	ldr	r2, [pc, #276]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800fefe:	4694      	mov	ip, r2
 800ff00:	4463      	add	r3, ip
 800ff02:	685a      	ldr	r2, [r3, #4]
 800ff04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff06:	069b      	lsls	r3, r3, #26
 800ff08:	431a      	orrs	r2, r3
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	00db      	lsls	r3, r3, #3
 800ff10:	4940      	ldr	r1, [pc, #256]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ff12:	468c      	mov	ip, r1
 800ff14:	4463      	add	r3, ip
 800ff16:	2180      	movs	r1, #128	@ 0x80
 800ff18:	0609      	lsls	r1, r1, #24
 800ff1a:	430a      	orrs	r2, r1
 800ff1c:	605a      	str	r2, [r3, #4]
 800ff1e:	e058      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
 800ff20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d111      	bne.n	800ff4a <USB_EPStartXfer+0xf56>
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	00db      	lsls	r3, r3, #3
 800ff2c:	4a39      	ldr	r2, [pc, #228]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ff2e:	4694      	mov	ip, r2
 800ff30:	4463      	add	r3, ip
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	00db      	lsls	r3, r3, #3
 800ff3a:	4936      	ldr	r1, [pc, #216]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ff3c:	468c      	mov	ip, r1
 800ff3e:	4463      	add	r3, ip
 800ff40:	2180      	movs	r1, #128	@ 0x80
 800ff42:	0609      	lsls	r1, r1, #24
 800ff44:	430a      	orrs	r2, r1
 800ff46:	605a      	str	r2, [r3, #4]
 800ff48:	e043      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
 800ff4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff4c:	085b      	lsrs	r3, r3, #1
 800ff4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff52:	2201      	movs	r2, #1
 800ff54:	4013      	ands	r3, r2
 800ff56:	d002      	beq.n	800ff5e <USB_EPStartXfer+0xf6a>
 800ff58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	4a2b      	ldr	r2, [pc, #172]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ff66:	4694      	mov	ip, r2
 800ff68:	4463      	add	r3, ip
 800ff6a:	6859      	ldr	r1, [r3, #4]
 800ff6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6e:	069a      	lsls	r2, r3, #26
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	00db      	lsls	r3, r3, #3
 800ff76:	4827      	ldr	r0, [pc, #156]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ff78:	4684      	mov	ip, r0
 800ff7a:	4463      	add	r3, ip
 800ff7c:	430a      	orrs	r2, r1
 800ff7e:	605a      	str	r2, [r3, #4]
 800ff80:	e027      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	785b      	ldrb	r3, [r3, #1]
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d123      	bne.n	800ffd2 <USB_EPStartXfer+0xfde>
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	00db      	lsls	r3, r3, #3
 800ff90:	4a20      	ldr	r2, [pc, #128]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ff92:	4694      	mov	ip, r2
 800ff94:	4463      	add	r3, ip
 800ff96:	685a      	ldr	r2, [r3, #4]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	00db      	lsls	r3, r3, #3
 800ff9e:	491d      	ldr	r1, [pc, #116]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ffa0:	468c      	mov	ip, r1
 800ffa2:	4463      	add	r3, ip
 800ffa4:	0412      	lsls	r2, r2, #16
 800ffa6:	0c12      	lsrs	r2, r2, #16
 800ffa8:	605a      	str	r2, [r3, #4]
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	00db      	lsls	r3, r3, #3
 800ffb0:	4a18      	ldr	r2, [pc, #96]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ffb2:	4694      	mov	ip, r2
 800ffb4:	4463      	add	r3, ip
 800ffb6:	6859      	ldr	r1, [r3, #4]
 800ffb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffba:	041a      	lsls	r2, r3, #16
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	4814      	ldr	r0, [pc, #80]	@ (8010014 <USB_EPStartXfer+0x1020>)
 800ffc4:	4684      	mov	ip, r0
 800ffc6:	4463      	add	r3, ip
 800ffc8:	430a      	orrs	r2, r1
 800ffca:	605a      	str	r2, [r3, #4]
 800ffcc:	e001      	b.n	800ffd2 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	e01c      	b.n	801000c <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	18d3      	adds	r3, r2, r3
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	4a0e      	ldr	r2, [pc, #56]	@ (8010018 <USB_EPStartXfer+0x1024>)
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	61fb      	str	r3, [r7, #28]
 800ffe4:	69fb      	ldr	r3, [r7, #28]
 800ffe6:	2280      	movs	r2, #128	@ 0x80
 800ffe8:	0152      	lsls	r2, r2, #5
 800ffea:	4053      	eors	r3, r2
 800ffec:	61fb      	str	r3, [r7, #28]
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	2280      	movs	r2, #128	@ 0x80
 800fff2:	0192      	lsls	r2, r2, #6
 800fff4:	4053      	eors	r3, r2
 800fff6:	61fb      	str	r3, [r7, #28]
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	18d3      	adds	r3, r2, r3
 8010002:	69fa      	ldr	r2, [r7, #28]
 8010004:	4905      	ldr	r1, [pc, #20]	@ (801001c <USB_EPStartXfer+0x1028>)
 8010006:	430a      	orrs	r2, r1
 8010008:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801000a:	2300      	movs	r3, #0
}
 801000c:	0018      	movs	r0, r3
 801000e:	46bd      	mov	sp, r7
 8010010:	b017      	add	sp, #92	@ 0x5c
 8010012:	bd90      	pop	{r4, r7, pc}
 8010014:	40009800 	.word	0x40009800
 8010018:	07ffbf8f 	.word	0x07ffbf8f
 801001c:	00008080 	.word	0x00008080

08010020 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	785b      	ldrb	r3, [r3, #1]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d016      	beq.n	8010060 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	18d3      	adds	r3, r2, r3
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a16      	ldr	r2, [pc, #88]	@ (8010098 <USB_EPSetStall+0x78>)
 8010040:	4013      	ands	r3, r2
 8010042:	60bb      	str	r3, [r7, #8]
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	2210      	movs	r2, #16
 8010048:	4053      	eors	r3, r2
 801004a:	60bb      	str	r3, [r7, #8]
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	18d3      	adds	r3, r2, r3
 8010056:	68ba      	ldr	r2, [r7, #8]
 8010058:	4910      	ldr	r1, [pc, #64]	@ (801009c <USB_EPSetStall+0x7c>)
 801005a:	430a      	orrs	r2, r1
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	e016      	b.n	801008e <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	18d3      	adds	r3, r2, r3
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a0c      	ldr	r2, [pc, #48]	@ (80100a0 <USB_EPSetStall+0x80>)
 801006e:	4013      	ands	r3, r2
 8010070:	60fb      	str	r3, [r7, #12]
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2280      	movs	r2, #128	@ 0x80
 8010076:	0152      	lsls	r2, r2, #5
 8010078:	4053      	eors	r3, r2
 801007a:	60fb      	str	r3, [r7, #12]
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	18d3      	adds	r3, r2, r3
 8010086:	68fa      	ldr	r2, [r7, #12]
 8010088:	4904      	ldr	r1, [pc, #16]	@ (801009c <USB_EPSetStall+0x7c>)
 801008a:	430a      	orrs	r2, r1
 801008c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801008e:	2300      	movs	r3, #0
}
 8010090:	0018      	movs	r0, r3
 8010092:	46bd      	mov	sp, r7
 8010094:	b004      	add	sp, #16
 8010096:	bd80      	pop	{r7, pc}
 8010098:	07ff8fbf 	.word	0x07ff8fbf
 801009c:	00008080 	.word	0x00008080
 80100a0:	07ffbf8f 	.word	0x07ffbf8f

080100a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b088      	sub	sp, #32
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	7b1b      	ldrb	r3, [r3, #12]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d000      	beq.n	80100b8 <USB_EPClearStall+0x14>
 80100b6:	e075      	b.n	80101a4 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	785b      	ldrb	r3, [r3, #1]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d037      	beq.n	8010130 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	18d3      	adds	r3, r2, r3
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	613b      	str	r3, [r7, #16]
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	2240      	movs	r2, #64	@ 0x40
 80100d2:	4013      	ands	r3, r2
 80100d4:	d011      	beq.n	80100fa <USB_EPClearStall+0x56>
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	18d3      	adds	r3, r2, r3
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4a33      	ldr	r2, [pc, #204]	@ (80101b0 <USB_EPClearStall+0x10c>)
 80100e4:	4013      	ands	r3, r2
 80100e6:	60fb      	str	r3, [r7, #12]
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	781b      	ldrb	r3, [r3, #0]
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	18d3      	adds	r3, r2, r3
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	492f      	ldr	r1, [pc, #188]	@ (80101b4 <USB_EPClearStall+0x110>)
 80100f6:	430a      	orrs	r2, r1
 80100f8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	78db      	ldrb	r3, [r3, #3]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d050      	beq.n	80101a4 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	18d3      	adds	r3, r2, r3
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4a2a      	ldr	r2, [pc, #168]	@ (80101b8 <USB_EPClearStall+0x114>)
 8010110:	4013      	ands	r3, r2
 8010112:	60bb      	str	r3, [r7, #8]
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	2220      	movs	r2, #32
 8010118:	4053      	eors	r3, r2
 801011a:	60bb      	str	r3, [r7, #8]
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	009b      	lsls	r3, r3, #2
 8010124:	18d3      	adds	r3, r2, r3
 8010126:	68ba      	ldr	r2, [r7, #8]
 8010128:	4924      	ldr	r1, [pc, #144]	@ (80101bc <USB_EPClearStall+0x118>)
 801012a:	430a      	orrs	r2, r1
 801012c:	601a      	str	r2, [r3, #0]
 801012e:	e039      	b.n	80101a4 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	18d3      	adds	r3, r2, r3
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	61fb      	str	r3, [r7, #28]
 801013e:	69fa      	ldr	r2, [r7, #28]
 8010140:	2380      	movs	r3, #128	@ 0x80
 8010142:	01db      	lsls	r3, r3, #7
 8010144:	4013      	ands	r3, r2
 8010146:	d011      	beq.n	801016c <USB_EPClearStall+0xc8>
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	009b      	lsls	r3, r3, #2
 8010150:	18d3      	adds	r3, r2, r3
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a16      	ldr	r2, [pc, #88]	@ (80101b0 <USB_EPClearStall+0x10c>)
 8010156:	4013      	ands	r3, r2
 8010158:	61bb      	str	r3, [r7, #24]
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	18d3      	adds	r3, r2, r3
 8010164:	69ba      	ldr	r2, [r7, #24]
 8010166:	4916      	ldr	r1, [pc, #88]	@ (80101c0 <USB_EPClearStall+0x11c>)
 8010168:	430a      	orrs	r2, r1
 801016a:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	18d3      	adds	r3, r2, r3
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4a12      	ldr	r2, [pc, #72]	@ (80101c4 <USB_EPClearStall+0x120>)
 801017a:	4013      	ands	r3, r2
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	2280      	movs	r2, #128	@ 0x80
 8010182:	0152      	lsls	r2, r2, #5
 8010184:	4053      	eors	r3, r2
 8010186:	617b      	str	r3, [r7, #20]
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	2280      	movs	r2, #128	@ 0x80
 801018c:	0192      	lsls	r2, r2, #6
 801018e:	4053      	eors	r3, r2
 8010190:	617b      	str	r3, [r7, #20]
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	18d3      	adds	r3, r2, r3
 801019c:	697a      	ldr	r2, [r7, #20]
 801019e:	4907      	ldr	r1, [pc, #28]	@ (80101bc <USB_EPClearStall+0x118>)
 80101a0:	430a      	orrs	r2, r1
 80101a2:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	0018      	movs	r0, r3
 80101a8:	46bd      	mov	sp, r7
 80101aa:	b008      	add	sp, #32
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	46c0      	nop			@ (mov r8, r8)
 80101b0:	07ff8f8f 	.word	0x07ff8f8f
 80101b4:	000080c0 	.word	0x000080c0
 80101b8:	07ff8fbf 	.word	0x07ff8fbf
 80101bc:	00008080 	.word	0x00008080
 80101c0:	0000c080 	.word	0x0000c080
 80101c4:	07ffbf8f 	.word	0x07ffbf8f

080101c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	000a      	movs	r2, r1
 80101d2:	1cfb      	adds	r3, r7, #3
 80101d4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80101d6:	1cfb      	adds	r3, r7, #3
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d102      	bne.n	80101e4 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2280      	movs	r2, #128	@ 0x80
 80101e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	0018      	movs	r0, r3
 80101e8:	46bd      	mov	sp, r7
 80101ea:	b002      	add	sp, #8
 80101ec:	bd80      	pop	{r7, pc}

080101ee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b082      	sub	sp, #8
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101fa:	2280      	movs	r2, #128	@ 0x80
 80101fc:	0212      	lsls	r2, r2, #8
 80101fe:	431a      	orrs	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	0018      	movs	r0, r3
 8010208:	46bd      	mov	sp, r7
 801020a:	b002      	add	sp, #8
 801020c:	bd80      	pop	{r7, pc}

0801020e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b084      	sub	sp, #16
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801021a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801021c:	68fb      	ldr	r3, [r7, #12]
}
 801021e:	0018      	movs	r0, r3
 8010220:	46bd      	mov	sp, r7
 8010222:	b004      	add	sp, #16
 8010224:	bd80      	pop	{r7, pc}
	...

08010228 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b08a      	sub	sp, #40	@ 0x28
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	0019      	movs	r1, r3
 8010234:	1dbb      	adds	r3, r7, #6
 8010236:	801a      	strh	r2, [r3, #0]
 8010238:	1d3b      	adds	r3, r7, #4
 801023a:	1c0a      	adds	r2, r1, #0
 801023c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 801023e:	1d3b      	adds	r3, r7, #4
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	3303      	adds	r3, #3
 8010244:	089b      	lsrs	r3, r3, #2
 8010246:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8010248:	2016      	movs	r0, #22
 801024a:	183b      	adds	r3, r7, r0
 801024c:	1d3a      	adds	r2, r7, #4
 801024e:	8812      	ldrh	r2, [r2, #0]
 8010250:	2103      	movs	r1, #3
 8010252:	400a      	ands	r2, r1
 8010254:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 801025a:	183b      	adds	r3, r7, r0
 801025c:	881b      	ldrh	r3, [r3, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d002      	beq.n	8010268 <USB_WritePMA+0x40>
  {
    NbWords--;
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	3b01      	subs	r3, #1
 8010266:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8010268:	1dbb      	adds	r3, r7, #6
 801026a:	881b      	ldrh	r3, [r3, #0]
 801026c:	4a28      	ldr	r2, [pc, #160]	@ (8010310 <USB_WritePMA+0xe8>)
 801026e:	4694      	mov	ip, r2
 8010270:	4463      	add	r3, ip
 8010272:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8010274:	69bb      	ldr	r3, [r7, #24]
 8010276:	623b      	str	r3, [r7, #32]
 8010278:	e01f      	b.n	80102ba <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	781a      	ldrb	r2, [r3, #0]
 801027e:	7859      	ldrb	r1, [r3, #1]
 8010280:	0209      	lsls	r1, r1, #8
 8010282:	430a      	orrs	r2, r1
 8010284:	7899      	ldrb	r1, [r3, #2]
 8010286:	0409      	lsls	r1, r1, #16
 8010288:	430a      	orrs	r2, r1
 801028a:	78db      	ldrb	r3, [r3, #3]
 801028c:	061b      	lsls	r3, r3, #24
 801028e:	4313      	orrs	r3, r2
 8010290:	001a      	movs	r2, r3
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	3304      	adds	r3, #4
 801029a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	3301      	adds	r3, #1
 80102a0:	613b      	str	r3, [r7, #16]
    pBuf++;
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	3301      	adds	r3, #1
 80102a6:	613b      	str	r3, [r7, #16]
    pBuf++;
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	3301      	adds	r3, #1
 80102ac:	613b      	str	r3, [r7, #16]
    pBuf++;
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	3301      	adds	r3, #1
 80102b2:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 80102b4:	6a3b      	ldr	r3, [r7, #32]
 80102b6:	3b01      	subs	r3, #1
 80102b8:	623b      	str	r3, [r7, #32]
 80102ba:	6a3b      	ldr	r3, [r7, #32]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1dc      	bne.n	801027a <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 80102c0:	2316      	movs	r3, #22
 80102c2:	18fb      	adds	r3, r7, r3
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d01e      	beq.n	8010308 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 80102ca:	2300      	movs	r3, #0
 80102cc:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	001a      	movs	r2, r3
 80102d4:	6a3b      	ldr	r3, [r7, #32]
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	409a      	lsls	r2, r3
 80102da:	0013      	movs	r3, r2
 80102dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102de:	4313      	orrs	r3, r2
 80102e0:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 80102e2:	6a3b      	ldr	r3, [r7, #32]
 80102e4:	3301      	adds	r3, #1
 80102e6:	623b      	str	r3, [r7, #32]
      pBuf++;
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	3301      	adds	r3, #1
 80102ec:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 80102ee:	2116      	movs	r1, #22
 80102f0:	187b      	adds	r3, r7, r1
 80102f2:	881a      	ldrh	r2, [r3, #0]
 80102f4:	187b      	adds	r3, r7, r1
 80102f6:	3a01      	subs	r2, #1
 80102f8:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 80102fa:	187b      	adds	r3, r7, r1
 80102fc:	881b      	ldrh	r3, [r3, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d1e5      	bne.n	80102ce <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010306:	601a      	str	r2, [r3, #0]
  }
}
 8010308:	46c0      	nop			@ (mov r8, r8)
 801030a:	46bd      	mov	sp, r7
 801030c:	b00a      	add	sp, #40	@ 0x28
 801030e:	bd80      	pop	{r7, pc}
 8010310:	40009800 	.word	0x40009800

08010314 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010314:	b590      	push	{r4, r7, lr}
 8010316:	b08b      	sub	sp, #44	@ 0x2c
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	0019      	movs	r1, r3
 8010320:	1dbb      	adds	r3, r7, #6
 8010322:	801a      	strh	r2, [r3, #0]
 8010324:	1d3b      	adds	r3, r7, #4
 8010326:	1c0a      	adds	r2, r1, #0
 8010328:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 801032a:	1d3b      	adds	r3, r7, #4
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	3303      	adds	r3, #3
 8010330:	089b      	lsrs	r3, r3, #2
 8010332:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8010334:	201a      	movs	r0, #26
 8010336:	183b      	adds	r3, r7, r0
 8010338:	1d3a      	adds	r2, r7, #4
 801033a:	8812      	ldrh	r2, [r2, #0]
 801033c:	2103      	movs	r1, #3
 801033e:	400a      	ands	r2, r1
 8010340:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8010346:	1dbb      	adds	r3, r7, #6
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	4a39      	ldr	r2, [pc, #228]	@ (8010430 <USB_ReadPMA+0x11c>)
 801034c:	4694      	mov	ip, r2
 801034e:	4463      	add	r3, ip
 8010350:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8010352:	183b      	adds	r3, r7, r0
 8010354:	881b      	ldrh	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	3b01      	subs	r3, #1
 801035e:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	627b      	str	r3, [r7, #36]	@ 0x24
 8010364:	e03c      	b.n	80103e0 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8010366:	6a3b      	ldr	r3, [r7, #32]
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	21ff      	movs	r1, #255	@ 0xff
 801036e:	4011      	ands	r1, r2
 8010370:	000c      	movs	r4, r1
 8010372:	7819      	ldrb	r1, [r3, #0]
 8010374:	2000      	movs	r0, #0
 8010376:	4001      	ands	r1, r0
 8010378:	1c08      	adds	r0, r1, #0
 801037a:	1c21      	adds	r1, r4, #0
 801037c:	4301      	orrs	r1, r0
 801037e:	7019      	strb	r1, [r3, #0]
 8010380:	0a11      	lsrs	r1, r2, #8
 8010382:	20ff      	movs	r0, #255	@ 0xff
 8010384:	4001      	ands	r1, r0
 8010386:	000c      	movs	r4, r1
 8010388:	7859      	ldrb	r1, [r3, #1]
 801038a:	2000      	movs	r0, #0
 801038c:	4001      	ands	r1, r0
 801038e:	1c08      	adds	r0, r1, #0
 8010390:	1c21      	adds	r1, r4, #0
 8010392:	4301      	orrs	r1, r0
 8010394:	7059      	strb	r1, [r3, #1]
 8010396:	0c11      	lsrs	r1, r2, #16
 8010398:	20ff      	movs	r0, #255	@ 0xff
 801039a:	4001      	ands	r1, r0
 801039c:	000c      	movs	r4, r1
 801039e:	7899      	ldrb	r1, [r3, #2]
 80103a0:	2000      	movs	r0, #0
 80103a2:	4001      	ands	r1, r0
 80103a4:	1c08      	adds	r0, r1, #0
 80103a6:	1c21      	adds	r1, r4, #0
 80103a8:	4301      	orrs	r1, r0
 80103aa:	7099      	strb	r1, [r3, #2]
 80103ac:	0e10      	lsrs	r0, r2, #24
 80103ae:	78da      	ldrb	r2, [r3, #3]
 80103b0:	2100      	movs	r1, #0
 80103b2:	400a      	ands	r2, r1
 80103b4:	1c11      	adds	r1, r2, #0
 80103b6:	1c02      	adds	r2, r0, #0
 80103b8:	430a      	orrs	r2, r1
 80103ba:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 80103bc:	6a3b      	ldr	r3, [r7, #32]
 80103be:	3304      	adds	r3, #4
 80103c0:	623b      	str	r3, [r7, #32]
    pBuf++;
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	3301      	adds	r3, #1
 80103c6:	617b      	str	r3, [r7, #20]
    pBuf++;
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	3301      	adds	r3, #1
 80103cc:	617b      	str	r3, [r7, #20]
    pBuf++;
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	3301      	adds	r3, #1
 80103d2:	617b      	str	r3, [r7, #20]
    pBuf++;
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	3301      	adds	r3, #1
 80103d8:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 80103da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103dc:	3b01      	subs	r3, #1
 80103de:	627b      	str	r3, [r7, #36]	@ 0x24
 80103e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d1bf      	bne.n	8010366 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 80103e6:	231a      	movs	r3, #26
 80103e8:	18fb      	adds	r3, r7, r3
 80103ea:	881b      	ldrh	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d01b      	beq.n	8010428 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 80103f0:	6a3b      	ldr	r3, [r7, #32]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 80103f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	00db      	lsls	r3, r3, #3
 80103fc:	693a      	ldr	r2, [r7, #16]
 80103fe:	40da      	lsrs	r2, r3
 8010400:	0013      	movs	r3, r2
 8010402:	b2da      	uxtb	r2, r3
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	701a      	strb	r2, [r3, #0]
      count++;
 8010408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801040a:	3301      	adds	r3, #1
 801040c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	3301      	adds	r3, #1
 8010412:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8010414:	211a      	movs	r1, #26
 8010416:	187b      	adds	r3, r7, r1
 8010418:	881a      	ldrh	r2, [r3, #0]
 801041a:	187b      	adds	r3, r7, r1
 801041c:	3a01      	subs	r2, #1
 801041e:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8010420:	187b      	adds	r3, r7, r1
 8010422:	881b      	ldrh	r3, [r3, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d1e6      	bne.n	80103f6 <USB_ReadPMA+0xe2>
  }
}
 8010428:	46c0      	nop			@ (mov r8, r8)
 801042a:	46bd      	mov	sp, r7
 801042c:	b00b      	add	sp, #44	@ 0x2c
 801042e:	bd90      	pop	{r4, r7, pc}
 8010430:	40009800 	.word	0x40009800

08010434 <__NVIC_EnableIRQ>:
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	0002      	movs	r2, r0
 801043c:	1dfb      	adds	r3, r7, #7
 801043e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010440:	1dfb      	adds	r3, r7, #7
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	2b7f      	cmp	r3, #127	@ 0x7f
 8010446:	d809      	bhi.n	801045c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010448:	1dfb      	adds	r3, r7, #7
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	001a      	movs	r2, r3
 801044e:	231f      	movs	r3, #31
 8010450:	401a      	ands	r2, r3
 8010452:	4b04      	ldr	r3, [pc, #16]	@ (8010464 <__NVIC_EnableIRQ+0x30>)
 8010454:	2101      	movs	r1, #1
 8010456:	4091      	lsls	r1, r2
 8010458:	000a      	movs	r2, r1
 801045a:	601a      	str	r2, [r3, #0]
}
 801045c:	46c0      	nop			@ (mov r8, r8)
 801045e:	46bd      	mov	sp, r7
 8010460:	b002      	add	sp, #8
 8010462:	bd80      	pop	{r7, pc}
 8010464:	e000e100 	.word	0xe000e100

08010468 <__NVIC_SetPriority>:
{
 8010468:	b590      	push	{r4, r7, lr}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	0002      	movs	r2, r0
 8010470:	6039      	str	r1, [r7, #0]
 8010472:	1dfb      	adds	r3, r7, #7
 8010474:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010476:	1dfb      	adds	r3, r7, #7
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	2b7f      	cmp	r3, #127	@ 0x7f
 801047c:	d828      	bhi.n	80104d0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801047e:	4a2f      	ldr	r2, [pc, #188]	@ (801053c <__NVIC_SetPriority+0xd4>)
 8010480:	1dfb      	adds	r3, r7, #7
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	b25b      	sxtb	r3, r3
 8010486:	089b      	lsrs	r3, r3, #2
 8010488:	33c0      	adds	r3, #192	@ 0xc0
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	589b      	ldr	r3, [r3, r2]
 801048e:	1dfa      	adds	r2, r7, #7
 8010490:	7812      	ldrb	r2, [r2, #0]
 8010492:	0011      	movs	r1, r2
 8010494:	2203      	movs	r2, #3
 8010496:	400a      	ands	r2, r1
 8010498:	00d2      	lsls	r2, r2, #3
 801049a:	21ff      	movs	r1, #255	@ 0xff
 801049c:	4091      	lsls	r1, r2
 801049e:	000a      	movs	r2, r1
 80104a0:	43d2      	mvns	r2, r2
 80104a2:	401a      	ands	r2, r3
 80104a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	019b      	lsls	r3, r3, #6
 80104aa:	22ff      	movs	r2, #255	@ 0xff
 80104ac:	401a      	ands	r2, r3
 80104ae:	1dfb      	adds	r3, r7, #7
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	0018      	movs	r0, r3
 80104b4:	2303      	movs	r3, #3
 80104b6:	4003      	ands	r3, r0
 80104b8:	00db      	lsls	r3, r3, #3
 80104ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80104bc:	481f      	ldr	r0, [pc, #124]	@ (801053c <__NVIC_SetPriority+0xd4>)
 80104be:	1dfb      	adds	r3, r7, #7
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	b25b      	sxtb	r3, r3
 80104c4:	089b      	lsrs	r3, r3, #2
 80104c6:	430a      	orrs	r2, r1
 80104c8:	33c0      	adds	r3, #192	@ 0xc0
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	501a      	str	r2, [r3, r0]
}
 80104ce:	e031      	b.n	8010534 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80104d0:	4a1b      	ldr	r2, [pc, #108]	@ (8010540 <__NVIC_SetPriority+0xd8>)
 80104d2:	1dfb      	adds	r3, r7, #7
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	0019      	movs	r1, r3
 80104d8:	230f      	movs	r3, #15
 80104da:	400b      	ands	r3, r1
 80104dc:	3b08      	subs	r3, #8
 80104de:	089b      	lsrs	r3, r3, #2
 80104e0:	3306      	adds	r3, #6
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	18d3      	adds	r3, r2, r3
 80104e6:	3304      	adds	r3, #4
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	1dfa      	adds	r2, r7, #7
 80104ec:	7812      	ldrb	r2, [r2, #0]
 80104ee:	0011      	movs	r1, r2
 80104f0:	2203      	movs	r2, #3
 80104f2:	400a      	ands	r2, r1
 80104f4:	00d2      	lsls	r2, r2, #3
 80104f6:	21ff      	movs	r1, #255	@ 0xff
 80104f8:	4091      	lsls	r1, r2
 80104fa:	000a      	movs	r2, r1
 80104fc:	43d2      	mvns	r2, r2
 80104fe:	401a      	ands	r2, r3
 8010500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	019b      	lsls	r3, r3, #6
 8010506:	22ff      	movs	r2, #255	@ 0xff
 8010508:	401a      	ands	r2, r3
 801050a:	1dfb      	adds	r3, r7, #7
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	0018      	movs	r0, r3
 8010510:	2303      	movs	r3, #3
 8010512:	4003      	ands	r3, r0
 8010514:	00db      	lsls	r3, r3, #3
 8010516:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010518:	4809      	ldr	r0, [pc, #36]	@ (8010540 <__NVIC_SetPriority+0xd8>)
 801051a:	1dfb      	adds	r3, r7, #7
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	001c      	movs	r4, r3
 8010520:	230f      	movs	r3, #15
 8010522:	4023      	ands	r3, r4
 8010524:	3b08      	subs	r3, #8
 8010526:	089b      	lsrs	r3, r3, #2
 8010528:	430a      	orrs	r2, r1
 801052a:	3306      	adds	r3, #6
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	18c3      	adds	r3, r0, r3
 8010530:	3304      	adds	r3, #4
 8010532:	601a      	str	r2, [r3, #0]
}
 8010534:	46c0      	nop			@ (mov r8, r8)
 8010536:	46bd      	mov	sp, r7
 8010538:	b003      	add	sp, #12
 801053a:	bd90      	pop	{r4, r7, pc}
 801053c:	e000e100 	.word	0xe000e100
 8010540:	e000ed00 	.word	0xe000ed00

08010544 <LL_UCPD_Enable>:
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2280      	movs	r2, #128	@ 0x80
 8010552:	0612      	lsls	r2, r2, #24
 8010554:	431a      	orrs	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	601a      	str	r2, [r3, #0]
}
 801055a:	46c0      	nop			@ (mov r8, r8)
 801055c:	46bd      	mov	sp, r7
 801055e:	b002      	add	sp, #8
 8010560:	bd80      	pop	{r7, pc}
	...

08010564 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	4a05      	ldr	r2, [pc, #20]	@ (8010588 <LL_UCPD_SetRxOrderSet+0x24>)
 8010574:	401a      	ands	r2, r3
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	431a      	orrs	r2, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	601a      	str	r2, [r3, #0]
}
 801057e:	46c0      	nop			@ (mov r8, r8)
 8010580:	46bd      	mov	sp, r7
 8010582:	b002      	add	sp, #8
 8010584:	bd80      	pop	{r7, pc}
 8010586:	46c0      	nop			@ (mov r8, r8)
 8010588:	e00fffff 	.word	0xe00fffff

0801058c <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	4a05      	ldr	r2, [pc, #20]	@ (80105b0 <LL_UCPD_SetccEnable+0x24>)
 801059c:	401a      	ands	r2, r3
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	431a      	orrs	r2, r3
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	60da      	str	r2, [r3, #12]
}
 80105a6:	46c0      	nop			@ (mov r8, r8)
 80105a8:	46bd      	mov	sp, r7
 80105aa:	b002      	add	sp, #8
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	46c0      	nop			@ (mov r8, r8)
 80105b0:	fffff3ff 	.word	0xfffff3ff

080105b4 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	2280      	movs	r2, #128	@ 0x80
 80105c2:	0212      	lsls	r2, r2, #8
 80105c4:	431a      	orrs	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	611a      	str	r2, [r3, #16]
}
 80105ca:	46c0      	nop			@ (mov r8, r8)
 80105cc:	46bd      	mov	sp, r7
 80105ce:	b002      	add	sp, #8
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b082      	sub	sp, #8
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	691b      	ldr	r3, [r3, #16]
 80105de:	2280      	movs	r2, #128	@ 0x80
 80105e0:	01d2      	lsls	r2, r2, #7
 80105e2:	431a      	orrs	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	611a      	str	r2, [r3, #16]
}
 80105e8:	46c0      	nop			@ (mov r8, r8)
 80105ea:	46bd      	mov	sp, r7
 80105ec:	b002      	add	sp, #8
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 80105f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105f2:	b08b      	sub	sp, #44	@ 0x2c
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60b9      	str	r1, [r7, #8]
 80105f8:	607a      	str	r2, [r7, #4]
 80105fa:	603b      	str	r3, [r7, #0]
 80105fc:	240f      	movs	r4, #15
 80105fe:	193b      	adds	r3, r7, r4
 8010600:	1c02      	adds	r2, r0, #0
 8010602:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010604:	193b      	adds	r3, r7, r4
 8010606:	781a      	ldrb	r2, [r3, #0]
 8010608:	0013      	movs	r3, r2
 801060a:	005b      	lsls	r3, r3, #1
 801060c:	189b      	adds	r3, r3, r2
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	4a65      	ldr	r2, [pc, #404]	@ (80107a8 <CAD_Init+0x1b8>)
 8010612:	189b      	adds	r3, r3, r2
 8010614:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8010616:	193b      	adds	r3, r7, r4
 8010618:	781a      	ldrb	r2, [r3, #0]
 801061a:	4964      	ldr	r1, [pc, #400]	@ (80107ac <CAD_Init+0x1bc>)
 801061c:	0013      	movs	r3, r2
 801061e:	011b      	lsls	r3, r3, #4
 8010620:	1a9b      	subs	r3, r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	18cb      	adds	r3, r1, r3
 8010626:	3310      	adds	r3, #16
 8010628:	687a      	ldr	r2, [r7, #4]
 801062a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 801062c:	193b      	adds	r3, r7, r4
 801062e:	781a      	ldrb	r2, [r3, #0]
 8010630:	495e      	ldr	r1, [pc, #376]	@ (80107ac <CAD_Init+0x1bc>)
 8010632:	0013      	movs	r3, r2
 8010634:	011b      	lsls	r3, r3, #4
 8010636:	1a9b      	subs	r3, r3, r2
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	18cb      	adds	r3, r1, r3
 801063c:	330c      	adds	r3, #12
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8010642:	193b      	adds	r3, r7, r4
 8010644:	781a      	ldrb	r2, [r3, #0]
 8010646:	4959      	ldr	r1, [pc, #356]	@ (80107ac <CAD_Init+0x1bc>)
 8010648:	0013      	movs	r3, r2
 801064a:	011b      	lsls	r3, r3, #4
 801064c:	1a9b      	subs	r3, r3, r2
 801064e:	009b      	lsls	r3, r3, #2
 8010650:	18cb      	adds	r3, r1, r3
 8010652:	330c      	adds	r3, #12
 8010654:	6819      	ldr	r1, [r3, #0]
 8010656:	193b      	adds	r3, r7, r4
 8010658:	781a      	ldrb	r2, [r3, #0]
 801065a:	4854      	ldr	r0, [pc, #336]	@ (80107ac <CAD_Init+0x1bc>)
 801065c:	0013      	movs	r3, r2
 801065e:	011b      	lsls	r3, r3, #4
 8010660:	1a9b      	subs	r3, r3, r2
 8010662:	009b      	lsls	r3, r3, #2
 8010664:	18c3      	adds	r3, r0, r3
 8010666:	3310      	adds	r3, #16
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	794a      	ldrb	r2, [r1, #5]
 801066c:	0612      	lsls	r2, r2, #24
 801066e:	0f92      	lsrs	r2, r2, #30
 8010670:	b2d2      	uxtb	r2, r2
 8010672:	2103      	movs	r1, #3
 8010674:	400a      	ands	r2, r1
 8010676:	0010      	movs	r0, r2
 8010678:	789a      	ldrb	r2, [r3, #2]
 801067a:	2103      	movs	r1, #3
 801067c:	438a      	bics	r2, r1
 801067e:	1c11      	adds	r1, r2, #0
 8010680:	1c02      	adds	r2, r0, #0
 8010682:	430a      	orrs	r2, r1
 8010684:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8010686:	193b      	adds	r3, r7, r4
 8010688:	781a      	ldrb	r2, [r3, #0]
 801068a:	4948      	ldr	r1, [pc, #288]	@ (80107ac <CAD_Init+0x1bc>)
 801068c:	0013      	movs	r3, r2
 801068e:	011b      	lsls	r3, r3, #4
 8010690:	1a9b      	subs	r3, r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	18cb      	adds	r3, r1, r3
 8010696:	3310      	adds	r3, #16
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	789a      	ldrb	r2, [r3, #2]
 801069c:	210c      	movs	r1, #12
 801069e:	438a      	bics	r2, r1
 80106a0:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 80106a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a4:	220c      	movs	r2, #12
 80106a6:	2100      	movs	r1, #0
 80106a8:	0018      	movs	r0, r3
 80106aa:	f006 f9e9 	bl	8016a80 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 80106ae:	193b      	adds	r3, r7, r4
 80106b0:	781a      	ldrb	r2, [r3, #0]
 80106b2:	493e      	ldr	r1, [pc, #248]	@ (80107ac <CAD_Init+0x1bc>)
 80106b4:	0013      	movs	r3, r2
 80106b6:	011b      	lsls	r3, r3, #4
 80106b8:	1a9b      	subs	r3, r3, r2
 80106ba:	009b      	lsls	r3, r3, #2
 80106bc:	18cb      	adds	r3, r1, r3
 80106be:	332c      	adds	r3, #44	@ 0x2c
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 80106c4:	0025      	movs	r5, r4
 80106c6:	193b      	adds	r3, r7, r4
 80106c8:	781c      	ldrb	r4, [r3, #0]
 80106ca:	197b      	adds	r3, r7, r5
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	0018      	movs	r0, r3
 80106d0:	f000 fc12 	bl	8010ef8 <USBPD_HW_GetUSPDInstance>
 80106d4:	0001      	movs	r1, r0
 80106d6:	4a35      	ldr	r2, [pc, #212]	@ (80107ac <CAD_Init+0x1bc>)
 80106d8:	0023      	movs	r3, r4
 80106da:	011b      	lsls	r3, r3, #4
 80106dc:	1b1b      	subs	r3, r3, r4
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 80106e2:	2614      	movs	r6, #20
 80106e4:	19bb      	adds	r3, r7, r6
 80106e6:	0018      	movs	r0, r3
 80106e8:	f7fd ff5c 	bl	800e5a4 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 80106ec:	002c      	movs	r4, r5
 80106ee:	193b      	adds	r3, r7, r4
 80106f0:	781a      	ldrb	r2, [r3, #0]
 80106f2:	492e      	ldr	r1, [pc, #184]	@ (80107ac <CAD_Init+0x1bc>)
 80106f4:	0013      	movs	r3, r2
 80106f6:	011b      	lsls	r3, r3, #4
 80106f8:	1a9b      	subs	r3, r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	585b      	ldr	r3, [r3, r1]
 80106fe:	19ba      	adds	r2, r7, r6
 8010700:	0011      	movs	r1, r2
 8010702:	0018      	movs	r0, r3
 8010704:	f7fd ff14 	bl	800e530 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 8010708:	193b      	adds	r3, r7, r4
 801070a:	781a      	ldrb	r2, [r3, #0]
 801070c:	4927      	ldr	r1, [pc, #156]	@ (80107ac <CAD_Init+0x1bc>)
 801070e:	0013      	movs	r3, r2
 8010710:	011b      	lsls	r3, r3, #4
 8010712:	1a9b      	subs	r3, r3, r2
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	585b      	ldr	r3, [r3, r1]
 8010718:	22f8      	movs	r2, #248	@ 0xf8
 801071a:	0452      	lsls	r2, r2, #17
 801071c:	0011      	movs	r1, r2
 801071e:	0018      	movs	r0, r3
 8010720:	f7ff ff20 	bl	8010564 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010724:	193b      	adds	r3, r7, r4
 8010726:	781a      	ldrb	r2, [r3, #0]
 8010728:	4920      	ldr	r1, [pc, #128]	@ (80107ac <CAD_Init+0x1bc>)
 801072a:	0013      	movs	r3, r2
 801072c:	011b      	lsls	r3, r3, #4
 801072e:	1a9b      	subs	r3, r3, r2
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	585b      	ldr	r3, [r3, r1]
 8010734:	22c0      	movs	r2, #192	@ 0xc0
 8010736:	0112      	lsls	r2, r2, #4
 8010738:	0011      	movs	r1, r2
 801073a:	0018      	movs	r0, r3
 801073c:	f7ff ff26 	bl	801058c <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8010740:	193b      	adds	r3, r7, r4
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	0018      	movs	r0, r3
 8010746:	f005 faae 	bl	8015ca6 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 801074a:	193b      	adds	r3, r7, r4
 801074c:	781a      	ldrb	r2, [r3, #0]
 801074e:	4917      	ldr	r1, [pc, #92]	@ (80107ac <CAD_Init+0x1bc>)
 8010750:	0013      	movs	r3, r2
 8010752:	011b      	lsls	r3, r3, #4
 8010754:	1a9b      	subs	r3, r3, r2
 8010756:	009b      	lsls	r3, r3, #2
 8010758:	585b      	ldr	r3, [r3, r1]
 801075a:	0018      	movs	r0, r3
 801075c:	f7ff fef2 	bl	8010544 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8010760:	193b      	adds	r3, r7, r4
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	0018      	movs	r0, r3
 8010766:	f001 fde3 	bl	8012330 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 801076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076c:	4a10      	ldr	r2, [pc, #64]	@ (80107b0 <CAD_Init+0x1c0>)
 801076e:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8010770:	193b      	adds	r3, r7, r4
 8010772:	781a      	ldrb	r2, [r3, #0]
 8010774:	490d      	ldr	r1, [pc, #52]	@ (80107ac <CAD_Init+0x1bc>)
 8010776:	0013      	movs	r3, r2
 8010778:	011b      	lsls	r3, r3, #4
 801077a:	1a9b      	subs	r3, r3, r2
 801077c:	009b      	lsls	r3, r3, #2
 801077e:	18cb      	adds	r3, r1, r3
 8010780:	330c      	adds	r3, #12
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	795b      	ldrb	r3, [r3, #5]
 8010786:	06db      	lsls	r3, r3, #27
 8010788:	0fdb      	lsrs	r3, r3, #31
 801078a:	b2da      	uxtb	r2, r3
 801078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801078e:	01d0      	lsls	r0, r2, #7
 8010790:	785a      	ldrb	r2, [r3, #1]
 8010792:	217f      	movs	r1, #127	@ 0x7f
 8010794:	400a      	ands	r2, r1
 8010796:	1c11      	adds	r1, r2, #0
 8010798:	1c02      	adds	r2, r0, #0
 801079a:	430a      	orrs	r2, r1
 801079c:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 801079e:	46c0      	nop			@ (mov r8, r8)
 80107a0:	46bd      	mov	sp, r7
 80107a2:	b00b      	add	sp, #44	@ 0x2c
 80107a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107a6:	46c0      	nop			@ (mov r8, r8)
 80107a8:	2000058c 	.word	0x2000058c
 80107ac:	200005b8 	.word	0x200005b8
 80107b0:	080108b1 	.word	0x080108b1

080107b4 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	0002      	movs	r2, r0
 80107bc:	1dfb      	adds	r3, r7, #7
 80107be:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 80107c0:	1dfb      	adds	r3, r7, #7
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	0018      	movs	r0, r3
 80107c6:	f001 fe63 	bl	8012490 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 80107ca:	1dfb      	adds	r3, r7, #7
 80107cc:	7819      	ldrb	r1, [r3, #0]
 80107ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010800 <CAD_Enter_ErrorRecovery+0x4c>)
 80107d0:	000b      	movs	r3, r1
 80107d2:	005b      	lsls	r3, r3, #1
 80107d4:	185b      	adds	r3, r3, r1
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	5c99      	ldrb	r1, [r3, r2]
 80107da:	2080      	movs	r0, #128	@ 0x80
 80107dc:	4240      	negs	r0, r0
 80107de:	4301      	orrs	r1, r0
 80107e0:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 80107e2:	1dfb      	adds	r3, r7, #7
 80107e4:	781a      	ldrb	r2, [r3, #0]
 80107e6:	4907      	ldr	r1, [pc, #28]	@ (8010804 <CAD_Enter_ErrorRecovery+0x50>)
 80107e8:	0013      	movs	r3, r2
 80107ea:	011b      	lsls	r3, r3, #4
 80107ec:	1a9b      	subs	r3, r3, r2
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	18cb      	adds	r3, r1, r3
 80107f2:	332c      	adds	r3, #44	@ 0x2c
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4798      	blx	r3
}
 80107f8:	46c0      	nop			@ (mov r8, r8)
 80107fa:	46bd      	mov	sp, r7
 80107fc:	b002      	add	sp, #8
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	2000058c 	.word	0x2000058c
 8010804:	200005b8 	.word	0x200005b8

08010808 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	0002      	movs	r2, r0
 8010810:	6039      	str	r1, [r7, #0]
 8010812:	1dfb      	adds	r3, r7, #7
 8010814:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 8010816:	1dfb      	adds	r3, r7, #7
 8010818:	781a      	ldrb	r2, [r3, #0]
 801081a:	4919      	ldr	r1, [pc, #100]	@ (8010880 <CAD_SRC_Set_ResistorRp+0x78>)
 801081c:	0013      	movs	r3, r2
 801081e:	011b      	lsls	r3, r3, #4
 8010820:	1a9b      	subs	r3, r3, r2
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	18cb      	adds	r3, r1, r3
 8010826:	3310      	adds	r3, #16
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	683a      	ldr	r2, [r7, #0]
 801082c:	1c11      	adds	r1, r2, #0
 801082e:	2203      	movs	r2, #3
 8010830:	400a      	ands	r2, r1
 8010832:	b2d2      	uxtb	r2, r2
 8010834:	2103      	movs	r1, #3
 8010836:	400a      	ands	r2, r1
 8010838:	0010      	movs	r0, r2
 801083a:	789a      	ldrb	r2, [r3, #2]
 801083c:	2103      	movs	r1, #3
 801083e:	438a      	bics	r2, r1
 8010840:	1c11      	adds	r1, r2, #0
 8010842:	1c02      	adds	r2, r0, #0
 8010844:	430a      	orrs	r2, r1
 8010846:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8010848:	1dfb      	adds	r3, r7, #7
 801084a:	781a      	ldrb	r2, [r3, #0]
 801084c:	490d      	ldr	r1, [pc, #52]	@ (8010884 <CAD_SRC_Set_ResistorRp+0x7c>)
 801084e:	0013      	movs	r3, r2
 8010850:	005b      	lsls	r3, r3, #1
 8010852:	189b      	adds	r3, r3, r2
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	18cb      	adds	r3, r1, r3
 8010858:	785a      	ldrb	r2, [r3, #1]
 801085a:	2101      	movs	r1, #1
 801085c:	430a      	orrs	r2, r1
 801085e:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8010860:	1dfb      	adds	r3, r7, #7
 8010862:	781a      	ldrb	r2, [r3, #0]
 8010864:	4906      	ldr	r1, [pc, #24]	@ (8010880 <CAD_SRC_Set_ResistorRp+0x78>)
 8010866:	0013      	movs	r3, r2
 8010868:	011b      	lsls	r3, r3, #4
 801086a:	1a9b      	subs	r3, r3, r2
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	18cb      	adds	r3, r1, r3
 8010870:	332c      	adds	r3, #44	@ 0x2c
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4798      	blx	r3
  return 0;
 8010876:	2300      	movs	r3, #0
}
 8010878:	0018      	movs	r0, r3
 801087a:	46bd      	mov	sp, r7
 801087c:	b002      	add	sp, #8
 801087e:	bd80      	pop	{r7, pc}
 8010880:	200005b8 	.word	0x200005b8
 8010884:	2000058c 	.word	0x2000058c

08010888 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	0002      	movs	r2, r0
 8010890:	6039      	str	r1, [r7, #0]
 8010892:	1dfb      	adds	r3, r7, #7
 8010894:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 8010896:	683a      	ldr	r2, [r7, #0]
 8010898:	1dfb      	adds	r3, r7, #7
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	0011      	movs	r1, r2
 801089e:	0018      	movs	r0, r3
 80108a0:	f7ff ffb2 	bl	8010808 <CAD_SRC_Set_ResistorRp>
 80108a4:	0003      	movs	r3, r0
}
 80108a6:	0018      	movs	r0, r3
 80108a8:	46bd      	mov	sp, r7
 80108aa:	b002      	add	sp, #8
 80108ac:	bd80      	pop	{r7, pc}
	...

080108b0 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b086      	sub	sp, #24
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60b9      	str	r1, [r7, #8]
 80108b8:	607a      	str	r2, [r7, #4]
 80108ba:	210f      	movs	r1, #15
 80108bc:	187b      	adds	r3, r7, r1
 80108be:	1c02      	adds	r2, r0, #0
 80108c0:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80108c2:	187b      	adds	r3, r7, r1
 80108c4:	781a      	ldrb	r2, [r3, #0]
 80108c6:	0013      	movs	r3, r2
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	189b      	adds	r3, r3, r2
 80108cc:	009b      	lsls	r3, r3, #2
 80108ce:	4a1b      	ldr	r2, [pc, #108]	@ (801093c <CAD_StateMachine_SNK+0x8c>)
 80108d0:	189b      	adds	r3, r3, r2
 80108d2:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80108d4:	2302      	movs	r3, #2
 80108d6:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	785b      	ldrb	r3, [r3, #1]
 80108dc:	069b      	lsls	r3, r3, #26
 80108de:	0edb      	lsrs	r3, r3, #27
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d019      	beq.n	801091a <CAD_StateMachine_SNK+0x6a>
 80108e6:	dc23      	bgt.n	8010930 <CAD_StateMachine_SNK+0x80>
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d002      	beq.n	80108f2 <CAD_StateMachine_SNK+0x42>
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d009      	beq.n	8010904 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 80108f0:	e01e      	b.n	8010930 <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 80108f2:	230f      	movs	r3, #15
 80108f4:	18fb      	adds	r3, r7, r3
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	0018      	movs	r0, r3
 80108fa:	f000 f995 	bl	8010c28 <ManageStateDetached_SNK>
 80108fe:	0003      	movs	r3, r0
 8010900:	617b      	str	r3, [r7, #20]
      break;
 8010902:	e016      	b.n	8010932 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	68b9      	ldr	r1, [r7, #8]
 8010908:	230f      	movs	r3, #15
 801090a:	18fb      	adds	r3, r7, r3
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	0018      	movs	r0, r3
 8010910:	f000 f9dc 	bl	8010ccc <ManageStateAttachedWait_SNK>
 8010914:	0003      	movs	r3, r0
 8010916:	617b      	str	r3, [r7, #20]
      break;
 8010918:	e00b      	b.n	8010932 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	68b9      	ldr	r1, [r7, #8]
 801091e:	230f      	movs	r3, #15
 8010920:	18fb      	adds	r3, r7, r3
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	0018      	movs	r0, r3
 8010926:	f000 fa5f 	bl	8010de8 <ManageStateAttached_SNK>
 801092a:	0003      	movs	r3, r0
 801092c:	617b      	str	r3, [r7, #20]
      break;
 801092e:	e000      	b.n	8010932 <CAD_StateMachine_SNK+0x82>
      break;
 8010930:	46c0      	nop			@ (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8010932:	697b      	ldr	r3, [r7, #20]
}
 8010934:	0018      	movs	r0, r3
 8010936:	46bd      	mov	sp, r7
 8010938:	b006      	add	sp, #24
 801093a:	bd80      	pop	{r7, pc}
 801093c:	2000058c 	.word	0x2000058c

08010940 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010940:	b590      	push	{r4, r7, lr}
 8010942:	b087      	sub	sp, #28
 8010944:	af00      	add	r7, sp, #0
 8010946:	60b9      	str	r1, [r7, #8]
 8010948:	607a      	str	r2, [r7, #4]
 801094a:	210f      	movs	r1, #15
 801094c:	187b      	adds	r3, r7, r1
 801094e:	1c02      	adds	r2, r0, #0
 8010950:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010952:	187b      	adds	r3, r7, r1
 8010954:	781a      	ldrb	r2, [r3, #0]
 8010956:	0013      	movs	r3, r2
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	189b      	adds	r3, r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4a62      	ldr	r2, [pc, #392]	@ (8010ae8 <CAD_StateMachine+0x1a8>)
 8010960:	189b      	adds	r3, r3, r2
 8010962:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010964:	2302      	movs	r3, #2
 8010966:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	2200      	movs	r2, #0
 801096c:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 801096e:	187b      	adds	r3, r7, r1
 8010970:	781a      	ldrb	r2, [r3, #0]
 8010972:	495e      	ldr	r1, [pc, #376]	@ (8010aec <CAD_StateMachine+0x1ac>)
 8010974:	0013      	movs	r3, r2
 8010976:	011b      	lsls	r3, r3, #4
 8010978:	1a9b      	subs	r3, r3, r2
 801097a:	009b      	lsls	r3, r3, #2
 801097c:	18cb      	adds	r3, r1, r3
 801097e:	3310      	adds	r3, #16
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	2210      	movs	r2, #16
 8010986:	4013      	ands	r3, r2
 8010988:	b2db      	uxtb	r3, r3
 801098a:	2b00      	cmp	r3, #0
 801098c:	d001      	beq.n	8010992 <CAD_StateMachine+0x52>
  {
    return _timing;
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	e0a5      	b.n	8010ade <CAD_StateMachine+0x19e>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	781b      	ldrb	r3, [r3, #0]
 8010996:	227f      	movs	r2, #127	@ 0x7f
 8010998:	4393      	bics	r3, r2
 801099a:	b2db      	uxtb	r3, r3
 801099c:	2b00      	cmp	r3, #0
 801099e:	d00c      	beq.n	80109ba <CAD_StateMachine+0x7a>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	781a      	ldrb	r2, [r3, #0]
 80109a4:	217f      	movs	r1, #127	@ 0x7f
 80109a6:	400a      	ands	r2, r1
 80109a8:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	785a      	ldrb	r2, [r3, #1]
 80109ae:	213e      	movs	r1, #62	@ 0x3e
 80109b0:	438a      	bics	r2, r1
 80109b2:	1c11      	adds	r1, r2, #0
 80109b4:	2218      	movs	r2, #24
 80109b6:	430a      	orrs	r2, r1
 80109b8:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	785b      	ldrb	r3, [r3, #1]
 80109be:	069b      	lsls	r3, r3, #26
 80109c0:	0edb      	lsrs	r3, r3, #27
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	2b0d      	cmp	r3, #13
 80109c6:	d065      	beq.n	8010a94 <CAD_StateMachine+0x154>
 80109c8:	dd00      	ble.n	80109cc <CAD_StateMachine+0x8c>
 80109ca:	e07a      	b.n	8010ac2 <CAD_StateMachine+0x182>
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d002      	beq.n	80109d6 <CAD_StateMachine+0x96>
 80109d0:	2b0c      	cmp	r3, #12
 80109d2:	d033      	beq.n	8010a3c <CAD_StateMachine+0xfc>
 80109d4:	e075      	b.n	8010ac2 <CAD_StateMachine+0x182>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 80109d6:	240f      	movs	r4, #15
 80109d8:	193b      	adds	r3, r7, r4
 80109da:	781a      	ldrb	r2, [r3, #0]
 80109dc:	4943      	ldr	r1, [pc, #268]	@ (8010aec <CAD_StateMachine+0x1ac>)
 80109de:	0013      	movs	r3, r2
 80109e0:	011b      	lsls	r3, r3, #4
 80109e2:	1a9b      	subs	r3, r3, r2
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	585b      	ldr	r3, [r3, r1]
 80109e8:	0018      	movs	r0, r3
 80109ea:	f7ff fde3 	bl	80105b4 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 80109ee:	193b      	adds	r3, r7, r4
 80109f0:	781a      	ldrb	r2, [r3, #0]
 80109f2:	493e      	ldr	r1, [pc, #248]	@ (8010aec <CAD_StateMachine+0x1ac>)
 80109f4:	0013      	movs	r3, r2
 80109f6:	011b      	lsls	r3, r3, #4
 80109f8:	1a9b      	subs	r3, r3, r2
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	585b      	ldr	r3, [r3, r1]
 80109fe:	0018      	movs	r0, r3
 8010a00:	f7ff fde7 	bl	80105d2 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 8010a04:	193b      	adds	r3, r7, r4
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d107      	bne.n	8010a1c <CAD_StateMachine+0xdc>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 8010a0c:	2102      	movs	r1, #2
 8010a0e:	2008      	movs	r0, #8
 8010a10:	f7ff fd2a 	bl	8010468 <__NVIC_SetPriority>
 8010a14:	2008      	movs	r0, #8
 8010a16:	f7ff fd0d 	bl	8010434 <__NVIC_EnableIRQ>
 8010a1a:	e006      	b.n	8010a2a <CAD_StateMachine+0xea>
      }
#if USBPD_PORT_COUNT > 1
      else
      {
        UCPD_INSTANCE1_ENABLEIRQ;
 8010a1c:	2102      	movs	r1, #2
 8010a1e:	2008      	movs	r0, #8
 8010a20:	f7ff fd22 	bl	8010468 <__NVIC_SetPriority>
 8010a24:	2008      	movs	r0, #8
 8010a26:	f7ff fd05 	bl	8010434 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	785a      	ldrb	r2, [r3, #1]
 8010a2e:	213e      	movs	r1, #62	@ 0x3e
 8010a30:	438a      	bics	r2, r1
 8010a32:	1c11      	adds	r1, r2, #0
 8010a34:	2202      	movs	r2, #2
 8010a36:	430a      	orrs	r2, r1
 8010a38:	705a      	strb	r2, [r3, #1]
      break;
 8010a3a:	e04f      	b.n	8010adc <CAD_StateMachine+0x19c>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8010a3c:	240f      	movs	r4, #15
 8010a3e:	193b      	adds	r3, r7, r4
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	0018      	movs	r0, r3
 8010a44:	f001 fd24 	bl	8012490 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8010a48:	193b      	adds	r3, r7, r4
 8010a4a:	781a      	ldrb	r2, [r3, #0]
 8010a4c:	4927      	ldr	r1, [pc, #156]	@ (8010aec <CAD_StateMachine+0x1ac>)
 8010a4e:	0013      	movs	r3, r2
 8010a50:	011b      	lsls	r3, r3, #4
 8010a52:	1a9b      	subs	r3, r3, r2
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	18cb      	adds	r3, r1, r3
 8010a58:	3334      	adds	r3, #52	@ 0x34
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2200      	movs	r2, #0
 8010a62:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	781a      	ldrb	r2, [r3, #0]
 8010a68:	2103      	movs	r1, #3
 8010a6a:	438a      	bics	r2, r1
 8010a6c:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	2201      	movs	r2, #1
 8010a72:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010a74:	f7f7 fc4a 	bl	800830c <HAL_GetTick>
 8010a78:	0002      	movs	r2, r0
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8010a7e:	231a      	movs	r3, #26
 8010a80:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	785a      	ldrb	r2, [r3, #1]
 8010a86:	213e      	movs	r1, #62	@ 0x3e
 8010a88:	438a      	bics	r2, r1
 8010a8a:	1c11      	adds	r1, r2, #0
 8010a8c:	221a      	movs	r2, #26
 8010a8e:	430a      	orrs	r2, r1
 8010a90:	705a      	strb	r2, [r3, #1]
      break;
 8010a92:	e023      	b.n	8010adc <CAD_StateMachine+0x19c>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8010a94:	f7f7 fc3a 	bl	800830c <HAL_GetTick>
 8010a98:	0002      	movs	r2, r0
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	1ad3      	subs	r3, r2, r3
 8010aa0:	2b1a      	cmp	r3, #26
 8010aa2:	d91a      	bls.n	8010ada <CAD_StateMachine+0x19a>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8010aa4:	230f      	movs	r3, #15
 8010aa6:	18fb      	adds	r3, r7, r3
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	0018      	movs	r0, r3
 8010aac:	f001 fc40 	bl	8012330 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	785a      	ldrb	r2, [r3, #1]
 8010ab4:	213e      	movs	r1, #62	@ 0x3e
 8010ab6:	438a      	bics	r2, r1
 8010ab8:	1c11      	adds	r1, r2, #0
 8010aba:	2202      	movs	r2, #2
 8010abc:	430a      	orrs	r2, r1
 8010abe:	705a      	strb	r2, [r3, #1]
      }
      break;
 8010ac0:	e00b      	b.n	8010ada <CAD_StateMachine+0x19a>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	687c      	ldr	r4, [r7, #4]
 8010ac8:	68b9      	ldr	r1, [r7, #8]
 8010aca:	220f      	movs	r2, #15
 8010acc:	18ba      	adds	r2, r7, r2
 8010ace:	7810      	ldrb	r0, [r2, #0]
 8010ad0:	0022      	movs	r2, r4
 8010ad2:	4798      	blx	r3
 8010ad4:	0003      	movs	r3, r0
 8010ad6:	617b      	str	r3, [r7, #20]
      break;
 8010ad8:	e000      	b.n	8010adc <CAD_StateMachine+0x19c>
      break;
 8010ada:	46c0      	nop			@ (mov r8, r8)
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 8010adc:	697b      	ldr	r3, [r7, #20]
}
 8010ade:	0018      	movs	r0, r3
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	b007      	add	sp, #28
 8010ae4:	bd90      	pop	{r4, r7, pc}
 8010ae6:	46c0      	nop			@ (mov r8, r8)
 8010ae8:	2000058c 	.word	0x2000058c
 8010aec:	200005b8 	.word	0x200005b8

08010af0 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b086      	sub	sp, #24
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	0002      	movs	r2, r0
 8010af8:	1dfb      	adds	r3, r7, #7
 8010afa:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010afc:	1dfb      	adds	r3, r7, #7
 8010afe:	781a      	ldrb	r2, [r3, #0]
 8010b00:	0013      	movs	r3, r2
 8010b02:	005b      	lsls	r3, r3, #1
 8010b04:	189b      	adds	r3, r3, r2
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	4a45      	ldr	r2, [pc, #276]	@ (8010c20 <CAD_Check_HW_SNK+0x130>)
 8010b0a:	189b      	adds	r3, r3, r2
 8010b0c:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8010b0e:	1dfb      	adds	r3, r7, #7
 8010b10:	781a      	ldrb	r2, [r3, #0]
 8010b12:	4944      	ldr	r1, [pc, #272]	@ (8010c24 <CAD_Check_HW_SNK+0x134>)
 8010b14:	0013      	movs	r3, r2
 8010b16:	011b      	lsls	r3, r3, #4
 8010b18:	1a9b      	subs	r3, r3, r2
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	585b      	ldr	r3, [r3, r1]
 8010b1e:	695a      	ldr	r2, [r3, #20]
 8010b20:	23c0      	movs	r3, #192	@ 0xc0
 8010b22:	029b      	lsls	r3, r3, #10
 8010b24:	4013      	ands	r3, r2
 8010b26:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8010b28:	1dfb      	adds	r3, r7, #7
 8010b2a:	781a      	ldrb	r2, [r3, #0]
 8010b2c:	493d      	ldr	r1, [pc, #244]	@ (8010c24 <CAD_Check_HW_SNK+0x134>)
 8010b2e:	0013      	movs	r3, r2
 8010b30:	011b      	lsls	r3, r3, #4
 8010b32:	1a9b      	subs	r3, r3, r2
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	585b      	ldr	r3, [r3, r1]
 8010b38:	695a      	ldr	r2, [r3, #20]
 8010b3a:	23c0      	movs	r3, #192	@ 0xc0
 8010b3c:	031b      	lsls	r3, r3, #12
 8010b3e:	4013      	ands	r3, r2
 8010b40:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	781a      	ldrb	r2, [r3, #0]
 8010b46:	2103      	movs	r1, #3
 8010b48:	438a      	bics	r2, r1
 8010b4a:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	781a      	ldrb	r2, [r3, #0]
 8010b50:	211c      	movs	r1, #28
 8010b52:	438a      	bics	r2, r1
 8010b54:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d02c      	beq.n	8010bb6 <CAD_Check_HW_SNK+0xc6>
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d129      	bne.n	8010bb6 <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	781a      	ldrb	r2, [r3, #0]
 8010b66:	211c      	movs	r1, #28
 8010b68:	438a      	bics	r2, r1
 8010b6a:	1c11      	adds	r1, r2, #0
 8010b6c:	2204      	movs	r2, #4
 8010b6e:	430a      	orrs	r2, r1
 8010b70:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	781a      	ldrb	r2, [r3, #0]
 8010b76:	2103      	movs	r1, #3
 8010b78:	438a      	bics	r2, r1
 8010b7a:	1c11      	adds	r1, r2, #0
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	430a      	orrs	r2, r1
 8010b80:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	0c18      	lsrs	r0, r3, #16
 8010b86:	1dfb      	adds	r3, r7, #7
 8010b88:	781a      	ldrb	r2, [r3, #0]
 8010b8a:	4926      	ldr	r1, [pc, #152]	@ (8010c24 <CAD_Check_HW_SNK+0x134>)
 8010b8c:	0013      	movs	r3, r2
 8010b8e:	011b      	lsls	r3, r3, #4
 8010b90:	1a9b      	subs	r3, r3, r2
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	18cb      	adds	r3, r1, r3
 8010b96:	3310      	adds	r3, #16
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	1c01      	adds	r1, r0, #0
 8010b9c:	2203      	movs	r2, #3
 8010b9e:	400a      	ands	r2, r1
 8010ba0:	b2d2      	uxtb	r2, r2
 8010ba2:	2103      	movs	r1, #3
 8010ba4:	400a      	ands	r2, r1
 8010ba6:	0090      	lsls	r0, r2, #2
 8010ba8:	789a      	ldrb	r2, [r3, #2]
 8010baa:	210c      	movs	r1, #12
 8010bac:	438a      	bics	r2, r1
 8010bae:	1c11      	adds	r1, r2, #0
 8010bb0:	1c02      	adds	r2, r0, #0
 8010bb2:	430a      	orrs	r2, r1
 8010bb4:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d12c      	bne.n	8010c16 <CAD_Check_HW_SNK+0x126>
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d029      	beq.n	8010c16 <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	781a      	ldrb	r2, [r3, #0]
 8010bc6:	211c      	movs	r1, #28
 8010bc8:	438a      	bics	r2, r1
 8010bca:	1c11      	adds	r1, r2, #0
 8010bcc:	2204      	movs	r2, #4
 8010bce:	430a      	orrs	r2, r1
 8010bd0:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	781a      	ldrb	r2, [r3, #0]
 8010bd6:	2103      	movs	r1, #3
 8010bd8:	438a      	bics	r2, r1
 8010bda:	1c11      	adds	r1, r2, #0
 8010bdc:	2202      	movs	r2, #2
 8010bde:	430a      	orrs	r2, r1
 8010be0:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	0c98      	lsrs	r0, r3, #18
 8010be6:	1dfb      	adds	r3, r7, #7
 8010be8:	781a      	ldrb	r2, [r3, #0]
 8010bea:	490e      	ldr	r1, [pc, #56]	@ (8010c24 <CAD_Check_HW_SNK+0x134>)
 8010bec:	0013      	movs	r3, r2
 8010bee:	011b      	lsls	r3, r3, #4
 8010bf0:	1a9b      	subs	r3, r3, r2
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	18cb      	adds	r3, r1, r3
 8010bf6:	3310      	adds	r3, #16
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	1c01      	adds	r1, r0, #0
 8010bfc:	2203      	movs	r2, #3
 8010bfe:	400a      	ands	r2, r1
 8010c00:	b2d2      	uxtb	r2, r2
 8010c02:	2103      	movs	r1, #3
 8010c04:	400a      	ands	r2, r1
 8010c06:	0090      	lsls	r0, r2, #2
 8010c08:	789a      	ldrb	r2, [r3, #2]
 8010c0a:	210c      	movs	r1, #12
 8010c0c:	438a      	bics	r2, r1
 8010c0e:	1c11      	adds	r1, r2, #0
 8010c10:	1c02      	adds	r2, r0, #0
 8010c12:	430a      	orrs	r2, r1
 8010c14:	709a      	strb	r2, [r3, #2]
  }
}
 8010c16:	46c0      	nop			@ (mov r8, r8)
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	b006      	add	sp, #24
 8010c1c:	bd80      	pop	{r7, pc}
 8010c1e:	46c0      	nop			@ (mov r8, r8)
 8010c20:	2000058c 	.word	0x2000058c
 8010c24:	200005b8 	.word	0x200005b8

08010c28 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	0002      	movs	r2, r0
 8010c30:	1dfb      	adds	r3, r7, #7
 8010c32:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010c34:	1dfb      	adds	r3, r7, #7
 8010c36:	781a      	ldrb	r2, [r3, #0]
 8010c38:	0013      	movs	r3, r2
 8010c3a:	005b      	lsls	r3, r3, #1
 8010c3c:	189b      	adds	r3, r3, r2
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	4a21      	ldr	r2, [pc, #132]	@ (8010cc8 <ManageStateDetached_SNK+0xa0>)
 8010c42:	189b      	adds	r3, r3, r2
 8010c44:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010c46:	2302      	movs	r3, #2
 8010c48:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 8010c4a:	1dfb      	adds	r3, r7, #7
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	0018      	movs	r0, r3
 8010c50:	f7ff ff4e 	bl	8010af0 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	221c      	movs	r2, #28
 8010c5a:	4013      	ands	r3, r2
 8010c5c:	b2db      	uxtb	r3, r3
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d103      	bne.n	8010c6a <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 8010c62:	2301      	movs	r3, #1
 8010c64:	425b      	negs	r3, r3
 8010c66:	60fb      	str	r3, [r7, #12]
 8010c68:	e029      	b.n	8010cbe <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 8010c6a:	f7f7 fb4f 	bl	800830c <HAL_GetTick>
 8010c6e:	0002      	movs	r2, r0
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	785a      	ldrb	r2, [r3, #1]
 8010c78:	213e      	movs	r1, #62	@ 0x3e
 8010c7a:	438a      	bics	r2, r1
 8010c7c:	1c11      	adds	r1, r2, #0
 8010c7e:	2204      	movs	r2, #4
 8010c80:	430a      	orrs	r2, r1
 8010c82:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8010c84:	2001      	movs	r0, #1
 8010c86:	f7f7 fb4b 	bl	8008320 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8010c8a:	1dfb      	adds	r3, r7, #7
 8010c8c:	781b      	ldrb	r3, [r3, #0]
 8010c8e:	0018      	movs	r0, r3
 8010c90:	f7ff ff2e 	bl	8010af0 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	221c      	movs	r2, #28
 8010c9a:	4013      	ands	r3, r2
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d108      	bne.n	8010cb4 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	785a      	ldrb	r2, [r3, #1]
 8010ca6:	213e      	movs	r1, #62	@ 0x3e
 8010ca8:	438a      	bics	r2, r1
 8010caa:	1c11      	adds	r1, r2, #0
 8010cac:	2202      	movs	r2, #2
 8010cae:	430a      	orrs	r2, r1
 8010cb0:	705a      	strb	r2, [r3, #1]
 8010cb2:	e004      	b.n	8010cbe <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8010cb4:	1dfb      	adds	r3, r7, #7
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	0018      	movs	r0, r3
 8010cba:	f005 f805 	bl	8015cc8 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
}
 8010cc0:	0018      	movs	r0, r3
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	b004      	add	sp, #16
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	2000058c 	.word	0x2000058c

08010ccc <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010ccc:	b590      	push	{r4, r7, lr}
 8010cce:	b089      	sub	sp, #36	@ 0x24
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	60b9      	str	r1, [r7, #8]
 8010cd4:	607a      	str	r2, [r7, #4]
 8010cd6:	240f      	movs	r4, #15
 8010cd8:	193b      	adds	r3, r7, r4
 8010cda:	1c02      	adds	r2, r0, #0
 8010cdc:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010cde:	193b      	adds	r3, r7, r4
 8010ce0:	781a      	ldrb	r2, [r3, #0]
 8010ce2:	0013      	movs	r3, r2
 8010ce4:	005b      	lsls	r3, r3, #1
 8010ce6:	189b      	adds	r3, r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4a3e      	ldr	r2, [pc, #248]	@ (8010de4 <ManageStateAttachedWait_SNK+0x118>)
 8010cec:	189b      	adds	r3, r3, r2
 8010cee:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010cf0:	2302      	movs	r3, #2
 8010cf2:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8010cf4:	f7f7 fb0a 	bl	800830c <HAL_GetTick>
 8010cf8:	0002      	movs	r2, r0
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	1ad3      	subs	r3, r2, r3
 8010d00:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8010d02:	193b      	adds	r3, r7, r4
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	0018      	movs	r0, r3
 8010d08:	f7ff fef2 	bl	8010af0 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8010d0c:	69bb      	ldr	r3, [r7, #24]
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	221c      	movs	r2, #28
 8010d12:	4013      	ands	r3, r2
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	2b04      	cmp	r3, #4
 8010d18:	d130      	bne.n	8010d7c <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	2b78      	cmp	r3, #120	@ 0x78
 8010d1e:	d927      	bls.n	8010d70 <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8010d20:	193b      	adds	r3, r7, r4
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	2101      	movs	r1, #1
 8010d26:	0018      	movs	r0, r3
 8010d28:	f004 fe58 	bl	80159dc <USBPD_PWR_IF_GetVBUSStatus>
 8010d2c:	0003      	movs	r3, r0
 8010d2e:	2b01      	cmp	r3, #1
 8010d30:	d11e      	bne.n	8010d70 <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	079b      	lsls	r3, r3, #30
 8010d38:	0f9b      	lsrs	r3, r3, #30
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	001a      	movs	r2, r3
 8010d3e:	193b      	adds	r3, r7, r4
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	0011      	movs	r1, r2
 8010d44:	0018      	movs	r0, r3
 8010d46:	f001 fc45 	bl	80125d4 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	785a      	ldrb	r2, [r3, #1]
 8010d4e:	213e      	movs	r1, #62	@ 0x3e
 8010d50:	438a      	bics	r2, r1
 8010d52:	1c11      	adds	r1, r2, #0
 8010d54:	2206      	movs	r2, #6
 8010d56:	430a      	orrs	r2, r1
 8010d58:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	2202      	movs	r2, #2
 8010d5e:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8010d60:	69bb      	ldr	r3, [r7, #24]
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	079b      	lsls	r3, r3, #30
 8010d66:	0f9b      	lsrs	r3, r3, #30
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	001a      	movs	r2, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010d70:	69bb      	ldr	r3, [r7, #24]
 8010d72:	781a      	ldrb	r2, [r3, #0]
 8010d74:	2120      	movs	r1, #32
 8010d76:	438a      	bics	r2, r1
 8010d78:	701a      	strb	r2, [r3, #0]
 8010d7a:	e02e      	b.n	8010dda <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8010d7c:	69bb      	ldr	r3, [r7, #24]
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	2220      	movs	r2, #32
 8010d82:	4013      	ands	r3, r2
 8010d84:	b2db      	uxtb	r3, r3
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d10c      	bne.n	8010da4 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8010d8a:	f7f7 fabf 	bl	800830c <HAL_GetTick>
 8010d8e:	0002      	movs	r2, r0
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	781a      	ldrb	r2, [r3, #0]
 8010d98:	2120      	movs	r1, #32
 8010d9a:	430a      	orrs	r2, r1
 8010d9c:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8010d9e:	230c      	movs	r3, #12
 8010da0:	61fb      	str	r3, [r7, #28]
 8010da2:	e01a      	b.n	8010dda <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 8010da4:	f7f7 fab2 	bl	800830c <HAL_GetTick>
 8010da8:	0002      	movs	r2, r0
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	2b0c      	cmp	r3, #12
 8010db2:	d912      	bls.n	8010dda <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	781a      	ldrb	r2, [r3, #0]
 8010db8:	2120      	movs	r1, #32
 8010dba:	438a      	bics	r2, r1
 8010dbc:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	785a      	ldrb	r2, [r3, #1]
 8010dc2:	213e      	movs	r1, #62	@ 0x3e
 8010dc4:	438a      	bics	r2, r1
 8010dc6:	1c11      	adds	r1, r2, #0
 8010dc8:	2202      	movs	r2, #2
 8010dca:	430a      	orrs	r2, r1
 8010dcc:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8010dce:	230f      	movs	r3, #15
 8010dd0:	18fb      	adds	r3, r7, r3
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	0018      	movs	r0, r3
 8010dd6:	f004 ff88 	bl	8015cea <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8010dda:	69fb      	ldr	r3, [r7, #28]
}
 8010ddc:	0018      	movs	r0, r3
 8010dde:	46bd      	mov	sp, r7
 8010de0:	b009      	add	sp, #36	@ 0x24
 8010de2:	bd90      	pop	{r4, r7, pc}
 8010de4:	2000058c 	.word	0x2000058c

08010de8 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8010de8:	b590      	push	{r4, r7, lr}
 8010dea:	b089      	sub	sp, #36	@ 0x24
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	60b9      	str	r1, [r7, #8]
 8010df0:	607a      	str	r2, [r7, #4]
 8010df2:	210f      	movs	r1, #15
 8010df4:	187b      	adds	r3, r7, r1
 8010df6:	1c02      	adds	r2, r0, #0
 8010df8:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8010dfa:	0008      	movs	r0, r1
 8010dfc:	183b      	adds	r3, r7, r0
 8010dfe:	781a      	ldrb	r2, [r3, #0]
 8010e00:	0013      	movs	r3, r2
 8010e02:	005b      	lsls	r3, r3, #1
 8010e04:	189b      	adds	r3, r3, r2
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	4a2e      	ldr	r2, [pc, #184]	@ (8010ec4 <ManageStateAttached_SNK+0xdc>)
 8010e0a:	189b      	adds	r3, r3, r2
 8010e0c:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8010e0e:	2302      	movs	r3, #2
 8010e10:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 8010e12:	2300      	movs	r3, #0
 8010e14:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8010e16:	183b      	adds	r3, r7, r0
 8010e18:	781a      	ldrb	r2, [r3, #0]
 8010e1a:	492b      	ldr	r1, [pc, #172]	@ (8010ec8 <ManageStateAttached_SNK+0xe0>)
 8010e1c:	0013      	movs	r3, r2
 8010e1e:	011b      	lsls	r3, r3, #4
 8010e20:	1a9b      	subs	r3, r3, r2
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	18cb      	adds	r3, r1, r3
 8010e26:	3334      	adds	r3, #52	@ 0x34
 8010e28:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d10c      	bne.n	8010e48 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8010e2e:	183b      	adds	r3, r7, r0
 8010e30:	781a      	ldrb	r2, [r3, #0]
 8010e32:	4925      	ldr	r1, [pc, #148]	@ (8010ec8 <ManageStateAttached_SNK+0xe0>)
 8010e34:	0013      	movs	r3, r2
 8010e36:	011b      	lsls	r3, r3, #4
 8010e38:	1a9b      	subs	r3, r3, r2
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	585b      	ldr	r3, [r3, r1]
 8010e3e:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8010e40:	23c0      	movs	r3, #192	@ 0xc0
 8010e42:	029b      	lsls	r3, r3, #10
 8010e44:	4013      	ands	r3, r2
 8010e46:	e00c      	b.n	8010e62 <ManageStateAttached_SNK+0x7a>
 8010e48:	230f      	movs	r3, #15
 8010e4a:	18fb      	adds	r3, r7, r3
 8010e4c:	781a      	ldrb	r2, [r3, #0]
 8010e4e:	491e      	ldr	r1, [pc, #120]	@ (8010ec8 <ManageStateAttached_SNK+0xe0>)
 8010e50:	0013      	movs	r3, r2
 8010e52:	011b      	lsls	r3, r3, #4
 8010e54:	1a9b      	subs	r3, r3, r2
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	585b      	ldr	r3, [r3, r1]
 8010e5a:	695a      	ldr	r2, [r3, #20]
 8010e5c:	23c0      	movs	r3, #192	@ 0xc0
 8010e5e:	031b      	lsls	r3, r3, #12
 8010e60:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8010e62:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8010e64:	240f      	movs	r4, #15
 8010e66:	193b      	adds	r3, r7, r4
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	2102      	movs	r1, #2
 8010e6c:	0018      	movs	r0, r3
 8010e6e:	f004 fdb5 	bl	80159dc <USBPD_PWR_IF_GetVBUSStatus>
 8010e72:	0003      	movs	r3, r0
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d11e      	bne.n	8010eb6 <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8010e78:	697a      	ldr	r2, [r7, #20]
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d11a      	bne.n	8010eb6 <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8010e80:	193b      	adds	r3, r7, r4
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	0018      	movs	r0, r3
 8010e86:	f001 fd07 	bl	8012898 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	781a      	ldrb	r2, [r3, #0]
 8010e8e:	211c      	movs	r1, #28
 8010e90:	438a      	bics	r2, r1
 8010e92:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	785a      	ldrb	r2, [r3, #1]
 8010e98:	213e      	movs	r1, #62	@ 0x3e
 8010e9a:	438a      	bics	r2, r1
 8010e9c:	1c11      	adds	r1, r2, #0
 8010e9e:	2202      	movs	r2, #2
 8010ea0:	430a      	orrs	r2, r1
 8010ea2:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2200      	movs	r2, #0
 8010eae:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	61fb      	str	r3, [r7, #28]
 8010eb4:	e001      	b.n	8010eba <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8010eb6:	230a      	movs	r3, #10
 8010eb8:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8010eba:	69fb      	ldr	r3, [r7, #28]
}
 8010ebc:	0018      	movs	r0, r3
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	b009      	add	sp, #36	@ 0x24
 8010ec2:	bd90      	pop	{r4, r7, pc}
 8010ec4:	2000058c 	.word	0x2000058c
 8010ec8:	200005b8 	.word	0x200005b8

08010ecc <LL_AHB1_GRP1_EnableClock>:
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8010ed4:	4b07      	ldr	r3, [pc, #28]	@ (8010ef4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8010ed6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8010ed8:	4b06      	ldr	r3, [pc, #24]	@ (8010ef4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	430a      	orrs	r2, r1
 8010ede:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8010ee0:	4b04      	ldr	r3, [pc, #16]	@ (8010ef4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8010ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	4013      	ands	r3, r2
 8010ee8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010eea:	68fb      	ldr	r3, [r7, #12]
}
 8010eec:	46c0      	nop			@ (mov r8, r8)
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	b004      	add	sp, #16
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	40021000 	.word	0x40021000

08010ef8 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	0002      	movs	r2, r0
 8010f00:	1dfb      	adds	r3, r7, #7
 8010f02:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
 8010f04:	1dfb      	adds	r3, r7, #7
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d101      	bne.n	8010f10 <USBPD_HW_GetUSPDInstance+0x18>
 8010f0c:	4b03      	ldr	r3, [pc, #12]	@ (8010f1c <USBPD_HW_GetUSPDInstance+0x24>)
 8010f0e:	e000      	b.n	8010f12 <USBPD_HW_GetUSPDInstance+0x1a>
 8010f10:	4b03      	ldr	r3, [pc, #12]	@ (8010f20 <USBPD_HW_GetUSPDInstance+0x28>)
#else
  return UCPD_INSTANCE0;
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 8010f12:	0018      	movs	r0, r3
 8010f14:	46bd      	mov	sp, r7
 8010f16:	b002      	add	sp, #8
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	46c0      	nop			@ (mov r8, r8)
 8010f1c:	4000a400 	.word	0x4000a400
 8010f20:	4000a000 	.word	0x4000a000

08010f24 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8010f24:	b590      	push	{r4, r7, lr}
 8010f26:	b08f      	sub	sp, #60	@ 0x3c
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	0002      	movs	r2, r0
 8010f2c:	1dfb      	adds	r3, r7, #7
 8010f2e:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8010f30:	240c      	movs	r4, #12
 8010f32:	193b      	adds	r3, r7, r4
 8010f34:	0018      	movs	r0, r3
 8010f36:	f7fd f999 	bl	800e26c <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8010f3a:	0021      	movs	r1, r4
 8010f3c:	187b      	adds	r3, r7, r1
 8010f3e:	2200      	movs	r2, #0
 8010f40:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8010f42:	187b      	adds	r3, r7, r1
 8010f44:	2200      	movs	r2, #0
 8010f46:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8010f48:	187b      	adds	r3, r7, r1
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8010f4e:	187b      	adds	r3, r7, r1
 8010f50:	2280      	movs	r2, #128	@ 0x80
 8010f52:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8010f54:	187b      	adds	r3, r7, r1
 8010f56:	2200      	movs	r2, #0
 8010f58:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8010f5a:	187b      	adds	r3, r7, r1
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8010f60:	187b      	adds	r3, r7, r1
 8010f62:	2200      	movs	r2, #0
 8010f64:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8010f66:	187b      	adds	r3, r7, r1
 8010f68:	2200      	movs	r2, #0
 8010f6a:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8010f6c:	187b      	adds	r3, r7, r1
 8010f6e:	2200      	movs	r2, #0
 8010f70:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8010f72:	187b      	adds	r3, r7, r1
 8010f74:	2280      	movs	r2, #128	@ 0x80
 8010f76:	0192      	lsls	r2, r2, #6
 8010f78:	629a      	str	r2, [r3, #40]	@ 0x28

  switch (PortNum)
 8010f7a:	1dfb      	adds	r3, r7, #7
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d002      	beq.n	8010f88 <USBPD_HW_Init_DMARxInstance+0x64>
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d00e      	beq.n	8010fa4 <USBPD_HW_Init_DMARxInstance+0x80>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8010f86:	e01b      	b.n	8010fc0 <USBPD_HW_Init_DMARxInstance+0x9c>
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8010f88:	2001      	movs	r0, #1
 8010f8a:	f7ff ff9f 	bl	8010ecc <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8010f8e:	210c      	movs	r1, #12
 8010f90:	187b      	adds	r3, r7, r1
 8010f92:	223c      	movs	r2, #60	@ 0x3c
 8010f94:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8010f96:	187b      	adds	r3, r7, r1
 8010f98:	480f      	ldr	r0, [pc, #60]	@ (8010fd8 <USBPD_HW_Init_DMARxInstance+0xb4>)
 8010f9a:	001a      	movs	r2, r3
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	f7fd f925 	bl	800e1ec <LL_DMA_Init>
      break;
 8010fa2:	e00d      	b.n	8010fc0 <USBPD_HW_Init_DMARxInstance+0x9c>
      UCPDDMA_INSTANCE1_CLOCKENABLE_RX;
 8010fa4:	2001      	movs	r0, #1
 8010fa6:	f7ff ff91 	bl	8010ecc <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE1_REQUEST_RX;
 8010faa:	210c      	movs	r1, #12
 8010fac:	187b      	adds	r3, r7, r1
 8010fae:	223a      	movs	r2, #58	@ 0x3a
 8010fb0:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
 8010fb2:	187b      	adds	r3, r7, r1
 8010fb4:	4808      	ldr	r0, [pc, #32]	@ (8010fd8 <USBPD_HW_Init_DMARxInstance+0xb4>)
 8010fb6:	001a      	movs	r2, r3
 8010fb8:	2102      	movs	r1, #2
 8010fba:	f7fd f917 	bl	800e1ec <LL_DMA_Init>
      break;
 8010fbe:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
 8010fc0:	1dfb      	adds	r3, r7, #7
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d101      	bne.n	8010fcc <USBPD_HW_Init_DMARxInstance+0xa8>
 8010fc8:	4b04      	ldr	r3, [pc, #16]	@ (8010fdc <USBPD_HW_Init_DMARxInstance+0xb8>)
 8010fca:	e000      	b.n	8010fce <USBPD_HW_Init_DMARxInstance+0xaa>
 8010fcc:	4b04      	ldr	r3, [pc, #16]	@ (8010fe0 <USBPD_HW_Init_DMARxInstance+0xbc>)
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
#endif /* UCPD_INSTANCE1 */
}
 8010fce:	0018      	movs	r0, r3
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	b00f      	add	sp, #60	@ 0x3c
 8010fd4:	bd90      	pop	{r4, r7, pc}
 8010fd6:	46c0      	nop			@ (mov r8, r8)
 8010fd8:	40020000 	.word	0x40020000
 8010fdc:	40020008 	.word	0x40020008
 8010fe0:	40020030 	.word	0x40020030

08010fe4 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	0002      	movs	r2, r0
 8010fec:	1dfb      	adds	r3, r7, #7
 8010fee:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8010ff0:	46c0      	nop			@ (mov r8, r8)
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	b002      	add	sp, #8
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8010ff8:	b590      	push	{r4, r7, lr}
 8010ffa:	b08f      	sub	sp, #60	@ 0x3c
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	0002      	movs	r2, r0
 8011000:	1dfb      	adds	r3, r7, #7
 8011002:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8011004:	240c      	movs	r4, #12
 8011006:	193b      	adds	r3, r7, r4
 8011008:	0018      	movs	r0, r3
 801100a:	f7fd f92f 	bl	800e26c <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 801100e:	0021      	movs	r1, r4
 8011010:	187b      	adds	r3, r7, r1
 8011012:	2210      	movs	r2, #16
 8011014:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8011016:	187b      	adds	r3, r7, r1
 8011018:	2200      	movs	r2, #0
 801101a:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 801101c:	187b      	adds	r3, r7, r1
 801101e:	2200      	movs	r2, #0
 8011020:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8011022:	187b      	adds	r3, r7, r1
 8011024:	2280      	movs	r2, #128	@ 0x80
 8011026:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8011028:	187b      	adds	r3, r7, r1
 801102a:	2200      	movs	r2, #0
 801102c:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 801102e:	187b      	adds	r3, r7, r1
 8011030:	2200      	movs	r2, #0
 8011032:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8011034:	187b      	adds	r3, r7, r1
 8011036:	2200      	movs	r2, #0
 8011038:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 801103a:	187b      	adds	r3, r7, r1
 801103c:	2200      	movs	r2, #0
 801103e:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8011040:	187b      	adds	r3, r7, r1
 8011042:	2200      	movs	r2, #0
 8011044:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 8011046:	1dfb      	adds	r3, r7, #7
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d002      	beq.n	8011054 <USBPD_HW_Init_DMATxInstance+0x5c>
 801104e:	2b01      	cmp	r3, #1
 8011050:	d012      	beq.n	8011078 <USBPD_HW_Init_DMATxInstance+0x80>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8011052:	e023      	b.n	801109c <USBPD_HW_Init_DMATxInstance+0xa4>
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8011054:	2001      	movs	r0, #1
 8011056:	f7ff ff39 	bl	8010ecc <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 801105a:	210c      	movs	r1, #12
 801105c:	187b      	adds	r3, r7, r1
 801105e:	223d      	movs	r2, #61	@ 0x3d
 8011060:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8011062:	187b      	adds	r3, r7, r1
 8011064:	2280      	movs	r2, #128	@ 0x80
 8011066:	0152      	lsls	r2, r2, #5
 8011068:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 801106a:	187b      	adds	r3, r7, r1
 801106c:	4811      	ldr	r0, [pc, #68]	@ (80110b4 <USBPD_HW_Init_DMATxInstance+0xbc>)
 801106e:	001a      	movs	r2, r3
 8011070:	2101      	movs	r1, #1
 8011072:	f7fd f8bb 	bl	800e1ec <LL_DMA_Init>
      break;
 8011076:	e011      	b.n	801109c <USBPD_HW_Init_DMATxInstance+0xa4>
      UCPDDMA_INSTANCE1_CLOCKENABLE_TX;
 8011078:	2001      	movs	r0, #1
 801107a:	f7ff ff27 	bl	8010ecc <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE1_REQUEST_TX;
 801107e:	210c      	movs	r1, #12
 8011080:	187b      	adds	r3, r7, r1
 8011082:	223b      	movs	r2, #59	@ 0x3b
 8011084:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8011086:	187b      	adds	r3, r7, r1
 8011088:	2280      	movs	r2, #128	@ 0x80
 801108a:	0152      	lsls	r2, r2, #5
 801108c:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
 801108e:	187b      	adds	r3, r7, r1
 8011090:	4808      	ldr	r0, [pc, #32]	@ (80110b4 <USBPD_HW_Init_DMATxInstance+0xbc>)
 8011092:	001a      	movs	r2, r3
 8011094:	2103      	movs	r1, #3
 8011096:	f7fd f8a9 	bl	800e1ec <LL_DMA_Init>
      break;
 801109a:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
 801109c:	1dfb      	adds	r3, r7, #7
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d101      	bne.n	80110a8 <USBPD_HW_Init_DMATxInstance+0xb0>
 80110a4:	4b04      	ldr	r3, [pc, #16]	@ (80110b8 <USBPD_HW_Init_DMATxInstance+0xc0>)
 80110a6:	e000      	b.n	80110aa <USBPD_HW_Init_DMATxInstance+0xb2>
 80110a8:	4b04      	ldr	r3, [pc, #16]	@ (80110bc <USBPD_HW_Init_DMATxInstance+0xc4>)
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
#endif /* UCPD_INSTANCE1 */
}
 80110aa:	0018      	movs	r0, r3
 80110ac:	46bd      	mov	sp, r7
 80110ae:	b00f      	add	sp, #60	@ 0x3c
 80110b0:	bd90      	pop	{r4, r7, pc}
 80110b2:	46c0      	nop			@ (mov r8, r8)
 80110b4:	40020000 	.word	0x40020000
 80110b8:	4002001c 	.word	0x4002001c
 80110bc:	40020044 	.word	0x40020044

080110c0 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	0002      	movs	r2, r0
 80110c8:	1dfb      	adds	r3, r7, #7
 80110ca:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 80110cc:	46c0      	nop			@ (mov r8, r8)
 80110ce:	46bd      	mov	sp, r7
 80110d0:	b002      	add	sp, #8
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b082      	sub	sp, #8
 80110d8:	af00      	add	r7, sp, #0
 80110da:	0002      	movs	r2, r0
 80110dc:	1dfb      	adds	r3, r7, #7
 80110de:	701a      	strb	r2, [r3, #0]
 80110e0:	1dbb      	adds	r3, r7, #6
 80110e2:	1c0a      	adds	r2, r1, #0
 80110e4:	701a      	strb	r2, [r3, #0]
  switch (PortNum)
 80110e6:	1dfb      	adds	r3, r7, #7
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d002      	beq.n	80110f4 <USBPD_HW_SetFRSSignalling+0x20>
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d002      	beq.n	80110f8 <USBPD_HW_SetFRSSignalling+0x24>
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 80110f2:	e002      	b.n	80110fa <USBPD_HW_SetFRSSignalling+0x26>
      break;
 80110f4:	46c0      	nop			@ (mov r8, r8)
 80110f6:	e000      	b.n	80110fa <USBPD_HW_SetFRSSignalling+0x26>
      break;
 80110f8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80110fa:	46c0      	nop			@ (mov r8, r8)
 80110fc:	46bd      	mov	sp, r7
 80110fe:	b002      	add	sp, #8
 8011100:	bd80      	pop	{r7, pc}

08011102 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b082      	sub	sp, #8
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	699b      	ldr	r3, [r3, #24]
 801110e:	2280      	movs	r2, #128	@ 0x80
 8011110:	0212      	lsls	r2, r2, #8
 8011112:	431a      	orrs	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	619a      	str	r2, [r3, #24]
}
 8011118:	46c0      	nop			@ (mov r8, r8)
 801111a:	46bd      	mov	sp, r7
 801111c:	b002      	add	sp, #8
 801111e:	bd80      	pop	{r7, pc}

08011120 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	699b      	ldr	r3, [r3, #24]
 801112c:	2280      	movs	r2, #128	@ 0x80
 801112e:	01d2      	lsls	r2, r2, #7
 8011130:	431a      	orrs	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	619a      	str	r2, [r3, #24]
}
 8011136:	46c0      	nop			@ (mov r8, r8)
 8011138:	46bd      	mov	sp, r7
 801113a:	b002      	add	sp, #8
 801113c:	bd80      	pop	{r7, pc}

0801113e <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b082      	sub	sp, #8
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	699b      	ldr	r3, [r3, #24]
 801114a:	2280      	movs	r2, #128	@ 0x80
 801114c:	0152      	lsls	r2, r2, #5
 801114e:	431a      	orrs	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	619a      	str	r2, [r3, #24]
}
 8011154:	46c0      	nop			@ (mov r8, r8)
 8011156:	46bd      	mov	sp, r7
 8011158:	b002      	add	sp, #8
 801115a:	bd80      	pop	{r7, pc}

0801115c <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	699b      	ldr	r3, [r3, #24]
 8011168:	2280      	movs	r2, #128	@ 0x80
 801116a:	0112      	lsls	r2, r2, #4
 801116c:	431a      	orrs	r2, r3
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	619a      	str	r2, [r3, #24]
}
 8011172:	46c0      	nop			@ (mov r8, r8)
 8011174:	46bd      	mov	sp, r7
 8011176:	b002      	add	sp, #8
 8011178:	bd80      	pop	{r7, pc}

0801117a <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b082      	sub	sp, #8
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	699b      	ldr	r3, [r3, #24]
 8011186:	2280      	movs	r2, #128	@ 0x80
 8011188:	00d2      	lsls	r2, r2, #3
 801118a:	431a      	orrs	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	619a      	str	r2, [r3, #24]
}
 8011190:	46c0      	nop			@ (mov r8, r8)
 8011192:	46bd      	mov	sp, r7
 8011194:	b002      	add	sp, #8
 8011196:	bd80      	pop	{r7, pc}

08011198 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	699b      	ldr	r3, [r3, #24]
 80111a4:	2280      	movs	r2, #128	@ 0x80
 80111a6:	0092      	lsls	r2, r2, #2
 80111a8:	431a      	orrs	r2, r3
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	619a      	str	r2, [r3, #24]
}
 80111ae:	46c0      	nop			@ (mov r8, r8)
 80111b0:	46bd      	mov	sp, r7
 80111b2:	b002      	add	sp, #8
 80111b4:	bd80      	pop	{r7, pc}

080111b6 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 80111b6:	b580      	push	{r7, lr}
 80111b8:	b082      	sub	sp, #8
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	699b      	ldr	r3, [r3, #24]
 80111c2:	2240      	movs	r2, #64	@ 0x40
 80111c4:	431a      	orrs	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	619a      	str	r2, [r3, #24]
}
 80111ca:	46c0      	nop			@ (mov r8, r8)
 80111cc:	46bd      	mov	sp, r7
 80111ce:	b002      	add	sp, #8
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b082      	sub	sp, #8
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	699b      	ldr	r3, [r3, #24]
 80111de:	2220      	movs	r2, #32
 80111e0:	431a      	orrs	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	619a      	str	r2, [r3, #24]
}
 80111e6:	46c0      	nop			@ (mov r8, r8)
 80111e8:	46bd      	mov	sp, r7
 80111ea:	b002      	add	sp, #8
 80111ec:	bd80      	pop	{r7, pc}

080111ee <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 80111ee:	b580      	push	{r7, lr}
 80111f0:	b082      	sub	sp, #8
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	2210      	movs	r2, #16
 80111fc:	431a      	orrs	r2, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	619a      	str	r2, [r3, #24]
}
 8011202:	46c0      	nop			@ (mov r8, r8)
 8011204:	46bd      	mov	sp, r7
 8011206:	b002      	add	sp, #8
 8011208:	bd80      	pop	{r7, pc}

0801120a <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 801120a:	b580      	push	{r7, lr}
 801120c:	b082      	sub	sp, #8
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	699b      	ldr	r3, [r3, #24]
 8011216:	2208      	movs	r2, #8
 8011218:	431a      	orrs	r2, r3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	619a      	str	r2, [r3, #24]
}
 801121e:	46c0      	nop			@ (mov r8, r8)
 8011220:	46bd      	mov	sp, r7
 8011222:	b002      	add	sp, #8
 8011224:	bd80      	pop	{r7, pc}

08011226 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b082      	sub	sp, #8
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	699b      	ldr	r3, [r3, #24]
 8011232:	2204      	movs	r2, #4
 8011234:	431a      	orrs	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	619a      	str	r2, [r3, #24]
}
 801123a:	46c0      	nop			@ (mov r8, r8)
 801123c:	46bd      	mov	sp, r7
 801123e:	b002      	add	sp, #8
 8011240:	bd80      	pop	{r7, pc}

08011242 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b082      	sub	sp, #8
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	699b      	ldr	r3, [r3, #24]
 801124e:	2202      	movs	r2, #2
 8011250:	431a      	orrs	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	619a      	str	r2, [r3, #24]
}
 8011256:	46c0      	nop			@ (mov r8, r8)
 8011258:	46bd      	mov	sp, r7
 801125a:	b002      	add	sp, #8
 801125c:	bd80      	pop	{r7, pc}

0801125e <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 801125e:	b580      	push	{r7, lr}
 8011260:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8011262:	2000      	movs	r0, #0
 8011264:	f000 f80c 	bl	8011280 <PORTx_IRQHandler>
}
 8011268:	46c0      	nop			@ (mov r8, r8)
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}

0801126e <USBPD_PORT1_IRQHandler>:

void USBPD_PORT1_IRQHandler(void)
{
 801126e:	b580      	push	{r7, lr}
 8011270:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_1);
 8011272:	2001      	movs	r0, #1
 8011274:	f000 f804 	bl	8011280 <PORTx_IRQHandler>
}
 8011278:	46c0      	nop			@ (mov r8, r8)
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
	...

08011280 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
 8011286:	0002      	movs	r2, r0
 8011288:	1dfb      	adds	r3, r7, #7
 801128a:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 801128c:	1dfb      	adds	r3, r7, #7
 801128e:	781a      	ldrb	r2, [r3, #0]
 8011290:	49a6      	ldr	r1, [pc, #664]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 8011292:	0013      	movs	r3, r2
 8011294:	011b      	lsls	r3, r3, #4
 8011296:	1a9b      	subs	r3, r3, r2
 8011298:	009b      	lsls	r3, r3, #2
 801129a:	585b      	ldr	r3, [r3, r1]
 801129c:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	695b      	ldr	r3, [r3, #20]
 80112a2:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	691b      	ldr	r3, [r3, #16]
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	4013      	ands	r3, r2
 80112ac:	d100      	bne.n	80112b0 <PORTx_IRQHandler+0x30>
 80112ae:	e1fc      	b.n	80116aa <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2202      	movs	r2, #2
 80112b4:	4013      	ands	r3, r2
 80112b6:	d03c      	beq.n	8011332 <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	0018      	movs	r0, r3
 80112bc:	f7ff ffc1 	bl	8011242 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80112c0:	1dfb      	adds	r3, r7, #7
 80112c2:	781a      	ldrb	r2, [r3, #0]
 80112c4:	4999      	ldr	r1, [pc, #612]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80112c6:	0013      	movs	r3, r2
 80112c8:	011b      	lsls	r3, r3, #4
 80112ca:	1a9b      	subs	r3, r3, r2
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	18cb      	adds	r3, r1, r3
 80112d0:	3304      	adds	r3, #4
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	6819      	ldr	r1, [r3, #0]
 80112d6:	1dfb      	adds	r3, r7, #7
 80112d8:	781a      	ldrb	r2, [r3, #0]
 80112da:	4894      	ldr	r0, [pc, #592]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80112dc:	0013      	movs	r3, r2
 80112de:	011b      	lsls	r3, r3, #4
 80112e0:	1a9b      	subs	r3, r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	18c3      	adds	r3, r0, r3
 80112e6:	3304      	adds	r3, #4
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2201      	movs	r2, #1
 80112ec:	4391      	bics	r1, r2
 80112ee:	000a      	movs	r2, r1
 80112f0:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80112f2:	46c0      	nop			@ (mov r8, r8)
 80112f4:	1dfb      	adds	r3, r7, #7
 80112f6:	781a      	ldrb	r2, [r3, #0]
 80112f8:	498c      	ldr	r1, [pc, #560]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80112fa:	0013      	movs	r3, r2
 80112fc:	011b      	lsls	r3, r3, #4
 80112fe:	1a9b      	subs	r3, r3, r2
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	18cb      	adds	r3, r1, r3
 8011304:	3304      	adds	r3, #4
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2201      	movs	r2, #1
 801130c:	4013      	ands	r3, r2
 801130e:	2b01      	cmp	r3, #1
 8011310:	d0f0      	beq.n	80112f4 <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8011312:	1dfb      	adds	r3, r7, #7
 8011314:	781a      	ldrb	r2, [r3, #0]
 8011316:	4985      	ldr	r1, [pc, #532]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 8011318:	0013      	movs	r3, r2
 801131a:	011b      	lsls	r3, r3, #4
 801131c:	1a9b      	subs	r3, r3, r2
 801131e:	009b      	lsls	r3, r3, #2
 8011320:	18cb      	adds	r3, r1, r3
 8011322:	3314      	adds	r3, #20
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	1dfa      	adds	r2, r7, #7
 8011328:	7812      	ldrb	r2, [r2, #0]
 801132a:	2101      	movs	r1, #1
 801132c:	0010      	movs	r0, r2
 801132e:	4798      	blx	r3
      return;
 8011330:	e1bb      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	2204      	movs	r2, #4
 8011336:	4013      	ands	r3, r2
 8011338:	d03c      	beq.n	80113b4 <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	0018      	movs	r0, r3
 801133e:	f7ff ff72 	bl	8011226 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8011342:	1dfb      	adds	r3, r7, #7
 8011344:	781a      	ldrb	r2, [r3, #0]
 8011346:	4979      	ldr	r1, [pc, #484]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 8011348:	0013      	movs	r3, r2
 801134a:	011b      	lsls	r3, r3, #4
 801134c:	1a9b      	subs	r3, r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	18cb      	adds	r3, r1, r3
 8011352:	3304      	adds	r3, #4
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	6819      	ldr	r1, [r3, #0]
 8011358:	1dfb      	adds	r3, r7, #7
 801135a:	781a      	ldrb	r2, [r3, #0]
 801135c:	4873      	ldr	r0, [pc, #460]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 801135e:	0013      	movs	r3, r2
 8011360:	011b      	lsls	r3, r3, #4
 8011362:	1a9b      	subs	r3, r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	18c3      	adds	r3, r0, r3
 8011368:	3304      	adds	r3, #4
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	2201      	movs	r2, #1
 801136e:	4391      	bics	r1, r2
 8011370:	000a      	movs	r2, r1
 8011372:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8011374:	46c0      	nop			@ (mov r8, r8)
 8011376:	1dfb      	adds	r3, r7, #7
 8011378:	781a      	ldrb	r2, [r3, #0]
 801137a:	496c      	ldr	r1, [pc, #432]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 801137c:	0013      	movs	r3, r2
 801137e:	011b      	lsls	r3, r3, #4
 8011380:	1a9b      	subs	r3, r3, r2
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	18cb      	adds	r3, r1, r3
 8011386:	3304      	adds	r3, #4
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2201      	movs	r2, #1
 801138e:	4013      	ands	r3, r2
 8011390:	2b01      	cmp	r3, #1
 8011392:	d0f0      	beq.n	8011376 <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8011394:	1dfb      	adds	r3, r7, #7
 8011396:	781a      	ldrb	r2, [r3, #0]
 8011398:	4964      	ldr	r1, [pc, #400]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 801139a:	0013      	movs	r3, r2
 801139c:	011b      	lsls	r3, r3, #4
 801139e:	1a9b      	subs	r3, r3, r2
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	18cb      	adds	r3, r1, r3
 80113a4:	3314      	adds	r3, #20
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	1dfa      	adds	r2, r7, #7
 80113aa:	7812      	ldrb	r2, [r2, #0]
 80113ac:	2100      	movs	r1, #0
 80113ae:	0010      	movs	r0, r2
 80113b0:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 80113b2:	e17a      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	2208      	movs	r2, #8
 80113b8:	4013      	ands	r3, r2
 80113ba:	d03c      	beq.n	8011436 <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	0018      	movs	r0, r3
 80113c0:	f7ff ff23 	bl	801120a <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80113c4:	1dfb      	adds	r3, r7, #7
 80113c6:	781a      	ldrb	r2, [r3, #0]
 80113c8:	4958      	ldr	r1, [pc, #352]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80113ca:	0013      	movs	r3, r2
 80113cc:	011b      	lsls	r3, r3, #4
 80113ce:	1a9b      	subs	r3, r3, r2
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	18cb      	adds	r3, r1, r3
 80113d4:	3304      	adds	r3, #4
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	6819      	ldr	r1, [r3, #0]
 80113da:	1dfb      	adds	r3, r7, #7
 80113dc:	781a      	ldrb	r2, [r3, #0]
 80113de:	4853      	ldr	r0, [pc, #332]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80113e0:	0013      	movs	r3, r2
 80113e2:	011b      	lsls	r3, r3, #4
 80113e4:	1a9b      	subs	r3, r3, r2
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	18c3      	adds	r3, r0, r3
 80113ea:	3304      	adds	r3, #4
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2201      	movs	r2, #1
 80113f0:	4391      	bics	r1, r2
 80113f2:	000a      	movs	r2, r1
 80113f4:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 80113f6:	46c0      	nop			@ (mov r8, r8)
 80113f8:	1dfb      	adds	r3, r7, #7
 80113fa:	781a      	ldrb	r2, [r3, #0]
 80113fc:	494b      	ldr	r1, [pc, #300]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80113fe:	0013      	movs	r3, r2
 8011400:	011b      	lsls	r3, r3, #4
 8011402:	1a9b      	subs	r3, r3, r2
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	18cb      	adds	r3, r1, r3
 8011408:	3304      	adds	r3, #4
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2201      	movs	r2, #1
 8011410:	4013      	ands	r3, r2
 8011412:	2b01      	cmp	r3, #1
 8011414:	d0f0      	beq.n	80113f8 <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8011416:	1dfb      	adds	r3, r7, #7
 8011418:	781a      	ldrb	r2, [r3, #0]
 801141a:	4944      	ldr	r1, [pc, #272]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 801141c:	0013      	movs	r3, r2
 801141e:	011b      	lsls	r3, r3, #4
 8011420:	1a9b      	subs	r3, r3, r2
 8011422:	009b      	lsls	r3, r3, #2
 8011424:	18cb      	adds	r3, r1, r3
 8011426:	3314      	adds	r3, #20
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	1dfa      	adds	r2, r7, #7
 801142c:	7812      	ldrb	r2, [r2, #0]
 801142e:	2102      	movs	r1, #2
 8011430:	0010      	movs	r0, r2
 8011432:	4798      	blx	r3
      return;
 8011434:	e139      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2210      	movs	r2, #16
 801143a:	4013      	ands	r3, r2
 801143c:	d004      	beq.n	8011448 <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	0018      	movs	r0, r3
 8011442:	f7ff fed4 	bl	80111ee <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8011446:	e130      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	2220      	movs	r2, #32
 801144c:	4013      	ands	r3, r2
 801144e:	d013      	beq.n	8011478 <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	0018      	movs	r0, r3
 8011454:	f7ff febd 	bl	80111d2 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8011458:	1dfb      	adds	r3, r7, #7
 801145a:	781a      	ldrb	r2, [r3, #0]
 801145c:	4933      	ldr	r1, [pc, #204]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 801145e:	0013      	movs	r3, r2
 8011460:	011b      	lsls	r3, r3, #4
 8011462:	1a9b      	subs	r3, r3, r2
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	18cb      	adds	r3, r1, r3
 8011468:	3324      	adds	r3, #36	@ 0x24
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	1dfa      	adds	r2, r7, #7
 801146e:	7812      	ldrb	r2, [r2, #0]
 8011470:	2105      	movs	r1, #5
 8011472:	0010      	movs	r0, r2
 8011474:	4798      	blx	r3
      return;
 8011476:	e118      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	2240      	movs	r2, #64	@ 0x40
 801147c:	4013      	ands	r3, r2
 801147e:	d004      	beq.n	801148a <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	0018      	movs	r0, r3
 8011484:	f7ff fe97 	bl	80111b6 <LL_UCPD_ClearFlag_TxUND>
      return;
 8011488:	e10f      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 801148a:	68ba      	ldr	r2, [r7, #8]
 801148c:	2380      	movs	r3, #128	@ 0x80
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4013      	ands	r3, r2
 8011492:	d023      	beq.n	80114dc <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011498:	2b05      	cmp	r3, #5
 801149a:	d10e      	bne.n	80114ba <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 801149c:	1dfb      	adds	r3, r7, #7
 801149e:	781a      	ldrb	r2, [r3, #0]
 80114a0:	4922      	ldr	r1, [pc, #136]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80114a2:	0013      	movs	r3, r2
 80114a4:	011b      	lsls	r3, r3, #4
 80114a6:	1a9b      	subs	r3, r3, r2
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	18cb      	adds	r3, r1, r3
 80114ac:	331c      	adds	r3, #28
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	1dfa      	adds	r2, r7, #7
 80114b2:	7812      	ldrb	r2, [r2, #0]
 80114b4:	2106      	movs	r1, #6
 80114b6:	0010      	movs	r0, r2
 80114b8:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	0018      	movs	r0, r3
 80114be:	f7ff fe6b 	bl	8011198 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 80114c2:	1dfb      	adds	r3, r7, #7
 80114c4:	781a      	ldrb	r2, [r3, #0]
 80114c6:	4919      	ldr	r1, [pc, #100]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80114c8:	2038      	movs	r0, #56	@ 0x38
 80114ca:	0013      	movs	r3, r2
 80114cc:	011b      	lsls	r3, r3, #4
 80114ce:	1a9b      	subs	r3, r3, r2
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	18cb      	adds	r3, r1, r3
 80114d4:	181b      	adds	r3, r3, r0
 80114d6:	2201      	movs	r2, #1
 80114d8:	701a      	strb	r2, [r3, #0]
      return;
 80114da:	e0e6      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 80114dc:	68ba      	ldr	r2, [r7, #8]
 80114de:	2380      	movs	r3, #128	@ 0x80
 80114e0:	00db      	lsls	r3, r3, #3
 80114e2:	4013      	ands	r3, r2
 80114e4:	d013      	beq.n	801150e <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 80114e6:	1dfb      	adds	r3, r7, #7
 80114e8:	781a      	ldrb	r2, [r3, #0]
 80114ea:	4910      	ldr	r1, [pc, #64]	@ (801152c <PORTx_IRQHandler+0x2ac>)
 80114ec:	0013      	movs	r3, r2
 80114ee:	011b      	lsls	r3, r3, #4
 80114f0:	1a9b      	subs	r3, r3, r2
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	18cb      	adds	r3, r1, r3
 80114f6:	331c      	adds	r3, #28
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	1dfa      	adds	r2, r7, #7
 80114fc:	7812      	ldrb	r2, [r2, #0]
 80114fe:	2105      	movs	r1, #5
 8011500:	0010      	movs	r0, r2
 8011502:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	0018      	movs	r0, r3
 8011508:	f7ff fe37 	bl	801117a <LL_UCPD_ClearFlag_RxHRST>
      return;
 801150c:	e0cd      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	2380      	movs	r3, #128	@ 0x80
 8011512:	011b      	lsls	r3, r3, #4
 8011514:	4013      	ands	r3, r2
 8011516:	d00d      	beq.n	8011534 <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 8011518:	1dfb      	adds	r3, r7, #7
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	4a04      	ldr	r2, [pc, #16]	@ (8011530 <PORTx_IRQHandler+0x2b0>)
 801151e:	2101      	movs	r1, #1
 8011520:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	0018      	movs	r0, r3
 8011526:	f7ff fe19 	bl	801115c <LL_UCPD_ClearFlag_RxOvr>
      return;
 801152a:	e0be      	b.n	80116aa <PORTx_IRQHandler+0x42a>
 801152c:	200005b8 	.word	0x200005b8
 8011530:	200005a4 	.word	0x200005a4
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8011534:	68ba      	ldr	r2, [r7, #8]
 8011536:	2380      	movs	r3, #128	@ 0x80
 8011538:	015b      	lsls	r3, r3, #5
 801153a:	4013      	ands	r3, r2
 801153c:	d100      	bne.n	8011540 <PORTx_IRQHandler+0x2c0>
 801153e:	e096      	b.n	801166e <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8011540:	1dfb      	adds	r3, r7, #7
 8011542:	781a      	ldrb	r2, [r3, #0]
 8011544:	495a      	ldr	r1, [pc, #360]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 8011546:	2038      	movs	r0, #56	@ 0x38
 8011548:	0013      	movs	r3, r2
 801154a:	011b      	lsls	r3, r3, #4
 801154c:	1a9b      	subs	r3, r3, r2
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	18cb      	adds	r3, r1, r3
 8011552:	181b      	adds	r3, r3, r0
 8011554:	2200      	movs	r2, #0
 8011556:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	0018      	movs	r0, r3
 801155c:	f7ff fdef 	bl	801113e <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8011560:	1dfb      	adds	r3, r7, #7
 8011562:	781a      	ldrb	r2, [r3, #0]
 8011564:	4952      	ldr	r1, [pc, #328]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 8011566:	0013      	movs	r3, r2
 8011568:	011b      	lsls	r3, r3, #4
 801156a:	1a9b      	subs	r3, r3, r2
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	18cb      	adds	r3, r1, r3
 8011570:	3308      	adds	r3, #8
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	6819      	ldr	r1, [r3, #0]
 8011576:	1dfb      	adds	r3, r7, #7
 8011578:	781a      	ldrb	r2, [r3, #0]
 801157a:	484d      	ldr	r0, [pc, #308]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 801157c:	0013      	movs	r3, r2
 801157e:	011b      	lsls	r3, r3, #4
 8011580:	1a9b      	subs	r3, r3, r2
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	18c3      	adds	r3, r0, r3
 8011586:	3308      	adds	r3, #8
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2201      	movs	r2, #1
 801158c:	4391      	bics	r1, r2
 801158e:	000a      	movs	r2, r1
 8011590:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8011592:	46c0      	nop			@ (mov r8, r8)
 8011594:	1dfb      	adds	r3, r7, #7
 8011596:	781a      	ldrb	r2, [r3, #0]
 8011598:	4945      	ldr	r1, [pc, #276]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 801159a:	0013      	movs	r3, r2
 801159c:	011b      	lsls	r3, r3, #4
 801159e:	1a9b      	subs	r3, r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	18cb      	adds	r3, r1, r3
 80115a4:	3308      	adds	r3, #8
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	2201      	movs	r2, #1
 80115ac:	4013      	ands	r3, r2
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d0f0      	beq.n	8011594 <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80115b2:	1dfb      	adds	r3, r7, #7
 80115b4:	781a      	ldrb	r2, [r3, #0]
 80115b6:	493e      	ldr	r1, [pc, #248]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 80115b8:	0013      	movs	r3, r2
 80115ba:	011b      	lsls	r3, r3, #4
 80115bc:	1a9b      	subs	r3, r3, r2
 80115be:	009b      	lsls	r3, r3, #2
 80115c0:	18cb      	adds	r3, r1, r3
 80115c2:	3330      	adds	r3, #48	@ 0x30
 80115c4:	6818      	ldr	r0, [r3, #0]
 80115c6:	1dfb      	adds	r3, r7, #7
 80115c8:	781a      	ldrb	r2, [r3, #0]
 80115ca:	4939      	ldr	r1, [pc, #228]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 80115cc:	0013      	movs	r3, r2
 80115ce:	011b      	lsls	r3, r3, #4
 80115d0:	1a9b      	subs	r3, r3, r2
 80115d2:	009b      	lsls	r3, r3, #2
 80115d4:	18cb      	adds	r3, r1, r3
 80115d6:	3308      	adds	r3, #8
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	0002      	movs	r2, r0
 80115dc:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 80115de:	1dfb      	adds	r3, r7, #7
 80115e0:	781a      	ldrb	r2, [r3, #0]
 80115e2:	4933      	ldr	r1, [pc, #204]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 80115e4:	0013      	movs	r3, r2
 80115e6:	011b      	lsls	r3, r3, #4
 80115e8:	1a9b      	subs	r3, r3, r2
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	18cb      	adds	r3, r1, r3
 80115ee:	3308      	adds	r3, #8
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2284      	movs	r2, #132	@ 0x84
 80115f4:	0052      	lsls	r2, r2, #1
 80115f6:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 80115f8:	1dfb      	adds	r3, r7, #7
 80115fa:	781a      	ldrb	r2, [r3, #0]
 80115fc:	492c      	ldr	r1, [pc, #176]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 80115fe:	0013      	movs	r3, r2
 8011600:	011b      	lsls	r3, r3, #4
 8011602:	1a9b      	subs	r3, r3, r2
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	18cb      	adds	r3, r1, r3
 8011608:	3308      	adds	r3, #8
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	6819      	ldr	r1, [r3, #0]
 801160e:	1dfb      	adds	r3, r7, #7
 8011610:	781a      	ldrb	r2, [r3, #0]
 8011612:	4827      	ldr	r0, [pc, #156]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 8011614:	0013      	movs	r3, r2
 8011616:	011b      	lsls	r3, r3, #4
 8011618:	1a9b      	subs	r3, r3, r2
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	18c3      	adds	r3, r0, r3
 801161e:	3308      	adds	r3, #8
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	2201      	movs	r2, #1
 8011624:	430a      	orrs	r2, r1
 8011626:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	2380      	movs	r3, #128	@ 0x80
 801162c:	019b      	lsls	r3, r3, #6
 801162e:	4013      	ands	r3, r2
 8011630:	d117      	bne.n	8011662 <PORTx_IRQHandler+0x3e2>
 8011632:	1dfb      	adds	r3, r7, #7
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	4a1f      	ldr	r2, [pc, #124]	@ (80116b4 <PORTx_IRQHandler+0x434>)
 8011638:	5cd3      	ldrb	r3, [r2, r3]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d111      	bne.n	8011662 <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 801163e:	1dfb      	adds	r3, r7, #7
 8011640:	781a      	ldrb	r2, [r3, #0]
 8011642:	491b      	ldr	r1, [pc, #108]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 8011644:	0013      	movs	r3, r2
 8011646:	011b      	lsls	r3, r3, #4
 8011648:	1a9b      	subs	r3, r3, r2
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	18cb      	adds	r3, r1, r3
 801164e:	3320      	adds	r3, #32
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011656:	2107      	movs	r1, #7
 8011658:	4019      	ands	r1, r3
 801165a:	1dfb      	adds	r3, r7, #7
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	0018      	movs	r0, r3
 8011660:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 8011662:	1dfb      	adds	r3, r7, #7
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	4a13      	ldr	r2, [pc, #76]	@ (80116b4 <PORTx_IRQHandler+0x434>)
 8011668:	2100      	movs	r1, #0
 801166a:	54d1      	strb	r1, [r2, r3]
      return;
 801166c:	e01d      	b.n	80116aa <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 801166e:	68ba      	ldr	r2, [r7, #8]
 8011670:	2380      	movs	r3, #128	@ 0x80
 8011672:	01db      	lsls	r3, r3, #7
 8011674:	4013      	ands	r3, r2
 8011676:	d104      	bne.n	8011682 <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8011678:	68ba      	ldr	r2, [r7, #8]
 801167a:	2380      	movs	r3, #128	@ 0x80
 801167c:	021b      	lsls	r3, r3, #8
 801167e:	4013      	ands	r3, r2
 8011680:	d013      	beq.n	80116aa <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	0018      	movs	r0, r3
 8011686:	f7ff fd4b 	bl	8011120 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	0018      	movs	r0, r3
 801168e:	f7ff fd38 	bl	8011102 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8011692:	1dfb      	adds	r3, r7, #7
 8011694:	781a      	ldrb	r2, [r3, #0]
 8011696:	4906      	ldr	r1, [pc, #24]	@ (80116b0 <PORTx_IRQHandler+0x430>)
 8011698:	0013      	movs	r3, r2
 801169a:	011b      	lsls	r3, r3, #4
 801169c:	1a9b      	subs	r3, r3, r2
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	18cb      	adds	r3, r1, r3
 80116a2:	332c      	adds	r3, #44	@ 0x2c
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 80116a8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 80116aa:	46bd      	mov	sp, r7
 80116ac:	b004      	add	sp, #16
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	200005b8 	.word	0x200005b8
 80116b4:	200005a4 	.word	0x200005a4

080116b8 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 80116b8:	b590      	push	{r4, r7, lr}
 80116ba:	b085      	sub	sp, #20
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60b9      	str	r1, [r7, #8]
 80116c0:	607a      	str	r2, [r7, #4]
 80116c2:	603b      	str	r3, [r7, #0]
 80116c4:	240f      	movs	r4, #15
 80116c6:	193b      	adds	r3, r7, r4
 80116c8:	1c02      	adds	r2, r0, #0
 80116ca:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 80116cc:	193b      	adds	r3, r7, r4
 80116ce:	781a      	ldrb	r2, [r3, #0]
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	6919      	ldr	r1, [r3, #16]
 80116d4:	4830      	ldr	r0, [pc, #192]	@ (8011798 <USBPD_PHY_Init+0xe0>)
 80116d6:	0013      	movs	r3, r2
 80116d8:	011b      	lsls	r3, r3, #4
 80116da:	1a9b      	subs	r3, r3, r2
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	18c3      	adds	r3, r0, r3
 80116e0:	3314      	adds	r3, #20
 80116e2:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 80116e4:	193b      	adds	r3, r7, r4
 80116e6:	781a      	ldrb	r2, [r3, #0]
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	68d9      	ldr	r1, [r3, #12]
 80116ec:	482a      	ldr	r0, [pc, #168]	@ (8011798 <USBPD_PHY_Init+0xe0>)
 80116ee:	0013      	movs	r3, r2
 80116f0:	011b      	lsls	r3, r3, #4
 80116f2:	1a9b      	subs	r3, r3, r2
 80116f4:	009b      	lsls	r3, r3, #2
 80116f6:	18c3      	adds	r3, r0, r3
 80116f8:	3318      	adds	r3, #24
 80116fa:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 80116fc:	193b      	adds	r3, r7, r4
 80116fe:	781a      	ldrb	r2, [r3, #0]
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	6859      	ldr	r1, [r3, #4]
 8011704:	4824      	ldr	r0, [pc, #144]	@ (8011798 <USBPD_PHY_Init+0xe0>)
 8011706:	0013      	movs	r3, r2
 8011708:	011b      	lsls	r3, r3, #4
 801170a:	1a9b      	subs	r3, r3, r2
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	18c3      	adds	r3, r0, r3
 8011710:	331c      	adds	r3, #28
 8011712:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8011714:	193b      	adds	r3, r7, r4
 8011716:	781a      	ldrb	r2, [r3, #0]
 8011718:	491f      	ldr	r1, [pc, #124]	@ (8011798 <USBPD_PHY_Init+0xe0>)
 801171a:	0013      	movs	r3, r2
 801171c:	011b      	lsls	r3, r3, #4
 801171e:	1a9b      	subs	r3, r3, r2
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	18cb      	adds	r3, r1, r3
 8011724:	3320      	adds	r3, #32
 8011726:	4a1d      	ldr	r2, [pc, #116]	@ (801179c <USBPD_PHY_Init+0xe4>)
 8011728:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 801172a:	193b      	adds	r3, r7, r4
 801172c:	781a      	ldrb	r2, [r3, #0]
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	6899      	ldr	r1, [r3, #8]
 8011732:	4819      	ldr	r0, [pc, #100]	@ (8011798 <USBPD_PHY_Init+0xe0>)
 8011734:	0013      	movs	r3, r2
 8011736:	011b      	lsls	r3, r3, #4
 8011738:	1a9b      	subs	r3, r3, r2
 801173a:	009b      	lsls	r3, r3, #2
 801173c:	18c3      	adds	r3, r0, r3
 801173e:	3324      	adds	r3, #36	@ 0x24
 8011740:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8011742:	193b      	adds	r3, r7, r4
 8011744:	781a      	ldrb	r2, [r3, #0]
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	6959      	ldr	r1, [r3, #20]
 801174a:	4813      	ldr	r0, [pc, #76]	@ (8011798 <USBPD_PHY_Init+0xe0>)
 801174c:	0013      	movs	r3, r2
 801174e:	011b      	lsls	r3, r3, #4
 8011750:	1a9b      	subs	r3, r3, r2
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	18c3      	adds	r3, r0, r3
 8011756:	3328      	adds	r3, #40	@ 0x28
 8011758:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 801175a:	193b      	adds	r3, r7, r4
 801175c:	781a      	ldrb	r2, [r3, #0]
 801175e:	490e      	ldr	r1, [pc, #56]	@ (8011798 <USBPD_PHY_Init+0xe0>)
 8011760:	0013      	movs	r3, r2
 8011762:	011b      	lsls	r3, r3, #4
 8011764:	1a9b      	subs	r3, r3, r2
 8011766:	009b      	lsls	r3, r3, #2
 8011768:	18cb      	adds	r3, r1, r3
 801176a:	3330      	adds	r3, #48	@ 0x30
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8011770:	193b      	adds	r3, r7, r4
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	4a0a      	ldr	r2, [pc, #40]	@ (80117a0 <USBPD_PHY_Init+0xe8>)
 8011776:	00db      	lsls	r3, r3, #3
 8011778:	18d3      	adds	r3, r2, r3
 801177a:	3304      	adds	r3, #4
 801177c:	6a3a      	ldr	r2, [r7, #32]
 801177e:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 8011780:	193b      	adds	r3, r7, r4
 8011782:	781a      	ldrb	r2, [r3, #0]
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	6819      	ldr	r1, [r3, #0]
 8011788:	4b05      	ldr	r3, [pc, #20]	@ (80117a0 <USBPD_PHY_Init+0xe8>)
 801178a:	00d2      	lsls	r2, r2, #3
 801178c:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 801178e:	2300      	movs	r3, #0
}
 8011790:	0018      	movs	r0, r3
 8011792:	46bd      	mov	sp, r7
 8011794:	b005      	add	sp, #20
 8011796:	bd90      	pop	{r4, r7, pc}
 8011798:	200005b8 	.word	0x200005b8
 801179c:	08011989 	.word	0x08011989
 80117a0:	200005a8 	.word	0x200005a8

080117a4 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	0002      	movs	r2, r0
 80117ac:	1dfb      	adds	r3, r7, #7
 80117ae:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 80117b0:	4b02      	ldr	r3, [pc, #8]	@ (80117bc <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 80117b2:	0018      	movs	r0, r3
 80117b4:	46bd      	mov	sp, r7
 80117b6:	b002      	add	sp, #8
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	46c0      	nop			@ (mov r8, r8)
 80117bc:	00000389 	.word	0x00000389

080117c0 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	0002      	movs	r2, r0
 80117c8:	1dfb      	adds	r3, r7, #7
 80117ca:	701a      	strb	r2, [r3, #0]
  return 30u;
 80117cc:	231e      	movs	r3, #30
}
 80117ce:	0018      	movs	r0, r3
 80117d0:	46bd      	mov	sp, r7
 80117d2:	b002      	add	sp, #8
 80117d4:	bd80      	pop	{r7, pc}

080117d6 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b082      	sub	sp, #8
 80117da:	af00      	add	r7, sp, #0
 80117dc:	0002      	movs	r2, r0
 80117de:	1dfb      	adds	r3, r7, #7
 80117e0:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 80117e2:	46c0      	nop			@ (mov r8, r8)
 80117e4:	46bd      	mov	sp, r7
 80117e6:	b002      	add	sp, #8
 80117e8:	bd80      	pop	{r7, pc}

080117ea <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 80117ea:	b580      	push	{r7, lr}
 80117ec:	b082      	sub	sp, #8
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	0002      	movs	r2, r0
 80117f2:	1dfb      	adds	r3, r7, #7
 80117f4:	701a      	strb	r2, [r3, #0]
 80117f6:	1dbb      	adds	r3, r7, #6
 80117f8:	1c0a      	adds	r2, r1, #0
 80117fa:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 80117fc:	1dbb      	adds	r3, r7, #6
 80117fe:	7819      	ldrb	r1, [r3, #0]
 8011800:	1dfb      	adds	r3, r7, #7
 8011802:	7818      	ldrb	r0, [r3, #0]
 8011804:	2300      	movs	r3, #0
 8011806:	2200      	movs	r2, #0
 8011808:	f000 f805 	bl	8011816 <USBPD_PHY_SendMessage>
 801180c:	0003      	movs	r3, r0
}
 801180e:	0018      	movs	r0, r3
 8011810:	46bd      	mov	sp, r7
 8011812:	b002      	add	sp, #8
 8011814:	bd80      	pop	{r7, pc}

08011816 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 8011816:	b590      	push	{r4, r7, lr}
 8011818:	b083      	sub	sp, #12
 801181a:	af00      	add	r7, sp, #0
 801181c:	0004      	movs	r4, r0
 801181e:	0008      	movs	r0, r1
 8011820:	603a      	str	r2, [r7, #0]
 8011822:	0019      	movs	r1, r3
 8011824:	1dfb      	adds	r3, r7, #7
 8011826:	1c22      	adds	r2, r4, #0
 8011828:	701a      	strb	r2, [r3, #0]
 801182a:	1dbb      	adds	r3, r7, #6
 801182c:	1c02      	adds	r2, r0, #0
 801182e:	701a      	strb	r2, [r3, #0]
 8011830:	1d3b      	adds	r3, r7, #4
 8011832:	1c0a      	adds	r2, r1, #0
 8011834:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8011836:	1d3b      	adds	r3, r7, #4
 8011838:	881c      	ldrh	r4, [r3, #0]
 801183a:	683a      	ldr	r2, [r7, #0]
 801183c:	1dbb      	adds	r3, r7, #6
 801183e:	7819      	ldrb	r1, [r3, #0]
 8011840:	1dfb      	adds	r3, r7, #7
 8011842:	7818      	ldrb	r0, [r3, #0]
 8011844:	0023      	movs	r3, r4
 8011846:	f000 fb2f 	bl	8011ea8 <USBPD_HW_IF_SendBuffer>
 801184a:	0003      	movs	r3, r0
}
 801184c:	0018      	movs	r0, r3
 801184e:	46bd      	mov	sp, r7
 8011850:	b003      	add	sp, #12
 8011852:	bd90      	pop	{r4, r7, pc}

08011854 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	0002      	movs	r2, r0
 801185c:	1dfb      	adds	r3, r7, #7
 801185e:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8011860:	1dfb      	adds	r3, r7, #7
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	0018      	movs	r0, r3
 8011866:	f000 fc7d 	bl	8012164 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 801186a:	2300      	movs	r3, #0
}
 801186c:	0018      	movs	r0, r3
 801186e:	46bd      	mov	sp, r7
 8011870:	b002      	add	sp, #8
 8011872:	bd80      	pop	{r7, pc}

08011874 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	0002      	movs	r2, r0
 801187c:	1dfb      	adds	r3, r7, #7
 801187e:	701a      	strb	r2, [r3, #0]
 8011880:	1dbb      	adds	r3, r7, #6
 8011882:	1c0a      	adds	r2, r1, #0
 8011884:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 8011886:	1dbb      	adds	r3, r7, #6
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	2b07      	cmp	r3, #7
 801188c:	d104      	bne.n	8011898 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 801188e:	1dfb      	adds	r3, r7, #7
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	0018      	movs	r0, r3
 8011894:	f000 fad0 	bl	8011e38 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8011898:	2300      	movs	r3, #0
}
 801189a:	0018      	movs	r0, r3
 801189c:	46bd      	mov	sp, r7
 801189e:	b002      	add	sp, #8
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b082      	sub	sp, #8
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	0002      	movs	r2, r0
 80118aa:	1dfb      	adds	r3, r7, #7
 80118ac:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 80118ae:	1dfb      	adds	r3, r7, #7
 80118b0:	781b      	ldrb	r3, [r3, #0]
 80118b2:	0018      	movs	r0, r3
 80118b4:	f001 f87e 	bl	80129b4 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 80118b8:	46c0      	nop			@ (mov r8, r8)
 80118ba:	46bd      	mov	sp, r7
 80118bc:	b002      	add	sp, #8
 80118be:	bd80      	pop	{r7, pc}

080118c0 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	0002      	movs	r2, r0
 80118c8:	1dfb      	adds	r3, r7, #7
 80118ca:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 80118cc:	1dfb      	adds	r3, r7, #7
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	0018      	movs	r0, r3
 80118d2:	f001 f889 	bl	80129e8 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 80118d6:	46c0      	nop			@ (mov r8, r8)
 80118d8:	46bd      	mov	sp, r7
 80118da:	b002      	add	sp, #8
 80118dc:	bd80      	pop	{r7, pc}
	...

080118e0 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	0002      	movs	r2, r0
 80118e8:	6039      	str	r1, [r7, #0]
 80118ea:	1dfb      	adds	r3, r7, #7
 80118ec:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 80118ee:	1dfb      	adds	r3, r7, #7
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	4a05      	ldr	r2, [pc, #20]	@ (8011908 <USBPD_PHY_SOPSupported+0x28>)
 80118f4:	00db      	lsls	r3, r3, #3
 80118f6:	18d3      	adds	r3, r2, r3
 80118f8:	3304      	adds	r3, #4
 80118fa:	683a      	ldr	r2, [r7, #0]
 80118fc:	601a      	str	r2, [r3, #0]
}
 80118fe:	46c0      	nop			@ (mov r8, r8)
 8011900:	46bd      	mov	sp, r7
 8011902:	b002      	add	sp, #8
 8011904:	bd80      	pop	{r7, pc}
 8011906:	46c0      	nop			@ (mov r8, r8)
 8011908:	200005a8 	.word	0x200005a8

0801190c <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	0002      	movs	r2, r0
 8011914:	1dfb      	adds	r3, r7, #7
 8011916:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 8011918:	1dfb      	adds	r3, r7, #7
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	0018      	movs	r0, r3
 801191e:	f001 f87d 	bl	8012a1c <USBPD_HW_IF_IsResistor_SinkTxOk>
 8011922:	0003      	movs	r3, r0
}
 8011924:	0018      	movs	r0, r3
 8011926:	46bd      	mov	sp, r7
 8011928:	b002      	add	sp, #8
 801192a:	bd80      	pop	{r7, pc}

0801192c <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	0002      	movs	r2, r0
 8011934:	1dfb      	adds	r3, r7, #7
 8011936:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 8011938:	1dfb      	adds	r3, r7, #7
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	0018      	movs	r0, r3
 801193e:	f001 f8b1 	bl	8012aa4 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 8011942:	46c0      	nop			@ (mov r8, r8)
 8011944:	46bd      	mov	sp, r7
 8011946:	b002      	add	sp, #8
 8011948:	bd80      	pop	{r7, pc}

0801194a <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b082      	sub	sp, #8
 801194e:	af00      	add	r7, sp, #0
 8011950:	0002      	movs	r2, r0
 8011952:	1dfb      	adds	r3, r7, #7
 8011954:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 8011956:	1dfb      	adds	r3, r7, #7
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	0018      	movs	r0, r3
 801195c:	f000 fe0a 	bl	8012574 <USBPD_HW_IF_EnableRX>
}
 8011960:	46c0      	nop			@ (mov r8, r8)
 8011962:	46bd      	mov	sp, r7
 8011964:	b002      	add	sp, #8
 8011966:	bd80      	pop	{r7, pc}

08011968 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	0002      	movs	r2, r0
 8011970:	1dfb      	adds	r3, r7, #7
 8011972:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 8011974:	1dfb      	adds	r3, r7, #7
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	0018      	movs	r0, r3
 801197a:	f000 fe13 	bl	80125a4 <USBPD_HW_IF_DisableRX>
}
 801197e:	46c0      	nop			@ (mov r8, r8)
 8011980:	46bd      	mov	sp, r7
 8011982:	b002      	add	sp, #8
 8011984:	bd80      	pop	{r7, pc}
	...

08011988 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 8011988:	b590      	push	{r4, r7, lr}
 801198a:	b085      	sub	sp, #20
 801198c:	af00      	add	r7, sp, #0
 801198e:	0002      	movs	r2, r0
 8011990:	6039      	str	r1, [r7, #0]
 8011992:	1dfb      	adds	r3, r7, #7
 8011994:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8011996:	2008      	movs	r0, #8
 8011998:	183b      	adds	r3, r7, r0
 801199a:	4a2e      	ldr	r2, [pc, #184]	@ (8011a54 <PHY_Rx_Completed+0xcc>)
 801199c:	6811      	ldr	r1, [r2, #0]
 801199e:	6019      	str	r1, [r3, #0]
 80119a0:	8892      	ldrh	r2, [r2, #4]
 80119a2:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 80119a4:	240f      	movs	r4, #15
 80119a6:	193b      	adds	r3, r7, r4
 80119a8:	1839      	adds	r1, r7, r0
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	188a      	adds	r2, r1, r2
 80119ae:	7812      	ldrb	r2, [r2, #0]
 80119b0:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 80119b2:	193b      	adds	r3, r7, r4
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	2b04      	cmp	r3, #4
 80119b8:	dc02      	bgt.n	80119c0 <PHY_Rx_Completed+0x38>
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	da1d      	bge.n	80119fa <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 80119be:	e040      	b.n	8011a42 <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 80119c0:	2b06      	cmp	r3, #6
 80119c2:	d13e      	bne.n	8011a42 <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 80119c4:	1dfb      	adds	r3, r7, #7
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	4a23      	ldr	r2, [pc, #140]	@ (8011a58 <PHY_Rx_Completed+0xd0>)
 80119ca:	00db      	lsls	r3, r3, #3
 80119cc:	18d3      	adds	r3, r2, r3
 80119ce:	3304      	adds	r3, #4
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	221e      	movs	r2, #30
 80119d4:	4013      	ands	r3, r2
 80119d6:	2b1e      	cmp	r3, #30
 80119d8:	d135      	bne.n	8011a46 <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80119da:	1dfb      	adds	r3, r7, #7
 80119dc:	781a      	ldrb	r2, [r3, #0]
 80119de:	491f      	ldr	r1, [pc, #124]	@ (8011a5c <PHY_Rx_Completed+0xd4>)
 80119e0:	0013      	movs	r3, r2
 80119e2:	011b      	lsls	r3, r3, #4
 80119e4:	1a9b      	subs	r3, r3, r2
 80119e6:	009b      	lsls	r3, r3, #2
 80119e8:	18cb      	adds	r3, r1, r3
 80119ea:	331c      	adds	r3, #28
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	1dfa      	adds	r2, r7, #7
 80119f0:	7812      	ldrb	r2, [r2, #0]
 80119f2:	2106      	movs	r1, #6
 80119f4:	0010      	movs	r0, r2
 80119f6:	4798      	blx	r3
      break;
 80119f8:	e025      	b.n	8011a46 <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 80119fa:	240f      	movs	r4, #15
 80119fc:	193b      	adds	r3, r7, r4
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	2201      	movs	r2, #1
 8011a02:	409a      	lsls	r2, r3
 8011a04:	0013      	movs	r3, r2
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	0018      	movs	r0, r3
 8011a0a:	1dfb      	adds	r3, r7, #7
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	4a12      	ldr	r2, [pc, #72]	@ (8011a58 <PHY_Rx_Completed+0xd0>)
 8011a10:	00db      	lsls	r3, r3, #3
 8011a12:	18d3      	adds	r3, r2, r3
 8011a14:	3304      	adds	r3, #4
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	193a      	adds	r2, r7, r4
 8011a1a:	7812      	ldrb	r2, [r2, #0]
 8011a1c:	2101      	movs	r1, #1
 8011a1e:	4091      	lsls	r1, r2
 8011a20:	000a      	movs	r2, r1
 8011a22:	b2d2      	uxtb	r2, r2
 8011a24:	4013      	ands	r3, r2
 8011a26:	4298      	cmp	r0, r3
 8011a28:	d10f      	bne.n	8011a4a <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 8011a2a:	1dfb      	adds	r3, r7, #7
 8011a2c:	781a      	ldrb	r2, [r3, #0]
 8011a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8011a58 <PHY_Rx_Completed+0xd0>)
 8011a30:	00d2      	lsls	r2, r2, #3
 8011a32:	58d3      	ldr	r3, [r2, r3]
 8011a34:	193a      	adds	r2, r7, r4
 8011a36:	7811      	ldrb	r1, [r2, #0]
 8011a38:	1dfa      	adds	r2, r7, #7
 8011a3a:	7812      	ldrb	r2, [r2, #0]
 8011a3c:	0010      	movs	r0, r2
 8011a3e:	4798      	blx	r3
      break;
 8011a40:	e003      	b.n	8011a4a <PHY_Rx_Completed+0xc2>
      break;
 8011a42:	46c0      	nop			@ (mov r8, r8)
 8011a44:	e002      	b.n	8011a4c <PHY_Rx_Completed+0xc4>
      break;
 8011a46:	46c0      	nop			@ (mov r8, r8)
 8011a48:	e000      	b.n	8011a4c <PHY_Rx_Completed+0xc4>
      break;
 8011a4a:	46c0      	nop			@ (mov r8, r8)
  }
}
 8011a4c:	46c0      	nop			@ (mov r8, r8)
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	b005      	add	sp, #20
 8011a52:	bd90      	pop	{r4, r7, pc}
 8011a54:	08017254 	.word	0x08017254
 8011a58:	200005a8 	.word	0x200005a8
 8011a5c:	200005b8 	.word	0x200005b8

08011a60 <LL_AHB1_GRP1_EnableClock>:
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8011a68:	4b07      	ldr	r3, [pc, #28]	@ (8011a88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8011a6a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011a6c:	4b06      	ldr	r3, [pc, #24]	@ (8011a88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	430a      	orrs	r2, r1
 8011a72:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8011a74:	4b04      	ldr	r3, [pc, #16]	@ (8011a88 <LL_AHB1_GRP1_EnableClock+0x28>)
 8011a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
}
 8011a80:	46c0      	nop			@ (mov r8, r8)
 8011a82:	46bd      	mov	sp, r7
 8011a84:	b004      	add	sp, #16
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	40021000 	.word	0x40021000

08011a8c <LL_APB1_GRP1_EnableClock>:
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8011a94:	4b07      	ldr	r3, [pc, #28]	@ (8011ab4 <LL_APB1_GRP1_EnableClock+0x28>)
 8011a96:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8011a98:	4b06      	ldr	r3, [pc, #24]	@ (8011ab4 <LL_APB1_GRP1_EnableClock+0x28>)
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	430a      	orrs	r2, r1
 8011a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8011aa0:	4b04      	ldr	r3, [pc, #16]	@ (8011ab4 <LL_APB1_GRP1_EnableClock+0x28>)
 8011aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011aa4:	687a      	ldr	r2, [r7, #4]
 8011aa6:	4013      	ands	r3, r2
 8011aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
}
 8011aac:	46c0      	nop			@ (mov r8, r8)
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	b004      	add	sp, #16
 8011ab2:	bd80      	pop	{r7, pc}
 8011ab4:	40021000 	.word	0x40021000

08011ab8 <LL_APB2_GRP1_EnableClock>:
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8011ac0:	4b07      	ldr	r3, [pc, #28]	@ (8011ae0 <LL_APB2_GRP1_EnableClock+0x28>)
 8011ac2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8011ac4:	4b06      	ldr	r3, [pc, #24]	@ (8011ae0 <LL_APB2_GRP1_EnableClock+0x28>)
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	430a      	orrs	r2, r1
 8011aca:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8011acc:	4b04      	ldr	r3, [pc, #16]	@ (8011ae0 <LL_APB2_GRP1_EnableClock+0x28>)
 8011ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ad0:	687a      	ldr	r2, [r7, #4]
 8011ad2:	4013      	ands	r3, r2
 8011ad4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
}
 8011ad8:	46c0      	nop			@ (mov r8, r8)
 8011ada:	46bd      	mov	sp, r7
 8011adc:	b004      	add	sp, #16
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	40021000 	.word	0x40021000

08011ae4 <LL_UCPD_Enable>:
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2280      	movs	r2, #128	@ 0x80
 8011af2:	0612      	lsls	r2, r2, #24
 8011af4:	431a      	orrs	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	601a      	str	r2, [r3, #0]
}
 8011afa:	46c0      	nop			@ (mov r8, r8)
 8011afc:	46bd      	mov	sp, r7
 8011afe:	b002      	add	sp, #8
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <LL_UCPD_Disable>:
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b082      	sub	sp, #8
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	005b      	lsls	r3, r3, #1
 8011b10:	085a      	lsrs	r2, r3, #1
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	601a      	str	r2, [r3, #0]
}
 8011b16:	46c0      	nop			@ (mov r8, r8)
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	b002      	add	sp, #8
 8011b1c:	bd80      	pop	{r7, pc}
	...

08011b20 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	4a03      	ldr	r2, [pc, #12]	@ (8011b3c <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 8011b2e:	401a      	ands	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	60da      	str	r2, [r3, #12]
}
 8011b34:	46c0      	nop			@ (mov r8, r8)
 8011b36:	46bd      	mov	sp, r7
 8011b38:	b002      	add	sp, #8
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	ffdfffff 	.word	0xffdfffff

08011b40 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	68db      	ldr	r3, [r3, #12]
 8011b4c:	2280      	movs	r2, #128	@ 0x80
 8011b4e:	0392      	lsls	r2, r2, #14
 8011b50:	431a      	orrs	r2, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	60da      	str	r2, [r3, #12]
}
 8011b56:	46c0      	nop			@ (mov r8, r8)
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	b002      	add	sp, #8
 8011b5c:	bd80      	pop	{r7, pc}
	...

08011b60 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	68db      	ldr	r3, [r3, #12]
 8011b6c:	4a03      	ldr	r2, [pc, #12]	@ (8011b7c <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 8011b6e:	401a      	ands	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	60da      	str	r2, [r3, #12]
}
 8011b74:	46c0      	nop			@ (mov r8, r8)
 8011b76:	46bd      	mov	sp, r7
 8011b78:	b002      	add	sp, #8
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	ffefffff 	.word	0xffefffff

08011b80 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	68db      	ldr	r3, [r3, #12]
 8011b8c:	2280      	movs	r2, #128	@ 0x80
 8011b8e:	0352      	lsls	r2, r2, #13
 8011b90:	431a      	orrs	r2, r3
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	60da      	str	r2, [r3, #12]
}
 8011b96:	46c0      	nop			@ (mov r8, r8)
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	b002      	add	sp, #8
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <LL_UCPD_SignalFRSTX>:
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	2280      	movs	r2, #128	@ 0x80
 8011bac:	0292      	lsls	r2, r2, #10
 8011bae:	431a      	orrs	r2, r3
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	60da      	str	r2, [r3, #12]
}
 8011bb4:	46c0      	nop			@ (mov r8, r8)
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	b002      	add	sp, #8
 8011bba:	bd80      	pop	{r7, pc}

08011bbc <LL_UCPD_FRSDetectionEnable>:
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	2280      	movs	r2, #128	@ 0x80
 8011bca:	0252      	lsls	r2, r2, #9
 8011bcc:	431a      	orrs	r2, r3
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	60da      	str	r2, [r3, #12]
}
 8011bd2:	46c0      	nop			@ (mov r8, r8)
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	b002      	add	sp, #8
 8011bd8:	bd80      	pop	{r7, pc}
	...

08011bdc <LL_UCPD_FRSDetectionDisable>:
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	4a03      	ldr	r2, [pc, #12]	@ (8011bf8 <LL_UCPD_FRSDetectionDisable+0x1c>)
 8011bea:	401a      	ands	r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	60da      	str	r2, [r3, #12]
}
 8011bf0:	46c0      	nop			@ (mov r8, r8)
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	b002      	add	sp, #8
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	fffeffff 	.word	0xfffeffff

08011bfc <LL_UCPD_SetccEnable>:
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	68db      	ldr	r3, [r3, #12]
 8011c0a:	4a05      	ldr	r2, [pc, #20]	@ (8011c20 <LL_UCPD_SetccEnable+0x24>)
 8011c0c:	401a      	ands	r2, r3
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	431a      	orrs	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	60da      	str	r2, [r3, #12]
}
 8011c16:	46c0      	nop			@ (mov r8, r8)
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	b002      	add	sp, #8
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	46c0      	nop			@ (mov r8, r8)
 8011c20:	fffff3ff 	.word	0xfffff3ff

08011c24 <LL_UCPD_SetSNKRole>:
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	68db      	ldr	r3, [r3, #12]
 8011c30:	2280      	movs	r2, #128	@ 0x80
 8011c32:	0092      	lsls	r2, r2, #2
 8011c34:	431a      	orrs	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	60da      	str	r2, [r3, #12]
}
 8011c3a:	46c0      	nop			@ (mov r8, r8)
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	b002      	add	sp, #8
 8011c40:	bd80      	pop	{r7, pc}
	...

08011c44 <LL_UCPD_SetSRCRole>:
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	68db      	ldr	r3, [r3, #12]
 8011c50:	4a03      	ldr	r2, [pc, #12]	@ (8011c60 <LL_UCPD_SetSRCRole+0x1c>)
 8011c52:	401a      	ands	r2, r3
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	60da      	str	r2, [r3, #12]
}
 8011c58:	46c0      	nop			@ (mov r8, r8)
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	b002      	add	sp, #8
 8011c5e:	bd80      	pop	{r7, pc}
 8011c60:	fffffdff 	.word	0xfffffdff

08011c64 <LL_UCPD_SetRpResistor>:
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b082      	sub	sp, #8
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	68db      	ldr	r3, [r3, #12]
 8011c72:	4a05      	ldr	r2, [pc, #20]	@ (8011c88 <LL_UCPD_SetRpResistor+0x24>)
 8011c74:	401a      	ands	r2, r3
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	431a      	orrs	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	60da      	str	r2, [r3, #12]
}
 8011c7e:	46c0      	nop			@ (mov r8, r8)
 8011c80:	46bd      	mov	sp, r7
 8011c82:	b002      	add	sp, #8
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	46c0      	nop			@ (mov r8, r8)
 8011c88:	fffffe7f 	.word	0xfffffe7f

08011c8c <LL_UCPD_SetCCPin>:
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	2240      	movs	r2, #64	@ 0x40
 8011c9c:	4393      	bics	r3, r2
 8011c9e:	001a      	movs	r2, r3
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	431a      	orrs	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	60da      	str	r2, [r3, #12]
}
 8011ca8:	46c0      	nop			@ (mov r8, r8)
 8011caa:	46bd      	mov	sp, r7
 8011cac:	b002      	add	sp, #8
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <LL_UCPD_RxEnable>:
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	2220      	movs	r2, #32
 8011cbe:	431a      	orrs	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	60da      	str	r2, [r3, #12]
}
 8011cc4:	46c0      	nop			@ (mov r8, r8)
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	b002      	add	sp, #8
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <LL_UCPD_RxDisable>:
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	2220      	movs	r2, #32
 8011cda:	4393      	bics	r3, r2
 8011cdc:	001a      	movs	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	60da      	str	r2, [r3, #12]
}
 8011ce2:	46c0      	nop			@ (mov r8, r8)
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	b002      	add	sp, #8
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <LL_UCPD_SetRxMode>:
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b082      	sub	sp, #8
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
 8011cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	2210      	movs	r2, #16
 8011cfa:	4393      	bics	r3, r2
 8011cfc:	001a      	movs	r2, r3
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	431a      	orrs	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	60da      	str	r2, [r3, #12]
}
 8011d06:	46c0      	nop			@ (mov r8, r8)
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	b002      	add	sp, #8
 8011d0c:	bd80      	pop	{r7, pc}

08011d0e <LL_UCPD_SendHardReset>:
{
 8011d0e:	b580      	push	{r7, lr}
 8011d10:	b082      	sub	sp, #8
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	2208      	movs	r2, #8
 8011d1c:	431a      	orrs	r2, r3
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	60da      	str	r2, [r3, #12]
}
 8011d22:	46c0      	nop			@ (mov r8, r8)
 8011d24:	46bd      	mov	sp, r7
 8011d26:	b002      	add	sp, #8
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <LL_UCPD_SendMessage>:
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b082      	sub	sp, #8
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	2204      	movs	r2, #4
 8011d38:	431a      	orrs	r2, r3
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	60da      	str	r2, [r3, #12]
}
 8011d3e:	46c0      	nop			@ (mov r8, r8)
 8011d40:	46bd      	mov	sp, r7
 8011d42:	b002      	add	sp, #8
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <LL_UCPD_SetTxMode>:
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b082      	sub	sp, #8
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	6078      	str	r0, [r7, #4]
 8011d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	2203      	movs	r2, #3
 8011d56:	4393      	bics	r3, r2
 8011d58:	001a      	movs	r2, r3
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	431a      	orrs	r2, r3
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	60da      	str	r2, [r3, #12]
}
 8011d62:	46c0      	nop			@ (mov r8, r8)
 8011d64:	46bd      	mov	sp, r7
 8011d66:	b002      	add	sp, #8
 8011d68:	bd80      	pop	{r7, pc}

08011d6a <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b082      	sub	sp, #8
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2280      	movs	r2, #128	@ 0x80
 8011d78:	05d2      	lsls	r2, r2, #23
 8011d7a:	431a      	orrs	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	601a      	str	r2, [r3, #0]
}
 8011d80:	46c0      	nop			@ (mov r8, r8)
 8011d82:	46bd      	mov	sp, r7
 8011d84:	b002      	add	sp, #8
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4a03      	ldr	r2, [pc, #12]	@ (8011da4 <LL_UCPD_RxDMADisable+0x1c>)
 8011d96:	401a      	ands	r2, r3
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	601a      	str	r2, [r3, #0]
}
 8011d9c:	46c0      	nop			@ (mov r8, r8)
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	b002      	add	sp, #8
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	bfffffff 	.word	0xbfffffff

08011da8 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	2280      	movs	r2, #128	@ 0x80
 8011db6:	0592      	lsls	r2, r2, #22
 8011db8:	431a      	orrs	r2, r3
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	601a      	str	r2, [r3, #0]
}
 8011dbe:	46c0      	nop			@ (mov r8, r8)
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	b002      	add	sp, #8
 8011dc4:	bd80      	pop	{r7, pc}
	...

08011dc8 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	4a03      	ldr	r2, [pc, #12]	@ (8011de4 <LL_UCPD_TxDMADisable+0x1c>)
 8011dd6:	401a      	ands	r2, r3
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	601a      	str	r2, [r3, #0]
}
 8011ddc:	46c0      	nop			@ (mov r8, r8)
 8011dde:	46bd      	mov	sp, r7
 8011de0:	b002      	add	sp, #8
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	dfffffff 	.word	0xdfffffff

08011de8 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	683a      	ldr	r2, [r7, #0]
 8011df6:	61da      	str	r2, [r3, #28]
}
 8011df8:	46c0      	nop			@ (mov r8, r8)
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	b002      	add	sp, #8
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	683a      	ldr	r2, [r7, #0]
 8011e0e:	621a      	str	r2, [r3, #32]
}
 8011e10:	46c0      	nop			@ (mov r8, r8)
 8011e12:	46bd      	mov	sp, r7
 8011e14:	b002      	add	sp, #8
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8011e1c:	2380      	movs	r3, #128	@ 0x80
 8011e1e:	055b      	lsls	r3, r3, #21
 8011e20:	0018      	movs	r0, r3
 8011e22:	f7ff fe33 	bl	8011a8c <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8011e26:	2380      	movs	r3, #128	@ 0x80
 8011e28:	015b      	lsls	r3, r3, #5
 8011e2a:	0018      	movs	r0, r3
 8011e2c:	f7ff fe18 	bl	8011a60 <LL_AHB1_GRP1_EnableClock>
}
 8011e30:	46c0      	nop			@ (mov r8, r8)
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
	...

08011e38 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b084      	sub	sp, #16
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	0002      	movs	r2, r0
 8011e40:	1dfb      	adds	r3, r7, #7
 8011e42:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8011e44:	1dfb      	adds	r3, r7, #7
 8011e46:	781a      	ldrb	r2, [r3, #0]
 8011e48:	4916      	ldr	r1, [pc, #88]	@ (8011ea4 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011e4a:	0013      	movs	r3, r2
 8011e4c:	011b      	lsls	r3, r3, #4
 8011e4e:	1a9b      	subs	r3, r3, r2
 8011e50:	009b      	lsls	r3, r3, #2
 8011e52:	585b      	ldr	r3, [r3, r1]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	2207      	movs	r2, #7
 8011e58:	4393      	bics	r3, r2
 8011e5a:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8011e5c:	1dfb      	adds	r3, r7, #7
 8011e5e:	781a      	ldrb	r2, [r3, #0]
 8011e60:	4910      	ldr	r1, [pc, #64]	@ (8011ea4 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011e62:	0013      	movs	r3, r2
 8011e64:	011b      	lsls	r3, r3, #4
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	585b      	ldr	r3, [r3, r1]
 8011e6c:	0018      	movs	r0, r3
 8011e6e:	f7ff fe48 	bl	8011b02 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8011e72:	1dfb      	adds	r3, r7, #7
 8011e74:	781a      	ldrb	r2, [r3, #0]
 8011e76:	490b      	ldr	r1, [pc, #44]	@ (8011ea4 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011e78:	0013      	movs	r3, r2
 8011e7a:	011b      	lsls	r3, r3, #4
 8011e7c:	1a9b      	subs	r3, r3, r2
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	585b      	ldr	r3, [r3, r1]
 8011e82:	0018      	movs	r0, r3
 8011e84:	f7ff fe2e 	bl	8011ae4 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 8011e88:	1dfb      	adds	r3, r7, #7
 8011e8a:	781a      	ldrb	r2, [r3, #0]
 8011e8c:	4905      	ldr	r1, [pc, #20]	@ (8011ea4 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8011e8e:	0013      	movs	r3, r2
 8011e90:	011b      	lsls	r3, r3, #4
 8011e92:	1a9b      	subs	r3, r3, r2
 8011e94:	009b      	lsls	r3, r3, #2
 8011e96:	585b      	ldr	r3, [r3, r1]
 8011e98:	68fa      	ldr	r2, [r7, #12]
 8011e9a:	60da      	str	r2, [r3, #12]
}
 8011e9c:	46c0      	nop			@ (mov r8, r8)
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	b004      	add	sp, #16
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	200005b8 	.word	0x200005b8

08011ea8 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8011ea8:	b590      	push	{r4, r7, lr}
 8011eaa:	b08b      	sub	sp, #44	@ 0x2c
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	60ba      	str	r2, [r7, #8]
 8011eb0:	607b      	str	r3, [r7, #4]
 8011eb2:	240f      	movs	r4, #15
 8011eb4:	193b      	adds	r3, r7, r4
 8011eb6:	1c02      	adds	r2, r0, #0
 8011eb8:	701a      	strb	r2, [r3, #0]
 8011eba:	200e      	movs	r0, #14
 8011ebc:	183b      	adds	r3, r7, r0
 8011ebe:	1c0a      	adds	r2, r1, #0
 8011ec0:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8011ec2:	2327      	movs	r3, #39	@ 0x27
 8011ec4:	18fb      	adds	r3, r7, r3
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8011eca:	183b      	adds	r3, r7, r0
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	2b05      	cmp	r3, #5
 8011ed0:	d10b      	bne.n	8011eea <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8011ed2:	193b      	adds	r3, r7, r4
 8011ed4:	781a      	ldrb	r2, [r3, #0]
 8011ed6:	499e      	ldr	r1, [pc, #632]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011ed8:	0013      	movs	r3, r2
 8011eda:	011b      	lsls	r3, r3, #4
 8011edc:	1a9b      	subs	r3, r3, r2
 8011ede:	009b      	lsls	r3, r3, #2
 8011ee0:	585b      	ldr	r3, [r3, r1]
 8011ee2:	0018      	movs	r0, r3
 8011ee4:	f7ff ff13 	bl	8011d0e <LL_UCPD_SendHardReset>
 8011ee8:	e12a      	b.n	8012140 <USBPD_HW_IF_SendBuffer+0x298>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011eea:	f3ef 8310 	mrs	r3, PRIMASK
 8011eee:	61fb      	str	r3, [r7, #28]
  return(result);
 8011ef0:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8011ef2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011ef4:	b672      	cpsid	i
}
 8011ef6:	46c0      	nop			@ (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8011ef8:	240f      	movs	r4, #15
 8011efa:	193b      	adds	r3, r7, r4
 8011efc:	781a      	ldrb	r2, [r3, #0]
 8011efe:	4994      	ldr	r1, [pc, #592]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011f00:	2038      	movs	r0, #56	@ 0x38
 8011f02:	0013      	movs	r3, r2
 8011f04:	011b      	lsls	r3, r3, #4
 8011f06:	1a9b      	subs	r3, r3, r2
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	18cb      	adds	r3, r1, r3
 8011f0c:	181b      	adds	r3, r3, r0
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	2b01      	cmp	r3, #1
 8011f14:	d00e      	beq.n	8011f34 <USBPD_HW_IF_SendBuffer+0x8c>
 8011f16:	193b      	adds	r3, r7, r4
 8011f18:	781a      	ldrb	r2, [r3, #0]
 8011f1a:	498d      	ldr	r1, [pc, #564]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011f1c:	0013      	movs	r3, r2
 8011f1e:	011b      	lsls	r3, r3, #4
 8011f20:	1a9b      	subs	r3, r3, r2
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	18cb      	adds	r3, r1, r3
 8011f26:	3304      	adds	r3, #4
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	4013      	ands	r3, r2
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d10a      	bne.n	8011f4a <USBPD_HW_IF_SendBuffer+0xa2>
 8011f34:	6a3b      	ldr	r3, [r7, #32]
 8011f36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	f383 8810 	msr	PRIMASK, r3
}
 8011f3e:	46c0      	nop			@ (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8011f40:	2327      	movs	r3, #39	@ 0x27
 8011f42:	18fb      	adds	r3, r7, r3
 8011f44:	2202      	movs	r2, #2
 8011f46:	701a      	strb	r2, [r3, #0]
 8011f48:	e0fa      	b.n	8012140 <USBPD_HW_IF_SendBuffer+0x298>
 8011f4a:	6a3b      	ldr	r3, [r7, #32]
 8011f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	f383 8810 	msr	PRIMASK, r3
}
 8011f54:	46c0      	nop			@ (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8011f56:	230e      	movs	r3, #14
 8011f58:	18fb      	adds	r3, r7, r3
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	2b07      	cmp	r3, #7
 8011f5e:	d871      	bhi.n	8012044 <USBPD_HW_IF_SendBuffer+0x19c>
 8011f60:	009a      	lsls	r2, r3, #2
 8011f62:	4b7c      	ldr	r3, [pc, #496]	@ (8012154 <USBPD_HW_IF_SendBuffer+0x2ac>)
 8011f64:	18d3      	adds	r3, r2, r3
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8011f6a:	240f      	movs	r4, #15
 8011f6c:	193b      	adds	r3, r7, r4
 8011f6e:	781a      	ldrb	r2, [r3, #0]
 8011f70:	4977      	ldr	r1, [pc, #476]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011f72:	0013      	movs	r3, r2
 8011f74:	011b      	lsls	r3, r3, #4
 8011f76:	1a9b      	subs	r3, r3, r2
 8011f78:	009b      	lsls	r3, r3, #2
 8011f7a:	585b      	ldr	r3, [r3, r1]
 8011f7c:	4a76      	ldr	r2, [pc, #472]	@ (8012158 <USBPD_HW_IF_SendBuffer+0x2b0>)
 8011f7e:	0011      	movs	r1, r2
 8011f80:	0018      	movs	r0, r3
 8011f82:	f7ff ff31 	bl	8011de8 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8011f86:	193b      	adds	r3, r7, r4
 8011f88:	781a      	ldrb	r2, [r3, #0]
 8011f8a:	4971      	ldr	r1, [pc, #452]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011f8c:	0013      	movs	r3, r2
 8011f8e:	011b      	lsls	r3, r3, #4
 8011f90:	1a9b      	subs	r3, r3, r2
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	585b      	ldr	r3, [r3, r1]
 8011f96:	2100      	movs	r1, #0
 8011f98:	0018      	movs	r0, r3
 8011f9a:	f7ff fed4 	bl	8011d46 <LL_UCPD_SetTxMode>
          break;
 8011f9e:	e056      	b.n	801204e <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8011fa0:	240f      	movs	r4, #15
 8011fa2:	193b      	adds	r3, r7, r4
 8011fa4:	781a      	ldrb	r2, [r3, #0]
 8011fa6:	496a      	ldr	r1, [pc, #424]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011fa8:	0013      	movs	r3, r2
 8011faa:	011b      	lsls	r3, r3, #4
 8011fac:	1a9b      	subs	r3, r3, r2
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	585b      	ldr	r3, [r3, r1]
 8011fb2:	4a6a      	ldr	r2, [pc, #424]	@ (801215c <USBPD_HW_IF_SendBuffer+0x2b4>)
 8011fb4:	0011      	movs	r1, r2
 8011fb6:	0018      	movs	r0, r3
 8011fb8:	f7ff ff16 	bl	8011de8 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8011fbc:	193b      	adds	r3, r7, r4
 8011fbe:	781a      	ldrb	r2, [r3, #0]
 8011fc0:	4963      	ldr	r1, [pc, #396]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011fc2:	0013      	movs	r3, r2
 8011fc4:	011b      	lsls	r3, r3, #4
 8011fc6:	1a9b      	subs	r3, r3, r2
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	585b      	ldr	r3, [r3, r1]
 8011fcc:	2100      	movs	r1, #0
 8011fce:	0018      	movs	r0, r3
 8011fd0:	f7ff feb9 	bl	8011d46 <LL_UCPD_SetTxMode>
          break;
 8011fd4:	e03b      	b.n	801204e <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8011fd6:	240f      	movs	r4, #15
 8011fd8:	193b      	adds	r3, r7, r4
 8011fda:	781a      	ldrb	r2, [r3, #0]
 8011fdc:	495c      	ldr	r1, [pc, #368]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011fde:	0013      	movs	r3, r2
 8011fe0:	011b      	lsls	r3, r3, #4
 8011fe2:	1a9b      	subs	r3, r3, r2
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	585b      	ldr	r3, [r3, r1]
 8011fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8012160 <USBPD_HW_IF_SendBuffer+0x2b8>)
 8011fea:	0011      	movs	r1, r2
 8011fec:	0018      	movs	r0, r3
 8011fee:	f7ff fefb 	bl	8011de8 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8011ff2:	193b      	adds	r3, r7, r4
 8011ff4:	781a      	ldrb	r2, [r3, #0]
 8011ff6:	4956      	ldr	r1, [pc, #344]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8011ff8:	0013      	movs	r3, r2
 8011ffa:	011b      	lsls	r3, r3, #4
 8011ffc:	1a9b      	subs	r3, r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	585b      	ldr	r3, [r3, r1]
 8012002:	2100      	movs	r1, #0
 8012004:	0018      	movs	r0, r3
 8012006:	f7ff fe9e 	bl	8011d46 <LL_UCPD_SetTxMode>
          break;
 801200a:	e020      	b.n	801204e <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 801200c:	230f      	movs	r3, #15
 801200e:	18fb      	adds	r3, r7, r3
 8012010:	781a      	ldrb	r2, [r3, #0]
 8012012:	494f      	ldr	r1, [pc, #316]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8012014:	0013      	movs	r3, r2
 8012016:	011b      	lsls	r3, r3, #4
 8012018:	1a9b      	subs	r3, r3, r2
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	585b      	ldr	r3, [r3, r1]
 801201e:	2101      	movs	r1, #1
 8012020:	0018      	movs	r0, r3
 8012022:	f7ff fe90 	bl	8011d46 <LL_UCPD_SetTxMode>
          break;
 8012026:	e012      	b.n	801204e <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8012028:	230f      	movs	r3, #15
 801202a:	18fb      	adds	r3, r7, r3
 801202c:	781a      	ldrb	r2, [r3, #0]
 801202e:	4948      	ldr	r1, [pc, #288]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8012030:	0013      	movs	r3, r2
 8012032:	011b      	lsls	r3, r3, #4
 8012034:	1a9b      	subs	r3, r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	585b      	ldr	r3, [r3, r1]
 801203a:	2102      	movs	r1, #2
 801203c:	0018      	movs	r0, r3
 801203e:	f7ff fe82 	bl	8011d46 <LL_UCPD_SetTxMode>
          break;
 8012042:	e004      	b.n	801204e <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 8012044:	2327      	movs	r3, #39	@ 0x27
 8012046:	18fb      	adds	r3, r7, r3
 8012048:	2202      	movs	r2, #2
 801204a:	701a      	strb	r2, [r3, #0]
          break;
 801204c:	46c0      	nop			@ (mov r8, r8)
      }

      if (USBPD_OK == _status)
 801204e:	2327      	movs	r3, #39	@ 0x27
 8012050:	18fb      	adds	r3, r7, r3
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d173      	bne.n	8012140 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8012058:	200f      	movs	r0, #15
 801205a:	183b      	adds	r3, r7, r0
 801205c:	781a      	ldrb	r2, [r3, #0]
 801205e:	493c      	ldr	r1, [pc, #240]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8012060:	0013      	movs	r3, r2
 8012062:	011b      	lsls	r3, r3, #4
 8012064:	1a9b      	subs	r3, r3, r2
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	18cb      	adds	r3, r1, r3
 801206a:	3304      	adds	r3, #4
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	6819      	ldr	r1, [r3, #0]
 8012070:	183b      	adds	r3, r7, r0
 8012072:	781a      	ldrb	r2, [r3, #0]
 8012074:	4836      	ldr	r0, [pc, #216]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8012076:	0013      	movs	r3, r2
 8012078:	011b      	lsls	r3, r3, #4
 801207a:	1a9b      	subs	r3, r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	18c3      	adds	r3, r0, r3
 8012080:	3304      	adds	r3, #4
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2201      	movs	r2, #1
 8012086:	4391      	bics	r1, r2
 8012088:	000a      	movs	r2, r1
 801208a:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 801208c:	46c0      	nop			@ (mov r8, r8)
 801208e:	200f      	movs	r0, #15
 8012090:	183b      	adds	r3, r7, r0
 8012092:	781a      	ldrb	r2, [r3, #0]
 8012094:	492e      	ldr	r1, [pc, #184]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8012096:	0013      	movs	r3, r2
 8012098:	011b      	lsls	r3, r3, #4
 801209a:	1a9b      	subs	r3, r3, r2
 801209c:	009b      	lsls	r3, r3, #2
 801209e:	18cb      	adds	r3, r1, r3
 80120a0:	3304      	adds	r3, #4
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2201      	movs	r2, #1
 80120a8:	4013      	ands	r3, r2
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d0ef      	beq.n	801208e <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 80120ae:	0004      	movs	r4, r0
 80120b0:	193b      	adds	r3, r7, r4
 80120b2:	781a      	ldrb	r2, [r3, #0]
 80120b4:	4926      	ldr	r1, [pc, #152]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80120b6:	0013      	movs	r3, r2
 80120b8:	011b      	lsls	r3, r3, #4
 80120ba:	1a9b      	subs	r3, r3, r2
 80120bc:	009b      	lsls	r3, r3, #2
 80120be:	18cb      	adds	r3, r1, r3
 80120c0:	3304      	adds	r3, #4
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 80120c8:	193b      	adds	r3, r7, r4
 80120ca:	781a      	ldrb	r2, [r3, #0]
 80120cc:	4920      	ldr	r1, [pc, #128]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80120ce:	0013      	movs	r3, r2
 80120d0:	011b      	lsls	r3, r3, #4
 80120d2:	1a9b      	subs	r3, r3, r2
 80120d4:	009b      	lsls	r3, r3, #2
 80120d6:	18cb      	adds	r3, r1, r3
 80120d8:	3304      	adds	r3, #4
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80120e0:	193b      	adds	r3, r7, r4
 80120e2:	781a      	ldrb	r2, [r3, #0]
 80120e4:	491a      	ldr	r1, [pc, #104]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80120e6:	0013      	movs	r3, r2
 80120e8:	011b      	lsls	r3, r3, #4
 80120ea:	1a9b      	subs	r3, r3, r2
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	18cb      	adds	r3, r1, r3
 80120f0:	3304      	adds	r3, #4
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	6819      	ldr	r1, [r3, #0]
 80120f6:	193b      	adds	r3, r7, r4
 80120f8:	781a      	ldrb	r2, [r3, #0]
 80120fa:	4815      	ldr	r0, [pc, #84]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80120fc:	0013      	movs	r3, r2
 80120fe:	011b      	lsls	r3, r3, #4
 8012100:	1a9b      	subs	r3, r3, r2
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	18c3      	adds	r3, r0, r3
 8012106:	3304      	adds	r3, #4
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	2201      	movs	r2, #1
 801210c:	430a      	orrs	r2, r1
 801210e:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8012110:	193b      	adds	r3, r7, r4
 8012112:	781a      	ldrb	r2, [r3, #0]
 8012114:	490e      	ldr	r1, [pc, #56]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8012116:	0013      	movs	r3, r2
 8012118:	011b      	lsls	r3, r3, #4
 801211a:	1a9b      	subs	r3, r3, r2
 801211c:	009b      	lsls	r3, r3, #2
 801211e:	585b      	ldr	r3, [r3, r1]
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	0011      	movs	r1, r2
 8012124:	0018      	movs	r0, r3
 8012126:	f7ff fe6b 	bl	8011e00 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 801212a:	193b      	adds	r3, r7, r4
 801212c:	781a      	ldrb	r2, [r3, #0]
 801212e:	4908      	ldr	r1, [pc, #32]	@ (8012150 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8012130:	0013      	movs	r3, r2
 8012132:	011b      	lsls	r3, r3, #4
 8012134:	1a9b      	subs	r3, r3, r2
 8012136:	009b      	lsls	r3, r3, #2
 8012138:	585b      	ldr	r3, [r3, r1]
 801213a:	0018      	movs	r0, r3
 801213c:	f7ff fdf5 	bl	8011d2a <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8012140:	2327      	movs	r3, #39	@ 0x27
 8012142:	18fb      	adds	r3, r7, r3
 8012144:	781b      	ldrb	r3, [r3, #0]
}
 8012146:	0018      	movs	r0, r3
 8012148:	46bd      	mov	sp, r7
 801214a:	b00b      	add	sp, #44	@ 0x2c
 801214c:	bd90      	pop	{r4, r7, pc}
 801214e:	46c0      	nop			@ (mov r8, r8)
 8012150:	200005b8 	.word	0x200005b8
 8012154:	080173e0 	.word	0x080173e0
 8012158:	0008e318 	.word	0x0008e318
 801215c:	00031b18 	.word	0x00031b18
 8012160:	000360d8 	.word	0x000360d8

08012164 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	0002      	movs	r2, r0
 801216c:	1dfb      	adds	r3, r7, #7
 801216e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8012170:	1dfb      	adds	r3, r7, #7
 8012172:	781a      	ldrb	r2, [r3, #0]
 8012174:	490c      	ldr	r1, [pc, #48]	@ (80121a8 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8012176:	0013      	movs	r3, r2
 8012178:	011b      	lsls	r3, r3, #4
 801217a:	1a9b      	subs	r3, r3, r2
 801217c:	009b      	lsls	r3, r3, #2
 801217e:	585b      	ldr	r3, [r3, r1]
 8012180:	2102      	movs	r1, #2
 8012182:	0018      	movs	r0, r3
 8012184:	f7ff fddf 	bl	8011d46 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8012188:	1dfb      	adds	r3, r7, #7
 801218a:	781a      	ldrb	r2, [r3, #0]
 801218c:	4906      	ldr	r1, [pc, #24]	@ (80121a8 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 801218e:	0013      	movs	r3, r2
 8012190:	011b      	lsls	r3, r3, #4
 8012192:	1a9b      	subs	r3, r3, r2
 8012194:	009b      	lsls	r3, r3, #2
 8012196:	585b      	ldr	r3, [r3, r1]
 8012198:	0018      	movs	r0, r3
 801219a:	f7ff fdc6 	bl	8011d2a <LL_UCPD_SendMessage>
}
 801219e:	46c0      	nop			@ (mov r8, r8)
 80121a0:	46bd      	mov	sp, r7
 80121a2:	b002      	add	sp, #8
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	46c0      	nop			@ (mov r8, r8)
 80121a8:	200005b8 	.word	0x200005b8

080121ac <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	0002      	movs	r2, r0
 80121b4:	1dfb      	adds	r3, r7, #7
 80121b6:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80121b8:	2001      	movs	r0, #1
 80121ba:	f7ff fc7d 	bl	8011ab8 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 80121be:	1dfb      	adds	r3, r7, #7
 80121c0:	781a      	ldrb	r2, [r3, #0]
 80121c2:	4953      	ldr	r1, [pc, #332]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 80121c4:	0013      	movs	r3, r2
 80121c6:	011b      	lsls	r3, r3, #4
 80121c8:	1a9b      	subs	r3, r3, r2
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	18cb      	adds	r3, r1, r3
 80121ce:	3310      	adds	r3, #16
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	789b      	ldrb	r3, [r3, #2]
 80121d4:	079b      	lsls	r3, r3, #30
 80121d6:	0f9b      	lsrs	r3, r3, #30
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	2b02      	cmp	r3, #2
 80121dc:	d021      	beq.n	8012222 <USBPDM1_AssertRp+0x76>
 80121de:	dc2f      	bgt.n	8012240 <USBPDM1_AssertRp+0x94>
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d002      	beq.n	80121ea <USBPDM1_AssertRp+0x3e>
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d00d      	beq.n	8012204 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 80121e8:	e02a      	b.n	8012240 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 80121ea:	1dfb      	adds	r3, r7, #7
 80121ec:	781a      	ldrb	r2, [r3, #0]
 80121ee:	4948      	ldr	r1, [pc, #288]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 80121f0:	0013      	movs	r3, r2
 80121f2:	011b      	lsls	r3, r3, #4
 80121f4:	1a9b      	subs	r3, r3, r2
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	585b      	ldr	r3, [r3, r1]
 80121fa:	2180      	movs	r1, #128	@ 0x80
 80121fc:	0018      	movs	r0, r3
 80121fe:	f7ff fd31 	bl	8011c64 <LL_UCPD_SetRpResistor>
      break;
 8012202:	e01e      	b.n	8012242 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8012204:	1dfb      	adds	r3, r7, #7
 8012206:	781a      	ldrb	r2, [r3, #0]
 8012208:	4941      	ldr	r1, [pc, #260]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 801220a:	0013      	movs	r3, r2
 801220c:	011b      	lsls	r3, r3, #4
 801220e:	1a9b      	subs	r3, r3, r2
 8012210:	009b      	lsls	r3, r3, #2
 8012212:	585b      	ldr	r3, [r3, r1]
 8012214:	2280      	movs	r2, #128	@ 0x80
 8012216:	0052      	lsls	r2, r2, #1
 8012218:	0011      	movs	r1, r2
 801221a:	0018      	movs	r0, r3
 801221c:	f7ff fd22 	bl	8011c64 <LL_UCPD_SetRpResistor>
      break;
 8012220:	e00f      	b.n	8012242 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8012222:	1dfb      	adds	r3, r7, #7
 8012224:	781a      	ldrb	r2, [r3, #0]
 8012226:	493a      	ldr	r1, [pc, #232]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 8012228:	0013      	movs	r3, r2
 801222a:	011b      	lsls	r3, r3, #4
 801222c:	1a9b      	subs	r3, r3, r2
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	585b      	ldr	r3, [r3, r1]
 8012232:	22c0      	movs	r2, #192	@ 0xc0
 8012234:	0052      	lsls	r2, r2, #1
 8012236:	0011      	movs	r1, r2
 8012238:	0018      	movs	r0, r3
 801223a:	f7ff fd13 	bl	8011c64 <LL_UCPD_SetRpResistor>
      break;
 801223e:	e000      	b.n	8012242 <USBPDM1_AssertRp+0x96>
      break;
 8012240:	46c0      	nop			@ (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8012242:	1dfb      	adds	r3, r7, #7
 8012244:	781a      	ldrb	r2, [r3, #0]
 8012246:	4932      	ldr	r1, [pc, #200]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 8012248:	0013      	movs	r3, r2
 801224a:	011b      	lsls	r3, r3, #4
 801224c:	1a9b      	subs	r3, r3, r2
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	585b      	ldr	r3, [r3, r1]
 8012252:	2100      	movs	r1, #0
 8012254:	0018      	movs	r0, r3
 8012256:	f7ff fcd1 	bl	8011bfc <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801225a:	1dfb      	adds	r3, r7, #7
 801225c:	781a      	ldrb	r2, [r3, #0]
 801225e:	492c      	ldr	r1, [pc, #176]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 8012260:	0013      	movs	r3, r2
 8012262:	011b      	lsls	r3, r3, #4
 8012264:	1a9b      	subs	r3, r3, r2
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	585b      	ldr	r3, [r3, r1]
 801226a:	0018      	movs	r0, r3
 801226c:	f7ff fcea 	bl	8011c44 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8012270:	1dfb      	adds	r3, r7, #7
 8012272:	781a      	ldrb	r2, [r3, #0]
 8012274:	4926      	ldr	r1, [pc, #152]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 8012276:	0013      	movs	r3, r2
 8012278:	011b      	lsls	r3, r3, #4
 801227a:	1a9b      	subs	r3, r3, r2
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	18cb      	adds	r3, r1, r3
 8012280:	3334      	adds	r3, #52	@ 0x34
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d10e      	bne.n	80122a6 <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012288:	1dfb      	adds	r3, r7, #7
 801228a:	781a      	ldrb	r2, [r3, #0]
 801228c:	4920      	ldr	r1, [pc, #128]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 801228e:	0013      	movs	r3, r2
 8012290:	011b      	lsls	r3, r3, #4
 8012292:	1a9b      	subs	r3, r3, r2
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	585b      	ldr	r3, [r3, r1]
 8012298:	22c0      	movs	r2, #192	@ 0xc0
 801229a:	0112      	lsls	r2, r2, #4
 801229c:	0011      	movs	r1, r2
 801229e:	0018      	movs	r0, r3
 80122a0:	f7ff fcac 	bl	8011bfc <LL_UCPD_SetccEnable>
 80122a4:	e01b      	b.n	80122de <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80122a6:	1dfb      	adds	r3, r7, #7
 80122a8:	781a      	ldrb	r2, [r3, #0]
 80122aa:	4919      	ldr	r1, [pc, #100]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 80122ac:	0013      	movs	r3, r2
 80122ae:	011b      	lsls	r3, r3, #4
 80122b0:	1a9b      	subs	r3, r3, r2
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80122b6:	1dfb      	adds	r3, r7, #7
 80122b8:	781a      	ldrb	r2, [r3, #0]
 80122ba:	4915      	ldr	r1, [pc, #84]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 80122bc:	0013      	movs	r3, r2
 80122be:	011b      	lsls	r3, r3, #4
 80122c0:	1a9b      	subs	r3, r3, r2
 80122c2:	009b      	lsls	r3, r3, #2
 80122c4:	18cb      	adds	r3, r1, r3
 80122c6:	3334      	adds	r3, #52	@ 0x34
 80122c8:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d102      	bne.n	80122d4 <USBPDM1_AssertRp+0x128>
 80122ce:	2380      	movs	r3, #128	@ 0x80
 80122d0:	00db      	lsls	r3, r3, #3
 80122d2:	e001      	b.n	80122d8 <USBPDM1_AssertRp+0x12c>
 80122d4:	2380      	movs	r3, #128	@ 0x80
 80122d6:	011b      	lsls	r3, r3, #4
 80122d8:	0019      	movs	r1, r3
 80122da:	f7ff fc8f 	bl	8011bfc <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 80122de:	4b0d      	ldr	r3, [pc, #52]	@ (8012314 <USBPDM1_AssertRp+0x168>)
 80122e0:	6819      	ldr	r1, [r3, #0]
 80122e2:	1dfb      	adds	r3, r7, #7
 80122e4:	781a      	ldrb	r2, [r3, #0]
 80122e6:	480a      	ldr	r0, [pc, #40]	@ (8012310 <USBPDM1_AssertRp+0x164>)
 80122e8:	0013      	movs	r3, r2
 80122ea:	011b      	lsls	r3, r3, #4
 80122ec:	1a9b      	subs	r3, r3, r2
 80122ee:	009b      	lsls	r3, r3, #2
 80122f0:	581b      	ldr	r3, [r3, r0]
 80122f2:	4a09      	ldr	r2, [pc, #36]	@ (8012318 <USBPDM1_AssertRp+0x16c>)
 80122f4:	4293      	cmp	r3, r2
 80122f6:	d102      	bne.n	80122fe <USBPDM1_AssertRp+0x152>
 80122f8:	2380      	movs	r3, #128	@ 0x80
 80122fa:	009b      	lsls	r3, r3, #2
 80122fc:	e001      	b.n	8012302 <USBPDM1_AssertRp+0x156>
 80122fe:	2380      	movs	r3, #128	@ 0x80
 8012300:	00db      	lsls	r3, r3, #3
 8012302:	4a04      	ldr	r2, [pc, #16]	@ (8012314 <USBPDM1_AssertRp+0x168>)
 8012304:	430b      	orrs	r3, r1
 8012306:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8012308:	46c0      	nop			@ (mov r8, r8)
 801230a:	46bd      	mov	sp, r7
 801230c:	b002      	add	sp, #8
 801230e:	bd80      	pop	{r7, pc}
 8012310:	200005b8 	.word	0x200005b8
 8012314:	40010000 	.word	0x40010000
 8012318:	4000a000 	.word	0x4000a000

0801231c <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b082      	sub	sp, #8
 8012320:	af00      	add	r7, sp, #0
 8012322:	0002      	movs	r2, r0
 8012324:	1dfb      	adds	r3, r7, #7
 8012326:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8012328:	46c0      	nop			@ (mov r8, r8)
 801232a:	46bd      	mov	sp, r7
 801232c:	b002      	add	sp, #8
 801232e:	bd80      	pop	{r7, pc}

08012330 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	0002      	movs	r2, r0
 8012338:	1dfb      	adds	r3, r7, #7
 801233a:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 801233c:	1dfb      	adds	r3, r7, #7
 801233e:	781a      	ldrb	r2, [r3, #0]
 8012340:	494b      	ldr	r1, [pc, #300]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 8012342:	0013      	movs	r3, r2
 8012344:	011b      	lsls	r3, r3, #4
 8012346:	1a9b      	subs	r3, r3, r2
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	585b      	ldr	r3, [r3, r1]
 801234c:	0018      	movs	r0, r3
 801234e:	f7ff fbf7 	bl	8011b40 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8012352:	1dfb      	adds	r3, r7, #7
 8012354:	781a      	ldrb	r2, [r3, #0]
 8012356:	4946      	ldr	r1, [pc, #280]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 8012358:	0013      	movs	r3, r2
 801235a:	011b      	lsls	r3, r3, #4
 801235c:	1a9b      	subs	r3, r3, r2
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	585b      	ldr	r3, [r3, r1]
 8012362:	0018      	movs	r0, r3
 8012364:	f7ff fc0c 	bl	8011b80 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8012368:	2001      	movs	r0, #1
 801236a:	f7ff fba5 	bl	8011ab8 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 801236e:	1dfb      	adds	r3, r7, #7
 8012370:	781a      	ldrb	r2, [r3, #0]
 8012372:	493f      	ldr	r1, [pc, #252]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 8012374:	0013      	movs	r3, r2
 8012376:	011b      	lsls	r3, r3, #4
 8012378:	1a9b      	subs	r3, r3, r2
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	585b      	ldr	r3, [r3, r1]
 801237e:	2100      	movs	r1, #0
 8012380:	0018      	movs	r0, r3
 8012382:	f7ff fc3b 	bl	8011bfc <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8012386:	1dfb      	adds	r3, r7, #7
 8012388:	781a      	ldrb	r2, [r3, #0]
 801238a:	4939      	ldr	r1, [pc, #228]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 801238c:	0013      	movs	r3, r2
 801238e:	011b      	lsls	r3, r3, #4
 8012390:	1a9b      	subs	r3, r3, r2
 8012392:	009b      	lsls	r3, r3, #2
 8012394:	585b      	ldr	r3, [r3, r1]
 8012396:	0018      	movs	r0, r3
 8012398:	f7ff fc44 	bl	8011c24 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 801239c:	1dfb      	adds	r3, r7, #7
 801239e:	781a      	ldrb	r2, [r3, #0]
 80123a0:	4933      	ldr	r1, [pc, #204]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 80123a2:	0013      	movs	r3, r2
 80123a4:	011b      	lsls	r3, r3, #4
 80123a6:	1a9b      	subs	r3, r3, r2
 80123a8:	009b      	lsls	r3, r3, #2
 80123aa:	18cb      	adds	r3, r1, r3
 80123ac:	3334      	adds	r3, #52	@ 0x34
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10e      	bne.n	80123d2 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80123b4:	1dfb      	adds	r3, r7, #7
 80123b6:	781a      	ldrb	r2, [r3, #0]
 80123b8:	492d      	ldr	r1, [pc, #180]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 80123ba:	0013      	movs	r3, r2
 80123bc:	011b      	lsls	r3, r3, #4
 80123be:	1a9b      	subs	r3, r3, r2
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	585b      	ldr	r3, [r3, r1]
 80123c4:	22c0      	movs	r2, #192	@ 0xc0
 80123c6:	0112      	lsls	r2, r2, #4
 80123c8:	0011      	movs	r1, r2
 80123ca:	0018      	movs	r0, r3
 80123cc:	f7ff fc16 	bl	8011bfc <LL_UCPD_SetccEnable>
 80123d0:	e01b      	b.n	801240a <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80123d2:	1dfb      	adds	r3, r7, #7
 80123d4:	781a      	ldrb	r2, [r3, #0]
 80123d6:	4926      	ldr	r1, [pc, #152]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 80123d8:	0013      	movs	r3, r2
 80123da:	011b      	lsls	r3, r3, #4
 80123dc:	1a9b      	subs	r3, r3, r2
 80123de:	009b      	lsls	r3, r3, #2
 80123e0:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80123e2:	1dfb      	adds	r3, r7, #7
 80123e4:	781a      	ldrb	r2, [r3, #0]
 80123e6:	4922      	ldr	r1, [pc, #136]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 80123e8:	0013      	movs	r3, r2
 80123ea:	011b      	lsls	r3, r3, #4
 80123ec:	1a9b      	subs	r3, r3, r2
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	18cb      	adds	r3, r1, r3
 80123f2:	3334      	adds	r3, #52	@ 0x34
 80123f4:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80123f6:	2b01      	cmp	r3, #1
 80123f8:	d102      	bne.n	8012400 <USBPDM1_AssertRd+0xd0>
 80123fa:	2380      	movs	r3, #128	@ 0x80
 80123fc:	00db      	lsls	r3, r3, #3
 80123fe:	e001      	b.n	8012404 <USBPDM1_AssertRd+0xd4>
 8012400:	2380      	movs	r3, #128	@ 0x80
 8012402:	011b      	lsls	r3, r3, #4
 8012404:	0019      	movs	r1, r3
 8012406:	f7ff fbf9 	bl	8011bfc <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 801240a:	4b1a      	ldr	r3, [pc, #104]	@ (8012474 <USBPDM1_AssertRd+0x144>)
 801240c:	6819      	ldr	r1, [r3, #0]
 801240e:	1dfb      	adds	r3, r7, #7
 8012410:	781a      	ldrb	r2, [r3, #0]
 8012412:	4817      	ldr	r0, [pc, #92]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 8012414:	0013      	movs	r3, r2
 8012416:	011b      	lsls	r3, r3, #4
 8012418:	1a9b      	subs	r3, r3, r2
 801241a:	009b      	lsls	r3, r3, #2
 801241c:	581b      	ldr	r3, [r3, r0]
 801241e:	4a16      	ldr	r2, [pc, #88]	@ (8012478 <USBPDM1_AssertRd+0x148>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d102      	bne.n	801242a <USBPDM1_AssertRd+0xfa>
 8012424:	2380      	movs	r3, #128	@ 0x80
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	e001      	b.n	801242e <USBPDM1_AssertRd+0xfe>
 801242a:	2380      	movs	r3, #128	@ 0x80
 801242c:	00db      	lsls	r3, r3, #3
 801242e:	4a11      	ldr	r2, [pc, #68]	@ (8012474 <USBPDM1_AssertRd+0x144>)
 8012430:	430b      	orrs	r3, r1
 8012432:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8012434:	2001      	movs	r0, #1
 8012436:	f7f5 ff73 	bl	8008320 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 801243a:	1dfb      	adds	r3, r7, #7
 801243c:	781a      	ldrb	r2, [r3, #0]
 801243e:	490c      	ldr	r1, [pc, #48]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 8012440:	0013      	movs	r3, r2
 8012442:	011b      	lsls	r3, r3, #4
 8012444:	1a9b      	subs	r3, r3, r2
 8012446:	009b      	lsls	r3, r3, #2
 8012448:	585b      	ldr	r3, [r3, r1]
 801244a:	0018      	movs	r0, r3
 801244c:	f7ff fb68 	bl	8011b20 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8012450:	1dfb      	adds	r3, r7, #7
 8012452:	781a      	ldrb	r2, [r3, #0]
 8012454:	4906      	ldr	r1, [pc, #24]	@ (8012470 <USBPDM1_AssertRd+0x140>)
 8012456:	0013      	movs	r3, r2
 8012458:	011b      	lsls	r3, r3, #4
 801245a:	1a9b      	subs	r3, r3, r2
 801245c:	009b      	lsls	r3, r3, #2
 801245e:	585b      	ldr	r3, [r3, r1]
 8012460:	0018      	movs	r0, r3
 8012462:	f7ff fb7d 	bl	8011b60 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8012466:	46c0      	nop			@ (mov r8, r8)
 8012468:	46bd      	mov	sp, r7
 801246a:	b002      	add	sp, #8
 801246c:	bd80      	pop	{r7, pc}
 801246e:	46c0      	nop			@ (mov r8, r8)
 8012470:	200005b8 	.word	0x200005b8
 8012474:	40010000 	.word	0x40010000
 8012478:	4000a000 	.word	0x4000a000

0801247c <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b082      	sub	sp, #8
 8012480:	af00      	add	r7, sp, #0
 8012482:	0002      	movs	r2, r0
 8012484:	1dfb      	adds	r3, r7, #7
 8012486:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8012488:	46c0      	nop			@ (mov r8, r8)
 801248a:	46bd      	mov	sp, r7
 801248c:	b002      	add	sp, #8
 801248e:	bd80      	pop	{r7, pc}

08012490 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	0002      	movs	r2, r0
 8012498:	1dfb      	adds	r3, r7, #7
 801249a:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 801249c:	2001      	movs	r0, #1
 801249e:	f7ff fb0b 	bl	8011ab8 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80124a2:	1dfb      	adds	r3, r7, #7
 80124a4:	781a      	ldrb	r2, [r3, #0]
 80124a6:	4930      	ldr	r1, [pc, #192]	@ (8012568 <USBPDM1_EnterErrorRecovery+0xd8>)
 80124a8:	0013      	movs	r3, r2
 80124aa:	011b      	lsls	r3, r3, #4
 80124ac:	1a9b      	subs	r3, r3, r2
 80124ae:	009b      	lsls	r3, r3, #2
 80124b0:	585b      	ldr	r3, [r3, r1]
 80124b2:	0018      	movs	r0, r3
 80124b4:	f7ff fbc6 	bl	8011c44 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 80124b8:	1dfb      	adds	r3, r7, #7
 80124ba:	781a      	ldrb	r2, [r3, #0]
 80124bc:	492a      	ldr	r1, [pc, #168]	@ (8012568 <USBPDM1_EnterErrorRecovery+0xd8>)
 80124be:	0013      	movs	r3, r2
 80124c0:	011b      	lsls	r3, r3, #4
 80124c2:	1a9b      	subs	r3, r3, r2
 80124c4:	009b      	lsls	r3, r3, #2
 80124c6:	585b      	ldr	r3, [r3, r1]
 80124c8:	2100      	movs	r1, #0
 80124ca:	0018      	movs	r0, r3
 80124cc:	f7ff fbca 	bl	8011c64 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80124d0:	1dfb      	adds	r3, r7, #7
 80124d2:	781a      	ldrb	r2, [r3, #0]
 80124d4:	4924      	ldr	r1, [pc, #144]	@ (8012568 <USBPDM1_EnterErrorRecovery+0xd8>)
 80124d6:	0013      	movs	r3, r2
 80124d8:	011b      	lsls	r3, r3, #4
 80124da:	1a9b      	subs	r3, r3, r2
 80124dc:	009b      	lsls	r3, r3, #2
 80124de:	585b      	ldr	r3, [r3, r1]
 80124e0:	2100      	movs	r1, #0
 80124e2:	0018      	movs	r0, r3
 80124e4:	f7ff fb8a 	bl	8011bfc <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 80124e8:	4b20      	ldr	r3, [pc, #128]	@ (801256c <USBPDM1_EnterErrorRecovery+0xdc>)
 80124ea:	6819      	ldr	r1, [r3, #0]
 80124ec:	1dfb      	adds	r3, r7, #7
 80124ee:	781a      	ldrb	r2, [r3, #0]
 80124f0:	481d      	ldr	r0, [pc, #116]	@ (8012568 <USBPDM1_EnterErrorRecovery+0xd8>)
 80124f2:	0013      	movs	r3, r2
 80124f4:	011b      	lsls	r3, r3, #4
 80124f6:	1a9b      	subs	r3, r3, r2
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	581b      	ldr	r3, [r3, r0]
 80124fc:	4a1c      	ldr	r2, [pc, #112]	@ (8012570 <USBPDM1_EnterErrorRecovery+0xe0>)
 80124fe:	4293      	cmp	r3, r2
 8012500:	d102      	bne.n	8012508 <USBPDM1_EnterErrorRecovery+0x78>
 8012502:	2380      	movs	r3, #128	@ 0x80
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	e001      	b.n	801250c <USBPDM1_EnterErrorRecovery+0x7c>
 8012508:	2380      	movs	r3, #128	@ 0x80
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	4a17      	ldr	r2, [pc, #92]	@ (801256c <USBPDM1_EnterErrorRecovery+0xdc>)
 801250e:	430b      	orrs	r3, r1
 8012510:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8012512:	1dfb      	adds	r3, r7, #7
 8012514:	781a      	ldrb	r2, [r3, #0]
 8012516:	4914      	ldr	r1, [pc, #80]	@ (8012568 <USBPDM1_EnterErrorRecovery+0xd8>)
 8012518:	0013      	movs	r3, r2
 801251a:	011b      	lsls	r3, r3, #4
 801251c:	1a9b      	subs	r3, r3, r2
 801251e:	009b      	lsls	r3, r3, #2
 8012520:	585b      	ldr	r3, [r3, r1]
 8012522:	0018      	movs	r0, r3
 8012524:	f7ff fbd2 	bl	8011ccc <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8012528:	1dfb      	adds	r3, r7, #7
 801252a:	781a      	ldrb	r2, [r3, #0]
 801252c:	490e      	ldr	r1, [pc, #56]	@ (8012568 <USBPDM1_EnterErrorRecovery+0xd8>)
 801252e:	0013      	movs	r3, r2
 8012530:	011b      	lsls	r3, r3, #4
 8012532:	1a9b      	subs	r3, r3, r2
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	18cb      	adds	r3, r1, r3
 8012538:	330c      	adds	r3, #12
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	7a1b      	ldrb	r3, [r3, #8]
 801253e:	2202      	movs	r2, #2
 8012540:	4013      	ands	r3, r2
 8012542:	b2db      	uxtb	r3, r3
 8012544:	2b00      	cmp	r3, #0
 8012546:	d00a      	beq.n	801255e <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8012548:	1dfb      	adds	r3, r7, #7
 801254a:	781a      	ldrb	r2, [r3, #0]
 801254c:	4906      	ldr	r1, [pc, #24]	@ (8012568 <USBPDM1_EnterErrorRecovery+0xd8>)
 801254e:	0013      	movs	r3, r2
 8012550:	011b      	lsls	r3, r3, #4
 8012552:	1a9b      	subs	r3, r3, r2
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	585b      	ldr	r3, [r3, r1]
 8012558:	0018      	movs	r0, r3
 801255a:	f7ff fb3f 	bl	8011bdc <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 801255e:	46c0      	nop			@ (mov r8, r8)
 8012560:	46bd      	mov	sp, r7
 8012562:	b002      	add	sp, #8
 8012564:	bd80      	pop	{r7, pc}
 8012566:	46c0      	nop			@ (mov r8, r8)
 8012568:	200005b8 	.word	0x200005b8
 801256c:	40010000 	.word	0x40010000
 8012570:	4000a000 	.word	0x4000a000

08012574 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	0002      	movs	r2, r0
 801257c:	1dfb      	adds	r3, r7, #7
 801257e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8012580:	1dfb      	adds	r3, r7, #7
 8012582:	781a      	ldrb	r2, [r3, #0]
 8012584:	4906      	ldr	r1, [pc, #24]	@ (80125a0 <USBPD_HW_IF_EnableRX+0x2c>)
 8012586:	0013      	movs	r3, r2
 8012588:	011b      	lsls	r3, r3, #4
 801258a:	1a9b      	subs	r3, r3, r2
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	585b      	ldr	r3, [r3, r1]
 8012590:	0018      	movs	r0, r3
 8012592:	f7ff fb8d 	bl	8011cb0 <LL_UCPD_RxEnable>
}
 8012596:	46c0      	nop			@ (mov r8, r8)
 8012598:	46bd      	mov	sp, r7
 801259a:	b002      	add	sp, #8
 801259c:	bd80      	pop	{r7, pc}
 801259e:	46c0      	nop			@ (mov r8, r8)
 80125a0:	200005b8 	.word	0x200005b8

080125a4 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	0002      	movs	r2, r0
 80125ac:	1dfb      	adds	r3, r7, #7
 80125ae:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80125b0:	1dfb      	adds	r3, r7, #7
 80125b2:	781a      	ldrb	r2, [r3, #0]
 80125b4:	4906      	ldr	r1, [pc, #24]	@ (80125d0 <USBPD_HW_IF_DisableRX+0x2c>)
 80125b6:	0013      	movs	r3, r2
 80125b8:	011b      	lsls	r3, r3, #4
 80125ba:	1a9b      	subs	r3, r3, r2
 80125bc:	009b      	lsls	r3, r3, #2
 80125be:	585b      	ldr	r3, [r3, r1]
 80125c0:	0018      	movs	r0, r3
 80125c2:	f7ff fb83 	bl	8011ccc <LL_UCPD_RxDisable>
}
 80125c6:	46c0      	nop			@ (mov r8, r8)
 80125c8:	46bd      	mov	sp, r7
 80125ca:	b002      	add	sp, #8
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	46c0      	nop			@ (mov r8, r8)
 80125d0:	200005b8 	.word	0x200005b8

080125d4 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 80125d4:	b590      	push	{r4, r7, lr}
 80125d6:	b085      	sub	sp, #20
 80125d8:	af00      	add	r7, sp, #0
 80125da:	0002      	movs	r2, r0
 80125dc:	6039      	str	r1, [r7, #0]
 80125de:	1dfb      	adds	r3, r7, #7
 80125e0:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 80125e2:	f000 fc51 	bl	8012e88 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 80125e6:	1dfb      	adds	r3, r7, #7
 80125e8:	781c      	ldrb	r4, [r3, #0]
 80125ea:	1dfb      	adds	r3, r7, #7
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	0018      	movs	r0, r3
 80125f0:	f7fe fd02 	bl	8010ff8 <USBPD_HW_Init_DMATxInstance>
 80125f4:	0001      	movs	r1, r0
 80125f6:	4aa6      	ldr	r2, [pc, #664]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80125f8:	0023      	movs	r3, r4
 80125fa:	011b      	lsls	r3, r3, #4
 80125fc:	1b1b      	subs	r3, r3, r4
 80125fe:	009b      	lsls	r3, r3, #2
 8012600:	18d3      	adds	r3, r2, r3
 8012602:	3304      	adds	r3, #4
 8012604:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8012606:	1dfb      	adds	r3, r7, #7
 8012608:	781c      	ldrb	r4, [r3, #0]
 801260a:	1dfb      	adds	r3, r7, #7
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	0018      	movs	r0, r3
 8012610:	f7fe fc88 	bl	8010f24 <USBPD_HW_Init_DMARxInstance>
 8012614:	0001      	movs	r1, r0
 8012616:	4a9e      	ldr	r2, [pc, #632]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012618:	0023      	movs	r3, r4
 801261a:	011b      	lsls	r3, r3, #4
 801261c:	1b1b      	subs	r3, r3, r4
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	18d3      	adds	r3, r2, r3
 8012622:	3308      	adds	r3, #8
 8012624:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8012626:	1dfb      	adds	r3, r7, #7
 8012628:	781a      	ldrb	r2, [r3, #0]
 801262a:	4999      	ldr	r1, [pc, #612]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 801262c:	0013      	movs	r3, r2
 801262e:	011b      	lsls	r3, r3, #4
 8012630:	1a9b      	subs	r3, r3, r2
 8012632:	009b      	lsls	r3, r3, #2
 8012634:	585b      	ldr	r3, [r3, r1]
 8012636:	3330      	adds	r3, #48	@ 0x30
 8012638:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 801263a:	1dfb      	adds	r3, r7, #7
 801263c:	781a      	ldrb	r2, [r3, #0]
 801263e:	4994      	ldr	r1, [pc, #592]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012640:	0013      	movs	r3, r2
 8012642:	011b      	lsls	r3, r3, #4
 8012644:	1a9b      	subs	r3, r3, r2
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	18cb      	adds	r3, r1, r3
 801264a:	3308      	adds	r3, #8
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	68fa      	ldr	r2, [r7, #12]
 8012650:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8012652:	1dfb      	adds	r3, r7, #7
 8012654:	781a      	ldrb	r2, [r3, #0]
 8012656:	498e      	ldr	r1, [pc, #568]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012658:	0013      	movs	r3, r2
 801265a:	011b      	lsls	r3, r3, #4
 801265c:	1a9b      	subs	r3, r3, r2
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	18cb      	adds	r3, r1, r3
 8012662:	3330      	adds	r3, #48	@ 0x30
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	1dfb      	adds	r3, r7, #7
 8012668:	781a      	ldrb	r2, [r3, #0]
 801266a:	4989      	ldr	r1, [pc, #548]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 801266c:	0013      	movs	r3, r2
 801266e:	011b      	lsls	r3, r3, #4
 8012670:	1a9b      	subs	r3, r3, r2
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	18cb      	adds	r3, r1, r3
 8012676:	3308      	adds	r3, #8
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	0002      	movs	r2, r0
 801267c:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 801267e:	1dfb      	adds	r3, r7, #7
 8012680:	781a      	ldrb	r2, [r3, #0]
 8012682:	4983      	ldr	r1, [pc, #524]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012684:	0013      	movs	r3, r2
 8012686:	011b      	lsls	r3, r3, #4
 8012688:	1a9b      	subs	r3, r3, r2
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	18cb      	adds	r3, r1, r3
 801268e:	3308      	adds	r3, #8
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2284      	movs	r2, #132	@ 0x84
 8012694:	0052      	lsls	r2, r2, #1
 8012696:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8012698:	1dfb      	adds	r3, r7, #7
 801269a:	781a      	ldrb	r2, [r3, #0]
 801269c:	497c      	ldr	r1, [pc, #496]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 801269e:	0013      	movs	r3, r2
 80126a0:	011b      	lsls	r3, r3, #4
 80126a2:	1a9b      	subs	r3, r3, r2
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	18cb      	adds	r3, r1, r3
 80126a8:	3308      	adds	r3, #8
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	6819      	ldr	r1, [r3, #0]
 80126ae:	1dfb      	adds	r3, r7, #7
 80126b0:	781a      	ldrb	r2, [r3, #0]
 80126b2:	4877      	ldr	r0, [pc, #476]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80126b4:	0013      	movs	r3, r2
 80126b6:	011b      	lsls	r3, r3, #4
 80126b8:	1a9b      	subs	r3, r3, r2
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	18c3      	adds	r3, r0, r3
 80126be:	3308      	adds	r3, #8
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2201      	movs	r2, #1
 80126c4:	430a      	orrs	r2, r1
 80126c6:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 80126c8:	1dfb      	adds	r3, r7, #7
 80126ca:	781a      	ldrb	r2, [r3, #0]
 80126cc:	4970      	ldr	r1, [pc, #448]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80126ce:	0013      	movs	r3, r2
 80126d0:	011b      	lsls	r3, r3, #4
 80126d2:	1a9b      	subs	r3, r3, r2
 80126d4:	009b      	lsls	r3, r3, #2
 80126d6:	585b      	ldr	r3, [r3, r1]
 80126d8:	3324      	adds	r3, #36	@ 0x24
 80126da:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 80126dc:	1dfb      	adds	r3, r7, #7
 80126de:	781a      	ldrb	r2, [r3, #0]
 80126e0:	496b      	ldr	r1, [pc, #428]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80126e2:	0013      	movs	r3, r2
 80126e4:	011b      	lsls	r3, r3, #4
 80126e6:	1a9b      	subs	r3, r3, r2
 80126e8:	009b      	lsls	r3, r3, #2
 80126ea:	18cb      	adds	r3, r1, r3
 80126ec:	3304      	adds	r3, #4
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	68fa      	ldr	r2, [r7, #12]
 80126f2:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 80126f4:	1dfb      	adds	r3, r7, #7
 80126f6:	781a      	ldrb	r2, [r3, #0]
 80126f8:	4965      	ldr	r1, [pc, #404]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80126fa:	0013      	movs	r3, r2
 80126fc:	011b      	lsls	r3, r3, #4
 80126fe:	1a9b      	subs	r3, r3, r2
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	585b      	ldr	r3, [r3, r1]
 8012704:	6919      	ldr	r1, [r3, #16]
 8012706:	1dfb      	adds	r3, r7, #7
 8012708:	781a      	ldrb	r2, [r3, #0]
 801270a:	4861      	ldr	r0, [pc, #388]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 801270c:	0013      	movs	r3, r2
 801270e:	011b      	lsls	r3, r3, #4
 8012710:	1a9b      	subs	r3, r3, r2
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	581b      	ldr	r3, [r3, r0]
 8012716:	4a5f      	ldr	r2, [pc, #380]	@ (8012894 <HW_SignalAttachement+0x2c0>)
 8012718:	430a      	orrs	r2, r1
 801271a:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 801271c:	1dfb      	adds	r3, r7, #7
 801271e:	781a      	ldrb	r2, [r3, #0]
 8012720:	495b      	ldr	r1, [pc, #364]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012722:	0013      	movs	r3, r2
 8012724:	011b      	lsls	r3, r3, #4
 8012726:	1a9b      	subs	r3, r3, r2
 8012728:	009b      	lsls	r3, r3, #2
 801272a:	18cb      	adds	r3, r1, r3
 801272c:	3334      	adds	r3, #52	@ 0x34
 801272e:	683a      	ldr	r2, [r7, #0]
 8012730:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8012732:	1dfb      	adds	r3, r7, #7
 8012734:	781a      	ldrb	r2, [r3, #0]
 8012736:	4956      	ldr	r1, [pc, #344]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012738:	0013      	movs	r3, r2
 801273a:	011b      	lsls	r3, r3, #4
 801273c:	1a9b      	subs	r3, r3, r2
 801273e:	009b      	lsls	r3, r3, #2
 8012740:	5858      	ldr	r0, [r3, r1]
 8012742:	1dfb      	adds	r3, r7, #7
 8012744:	781a      	ldrb	r2, [r3, #0]
 8012746:	4952      	ldr	r1, [pc, #328]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012748:	0013      	movs	r3, r2
 801274a:	011b      	lsls	r3, r3, #4
 801274c:	1a9b      	subs	r3, r3, r2
 801274e:	009b      	lsls	r3, r3, #2
 8012750:	18cb      	adds	r3, r1, r3
 8012752:	3334      	adds	r3, #52	@ 0x34
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	2b01      	cmp	r3, #1
 8012758:	d101      	bne.n	801275e <HW_SignalAttachement+0x18a>
 801275a:	2300      	movs	r3, #0
 801275c:	e000      	b.n	8012760 <HW_SignalAttachement+0x18c>
 801275e:	2340      	movs	r3, #64	@ 0x40
 8012760:	0019      	movs	r1, r3
 8012762:	f7ff fa93 	bl	8011c8c <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8012766:	1dfb      	adds	r3, r7, #7
 8012768:	781a      	ldrb	r2, [r3, #0]
 801276a:	4949      	ldr	r1, [pc, #292]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 801276c:	0013      	movs	r3, r2
 801276e:	011b      	lsls	r3, r3, #4
 8012770:	1a9b      	subs	r3, r3, r2
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	18cb      	adds	r3, r1, r3
 8012776:	330c      	adds	r3, #12
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	7a1b      	ldrb	r3, [r3, #8]
 801277c:	2202      	movs	r2, #2
 801277e:	4013      	ands	r3, r2
 8012780:	b2db      	uxtb	r3, r3
 8012782:	2b00      	cmp	r3, #0
 8012784:	d034      	beq.n	80127f0 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8012786:	1dfb      	adds	r3, r7, #7
 8012788:	781a      	ldrb	r2, [r3, #0]
 801278a:	4941      	ldr	r1, [pc, #260]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 801278c:	0013      	movs	r3, r2
 801278e:	011b      	lsls	r3, r3, #4
 8012790:	1a9b      	subs	r3, r3, r2
 8012792:	009b      	lsls	r3, r3, #2
 8012794:	18cb      	adds	r3, r1, r3
 8012796:	3334      	adds	r3, #52	@ 0x34
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	2b01      	cmp	r3, #1
 801279c:	d101      	bne.n	80127a2 <HW_SignalAttachement+0x1ce>
 801279e:	2301      	movs	r3, #1
 80127a0:	e000      	b.n	80127a4 <HW_SignalAttachement+0x1d0>
 80127a2:	2302      	movs	r3, #2
 80127a4:	1dfa      	adds	r2, r7, #7
 80127a6:	7812      	ldrb	r2, [r2, #0]
 80127a8:	0019      	movs	r1, r3
 80127aa:	0010      	movs	r0, r2
 80127ac:	f7fe fc92 	bl	80110d4 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 80127b0:	1dfb      	adds	r3, r7, #7
 80127b2:	781a      	ldrb	r2, [r3, #0]
 80127b4:	4936      	ldr	r1, [pc, #216]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80127b6:	0013      	movs	r3, r2
 80127b8:	011b      	lsls	r3, r3, #4
 80127ba:	1a9b      	subs	r3, r3, r2
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	585b      	ldr	r3, [r3, r1]
 80127c0:	0018      	movs	r0, r3
 80127c2:	f7ff f9fb 	bl	8011bbc <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 80127c6:	1dfb      	adds	r3, r7, #7
 80127c8:	781a      	ldrb	r2, [r3, #0]
 80127ca:	4931      	ldr	r1, [pc, #196]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80127cc:	0013      	movs	r3, r2
 80127ce:	011b      	lsls	r3, r3, #4
 80127d0:	1a9b      	subs	r3, r3, r2
 80127d2:	009b      	lsls	r3, r3, #2
 80127d4:	585b      	ldr	r3, [r3, r1]
 80127d6:	6919      	ldr	r1, [r3, #16]
 80127d8:	1dfb      	adds	r3, r7, #7
 80127da:	781a      	ldrb	r2, [r3, #0]
 80127dc:	482c      	ldr	r0, [pc, #176]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80127de:	0013      	movs	r3, r2
 80127e0:	011b      	lsls	r3, r3, #4
 80127e2:	1a9b      	subs	r3, r3, r2
 80127e4:	009b      	lsls	r3, r3, #2
 80127e6:	581b      	ldr	r3, [r3, r0]
 80127e8:	2280      	movs	r2, #128	@ 0x80
 80127ea:	0352      	lsls	r2, r2, #13
 80127ec:	430a      	orrs	r2, r1
 80127ee:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 80127f0:	1dfb      	adds	r3, r7, #7
 80127f2:	781a      	ldrb	r2, [r3, #0]
 80127f4:	4926      	ldr	r1, [pc, #152]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 80127f6:	0013      	movs	r3, r2
 80127f8:	011b      	lsls	r3, r3, #4
 80127fa:	1a9b      	subs	r3, r3, r2
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	18cb      	adds	r3, r1, r3
 8012800:	3334      	adds	r3, #52	@ 0x34
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	2b01      	cmp	r3, #1
 8012806:	d10e      	bne.n	8012826 <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8012808:	1dfb      	adds	r3, r7, #7
 801280a:	781a      	ldrb	r2, [r3, #0]
 801280c:	4920      	ldr	r1, [pc, #128]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 801280e:	0013      	movs	r3, r2
 8012810:	011b      	lsls	r3, r3, #4
 8012812:	1a9b      	subs	r3, r3, r2
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	585b      	ldr	r3, [r3, r1]
 8012818:	2280      	movs	r2, #128	@ 0x80
 801281a:	00d2      	lsls	r2, r2, #3
 801281c:	0011      	movs	r1, r2
 801281e:	0018      	movs	r0, r3
 8012820:	f7ff f9ec 	bl	8011bfc <LL_UCPD_SetccEnable>
 8012824:	e00d      	b.n	8012842 <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8012826:	1dfb      	adds	r3, r7, #7
 8012828:	781a      	ldrb	r2, [r3, #0]
 801282a:	4919      	ldr	r1, [pc, #100]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 801282c:	0013      	movs	r3, r2
 801282e:	011b      	lsls	r3, r3, #4
 8012830:	1a9b      	subs	r3, r3, r2
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	585b      	ldr	r3, [r3, r1]
 8012836:	2280      	movs	r2, #128	@ 0x80
 8012838:	0112      	lsls	r2, r2, #4
 801283a:	0011      	movs	r1, r2
 801283c:	0018      	movs	r0, r3
 801283e:	f7ff f9dd 	bl	8011bfc <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8012842:	1dfb      	adds	r3, r7, #7
 8012844:	781a      	ldrb	r2, [r3, #0]
 8012846:	4912      	ldr	r1, [pc, #72]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012848:	0013      	movs	r3, r2
 801284a:	011b      	lsls	r3, r3, #4
 801284c:	1a9b      	subs	r3, r3, r2
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	585b      	ldr	r3, [r3, r1]
 8012852:	2100      	movs	r1, #0
 8012854:	0018      	movs	r0, r3
 8012856:	f7ff fa48 	bl	8011cea <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 801285a:	1dfb      	adds	r3, r7, #7
 801285c:	781a      	ldrb	r2, [r3, #0]
 801285e:	490c      	ldr	r1, [pc, #48]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012860:	0013      	movs	r3, r2
 8012862:	011b      	lsls	r3, r3, #4
 8012864:	1a9b      	subs	r3, r3, r2
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	585b      	ldr	r3, [r3, r1]
 801286a:	0018      	movs	r0, r3
 801286c:	f7ff fa7d 	bl	8011d6a <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8012870:	1dfb      	adds	r3, r7, #7
 8012872:	781a      	ldrb	r2, [r3, #0]
 8012874:	4906      	ldr	r1, [pc, #24]	@ (8012890 <HW_SignalAttachement+0x2bc>)
 8012876:	0013      	movs	r3, r2
 8012878:	011b      	lsls	r3, r3, #4
 801287a:	1a9b      	subs	r3, r3, r2
 801287c:	009b      	lsls	r3, r3, #2
 801287e:	585b      	ldr	r3, [r3, r1]
 8012880:	0018      	movs	r0, r3
 8012882:	f7ff fa91 	bl	8011da8 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8012886:	46c0      	nop			@ (mov r8, r8)
 8012888:	46bd      	mov	sp, r7
 801288a:	b005      	add	sp, #20
 801288c:	bd90      	pop	{r4, r7, pc}
 801288e:	46c0      	nop			@ (mov r8, r8)
 8012890:	200005b8 	.word	0x200005b8
 8012894:	00001e7e 	.word	0x00001e7e

08012898 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	0002      	movs	r2, r0
 80128a0:	1dfb      	adds	r3, r7, #7
 80128a2:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80128a4:	1dfb      	adds	r3, r7, #7
 80128a6:	781a      	ldrb	r2, [r3, #0]
 80128a8:	4941      	ldr	r1, [pc, #260]	@ (80129b0 <HW_SignalDetachment+0x118>)
 80128aa:	0013      	movs	r3, r2
 80128ac:	011b      	lsls	r3, r3, #4
 80128ae:	1a9b      	subs	r3, r3, r2
 80128b0:	009b      	lsls	r3, r3, #2
 80128b2:	585b      	ldr	r3, [r3, r1]
 80128b4:	0018      	movs	r0, r3
 80128b6:	f7ff fa67 	bl	8011d88 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80128ba:	1dfb      	adds	r3, r7, #7
 80128bc:	781a      	ldrb	r2, [r3, #0]
 80128be:	493c      	ldr	r1, [pc, #240]	@ (80129b0 <HW_SignalDetachment+0x118>)
 80128c0:	0013      	movs	r3, r2
 80128c2:	011b      	lsls	r3, r3, #4
 80128c4:	1a9b      	subs	r3, r3, r2
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	585b      	ldr	r3, [r3, r1]
 80128ca:	0018      	movs	r0, r3
 80128cc:	f7ff fa7c 	bl	8011dc8 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80128d0:	1dfb      	adds	r3, r7, #7
 80128d2:	781a      	ldrb	r2, [r3, #0]
 80128d4:	4936      	ldr	r1, [pc, #216]	@ (80129b0 <HW_SignalDetachment+0x118>)
 80128d6:	0013      	movs	r3, r2
 80128d8:	011b      	lsls	r3, r3, #4
 80128da:	1a9b      	subs	r3, r3, r2
 80128dc:	009b      	lsls	r3, r3, #2
 80128de:	585b      	ldr	r3, [r3, r1]
 80128e0:	0018      	movs	r0, r3
 80128e2:	f7ff f9f3 	bl	8011ccc <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 80128e6:	1dfb      	adds	r3, r7, #7
 80128e8:	781a      	ldrb	r2, [r3, #0]
 80128ea:	4931      	ldr	r1, [pc, #196]	@ (80129b0 <HW_SignalDetachment+0x118>)
 80128ec:	0013      	movs	r3, r2
 80128ee:	011b      	lsls	r3, r3, #4
 80128f0:	1a9b      	subs	r3, r3, r2
 80128f2:	009b      	lsls	r3, r3, #2
 80128f4:	585b      	ldr	r3, [r3, r1]
 80128f6:	22c0      	movs	r2, #192	@ 0xc0
 80128f8:	0212      	lsls	r2, r2, #8
 80128fa:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 80128fc:	1dfb      	adds	r3, r7, #7
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	0018      	movs	r0, r3
 8012902:	f7fe fbdd 	bl	80110c0 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8012906:	1dfb      	adds	r3, r7, #7
 8012908:	781b      	ldrb	r3, [r3, #0]
 801290a:	0018      	movs	r0, r3
 801290c:	f7fe fb6a 	bl	8010fe4 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012910:	1dfb      	adds	r3, r7, #7
 8012912:	781a      	ldrb	r2, [r3, #0]
 8012914:	4926      	ldr	r1, [pc, #152]	@ (80129b0 <HW_SignalDetachment+0x118>)
 8012916:	0013      	movs	r3, r2
 8012918:	011b      	lsls	r3, r3, #4
 801291a:	1a9b      	subs	r3, r3, r2
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	585b      	ldr	r3, [r3, r1]
 8012920:	22c0      	movs	r2, #192	@ 0xc0
 8012922:	0112      	lsls	r2, r2, #4
 8012924:	0011      	movs	r1, r2
 8012926:	0018      	movs	r0, r3
 8012928:	f7ff f968 	bl	8011bfc <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 801292c:	1dfb      	adds	r3, r7, #7
 801292e:	781a      	ldrb	r2, [r3, #0]
 8012930:	491f      	ldr	r1, [pc, #124]	@ (80129b0 <HW_SignalDetachment+0x118>)
 8012932:	0013      	movs	r3, r2
 8012934:	011b      	lsls	r3, r3, #4
 8012936:	1a9b      	subs	r3, r3, r2
 8012938:	009b      	lsls	r3, r3, #2
 801293a:	18cb      	adds	r3, r1, r3
 801293c:	3310      	adds	r3, #16
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	2204      	movs	r2, #4
 8012944:	4013      	ands	r3, r2
 8012946:	b2db      	uxtb	r3, r3
 8012948:	2b00      	cmp	r3, #0
 801294a:	d104      	bne.n	8012956 <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801294c:	1dfb      	adds	r3, r7, #7
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	0018      	movs	r0, r3
 8012952:	f003 f9ca 	bl	8015cea <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8012956:	1dfb      	adds	r3, r7, #7
 8012958:	781a      	ldrb	r2, [r3, #0]
 801295a:	4915      	ldr	r1, [pc, #84]	@ (80129b0 <HW_SignalDetachment+0x118>)
 801295c:	0013      	movs	r3, r2
 801295e:	011b      	lsls	r3, r3, #4
 8012960:	1a9b      	subs	r3, r3, r2
 8012962:	009b      	lsls	r3, r3, #2
 8012964:	18cb      	adds	r3, r1, r3
 8012966:	330c      	adds	r3, #12
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	7a1b      	ldrb	r3, [r3, #8]
 801296c:	2202      	movs	r2, #2
 801296e:	4013      	ands	r3, r2
 8012970:	b2db      	uxtb	r3, r3
 8012972:	2b00      	cmp	r3, #0
 8012974:	d00a      	beq.n	801298c <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8012976:	1dfb      	adds	r3, r7, #7
 8012978:	781a      	ldrb	r2, [r3, #0]
 801297a:	490d      	ldr	r1, [pc, #52]	@ (80129b0 <HW_SignalDetachment+0x118>)
 801297c:	0013      	movs	r3, r2
 801297e:	011b      	lsls	r3, r3, #4
 8012980:	1a9b      	subs	r3, r3, r2
 8012982:	009b      	lsls	r3, r3, #2
 8012984:	585b      	ldr	r3, [r3, r1]
 8012986:	0018      	movs	r0, r3
 8012988:	f7ff f928 	bl	8011bdc <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 801298c:	1dfb      	adds	r3, r7, #7
 801298e:	781a      	ldrb	r2, [r3, #0]
 8012990:	4907      	ldr	r1, [pc, #28]	@ (80129b0 <HW_SignalDetachment+0x118>)
 8012992:	0013      	movs	r3, r2
 8012994:	011b      	lsls	r3, r3, #4
 8012996:	1a9b      	subs	r3, r3, r2
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	18cb      	adds	r3, r1, r3
 801299c:	3334      	adds	r3, #52	@ 0x34
 801299e:	2200      	movs	r2, #0
 80129a0:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80129a2:	f000 fb11 	bl	8012fc8 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80129a6:	46c0      	nop			@ (mov r8, r8)
 80129a8:	46bd      	mov	sp, r7
 80129aa:	b002      	add	sp, #8
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	46c0      	nop			@ (mov r8, r8)
 80129b0:	200005b8 	.word	0x200005b8

080129b4 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	0002      	movs	r2, r0
 80129bc:	1dfb      	adds	r3, r7, #7
 80129be:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80129c0:	1dfb      	adds	r3, r7, #7
 80129c2:	781a      	ldrb	r2, [r3, #0]
 80129c4:	4907      	ldr	r1, [pc, #28]	@ (80129e4 <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 80129c6:	0013      	movs	r3, r2
 80129c8:	011b      	lsls	r3, r3, #4
 80129ca:	1a9b      	subs	r3, r3, r2
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	585b      	ldr	r3, [r3, r1]
 80129d0:	2280      	movs	r2, #128	@ 0x80
 80129d2:	0052      	lsls	r2, r2, #1
 80129d4:	0011      	movs	r1, r2
 80129d6:	0018      	movs	r0, r3
 80129d8:	f7ff f944 	bl	8011c64 <LL_UCPD_SetRpResistor>
}
 80129dc:	46c0      	nop			@ (mov r8, r8)
 80129de:	46bd      	mov	sp, r7
 80129e0:	b002      	add	sp, #8
 80129e2:	bd80      	pop	{r7, pc}
 80129e4:	200005b8 	.word	0x200005b8

080129e8 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	0002      	movs	r2, r0
 80129f0:	1dfb      	adds	r3, r7, #7
 80129f2:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80129f4:	1dfb      	adds	r3, r7, #7
 80129f6:	781a      	ldrb	r2, [r3, #0]
 80129f8:	4907      	ldr	r1, [pc, #28]	@ (8012a18 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 80129fa:	0013      	movs	r3, r2
 80129fc:	011b      	lsls	r3, r3, #4
 80129fe:	1a9b      	subs	r3, r3, r2
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	585b      	ldr	r3, [r3, r1]
 8012a04:	22c0      	movs	r2, #192	@ 0xc0
 8012a06:	0052      	lsls	r2, r2, #1
 8012a08:	0011      	movs	r1, r2
 8012a0a:	0018      	movs	r0, r3
 8012a0c:	f7ff f92a 	bl	8011c64 <LL_UCPD_SetRpResistor>
}
 8012a10:	46c0      	nop			@ (mov r8, r8)
 8012a12:	46bd      	mov	sp, r7
 8012a14:	b002      	add	sp, #8
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	200005b8 	.word	0x200005b8

08012a1c <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	0002      	movs	r2, r0
 8012a24:	1dfb      	adds	r3, r7, #7
 8012a26:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8012a28:	1dfb      	adds	r3, r7, #7
 8012a2a:	781a      	ldrb	r2, [r3, #0]
 8012a2c:	491c      	ldr	r1, [pc, #112]	@ (8012aa0 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8012a2e:	0013      	movs	r3, r2
 8012a30:	011b      	lsls	r3, r3, #4
 8012a32:	1a9b      	subs	r3, r3, r2
 8012a34:	009b      	lsls	r3, r3, #2
 8012a36:	18cb      	adds	r3, r1, r3
 8012a38:	3334      	adds	r3, #52	@ 0x34
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d002      	beq.n	8012a46 <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 8012a40:	2b02      	cmp	r3, #2
 8012a42:	d012      	beq.n	8012a6a <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 8012a44:	e026      	b.n	8012a94 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 8012a46:	1dfb      	adds	r3, r7, #7
 8012a48:	781a      	ldrb	r2, [r3, #0]
 8012a4a:	4915      	ldr	r1, [pc, #84]	@ (8012aa0 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8012a4c:	0013      	movs	r3, r2
 8012a4e:	011b      	lsls	r3, r3, #4
 8012a50:	1a9b      	subs	r3, r3, r2
 8012a52:	009b      	lsls	r3, r3, #2
 8012a54:	585b      	ldr	r3, [r3, r1]
 8012a56:	695a      	ldr	r2, [r3, #20]
 8012a58:	23c0      	movs	r3, #192	@ 0xc0
 8012a5a:	029b      	lsls	r3, r3, #10
 8012a5c:	401a      	ands	r2, r3
 8012a5e:	23c0      	movs	r3, #192	@ 0xc0
 8012a60:	029b      	lsls	r3, r3, #10
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d113      	bne.n	8012a8e <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 8012a66:	2301      	movs	r3, #1
 8012a68:	e015      	b.n	8012a96 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8012a6a:	1dfb      	adds	r3, r7, #7
 8012a6c:	781a      	ldrb	r2, [r3, #0]
 8012a6e:	490c      	ldr	r1, [pc, #48]	@ (8012aa0 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8012a70:	0013      	movs	r3, r2
 8012a72:	011b      	lsls	r3, r3, #4
 8012a74:	1a9b      	subs	r3, r3, r2
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	585b      	ldr	r3, [r3, r1]
 8012a7a:	695a      	ldr	r2, [r3, #20]
 8012a7c:	23c0      	movs	r3, #192	@ 0xc0
 8012a7e:	031b      	lsls	r3, r3, #12
 8012a80:	401a      	ands	r2, r3
 8012a82:	23c0      	movs	r3, #192	@ 0xc0
 8012a84:	031b      	lsls	r3, r3, #12
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d103      	bne.n	8012a92 <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	e003      	b.n	8012a96 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 8012a8e:	46c0      	nop			@ (mov r8, r8)
 8012a90:	e000      	b.n	8012a94 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 8012a92:	46c0      	nop			@ (mov r8, r8)
  }

  return USBPD_FALSE;
 8012a94:	2300      	movs	r3, #0
}
 8012a96:	0018      	movs	r0, r3
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	b002      	add	sp, #8
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	46c0      	nop			@ (mov r8, r8)
 8012aa0:	200005b8 	.word	0x200005b8

08012aa4 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	0002      	movs	r2, r0
 8012aac:	1dfb      	adds	r3, r7, #7
 8012aae:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8012ab0:	1dfb      	adds	r3, r7, #7
 8012ab2:	781a      	ldrb	r2, [r3, #0]
 8012ab4:	4906      	ldr	r1, [pc, #24]	@ (8012ad0 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 8012ab6:	0013      	movs	r3, r2
 8012ab8:	011b      	lsls	r3, r3, #4
 8012aba:	1a9b      	subs	r3, r3, r2
 8012abc:	009b      	lsls	r3, r3, #2
 8012abe:	585b      	ldr	r3, [r3, r1]
 8012ac0:	0018      	movs	r0, r3
 8012ac2:	f7ff f86c 	bl	8011b9e <LL_UCPD_SignalFRSTX>
}
 8012ac6:	46c0      	nop			@ (mov r8, r8)
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	b002      	add	sp, #8
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	46c0      	nop			@ (mov r8, r8)
 8012ad0:	200005b8 	.word	0x200005b8

08012ad4 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b084      	sub	sp, #16
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	0002      	movs	r2, r0
 8012adc:	1dfb      	adds	r3, r7, #7
 8012ade:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8012ae0:	1dfb      	adds	r3, r7, #7
 8012ae2:	781b      	ldrb	r3, [r3, #0]
 8012ae4:	220c      	movs	r2, #12
 8012ae6:	18ba      	adds	r2, r7, r2
 8012ae8:	0011      	movs	r1, r2
 8012aea:	0018      	movs	r0, r3
 8012aec:	f003 f90f 	bl	8015d0e <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	b29b      	uxth	r3, r3
}
 8012af4:	0018      	movs	r0, r3
 8012af6:	46bd      	mov	sp, r7
 8012af8:	b004      	add	sp, #16
 8012afa:	bd80      	pop	{r7, pc}

08012afc <LL_APB2_GRP1_EnableClock>:
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8012b04:	4b07      	ldr	r3, [pc, #28]	@ (8012b24 <LL_APB2_GRP1_EnableClock+0x28>)
 8012b06:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8012b08:	4b06      	ldr	r3, [pc, #24]	@ (8012b24 <LL_APB2_GRP1_EnableClock+0x28>)
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	430a      	orrs	r2, r1
 8012b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8012b10:	4b04      	ldr	r3, [pc, #16]	@ (8012b24 <LL_APB2_GRP1_EnableClock+0x28>)
 8012b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b14:	687a      	ldr	r2, [r7, #4]
 8012b16:	4013      	ands	r3, r2
 8012b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012b1a:	68fb      	ldr	r3, [r7, #12]
}
 8012b1c:	46c0      	nop			@ (mov r8, r8)
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	b004      	add	sp, #16
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	40021000 	.word	0x40021000

08012b28 <LL_APB2_GRP1_DisableClock>:
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 8012b30:	4b05      	ldr	r3, [pc, #20]	@ (8012b48 <LL_APB2_GRP1_DisableClock+0x20>)
 8012b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	43d9      	mvns	r1, r3
 8012b38:	4b03      	ldr	r3, [pc, #12]	@ (8012b48 <LL_APB2_GRP1_DisableClock+0x20>)
 8012b3a:	400a      	ands	r2, r1
 8012b3c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8012b3e:	46c0      	nop			@ (mov r8, r8)
 8012b40:	46bd      	mov	sp, r7
 8012b42:	b002      	add	sp, #8
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	46c0      	nop			@ (mov r8, r8)
 8012b48:	40021000 	.word	0x40021000

08012b4c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b082      	sub	sp, #8
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2201      	movs	r2, #1
 8012b5a:	431a      	orrs	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	601a      	str	r2, [r3, #0]
}
 8012b60:	46c0      	nop			@ (mov r8, r8)
 8012b62:	46bd      	mov	sp, r7
 8012b64:	b002      	add	sp, #8
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	2270      	movs	r2, #112	@ 0x70
 8012b78:	4393      	bics	r3, r2
 8012b7a:	001a      	movs	r2, r3
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	431a      	orrs	r2, r3
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	601a      	str	r2, [r3, #0]
}
 8012b84:	46c0      	nop			@ (mov r8, r8)
 8012b86:	46bd      	mov	sp, r7
 8012b88:	b002      	add	sp, #8
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	683a      	ldr	r2, [r7, #0]
 8012b9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012b9c:	46c0      	nop			@ (mov r8, r8)
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	b002      	add	sp, #8
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8012bb0:	0018      	movs	r0, r3
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	b002      	add	sp, #8
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	683a      	ldr	r2, [r7, #0]
 8012bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8012bc8:	46c0      	nop			@ (mov r8, r8)
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	b002      	add	sp, #8
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b086      	sub	sp, #24
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	2b01      	cmp	r3, #1
 8012be0:	d02c      	beq.n	8012c3c <LL_TIM_OC_SetMode+0x6c>
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	2b04      	cmp	r3, #4
 8012be6:	d027      	beq.n	8012c38 <LL_TIM_OC_SetMode+0x68>
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	2b10      	cmp	r3, #16
 8012bec:	d022      	beq.n	8012c34 <LL_TIM_OC_SetMode+0x64>
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	2b40      	cmp	r3, #64	@ 0x40
 8012bf2:	d01d      	beq.n	8012c30 <LL_TIM_OC_SetMode+0x60>
 8012bf4:	68ba      	ldr	r2, [r7, #8]
 8012bf6:	2380      	movs	r3, #128	@ 0x80
 8012bf8:	005b      	lsls	r3, r3, #1
 8012bfa:	429a      	cmp	r2, r3
 8012bfc:	d016      	beq.n	8012c2c <LL_TIM_OC_SetMode+0x5c>
 8012bfe:	68ba      	ldr	r2, [r7, #8]
 8012c00:	2380      	movs	r3, #128	@ 0x80
 8012c02:	00db      	lsls	r3, r3, #3
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d00f      	beq.n	8012c28 <LL_TIM_OC_SetMode+0x58>
 8012c08:	68ba      	ldr	r2, [r7, #8]
 8012c0a:	2380      	movs	r3, #128	@ 0x80
 8012c0c:	015b      	lsls	r3, r3, #5
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d008      	beq.n	8012c24 <LL_TIM_OC_SetMode+0x54>
 8012c12:	68ba      	ldr	r2, [r7, #8]
 8012c14:	2380      	movs	r3, #128	@ 0x80
 8012c16:	025b      	lsls	r3, r3, #9
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d101      	bne.n	8012c20 <LL_TIM_OC_SetMode+0x50>
 8012c1c:	2307      	movs	r3, #7
 8012c1e:	e00e      	b.n	8012c3e <LL_TIM_OC_SetMode+0x6e>
 8012c20:	2308      	movs	r3, #8
 8012c22:	e00c      	b.n	8012c3e <LL_TIM_OC_SetMode+0x6e>
 8012c24:	2306      	movs	r3, #6
 8012c26:	e00a      	b.n	8012c3e <LL_TIM_OC_SetMode+0x6e>
 8012c28:	2305      	movs	r3, #5
 8012c2a:	e008      	b.n	8012c3e <LL_TIM_OC_SetMode+0x6e>
 8012c2c:	2304      	movs	r3, #4
 8012c2e:	e006      	b.n	8012c3e <LL_TIM_OC_SetMode+0x6e>
 8012c30:	2303      	movs	r3, #3
 8012c32:	e004      	b.n	8012c3e <LL_TIM_OC_SetMode+0x6e>
 8012c34:	2302      	movs	r3, #2
 8012c36:	e002      	b.n	8012c3e <LL_TIM_OC_SetMode+0x6e>
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e000      	b.n	8012c3e <LL_TIM_OC_SetMode+0x6e>
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	2017      	movs	r0, #23
 8012c40:	183a      	adds	r2, r7, r0
 8012c42:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	3318      	adds	r3, #24
 8012c48:	0019      	movs	r1, r3
 8012c4a:	183b      	adds	r3, r7, r0
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8012c88 <LL_TIM_OC_SetMode+0xb8>)
 8012c50:	5cd3      	ldrb	r3, [r2, r3]
 8012c52:	18cb      	adds	r3, r1, r3
 8012c54:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	183a      	adds	r2, r7, r0
 8012c5c:	7812      	ldrb	r2, [r2, #0]
 8012c5e:	490b      	ldr	r1, [pc, #44]	@ (8012c8c <LL_TIM_OC_SetMode+0xbc>)
 8012c60:	5c8a      	ldrb	r2, [r1, r2]
 8012c62:	0011      	movs	r1, r2
 8012c64:	4a0a      	ldr	r2, [pc, #40]	@ (8012c90 <LL_TIM_OC_SetMode+0xc0>)
 8012c66:	408a      	lsls	r2, r1
 8012c68:	43d2      	mvns	r2, r2
 8012c6a:	401a      	ands	r2, r3
 8012c6c:	183b      	adds	r3, r7, r0
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	4906      	ldr	r1, [pc, #24]	@ (8012c8c <LL_TIM_OC_SetMode+0xbc>)
 8012c72:	5ccb      	ldrb	r3, [r1, r3]
 8012c74:	0019      	movs	r1, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	408b      	lsls	r3, r1
 8012c7a:	431a      	orrs	r2, r3
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	601a      	str	r2, [r3, #0]
}
 8012c80:	46c0      	nop			@ (mov r8, r8)
 8012c82:	46bd      	mov	sp, r7
 8012c84:	b006      	add	sp, #24
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	08017400 	.word	0x08017400
 8012c8c:	0801740c 	.word	0x0801740c
 8012c90:	00010073 	.word	0x00010073

08012c94 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b086      	sub	sp, #24
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d02c      	beq.n	8012d00 <LL_TIM_OC_SetPolarity+0x6c>
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	2b04      	cmp	r3, #4
 8012caa:	d027      	beq.n	8012cfc <LL_TIM_OC_SetPolarity+0x68>
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	2b10      	cmp	r3, #16
 8012cb0:	d022      	beq.n	8012cf8 <LL_TIM_OC_SetPolarity+0x64>
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	2b40      	cmp	r3, #64	@ 0x40
 8012cb6:	d01d      	beq.n	8012cf4 <LL_TIM_OC_SetPolarity+0x60>
 8012cb8:	68ba      	ldr	r2, [r7, #8]
 8012cba:	2380      	movs	r3, #128	@ 0x80
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d016      	beq.n	8012cf0 <LL_TIM_OC_SetPolarity+0x5c>
 8012cc2:	68ba      	ldr	r2, [r7, #8]
 8012cc4:	2380      	movs	r3, #128	@ 0x80
 8012cc6:	00db      	lsls	r3, r3, #3
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d00f      	beq.n	8012cec <LL_TIM_OC_SetPolarity+0x58>
 8012ccc:	68ba      	ldr	r2, [r7, #8]
 8012cce:	2380      	movs	r3, #128	@ 0x80
 8012cd0:	015b      	lsls	r3, r3, #5
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d008      	beq.n	8012ce8 <LL_TIM_OC_SetPolarity+0x54>
 8012cd6:	68ba      	ldr	r2, [r7, #8]
 8012cd8:	2380      	movs	r3, #128	@ 0x80
 8012cda:	025b      	lsls	r3, r3, #9
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d101      	bne.n	8012ce4 <LL_TIM_OC_SetPolarity+0x50>
 8012ce0:	2307      	movs	r3, #7
 8012ce2:	e00e      	b.n	8012d02 <LL_TIM_OC_SetPolarity+0x6e>
 8012ce4:	2308      	movs	r3, #8
 8012ce6:	e00c      	b.n	8012d02 <LL_TIM_OC_SetPolarity+0x6e>
 8012ce8:	2306      	movs	r3, #6
 8012cea:	e00a      	b.n	8012d02 <LL_TIM_OC_SetPolarity+0x6e>
 8012cec:	2305      	movs	r3, #5
 8012cee:	e008      	b.n	8012d02 <LL_TIM_OC_SetPolarity+0x6e>
 8012cf0:	2304      	movs	r3, #4
 8012cf2:	e006      	b.n	8012d02 <LL_TIM_OC_SetPolarity+0x6e>
 8012cf4:	2303      	movs	r3, #3
 8012cf6:	e004      	b.n	8012d02 <LL_TIM_OC_SetPolarity+0x6e>
 8012cf8:	2302      	movs	r3, #2
 8012cfa:	e002      	b.n	8012d02 <LL_TIM_OC_SetPolarity+0x6e>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e000      	b.n	8012d02 <LL_TIM_OC_SetPolarity+0x6e>
 8012d00:	2300      	movs	r3, #0
 8012d02:	2017      	movs	r0, #23
 8012d04:	183a      	adds	r2, r7, r0
 8012d06:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	6a1b      	ldr	r3, [r3, #32]
 8012d0c:	183a      	adds	r2, r7, r0
 8012d0e:	7812      	ldrb	r2, [r2, #0]
 8012d10:	490a      	ldr	r1, [pc, #40]	@ (8012d3c <LL_TIM_OC_SetPolarity+0xa8>)
 8012d12:	5c8a      	ldrb	r2, [r1, r2]
 8012d14:	0011      	movs	r1, r2
 8012d16:	2202      	movs	r2, #2
 8012d18:	408a      	lsls	r2, r1
 8012d1a:	43d2      	mvns	r2, r2
 8012d1c:	401a      	ands	r2, r3
 8012d1e:	183b      	adds	r3, r7, r0
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	4906      	ldr	r1, [pc, #24]	@ (8012d3c <LL_TIM_OC_SetPolarity+0xa8>)
 8012d24:	5ccb      	ldrb	r3, [r1, r3]
 8012d26:	0019      	movs	r1, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	408b      	lsls	r3, r1
 8012d2c:	431a      	orrs	r2, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	621a      	str	r2, [r3, #32]
}
 8012d32:	46c0      	nop			@ (mov r8, r8)
 8012d34:	46bd      	mov	sp, r7
 8012d36:	b006      	add	sp, #24
 8012d38:	bd80      	pop	{r7, pc}
 8012d3a:	46c0      	nop			@ (mov r8, r8)
 8012d3c:	08017418 	.word	0x08017418

08012d40 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	683a      	ldr	r2, [r7, #0]
 8012d4e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012d50:	46c0      	nop			@ (mov r8, r8)
 8012d52:	46bd      	mov	sp, r7
 8012d54:	b002      	add	sp, #8
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	683a      	ldr	r2, [r7, #0]
 8012d66:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012d68:	46c0      	nop			@ (mov r8, r8)
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	b002      	add	sp, #8
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	683a      	ldr	r2, [r7, #0]
 8012d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012d80:	46c0      	nop			@ (mov r8, r8)
 8012d82:	46bd      	mov	sp, r7
 8012d84:	b002      	add	sp, #8
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8012d98:	46c0      	nop			@ (mov r8, r8)
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	b002      	add	sp, #8
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2203      	movs	r2, #3
 8012dac:	4252      	negs	r2, r2
 8012dae:	611a      	str	r2, [r3, #16]
}
 8012db0:	46c0      	nop			@ (mov r8, r8)
 8012db2:	46bd      	mov	sp, r7
 8012db4:	b002      	add	sp, #8
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	691b      	ldr	r3, [r3, #16]
 8012dc4:	2202      	movs	r2, #2
 8012dc6:	4013      	ands	r3, r2
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d101      	bne.n	8012dd0 <LL_TIM_IsActiveFlag_CC1+0x18>
 8012dcc:	2301      	movs	r3, #1
 8012dce:	e000      	b.n	8012dd2 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8012dd0:	2300      	movs	r3, #0
}
 8012dd2:	0018      	movs	r0, r3
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	b002      	add	sp, #8
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b082      	sub	sp, #8
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2205      	movs	r2, #5
 8012de6:	4252      	negs	r2, r2
 8012de8:	611a      	str	r2, [r3, #16]
}
 8012dea:	46c0      	nop			@ (mov r8, r8)
 8012dec:	46bd      	mov	sp, r7
 8012dee:	b002      	add	sp, #8
 8012df0:	bd80      	pop	{r7, pc}

08012df2 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8012df2:	b580      	push	{r7, lr}
 8012df4:	b082      	sub	sp, #8
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	691b      	ldr	r3, [r3, #16]
 8012dfe:	2204      	movs	r2, #4
 8012e00:	4013      	ands	r3, r2
 8012e02:	2b04      	cmp	r3, #4
 8012e04:	d101      	bne.n	8012e0a <LL_TIM_IsActiveFlag_CC2+0x18>
 8012e06:	2301      	movs	r3, #1
 8012e08:	e000      	b.n	8012e0c <LL_TIM_IsActiveFlag_CC2+0x1a>
 8012e0a:	2300      	movs	r3, #0
}
 8012e0c:	0018      	movs	r0, r3
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	b002      	add	sp, #8
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2209      	movs	r2, #9
 8012e20:	4252      	negs	r2, r2
 8012e22:	611a      	str	r2, [r3, #16]
}
 8012e24:	46c0      	nop			@ (mov r8, r8)
 8012e26:	46bd      	mov	sp, r7
 8012e28:	b002      	add	sp, #8
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	691b      	ldr	r3, [r3, #16]
 8012e38:	2208      	movs	r2, #8
 8012e3a:	4013      	ands	r3, r2
 8012e3c:	2b08      	cmp	r3, #8
 8012e3e:	d101      	bne.n	8012e44 <LL_TIM_IsActiveFlag_CC3+0x18>
 8012e40:	2301      	movs	r3, #1
 8012e42:	e000      	b.n	8012e46 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8012e44:	2300      	movs	r3, #0
}
 8012e46:	0018      	movs	r0, r3
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	b002      	add	sp, #8
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b082      	sub	sp, #8
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2211      	movs	r2, #17
 8012e5a:	4252      	negs	r2, r2
 8012e5c:	611a      	str	r2, [r3, #16]
}
 8012e5e:	46c0      	nop			@ (mov r8, r8)
 8012e60:	46bd      	mov	sp, r7
 8012e62:	b002      	add	sp, #8
 8012e64:	bd80      	pop	{r7, pc}

08012e66 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8012e66:	b580      	push	{r7, lr}
 8012e68:	b082      	sub	sp, #8
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	691b      	ldr	r3, [r3, #16]
 8012e72:	2210      	movs	r2, #16
 8012e74:	4013      	ands	r3, r2
 8012e76:	2b10      	cmp	r3, #16
 8012e78:	d101      	bne.n	8012e7e <LL_TIM_IsActiveFlag_CC4+0x18>
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	e000      	b.n	8012e80 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	0018      	movs	r0, r3
 8012e82:	46bd      	mov	sp, r7
 8012e84:	b002      	add	sp, #8
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8012e88:	b5b0      	push	{r4, r5, r7, lr}
 8012e8a:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8012e8c:	4b48      	ldr	r3, [pc, #288]	@ (8012fb0 <USBPD_TIM_Init+0x128>)
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	b25b      	sxtb	r3, r3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d000      	beq.n	8012e98 <USBPD_TIM_Init+0x10>
 8012e96:	e07e      	b.n	8012f96 <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 8012e98:	2380      	movs	r3, #128	@ 0x80
 8012e9a:	011b      	lsls	r3, r3, #4
 8012e9c:	0018      	movs	r0, r3
 8012e9e:	f7ff fe2d 	bl	8012afc <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8012ea2:	4b44      	ldr	r3, [pc, #272]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	0018      	movs	r0, r3
 8012ea8:	f7ff fe5e 	bl	8012b68 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8012eac:	4b42      	ldr	r3, [pc, #264]	@ (8012fb8 <USBPD_TIM_Init+0x130>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4a42      	ldr	r2, [pc, #264]	@ (8012fbc <USBPD_TIM_Init+0x134>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d90b      	bls.n	8012ece <USBPD_TIM_Init+0x46>
 8012eb6:	4b40      	ldr	r3, [pc, #256]	@ (8012fb8 <USBPD_TIM_Init+0x130>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	4a41      	ldr	r2, [pc, #260]	@ (8012fc0 <USBPD_TIM_Init+0x138>)
 8012ebc:	4694      	mov	ip, r2
 8012ebe:	4463      	add	r3, ip
 8012ec0:	4940      	ldr	r1, [pc, #256]	@ (8012fc4 <USBPD_TIM_Init+0x13c>)
 8012ec2:	0018      	movs	r0, r3
 8012ec4:	f7f3 f994 	bl	80061f0 <__udivsi3>
 8012ec8:	0003      	movs	r3, r0
 8012eca:	3b01      	subs	r3, #1
 8012ecc:	e000      	b.n	8012ed0 <USBPD_TIM_Init+0x48>
 8012ece:	2300      	movs	r3, #0
 8012ed0:	4a38      	ldr	r2, [pc, #224]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012ed2:	0019      	movs	r1, r3
 8012ed4:	0010      	movs	r0, r2
 8012ed6:	f7ff fe59 	bl	8012b8c <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8012eda:	4b37      	ldr	r3, [pc, #220]	@ (8012fb8 <USBPD_TIM_Init+0x130>)
 8012edc:	681c      	ldr	r4, [r3, #0]
 8012ede:	4b35      	ldr	r3, [pc, #212]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012ee0:	0018      	movs	r0, r3
 8012ee2:	f7ff fe5f 	bl	8012ba4 <LL_TIM_GetPrescaler>
 8012ee6:	0003      	movs	r3, r0
 8012ee8:	3301      	adds	r3, #1
 8012eea:	0019      	movs	r1, r3
 8012eec:	0020      	movs	r0, r4
 8012eee:	f7f3 f97f 	bl	80061f0 <__udivsi3>
 8012ef2:	0003      	movs	r3, r0
 8012ef4:	2b63      	cmp	r3, #99	@ 0x63
 8012ef6:	d910      	bls.n	8012f1a <USBPD_TIM_Init+0x92>
 8012ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8012fb8 <USBPD_TIM_Init+0x130>)
 8012efa:	681c      	ldr	r4, [r3, #0]
 8012efc:	4b2d      	ldr	r3, [pc, #180]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012efe:	0018      	movs	r0, r3
 8012f00:	f7ff fe50 	bl	8012ba4 <LL_TIM_GetPrescaler>
 8012f04:	0003      	movs	r3, r0
 8012f06:	3301      	adds	r3, #1
 8012f08:	2264      	movs	r2, #100	@ 0x64
 8012f0a:	4353      	muls	r3, r2
 8012f0c:	0019      	movs	r1, r3
 8012f0e:	0020      	movs	r0, r4
 8012f10:	f7f3 f96e 	bl	80061f0 <__udivsi3>
 8012f14:	0003      	movs	r3, r0
 8012f16:	3b01      	subs	r3, #1
 8012f18:	e000      	b.n	8012f1c <USBPD_TIM_Init+0x94>
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	4a25      	ldr	r2, [pc, #148]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f1e:	0019      	movs	r1, r3
 8012f20:	0010      	movs	r0, r2
 8012f22:	f7ff fe49 	bl	8012bb8 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8012f26:	4b23      	ldr	r3, [pc, #140]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f28:	2230      	movs	r2, #48	@ 0x30
 8012f2a:	2101      	movs	r1, #1
 8012f2c:	0018      	movs	r0, r3
 8012f2e:	f7ff fe4f 	bl	8012bd0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8012f32:	4b20      	ldr	r3, [pc, #128]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f34:	2230      	movs	r2, #48	@ 0x30
 8012f36:	2110      	movs	r1, #16
 8012f38:	0018      	movs	r0, r3
 8012f3a:	f7ff fe49 	bl	8012bd0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8012f3e:	2380      	movs	r3, #128	@ 0x80
 8012f40:	005b      	lsls	r3, r3, #1
 8012f42:	481c      	ldr	r0, [pc, #112]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f44:	2230      	movs	r2, #48	@ 0x30
 8012f46:	0019      	movs	r1, r3
 8012f48:	f7ff fe42 	bl	8012bd0 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8012f4c:	2380      	movs	r3, #128	@ 0x80
 8012f4e:	015b      	lsls	r3, r3, #5
 8012f50:	4818      	ldr	r0, [pc, #96]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f52:	2230      	movs	r2, #48	@ 0x30
 8012f54:	0019      	movs	r1, r3
 8012f56:	f7ff fe3b 	bl	8012bd0 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8012f5a:	4b16      	ldr	r3, [pc, #88]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	2101      	movs	r1, #1
 8012f60:	0018      	movs	r0, r3
 8012f62:	f7ff fe97 	bl	8012c94 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8012f66:	4b13      	ldr	r3, [pc, #76]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f68:	2200      	movs	r2, #0
 8012f6a:	2110      	movs	r1, #16
 8012f6c:	0018      	movs	r0, r3
 8012f6e:	f7ff fe91 	bl	8012c94 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8012f72:	2380      	movs	r3, #128	@ 0x80
 8012f74:	005b      	lsls	r3, r3, #1
 8012f76:	480f      	ldr	r0, [pc, #60]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f78:	2200      	movs	r2, #0
 8012f7a:	0019      	movs	r1, r3
 8012f7c:	f7ff fe8a 	bl	8012c94 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8012f80:	2380      	movs	r3, #128	@ 0x80
 8012f82:	015b      	lsls	r3, r3, #5
 8012f84:	480b      	ldr	r0, [pc, #44]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f86:	2200      	movs	r2, #0
 8012f88:	0019      	movs	r1, r3
 8012f8a:	f7ff fe83 	bl	8012c94 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8012f8e:	4b09      	ldr	r3, [pc, #36]	@ (8012fb4 <USBPD_TIM_Init+0x12c>)
 8012f90:	0018      	movs	r0, r3
 8012f92:	f7ff fddb 	bl	8012b4c <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8012f96:	4b06      	ldr	r3, [pc, #24]	@ (8012fb0 <USBPD_TIM_Init+0x128>)
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	b25b      	sxtb	r3, r3
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	b25a      	sxtb	r2, r3
 8012fa4:	4b02      	ldr	r3, [pc, #8]	@ (8012fb0 <USBPD_TIM_Init+0x128>)
 8012fa6:	701a      	strb	r2, [r3, #0]
}
 8012fa8:	46c0      	nop			@ (mov r8, r8)
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bdb0      	pop	{r4, r5, r7, pc}
 8012fae:	46c0      	nop			@ (mov r8, r8)
 8012fb0:	20000630 	.word	0x20000630
 8012fb4:	40012c00 	.word	0x40012c00
 8012fb8:	20000004 	.word	0x20000004
 8012fbc:	000f423f 	.word	0x000f423f
 8012fc0:	0007a120 	.word	0x0007a120
 8012fc4:	000f4240 	.word	0x000f4240

08012fc8 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8012fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8012ff8 <USBPD_TIM_DeInit+0x30>)
 8012fce:	781b      	ldrb	r3, [r3, #0]
 8012fd0:	b25b      	sxtb	r3, r3
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	b2db      	uxtb	r3, r3
 8012fd8:	b25a      	sxtb	r2, r3
 8012fda:	4b07      	ldr	r3, [pc, #28]	@ (8012ff8 <USBPD_TIM_DeInit+0x30>)
 8012fdc:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8012fde:	4b06      	ldr	r3, [pc, #24]	@ (8012ff8 <USBPD_TIM_DeInit+0x30>)
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	b25b      	sxtb	r3, r3
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d104      	bne.n	8012ff2 <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 8012fe8:	2380      	movs	r3, #128	@ 0x80
 8012fea:	011b      	lsls	r3, r3, #4
 8012fec:	0018      	movs	r0, r3
 8012fee:	f7ff fd9b 	bl	8012b28 <LL_APB2_GRP1_DisableClock>
  }
}
 8012ff2:	46c0      	nop			@ (mov r8, r8)
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	20000630 	.word	0x20000630

08012ffc <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	0002      	movs	r2, r0
 8013004:	6039      	str	r1, [r7, #0]
 8013006:	1dfb      	adds	r3, r7, #7
 8013008:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 801300a:	1dfb      	adds	r3, r7, #7
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	2b03      	cmp	r3, #3
 8013010:	d044      	beq.n	801309c <USBPD_TIM_Start+0xa0>
 8013012:	dc57      	bgt.n	80130c4 <USBPD_TIM_Start+0xc8>
 8013014:	2b02      	cmp	r3, #2
 8013016:	d02d      	beq.n	8013074 <USBPD_TIM_Start+0x78>
 8013018:	dc54      	bgt.n	80130c4 <USBPD_TIM_Start+0xc8>
 801301a:	2b00      	cmp	r3, #0
 801301c:	d002      	beq.n	8013024 <USBPD_TIM_Start+0x28>
 801301e:	2b01      	cmp	r3, #1
 8013020:	d014      	beq.n	801304c <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 8013022:	e04f      	b.n	80130c4 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 8013024:	4b2a      	ldr	r3, [pc, #168]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 8013026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	18d3      	adds	r3, r2, r3
 801302c:	4929      	ldr	r1, [pc, #164]	@ (80130d4 <USBPD_TIM_Start+0xd8>)
 801302e:	0018      	movs	r0, r3
 8013030:	f7f3 f964 	bl	80062fc <__aeabi_uidivmod>
 8013034:	000b      	movs	r3, r1
 8013036:	001a      	movs	r2, r3
 8013038:	4b25      	ldr	r3, [pc, #148]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 801303a:	0011      	movs	r1, r2
 801303c:	0018      	movs	r0, r3
 801303e:	f7ff fe7f 	bl	8012d40 <LL_TIM_OC_SetCompareCH1>
 8013042:	4b23      	ldr	r3, [pc, #140]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 8013044:	0018      	movs	r0, r3
 8013046:	f7ff feab 	bl	8012da0 <LL_TIM_ClearFlag_CC1>
      break;
 801304a:	e03c      	b.n	80130c6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 801304c:	4b20      	ldr	r3, [pc, #128]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 801304e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	18d3      	adds	r3, r2, r3
 8013054:	491f      	ldr	r1, [pc, #124]	@ (80130d4 <USBPD_TIM_Start+0xd8>)
 8013056:	0018      	movs	r0, r3
 8013058:	f7f3 f950 	bl	80062fc <__aeabi_uidivmod>
 801305c:	000b      	movs	r3, r1
 801305e:	001a      	movs	r2, r3
 8013060:	4b1b      	ldr	r3, [pc, #108]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 8013062:	0011      	movs	r1, r2
 8013064:	0018      	movs	r0, r3
 8013066:	f7ff fe77 	bl	8012d58 <LL_TIM_OC_SetCompareCH2>
 801306a:	4b19      	ldr	r3, [pc, #100]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 801306c:	0018      	movs	r0, r3
 801306e:	f7ff feb4 	bl	8012dda <LL_TIM_ClearFlag_CC2>
      break;
 8013072:	e028      	b.n	80130c6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 8013074:	4b16      	ldr	r3, [pc, #88]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 8013076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	18d3      	adds	r3, r2, r3
 801307c:	4915      	ldr	r1, [pc, #84]	@ (80130d4 <USBPD_TIM_Start+0xd8>)
 801307e:	0018      	movs	r0, r3
 8013080:	f7f3 f93c 	bl	80062fc <__aeabi_uidivmod>
 8013084:	000b      	movs	r3, r1
 8013086:	001a      	movs	r2, r3
 8013088:	4b11      	ldr	r3, [pc, #68]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 801308a:	0011      	movs	r1, r2
 801308c:	0018      	movs	r0, r3
 801308e:	f7ff fe6f 	bl	8012d70 <LL_TIM_OC_SetCompareCH3>
 8013092:	4b0f      	ldr	r3, [pc, #60]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 8013094:	0018      	movs	r0, r3
 8013096:	f7ff febd 	bl	8012e14 <LL_TIM_ClearFlag_CC3>
      break;
 801309a:	e014      	b.n	80130c6 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 801309c:	4b0c      	ldr	r3, [pc, #48]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 801309e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	18d3      	adds	r3, r2, r3
 80130a4:	490b      	ldr	r1, [pc, #44]	@ (80130d4 <USBPD_TIM_Start+0xd8>)
 80130a6:	0018      	movs	r0, r3
 80130a8:	f7f3 f928 	bl	80062fc <__aeabi_uidivmod>
 80130ac:	000b      	movs	r3, r1
 80130ae:	001a      	movs	r2, r3
 80130b0:	4b07      	ldr	r3, [pc, #28]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 80130b2:	0011      	movs	r1, r2
 80130b4:	0018      	movs	r0, r3
 80130b6:	f7ff fe67 	bl	8012d88 <LL_TIM_OC_SetCompareCH4>
 80130ba:	4b05      	ldr	r3, [pc, #20]	@ (80130d0 <USBPD_TIM_Start+0xd4>)
 80130bc:	0018      	movs	r0, r3
 80130be:	f7ff fec6 	bl	8012e4e <LL_TIM_ClearFlag_CC4>
      break;
 80130c2:	e000      	b.n	80130c6 <USBPD_TIM_Start+0xca>
      break;
 80130c4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80130c6:	46c0      	nop			@ (mov r8, r8)
 80130c8:	46bd      	mov	sp, r7
 80130ca:	b002      	add	sp, #8
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	46c0      	nop			@ (mov r8, r8)
 80130d0:	40012c00 	.word	0x40012c00
 80130d4:	00002710 	.word	0x00002710

080130d8 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
 80130de:	0002      	movs	r2, r0
 80130e0:	1dfb      	adds	r3, r7, #7
 80130e2:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 80130e4:	2301      	movs	r3, #1
 80130e6:	60fb      	str	r3, [r7, #12]
  switch (Id)
 80130e8:	1dfb      	adds	r3, r7, #7
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	2b03      	cmp	r3, #3
 80130ee:	d01d      	beq.n	801312c <USBPD_TIM_IsExpired+0x54>
 80130f0:	dc23      	bgt.n	801313a <USBPD_TIM_IsExpired+0x62>
 80130f2:	2b02      	cmp	r3, #2
 80130f4:	d013      	beq.n	801311e <USBPD_TIM_IsExpired+0x46>
 80130f6:	dc20      	bgt.n	801313a <USBPD_TIM_IsExpired+0x62>
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d002      	beq.n	8013102 <USBPD_TIM_IsExpired+0x2a>
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d007      	beq.n	8013110 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 8013100:	e01b      	b.n	801313a <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8013102:	4b11      	ldr	r3, [pc, #68]	@ (8013148 <USBPD_TIM_IsExpired+0x70>)
 8013104:	0018      	movs	r0, r3
 8013106:	f7ff fe57 	bl	8012db8 <LL_TIM_IsActiveFlag_CC1>
 801310a:	0003      	movs	r3, r0
 801310c:	60fb      	str	r3, [r7, #12]
      break;
 801310e:	e015      	b.n	801313c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8013110:	4b0d      	ldr	r3, [pc, #52]	@ (8013148 <USBPD_TIM_IsExpired+0x70>)
 8013112:	0018      	movs	r0, r3
 8013114:	f7ff fe6d 	bl	8012df2 <LL_TIM_IsActiveFlag_CC2>
 8013118:	0003      	movs	r3, r0
 801311a:	60fb      	str	r3, [r7, #12]
      break;
 801311c:	e00e      	b.n	801313c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 801311e:	4b0a      	ldr	r3, [pc, #40]	@ (8013148 <USBPD_TIM_IsExpired+0x70>)
 8013120:	0018      	movs	r0, r3
 8013122:	f7ff fe83 	bl	8012e2c <LL_TIM_IsActiveFlag_CC3>
 8013126:	0003      	movs	r3, r0
 8013128:	60fb      	str	r3, [r7, #12]
      break;
 801312a:	e007      	b.n	801313c <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 801312c:	4b06      	ldr	r3, [pc, #24]	@ (8013148 <USBPD_TIM_IsExpired+0x70>)
 801312e:	0018      	movs	r0, r3
 8013130:	f7ff fe99 	bl	8012e66 <LL_TIM_IsActiveFlag_CC4>
 8013134:	0003      	movs	r3, r0
 8013136:	60fb      	str	r3, [r7, #12]
      break;
 8013138:	e000      	b.n	801313c <USBPD_TIM_IsExpired+0x64>
      break;
 801313a:	46c0      	nop			@ (mov r8, r8)
  }
  return _expired;
 801313c:	68fb      	ldr	r3, [r7, #12]
}
 801313e:	0018      	movs	r0, r3
 8013140:	46bd      	mov	sp, r7
 8013142:	b004      	add	sp, #16
 8013144:	bd80      	pop	{r7, pc}
 8013146:	46c0      	nop			@ (mov r8, r8)
 8013148:	40012c00 	.word	0x40012c00

0801314c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b084      	sub	sp, #16
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	000a      	movs	r2, r1
 8013156:	1cfb      	adds	r3, r7, #3
 8013158:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801315a:	2387      	movs	r3, #135	@ 0x87
 801315c:	009b      	lsls	r3, r3, #2
 801315e:	0018      	movs	r0, r3
 8013160:	f003 fb5e 	bl	8016820 <USBD_static_malloc>
 8013164:	0003      	movs	r3, r0
 8013166:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d10a      	bne.n	8013184 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	23b5      	movs	r3, #181	@ 0xb5
 8013172:	009b      	lsls	r3, r3, #2
 8013174:	58d2      	ldr	r2, [r2, r3]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	32b0      	adds	r2, #176	@ 0xb0
 801317a:	0092      	lsls	r2, r2, #2
 801317c:	2100      	movs	r1, #0
 801317e:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8013180:	2302      	movs	r3, #2
 8013182:	e0e9      	b.n	8013358 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013184:	2387      	movs	r3, #135	@ 0x87
 8013186:	009a      	lsls	r2, r3, #2
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	2100      	movs	r1, #0
 801318c:	0018      	movs	r0, r3
 801318e:	f003 fc77 	bl	8016a80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	23b5      	movs	r3, #181	@ 0xb5
 8013196:	009b      	lsls	r3, r3, #2
 8013198:	58d2      	ldr	r2, [r2, r3]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	32b0      	adds	r2, #176	@ 0xb0
 801319e:	0092      	lsls	r2, r2, #2
 80131a0:	68f9      	ldr	r1, [r7, #12]
 80131a2:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80131a4:	687a      	ldr	r2, [r7, #4]
 80131a6:	23b5      	movs	r3, #181	@ 0xb5
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	58d2      	ldr	r2, [r2, r3]
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	32b0      	adds	r2, #176	@ 0xb0
 80131b0:	0092      	lsls	r2, r2, #2
 80131b2:	58d1      	ldr	r1, [r2, r3]
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	23af      	movs	r3, #175	@ 0xaf
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	7c1b      	ldrb	r3, [r3, #16]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d13c      	bne.n	801323e <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80131c4:	4b66      	ldr	r3, [pc, #408]	@ (8013360 <USBD_CDC_Init+0x214>)
 80131c6:	7819      	ldrb	r1, [r3, #0]
 80131c8:	2380      	movs	r3, #128	@ 0x80
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	2202      	movs	r2, #2
 80131d0:	f003 f963 	bl	801649a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80131d4:	4b62      	ldr	r3, [pc, #392]	@ (8013360 <USBD_CDC_Init+0x214>)
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	001a      	movs	r2, r3
 80131da:	230f      	movs	r3, #15
 80131dc:	401a      	ands	r2, r3
 80131de:	6879      	ldr	r1, [r7, #4]
 80131e0:	0013      	movs	r3, r2
 80131e2:	009b      	lsls	r3, r3, #2
 80131e4:	189b      	adds	r3, r3, r2
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	18cb      	adds	r3, r1, r3
 80131ea:	3324      	adds	r3, #36	@ 0x24
 80131ec:	2201      	movs	r2, #1
 80131ee:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80131f0:	4b5c      	ldr	r3, [pc, #368]	@ (8013364 <USBD_CDC_Init+0x218>)
 80131f2:	7819      	ldrb	r1, [r3, #0]
 80131f4:	2380      	movs	r3, #128	@ 0x80
 80131f6:	009b      	lsls	r3, r3, #2
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	2202      	movs	r2, #2
 80131fc:	f003 f94d 	bl	801649a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013200:	4b58      	ldr	r3, [pc, #352]	@ (8013364 <USBD_CDC_Init+0x218>)
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	001a      	movs	r2, r3
 8013206:	230f      	movs	r3, #15
 8013208:	401a      	ands	r2, r3
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	23b2      	movs	r3, #178	@ 0xb2
 801320e:	0059      	lsls	r1, r3, #1
 8013210:	0013      	movs	r3, r2
 8013212:	009b      	lsls	r3, r3, #2
 8013214:	189b      	adds	r3, r3, r2
 8013216:	009b      	lsls	r3, r3, #2
 8013218:	18c3      	adds	r3, r0, r3
 801321a:	185b      	adds	r3, r3, r1
 801321c:	2201      	movs	r2, #1
 801321e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013220:	4b51      	ldr	r3, [pc, #324]	@ (8013368 <USBD_CDC_Init+0x21c>)
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	001a      	movs	r2, r3
 8013226:	230f      	movs	r3, #15
 8013228:	401a      	ands	r2, r3
 801322a:	6879      	ldr	r1, [r7, #4]
 801322c:	0013      	movs	r3, r2
 801322e:	009b      	lsls	r3, r3, #2
 8013230:	189b      	adds	r3, r3, r2
 8013232:	009b      	lsls	r3, r3, #2
 8013234:	18cb      	adds	r3, r1, r3
 8013236:	3326      	adds	r3, #38	@ 0x26
 8013238:	2210      	movs	r2, #16
 801323a:	801a      	strh	r2, [r3, #0]
 801323c:	e039      	b.n	80132b2 <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801323e:	4b48      	ldr	r3, [pc, #288]	@ (8013360 <USBD_CDC_Init+0x214>)
 8013240:	7819      	ldrb	r1, [r3, #0]
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	2340      	movs	r3, #64	@ 0x40
 8013246:	2202      	movs	r2, #2
 8013248:	f003 f927 	bl	801649a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801324c:	4b44      	ldr	r3, [pc, #272]	@ (8013360 <USBD_CDC_Init+0x214>)
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	001a      	movs	r2, r3
 8013252:	230f      	movs	r3, #15
 8013254:	401a      	ands	r2, r3
 8013256:	6879      	ldr	r1, [r7, #4]
 8013258:	0013      	movs	r3, r2
 801325a:	009b      	lsls	r3, r3, #2
 801325c:	189b      	adds	r3, r3, r2
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	18cb      	adds	r3, r1, r3
 8013262:	3324      	adds	r3, #36	@ 0x24
 8013264:	2201      	movs	r2, #1
 8013266:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013268:	4b3e      	ldr	r3, [pc, #248]	@ (8013364 <USBD_CDC_Init+0x218>)
 801326a:	7819      	ldrb	r1, [r3, #0]
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	2340      	movs	r3, #64	@ 0x40
 8013270:	2202      	movs	r2, #2
 8013272:	f003 f912 	bl	801649a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013276:	4b3b      	ldr	r3, [pc, #236]	@ (8013364 <USBD_CDC_Init+0x218>)
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	001a      	movs	r2, r3
 801327c:	230f      	movs	r3, #15
 801327e:	401a      	ands	r2, r3
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	23b2      	movs	r3, #178	@ 0xb2
 8013284:	0059      	lsls	r1, r3, #1
 8013286:	0013      	movs	r3, r2
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	189b      	adds	r3, r3, r2
 801328c:	009b      	lsls	r3, r3, #2
 801328e:	18c3      	adds	r3, r0, r3
 8013290:	185b      	adds	r3, r3, r1
 8013292:	2201      	movs	r2, #1
 8013294:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013296:	4b34      	ldr	r3, [pc, #208]	@ (8013368 <USBD_CDC_Init+0x21c>)
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	001a      	movs	r2, r3
 801329c:	230f      	movs	r3, #15
 801329e:	401a      	ands	r2, r3
 80132a0:	6879      	ldr	r1, [r7, #4]
 80132a2:	0013      	movs	r3, r2
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	189b      	adds	r3, r3, r2
 80132a8:	009b      	lsls	r3, r3, #2
 80132aa:	18cb      	adds	r3, r1, r3
 80132ac:	3326      	adds	r3, #38	@ 0x26
 80132ae:	2210      	movs	r2, #16
 80132b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80132b2:	4b2d      	ldr	r3, [pc, #180]	@ (8013368 <USBD_CDC_Init+0x21c>)
 80132b4:	7819      	ldrb	r1, [r3, #0]
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	2308      	movs	r3, #8
 80132ba:	2203      	movs	r2, #3
 80132bc:	f003 f8ed 	bl	801649a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80132c0:	4b29      	ldr	r3, [pc, #164]	@ (8013368 <USBD_CDC_Init+0x21c>)
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	001a      	movs	r2, r3
 80132c6:	230f      	movs	r3, #15
 80132c8:	401a      	ands	r2, r3
 80132ca:	6879      	ldr	r1, [r7, #4]
 80132cc:	0013      	movs	r3, r2
 80132ce:	009b      	lsls	r3, r3, #2
 80132d0:	189b      	adds	r3, r3, r2
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	18cb      	adds	r3, r1, r3
 80132d6:	3324      	adds	r3, #36	@ 0x24
 80132d8:	2201      	movs	r2, #1
 80132da:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	2381      	movs	r3, #129	@ 0x81
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	2100      	movs	r1, #0
 80132e4:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	23b5      	movs	r3, #181	@ 0xb5
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	58d3      	ldr	r3, [r2, r3]
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	33b0      	adds	r3, #176	@ 0xb0
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	18d3      	adds	r3, r2, r3
 80132f6:	3304      	adds	r3, #4
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	2385      	movs	r3, #133	@ 0x85
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	2100      	movs	r1, #0
 8013306:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	2386      	movs	r3, #134	@ 0x86
 801330c:	009b      	lsls	r3, r3, #2
 801330e:	2100      	movs	r1, #0
 8013310:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8013312:	68fa      	ldr	r2, [r7, #12]
 8013314:	2381      	movs	r3, #129	@ 0x81
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	58d3      	ldr	r3, [r2, r3]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d101      	bne.n	8013322 <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 801331e:	2302      	movs	r3, #2
 8013320:	e01a      	b.n	8013358 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	7c1b      	ldrb	r3, [r3, #16]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d10b      	bne.n	8013342 <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801332a:	4b0e      	ldr	r3, [pc, #56]	@ (8013364 <USBD_CDC_Init+0x218>)
 801332c:	7819      	ldrb	r1, [r3, #0]
 801332e:	68fa      	ldr	r2, [r7, #12]
 8013330:	2381      	movs	r3, #129	@ 0x81
 8013332:	009b      	lsls	r3, r3, #2
 8013334:	58d2      	ldr	r2, [r2, r3]
 8013336:	2380      	movs	r3, #128	@ 0x80
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f003 f9f0 	bl	8016720 <USBD_LL_PrepareReceive>
 8013340:	e009      	b.n	8013356 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013342:	4b08      	ldr	r3, [pc, #32]	@ (8013364 <USBD_CDC_Init+0x218>)
 8013344:	7819      	ldrb	r1, [r3, #0]
 8013346:	68fa      	ldr	r2, [r7, #12]
 8013348:	2381      	movs	r3, #129	@ 0x81
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	58d2      	ldr	r2, [r2, r3]
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	2340      	movs	r3, #64	@ 0x40
 8013352:	f003 f9e5 	bl	8016720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013356:	2300      	movs	r3, #0
}
 8013358:	0018      	movs	r0, r3
 801335a:	46bd      	mov	sp, r7
 801335c:	b004      	add	sp, #16
 801335e:	bd80      	pop	{r7, pc}
 8013360:	20000097 	.word	0x20000097
 8013364:	20000098 	.word	0x20000098
 8013368:	20000099 	.word	0x20000099

0801336c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
 8013374:	000a      	movs	r2, r1
 8013376:	1cfb      	adds	r3, r7, #3
 8013378:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801337a:	4b41      	ldr	r3, [pc, #260]	@ (8013480 <USBD_CDC_DeInit+0x114>)
 801337c:	781a      	ldrb	r2, [r3, #0]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	0011      	movs	r1, r2
 8013382:	0018      	movs	r0, r3
 8013384:	f003 f8c0 	bl	8016508 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013388:	4b3d      	ldr	r3, [pc, #244]	@ (8013480 <USBD_CDC_DeInit+0x114>)
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	001a      	movs	r2, r3
 801338e:	230f      	movs	r3, #15
 8013390:	401a      	ands	r2, r3
 8013392:	6879      	ldr	r1, [r7, #4]
 8013394:	0013      	movs	r3, r2
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	189b      	adds	r3, r3, r2
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	18cb      	adds	r3, r1, r3
 801339e:	3324      	adds	r3, #36	@ 0x24
 80133a0:	2200      	movs	r2, #0
 80133a2:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80133a4:	4b37      	ldr	r3, [pc, #220]	@ (8013484 <USBD_CDC_DeInit+0x118>)
 80133a6:	781a      	ldrb	r2, [r3, #0]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	0011      	movs	r1, r2
 80133ac:	0018      	movs	r0, r3
 80133ae:	f003 f8ab 	bl	8016508 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80133b2:	4b34      	ldr	r3, [pc, #208]	@ (8013484 <USBD_CDC_DeInit+0x118>)
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	001a      	movs	r2, r3
 80133b8:	230f      	movs	r3, #15
 80133ba:	401a      	ands	r2, r3
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	23b2      	movs	r3, #178	@ 0xb2
 80133c0:	0059      	lsls	r1, r3, #1
 80133c2:	0013      	movs	r3, r2
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	189b      	adds	r3, r3, r2
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	18c3      	adds	r3, r0, r3
 80133cc:	185b      	adds	r3, r3, r1
 80133ce:	2200      	movs	r2, #0
 80133d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80133d2:	4b2d      	ldr	r3, [pc, #180]	@ (8013488 <USBD_CDC_DeInit+0x11c>)
 80133d4:	781a      	ldrb	r2, [r3, #0]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	0011      	movs	r1, r2
 80133da:	0018      	movs	r0, r3
 80133dc:	f003 f894 	bl	8016508 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80133e0:	4b29      	ldr	r3, [pc, #164]	@ (8013488 <USBD_CDC_DeInit+0x11c>)
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	001a      	movs	r2, r3
 80133e6:	230f      	movs	r3, #15
 80133e8:	401a      	ands	r2, r3
 80133ea:	6879      	ldr	r1, [r7, #4]
 80133ec:	0013      	movs	r3, r2
 80133ee:	009b      	lsls	r3, r3, #2
 80133f0:	189b      	adds	r3, r3, r2
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	18cb      	adds	r3, r1, r3
 80133f6:	3324      	adds	r3, #36	@ 0x24
 80133f8:	2200      	movs	r2, #0
 80133fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80133fc:	4b22      	ldr	r3, [pc, #136]	@ (8013488 <USBD_CDC_DeInit+0x11c>)
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	001a      	movs	r2, r3
 8013402:	230f      	movs	r3, #15
 8013404:	401a      	ands	r2, r3
 8013406:	6879      	ldr	r1, [r7, #4]
 8013408:	0013      	movs	r3, r2
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	189b      	adds	r3, r3, r2
 801340e:	009b      	lsls	r3, r3, #2
 8013410:	18cb      	adds	r3, r1, r3
 8013412:	3326      	adds	r3, #38	@ 0x26
 8013414:	2200      	movs	r2, #0
 8013416:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013418:	687a      	ldr	r2, [r7, #4]
 801341a:	23b5      	movs	r3, #181	@ 0xb5
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	58d2      	ldr	r2, [r2, r3]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	32b0      	adds	r2, #176	@ 0xb0
 8013424:	0092      	lsls	r2, r2, #2
 8013426:	58d3      	ldr	r3, [r2, r3]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d024      	beq.n	8013476 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	23b5      	movs	r3, #181	@ 0xb5
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	58d3      	ldr	r3, [r2, r3]
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	33b0      	adds	r3, #176	@ 0xb0
 8013438:	009b      	lsls	r3, r3, #2
 801343a:	18d3      	adds	r3, r2, r3
 801343c:	3304      	adds	r3, #4
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	685b      	ldr	r3, [r3, #4]
 8013442:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	23b5      	movs	r3, #181	@ 0xb5
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	58d2      	ldr	r2, [r2, r3]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	32b0      	adds	r2, #176	@ 0xb0
 8013450:	0092      	lsls	r2, r2, #2
 8013452:	58d3      	ldr	r3, [r2, r3]
 8013454:	0018      	movs	r0, r3
 8013456:	f003 f9ef 	bl	8016838 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	23b5      	movs	r3, #181	@ 0xb5
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	58d2      	ldr	r2, [r2, r3]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	32b0      	adds	r2, #176	@ 0xb0
 8013466:	0092      	lsls	r2, r2, #2
 8013468:	2100      	movs	r1, #0
 801346a:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	23af      	movs	r3, #175	@ 0xaf
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	2100      	movs	r1, #0
 8013474:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8013476:	2300      	movs	r3, #0
}
 8013478:	0018      	movs	r0, r3
 801347a:	46bd      	mov	sp, r7
 801347c:	b002      	add	sp, #8
 801347e:	bd80      	pop	{r7, pc}
 8013480:	20000097 	.word	0x20000097
 8013484:	20000098 	.word	0x20000098
 8013488:	20000099 	.word	0x20000099

0801348c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b086      	sub	sp, #24
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	23b5      	movs	r3, #181	@ 0xb5
 801349a:	009b      	lsls	r3, r3, #2
 801349c:	58d2      	ldr	r2, [r2, r3]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	32b0      	adds	r2, #176	@ 0xb0
 80134a2:	0092      	lsls	r2, r2, #2
 80134a4:	58d3      	ldr	r3, [r2, r3]
 80134a6:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80134a8:	230d      	movs	r3, #13
 80134aa:	18fb      	adds	r3, r7, r3
 80134ac:	2200      	movs	r2, #0
 80134ae:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80134b0:	230a      	movs	r3, #10
 80134b2:	18fb      	adds	r3, r7, r3
 80134b4:	2200      	movs	r2, #0
 80134b6:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80134b8:	2317      	movs	r3, #23
 80134ba:	18fb      	adds	r3, r7, r3
 80134bc:	2200      	movs	r2, #0
 80134be:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d101      	bne.n	80134ca <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 80134c6:	2303      	movs	r3, #3
 80134c8:	e0d1      	b.n	801366e <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	001a      	movs	r2, r3
 80134d0:	2360      	movs	r3, #96	@ 0x60
 80134d2:	4013      	ands	r3, r2
 80134d4:	d05b      	beq.n	801358e <USBD_CDC_Setup+0x102>
 80134d6:	2b20      	cmp	r3, #32
 80134d8:	d000      	beq.n	80134dc <USBD_CDC_Setup+0x50>
 80134da:	e0ba      	b.n	8013652 <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	88db      	ldrh	r3, [r3, #6]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d043      	beq.n	801356c <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	b25b      	sxtb	r3, r3
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	da22      	bge.n	8013534 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80134ee:	687a      	ldr	r2, [r7, #4]
 80134f0:	23b5      	movs	r3, #181	@ 0xb5
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	58d3      	ldr	r3, [r2, r3]
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	33b0      	adds	r3, #176	@ 0xb0
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	18d3      	adds	r3, r2, r3
 80134fe:	3304      	adds	r3, #4
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	683a      	ldr	r2, [r7, #0]
 8013506:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013508:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801350a:	683a      	ldr	r2, [r7, #0]
 801350c:	88d2      	ldrh	r2, [r2, #6]
 801350e:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	88db      	ldrh	r3, [r3, #6]
 8013514:	220e      	movs	r2, #14
 8013516:	18ba      	adds	r2, r7, r2
 8013518:	b299      	uxth	r1, r3
 801351a:	2907      	cmp	r1, #7
 801351c:	d900      	bls.n	8013520 <USBD_CDC_Setup+0x94>
 801351e:	2307      	movs	r3, #7
 8013520:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013522:	6939      	ldr	r1, [r7, #16]
 8013524:	230e      	movs	r3, #14
 8013526:	18fb      	adds	r3, r7, r3
 8013528:	881a      	ldrh	r2, [r3, #0]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	0018      	movs	r0, r3
 801352e:	f001 ff87 	bl	8015440 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013532:	e099      	b.n	8013668 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	7859      	ldrb	r1, [r3, #1]
 8013538:	693a      	ldr	r2, [r7, #16]
 801353a:	2380      	movs	r3, #128	@ 0x80
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	88db      	ldrh	r3, [r3, #6]
 8013544:	2b3f      	cmp	r3, #63	@ 0x3f
 8013546:	d803      	bhi.n	8013550 <USBD_CDC_Setup+0xc4>
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	88db      	ldrh	r3, [r3, #6]
 801354c:	b2da      	uxtb	r2, r3
 801354e:	e000      	b.n	8013552 <USBD_CDC_Setup+0xc6>
 8013550:	2240      	movs	r2, #64	@ 0x40
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	4948      	ldr	r1, [pc, #288]	@ (8013678 <USBD_CDC_Setup+0x1ec>)
 8013556:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013558:	6939      	ldr	r1, [r7, #16]
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	4a46      	ldr	r2, [pc, #280]	@ (8013678 <USBD_CDC_Setup+0x1ec>)
 801355e:	5c9b      	ldrb	r3, [r3, r2]
 8013560:	001a      	movs	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	0018      	movs	r0, r3
 8013566:	f001 ff98 	bl	801549a <USBD_CtlPrepareRx>
      break;
 801356a:	e07d      	b.n	8013668 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801356c:	687a      	ldr	r2, [r7, #4]
 801356e:	23b5      	movs	r3, #181	@ 0xb5
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	58d3      	ldr	r3, [r2, r3]
 8013574:	687a      	ldr	r2, [r7, #4]
 8013576:	33b0      	adds	r3, #176	@ 0xb0
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	18d3      	adds	r3, r2, r3
 801357c:	3304      	adds	r3, #4
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	689b      	ldr	r3, [r3, #8]
 8013582:	683a      	ldr	r2, [r7, #0]
 8013584:	7850      	ldrb	r0, [r2, #1]
 8013586:	6839      	ldr	r1, [r7, #0]
 8013588:	2200      	movs	r2, #0
 801358a:	4798      	blx	r3
      break;
 801358c:	e06c      	b.n	8013668 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	785b      	ldrb	r3, [r3, #1]
 8013592:	2b0b      	cmp	r3, #11
 8013594:	d03c      	beq.n	8013610 <USBD_CDC_Setup+0x184>
 8013596:	dc4d      	bgt.n	8013634 <USBD_CDC_Setup+0x1a8>
 8013598:	2b0a      	cmp	r3, #10
 801359a:	d01f      	beq.n	80135dc <USBD_CDC_Setup+0x150>
 801359c:	dc4a      	bgt.n	8013634 <USBD_CDC_Setup+0x1a8>
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d002      	beq.n	80135a8 <USBD_CDC_Setup+0x11c>
 80135a2:	2b01      	cmp	r3, #1
 80135a4:	d051      	beq.n	801364a <USBD_CDC_Setup+0x1be>
 80135a6:	e045      	b.n	8013634 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	23a7      	movs	r3, #167	@ 0xa7
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	5cd3      	ldrb	r3, [r2, r3]
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	2b03      	cmp	r3, #3
 80135b4:	d107      	bne.n	80135c6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80135b6:	230a      	movs	r3, #10
 80135b8:	18f9      	adds	r1, r7, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2202      	movs	r2, #2
 80135be:	0018      	movs	r0, r3
 80135c0:	f001 ff3e 	bl	8015440 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135c4:	e044      	b.n	8013650 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 80135c6:	683a      	ldr	r2, [r7, #0]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	0011      	movs	r1, r2
 80135cc:	0018      	movs	r0, r3
 80135ce:	f001 feaf 	bl	8015330 <USBD_CtlError>
            ret = USBD_FAIL;
 80135d2:	2317      	movs	r3, #23
 80135d4:	18fb      	adds	r3, r7, r3
 80135d6:	2203      	movs	r2, #3
 80135d8:	701a      	strb	r2, [r3, #0]
          break;
 80135da:	e039      	b.n	8013650 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	23a7      	movs	r3, #167	@ 0xa7
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	5cd3      	ldrb	r3, [r2, r3]
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	2b03      	cmp	r3, #3
 80135e8:	d107      	bne.n	80135fa <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80135ea:	230d      	movs	r3, #13
 80135ec:	18f9      	adds	r1, r7, r3
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2201      	movs	r2, #1
 80135f2:	0018      	movs	r0, r3
 80135f4:	f001 ff24 	bl	8015440 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135f8:	e02a      	b.n	8013650 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 80135fa:	683a      	ldr	r2, [r7, #0]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	0011      	movs	r1, r2
 8013600:	0018      	movs	r0, r3
 8013602:	f001 fe95 	bl	8015330 <USBD_CtlError>
            ret = USBD_FAIL;
 8013606:	2317      	movs	r3, #23
 8013608:	18fb      	adds	r3, r7, r3
 801360a:	2203      	movs	r2, #3
 801360c:	701a      	strb	r2, [r3, #0]
          break;
 801360e:	e01f      	b.n	8013650 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	23a7      	movs	r3, #167	@ 0xa7
 8013614:	009b      	lsls	r3, r3, #2
 8013616:	5cd3      	ldrb	r3, [r2, r3]
 8013618:	b2db      	uxtb	r3, r3
 801361a:	2b03      	cmp	r3, #3
 801361c:	d017      	beq.n	801364e <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 801361e:	683a      	ldr	r2, [r7, #0]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	0011      	movs	r1, r2
 8013624:	0018      	movs	r0, r3
 8013626:	f001 fe83 	bl	8015330 <USBD_CtlError>
            ret = USBD_FAIL;
 801362a:	2317      	movs	r3, #23
 801362c:	18fb      	adds	r3, r7, r3
 801362e:	2203      	movs	r2, #3
 8013630:	701a      	strb	r2, [r3, #0]
          }
          break;
 8013632:	e00c      	b.n	801364e <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013634:	683a      	ldr	r2, [r7, #0]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	0011      	movs	r1, r2
 801363a:	0018      	movs	r0, r3
 801363c:	f001 fe78 	bl	8015330 <USBD_CtlError>
          ret = USBD_FAIL;
 8013640:	2317      	movs	r3, #23
 8013642:	18fb      	adds	r3, r7, r3
 8013644:	2203      	movs	r2, #3
 8013646:	701a      	strb	r2, [r3, #0]
          break;
 8013648:	e002      	b.n	8013650 <USBD_CDC_Setup+0x1c4>
          break;
 801364a:	46c0      	nop			@ (mov r8, r8)
 801364c:	e00c      	b.n	8013668 <USBD_CDC_Setup+0x1dc>
          break;
 801364e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8013650:	e00a      	b.n	8013668 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 8013652:	683a      	ldr	r2, [r7, #0]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	0011      	movs	r1, r2
 8013658:	0018      	movs	r0, r3
 801365a:	f001 fe69 	bl	8015330 <USBD_CtlError>
      ret = USBD_FAIL;
 801365e:	2317      	movs	r3, #23
 8013660:	18fb      	adds	r3, r7, r3
 8013662:	2203      	movs	r2, #3
 8013664:	701a      	strb	r2, [r3, #0]
      break;
 8013666:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 8013668:	2317      	movs	r3, #23
 801366a:	18fb      	adds	r3, r7, r3
 801366c:	781b      	ldrb	r3, [r3, #0]
}
 801366e:	0018      	movs	r0, r3
 8013670:	46bd      	mov	sp, r7
 8013672:	b006      	add	sp, #24
 8013674:	bd80      	pop	{r7, pc}
 8013676:	46c0      	nop			@ (mov r8, r8)
 8013678:	00000201 	.word	0x00000201

0801367c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801367c:	b590      	push	{r4, r7, lr}
 801367e:	b085      	sub	sp, #20
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	000a      	movs	r2, r1
 8013686:	1cfb      	adds	r3, r7, #3
 8013688:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	23b2      	movs	r3, #178	@ 0xb2
 801368e:	009b      	lsls	r3, r3, #2
 8013690:	58d3      	ldr	r3, [r2, r3]
 8013692:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	23b5      	movs	r3, #181	@ 0xb5
 8013698:	009b      	lsls	r3, r3, #2
 801369a:	58d2      	ldr	r2, [r2, r3]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	32b0      	adds	r2, #176	@ 0xb0
 80136a0:	0092      	lsls	r2, r2, #2
 80136a2:	58d3      	ldr	r3, [r2, r3]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d101      	bne.n	80136ac <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80136a8:	2303      	movs	r3, #3
 80136aa:	e072      	b.n	8013792 <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	23b5      	movs	r3, #181	@ 0xb5
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	58d2      	ldr	r2, [r2, r3]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	32b0      	adds	r2, #176	@ 0xb0
 80136b8:	0092      	lsls	r2, r2, #2
 80136ba:	58d3      	ldr	r3, [r2, r3]
 80136bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80136be:	1cfb      	adds	r3, r7, #3
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	220f      	movs	r2, #15
 80136c4:	401a      	ands	r2, r3
 80136c6:	6879      	ldr	r1, [r7, #4]
 80136c8:	0013      	movs	r3, r2
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	189b      	adds	r3, r3, r2
 80136ce:	009b      	lsls	r3, r3, #2
 80136d0:	18cb      	adds	r3, r1, r3
 80136d2:	3318      	adds	r3, #24
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d031      	beq.n	801373e <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80136da:	1cfb      	adds	r3, r7, #3
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	220f      	movs	r2, #15
 80136e0:	401a      	ands	r2, r3
 80136e2:	6879      	ldr	r1, [r7, #4]
 80136e4:	0013      	movs	r3, r2
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	189b      	adds	r3, r3, r2
 80136ea:	009b      	lsls	r3, r3, #2
 80136ec:	18cb      	adds	r3, r1, r3
 80136ee:	3318      	adds	r3, #24
 80136f0:	6818      	ldr	r0, [r3, #0]
 80136f2:	1cfb      	adds	r3, r7, #3
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	220f      	movs	r2, #15
 80136f8:	401a      	ands	r2, r3
 80136fa:	68f9      	ldr	r1, [r7, #12]
 80136fc:	0013      	movs	r3, r2
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	189b      	adds	r3, r3, r2
 8013702:	00db      	lsls	r3, r3, #3
 8013704:	18cb      	adds	r3, r1, r3
 8013706:	3324      	adds	r3, #36	@ 0x24
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	0019      	movs	r1, r3
 801370c:	f7f2 fdf6 	bl	80062fc <__aeabi_uidivmod>
 8013710:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013712:	d114      	bne.n	801373e <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013714:	1cfb      	adds	r3, r7, #3
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	220f      	movs	r2, #15
 801371a:	401a      	ands	r2, r3
 801371c:	6879      	ldr	r1, [r7, #4]
 801371e:	0013      	movs	r3, r2
 8013720:	009b      	lsls	r3, r3, #2
 8013722:	189b      	adds	r3, r3, r2
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	18cb      	adds	r3, r1, r3
 8013728:	3318      	adds	r3, #24
 801372a:	2200      	movs	r2, #0
 801372c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801372e:	1cfb      	adds	r3, r7, #3
 8013730:	7819      	ldrb	r1, [r3, #0]
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	2300      	movs	r3, #0
 8013736:	2200      	movs	r2, #0
 8013738:	f002 ffc2 	bl	80166c0 <USBD_LL_Transmit>
 801373c:	e028      	b.n	8013790 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 801373e:	68ba      	ldr	r2, [r7, #8]
 8013740:	2385      	movs	r3, #133	@ 0x85
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	2100      	movs	r1, #0
 8013746:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013748:	687a      	ldr	r2, [r7, #4]
 801374a:	23b5      	movs	r3, #181	@ 0xb5
 801374c:	009b      	lsls	r3, r3, #2
 801374e:	58d3      	ldr	r3, [r2, r3]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	33b0      	adds	r3, #176	@ 0xb0
 8013754:	009b      	lsls	r3, r3, #2
 8013756:	18d3      	adds	r3, r2, r3
 8013758:	3304      	adds	r3, #4
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	691b      	ldr	r3, [r3, #16]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d016      	beq.n	8013790 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	23b5      	movs	r3, #181	@ 0xb5
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	58d3      	ldr	r3, [r2, r3]
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	33b0      	adds	r3, #176	@ 0xb0
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	18d3      	adds	r3, r2, r3
 8013772:	3304      	adds	r3, #4
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	691c      	ldr	r4, [r3, #16]
 8013778:	68ba      	ldr	r2, [r7, #8]
 801377a:	2382      	movs	r3, #130	@ 0x82
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	58d0      	ldr	r0, [r2, r3]
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	2284      	movs	r2, #132	@ 0x84
 8013784:	0092      	lsls	r2, r2, #2
 8013786:	1899      	adds	r1, r3, r2
 8013788:	1cfb      	adds	r3, r7, #3
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	001a      	movs	r2, r3
 801378e:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8013790:	2300      	movs	r3, #0
}
 8013792:	0018      	movs	r0, r3
 8013794:	46bd      	mov	sp, r7
 8013796:	b005      	add	sp, #20
 8013798:	bd90      	pop	{r4, r7, pc}

0801379a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801379a:	b580      	push	{r7, lr}
 801379c:	b084      	sub	sp, #16
 801379e:	af00      	add	r7, sp, #0
 80137a0:	6078      	str	r0, [r7, #4]
 80137a2:	000a      	movs	r2, r1
 80137a4:	1cfb      	adds	r3, r7, #3
 80137a6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	23b5      	movs	r3, #181	@ 0xb5
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	58d2      	ldr	r2, [r2, r3]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	32b0      	adds	r2, #176	@ 0xb0
 80137b4:	0092      	lsls	r2, r2, #2
 80137b6:	58d3      	ldr	r3, [r2, r3]
 80137b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	23b5      	movs	r3, #181	@ 0xb5
 80137be:	009b      	lsls	r3, r3, #2
 80137c0:	58d2      	ldr	r2, [r2, r3]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	32b0      	adds	r2, #176	@ 0xb0
 80137c6:	0092      	lsls	r2, r2, #2
 80137c8:	58d3      	ldr	r3, [r2, r3]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d101      	bne.n	80137d2 <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 80137ce:	2303      	movs	r3, #3
 80137d0:	e022      	b.n	8013818 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80137d2:	1cfb      	adds	r3, r7, #3
 80137d4:	781a      	ldrb	r2, [r3, #0]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	0011      	movs	r1, r2
 80137da:	0018      	movs	r0, r3
 80137dc:	f002 ffd0 	bl	8016780 <USBD_LL_GetRxDataSize>
 80137e0:	0001      	movs	r1, r0
 80137e2:	68fa      	ldr	r2, [r7, #12]
 80137e4:	2383      	movs	r3, #131	@ 0x83
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80137ea:	687a      	ldr	r2, [r7, #4]
 80137ec:	23b5      	movs	r3, #181	@ 0xb5
 80137ee:	009b      	lsls	r3, r3, #2
 80137f0:	58d3      	ldr	r3, [r2, r3]
 80137f2:	687a      	ldr	r2, [r7, #4]
 80137f4:	33b0      	adds	r3, #176	@ 0xb0
 80137f6:	009b      	lsls	r3, r3, #2
 80137f8:	18d3      	adds	r3, r2, r3
 80137fa:	3304      	adds	r3, #4
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	68da      	ldr	r2, [r3, #12]
 8013800:	68f9      	ldr	r1, [r7, #12]
 8013802:	2381      	movs	r3, #129	@ 0x81
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	58c8      	ldr	r0, [r1, r3]
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2183      	movs	r1, #131	@ 0x83
 801380c:	0089      	lsls	r1, r1, #2
 801380e:	468c      	mov	ip, r1
 8013810:	4463      	add	r3, ip
 8013812:	0019      	movs	r1, r3
 8013814:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 8013816:	2300      	movs	r3, #0
}
 8013818:	0018      	movs	r0, r3
 801381a:	46bd      	mov	sp, r7
 801381c:	b004      	add	sp, #16
 801381e:	bd80      	pop	{r7, pc}

08013820 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013820:	b590      	push	{r4, r7, lr}
 8013822:	b085      	sub	sp, #20
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	23b5      	movs	r3, #181	@ 0xb5
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	58d2      	ldr	r2, [r2, r3]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	32b0      	adds	r2, #176	@ 0xb0
 8013834:	0092      	lsls	r2, r2, #2
 8013836:	58d3      	ldr	r3, [r2, r3]
 8013838:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d101      	bne.n	8013844 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013840:	2303      	movs	r3, #3
 8013842:	e02b      	b.n	801389c <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013844:	687a      	ldr	r2, [r7, #4]
 8013846:	23b5      	movs	r3, #181	@ 0xb5
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	58d3      	ldr	r3, [r2, r3]
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	33b0      	adds	r3, #176	@ 0xb0
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	18d3      	adds	r3, r2, r3
 8013854:	3304      	adds	r3, #4
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d01e      	beq.n	801389a <USBD_CDC_EP0_RxReady+0x7a>
 801385c:	68fa      	ldr	r2, [r7, #12]
 801385e:	2380      	movs	r3, #128	@ 0x80
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	5cd3      	ldrb	r3, [r2, r3]
 8013864:	2bff      	cmp	r3, #255	@ 0xff
 8013866:	d018      	beq.n	801389a <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013868:	687a      	ldr	r2, [r7, #4]
 801386a:	23b5      	movs	r3, #181	@ 0xb5
 801386c:	009b      	lsls	r3, r3, #2
 801386e:	58d3      	ldr	r3, [r2, r3]
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	33b0      	adds	r3, #176	@ 0xb0
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	18d3      	adds	r3, r2, r3
 8013878:	3304      	adds	r3, #4
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	689b      	ldr	r3, [r3, #8]
 801387e:	68f9      	ldr	r1, [r7, #12]
 8013880:	2280      	movs	r2, #128	@ 0x80
 8013882:	0092      	lsls	r2, r2, #2
 8013884:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 8013886:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013888:	68fa      	ldr	r2, [r7, #12]
 801388a:	4c06      	ldr	r4, [pc, #24]	@ (80138a4 <USBD_CDC_EP0_RxReady+0x84>)
 801388c:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801388e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013890:	68fa      	ldr	r2, [r7, #12]
 8013892:	2380      	movs	r3, #128	@ 0x80
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	21ff      	movs	r1, #255	@ 0xff
 8013898:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 801389a:	2300      	movs	r3, #0
}
 801389c:	0018      	movs	r0, r3
 801389e:	46bd      	mov	sp, r7
 80138a0:	b005      	add	sp, #20
 80138a2:	bd90      	pop	{r4, r7, pc}
 80138a4:	00000201 	.word	0x00000201

080138a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b086      	sub	sp, #24
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80138b0:	4b20      	ldr	r3, [pc, #128]	@ (8013934 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80138b2:	2182      	movs	r1, #130	@ 0x82
 80138b4:	0018      	movs	r0, r3
 80138b6:	f000 fd9c 	bl	80143f2 <USBD_GetEpDesc>
 80138ba:	0003      	movs	r3, r0
 80138bc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80138be:	4b1d      	ldr	r3, [pc, #116]	@ (8013934 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80138c0:	2101      	movs	r1, #1
 80138c2:	0018      	movs	r0, r3
 80138c4:	f000 fd95 	bl	80143f2 <USBD_GetEpDesc>
 80138c8:	0003      	movs	r3, r0
 80138ca:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80138cc:	4b19      	ldr	r3, [pc, #100]	@ (8013934 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80138ce:	2181      	movs	r1, #129	@ 0x81
 80138d0:	0018      	movs	r0, r3
 80138d2:	f000 fd8e 	bl	80143f2 <USBD_GetEpDesc>
 80138d6:	0003      	movs	r3, r0
 80138d8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d002      	beq.n	80138e6 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	2210      	movs	r2, #16
 80138e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d00b      	beq.n	8013904 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	791a      	ldrb	r2, [r3, #4]
 80138f0:	2100      	movs	r1, #0
 80138f2:	400a      	ands	r2, r1
 80138f4:	1c11      	adds	r1, r2, #0
 80138f6:	2240      	movs	r2, #64	@ 0x40
 80138f8:	430a      	orrs	r2, r1
 80138fa:	711a      	strb	r2, [r3, #4]
 80138fc:	795a      	ldrb	r2, [r3, #5]
 80138fe:	2100      	movs	r1, #0
 8013900:	400a      	ands	r2, r1
 8013902:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00b      	beq.n	8013922 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	791a      	ldrb	r2, [r3, #4]
 801390e:	2100      	movs	r1, #0
 8013910:	400a      	ands	r2, r1
 8013912:	1c11      	adds	r1, r2, #0
 8013914:	2240      	movs	r2, #64	@ 0x40
 8013916:	430a      	orrs	r2, r1
 8013918:	711a      	strb	r2, [r3, #4]
 801391a:	795a      	ldrb	r2, [r3, #5]
 801391c:	2100      	movs	r1, #0
 801391e:	400a      	ands	r2, r1
 8013920:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	2243      	movs	r2, #67	@ 0x43
 8013926:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013928:	4b02      	ldr	r3, [pc, #8]	@ (8013934 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 801392a:	0018      	movs	r0, r3
 801392c:	46bd      	mov	sp, r7
 801392e:	b006      	add	sp, #24
 8013930:	bd80      	pop	{r7, pc}
 8013932:	46c0      	nop			@ (mov r8, r8)
 8013934:	20000054 	.word	0x20000054

08013938 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b086      	sub	sp, #24
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013940:	4b20      	ldr	r3, [pc, #128]	@ (80139c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8013942:	2182      	movs	r1, #130	@ 0x82
 8013944:	0018      	movs	r0, r3
 8013946:	f000 fd54 	bl	80143f2 <USBD_GetEpDesc>
 801394a:	0003      	movs	r3, r0
 801394c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801394e:	4b1d      	ldr	r3, [pc, #116]	@ (80139c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8013950:	2101      	movs	r1, #1
 8013952:	0018      	movs	r0, r3
 8013954:	f000 fd4d 	bl	80143f2 <USBD_GetEpDesc>
 8013958:	0003      	movs	r3, r0
 801395a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801395c:	4b19      	ldr	r3, [pc, #100]	@ (80139c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 801395e:	2181      	movs	r1, #129	@ 0x81
 8013960:	0018      	movs	r0, r3
 8013962:	f000 fd46 	bl	80143f2 <USBD_GetEpDesc>
 8013966:	0003      	movs	r3, r0
 8013968:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d002      	beq.n	8013976 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	2210      	movs	r2, #16
 8013974:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00b      	beq.n	8013994 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	791a      	ldrb	r2, [r3, #4]
 8013980:	2100      	movs	r1, #0
 8013982:	400a      	ands	r2, r1
 8013984:	711a      	strb	r2, [r3, #4]
 8013986:	795a      	ldrb	r2, [r3, #5]
 8013988:	2100      	movs	r1, #0
 801398a:	400a      	ands	r2, r1
 801398c:	1c11      	adds	r1, r2, #0
 801398e:	2202      	movs	r2, #2
 8013990:	430a      	orrs	r2, r1
 8013992:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d00b      	beq.n	80139b2 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	791a      	ldrb	r2, [r3, #4]
 801399e:	2100      	movs	r1, #0
 80139a0:	400a      	ands	r2, r1
 80139a2:	711a      	strb	r2, [r3, #4]
 80139a4:	795a      	ldrb	r2, [r3, #5]
 80139a6:	2100      	movs	r1, #0
 80139a8:	400a      	ands	r2, r1
 80139aa:	1c11      	adds	r1, r2, #0
 80139ac:	2202      	movs	r2, #2
 80139ae:	430a      	orrs	r2, r1
 80139b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2243      	movs	r2, #67	@ 0x43
 80139b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80139b8:	4b02      	ldr	r3, [pc, #8]	@ (80139c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 80139ba:	0018      	movs	r0, r3
 80139bc:	46bd      	mov	sp, r7
 80139be:	b006      	add	sp, #24
 80139c0:	bd80      	pop	{r7, pc}
 80139c2:	46c0      	nop			@ (mov r8, r8)
 80139c4:	20000054 	.word	0x20000054

080139c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b086      	sub	sp, #24
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80139d0:	4b20      	ldr	r3, [pc, #128]	@ (8013a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80139d2:	2182      	movs	r1, #130	@ 0x82
 80139d4:	0018      	movs	r0, r3
 80139d6:	f000 fd0c 	bl	80143f2 <USBD_GetEpDesc>
 80139da:	0003      	movs	r3, r0
 80139dc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80139de:	4b1d      	ldr	r3, [pc, #116]	@ (8013a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80139e0:	2101      	movs	r1, #1
 80139e2:	0018      	movs	r0, r3
 80139e4:	f000 fd05 	bl	80143f2 <USBD_GetEpDesc>
 80139e8:	0003      	movs	r3, r0
 80139ea:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80139ec:	4b19      	ldr	r3, [pc, #100]	@ (8013a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80139ee:	2181      	movs	r1, #129	@ 0x81
 80139f0:	0018      	movs	r0, r3
 80139f2:	f000 fcfe 	bl	80143f2 <USBD_GetEpDesc>
 80139f6:	0003      	movs	r3, r0
 80139f8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d002      	beq.n	8013a06 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013a00:	697b      	ldr	r3, [r7, #20]
 8013a02:	2210      	movs	r2, #16
 8013a04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d00b      	beq.n	8013a24 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	791a      	ldrb	r2, [r3, #4]
 8013a10:	2100      	movs	r1, #0
 8013a12:	400a      	ands	r2, r1
 8013a14:	1c11      	adds	r1, r2, #0
 8013a16:	2240      	movs	r2, #64	@ 0x40
 8013a18:	430a      	orrs	r2, r1
 8013a1a:	711a      	strb	r2, [r3, #4]
 8013a1c:	795a      	ldrb	r2, [r3, #5]
 8013a1e:	2100      	movs	r1, #0
 8013a20:	400a      	ands	r2, r1
 8013a22:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00b      	beq.n	8013a42 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	791a      	ldrb	r2, [r3, #4]
 8013a2e:	2100      	movs	r1, #0
 8013a30:	400a      	ands	r2, r1
 8013a32:	1c11      	adds	r1, r2, #0
 8013a34:	2240      	movs	r2, #64	@ 0x40
 8013a36:	430a      	orrs	r2, r1
 8013a38:	711a      	strb	r2, [r3, #4]
 8013a3a:	795a      	ldrb	r2, [r3, #5]
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	400a      	ands	r2, r1
 8013a40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2243      	movs	r2, #67	@ 0x43
 8013a46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013a48:	4b02      	ldr	r3, [pc, #8]	@ (8013a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 8013a4a:	0018      	movs	r0, r3
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	b006      	add	sp, #24
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	46c0      	nop			@ (mov r8, r8)
 8013a54:	20000054 	.word	0x20000054

08013a58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	220a      	movs	r2, #10
 8013a64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013a66:	4b02      	ldr	r3, [pc, #8]	@ (8013a70 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8013a68:	0018      	movs	r0, r3
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	b002      	add	sp, #8
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	20000010 	.word	0x20000010

08013a74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b082      	sub	sp, #8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d101      	bne.n	8013a88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a84:	2303      	movs	r3, #3
 8013a86:	e00b      	b.n	8013aa0 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	23b5      	movs	r3, #181	@ 0xb5
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	58d3      	ldr	r3, [r2, r3]
 8013a90:	687a      	ldr	r2, [r7, #4]
 8013a92:	33b0      	adds	r3, #176	@ 0xb0
 8013a94:	009b      	lsls	r3, r3, #2
 8013a96:	18d3      	adds	r3, r2, r3
 8013a98:	3304      	adds	r3, #4
 8013a9a:	683a      	ldr	r2, [r7, #0]
 8013a9c:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 8013a9e:	2300      	movs	r3, #0
}
 8013aa0:	0018      	movs	r0, r3
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	b002      	add	sp, #8
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b086      	sub	sp, #24
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	23b5      	movs	r3, #181	@ 0xb5
 8013ab8:	009b      	lsls	r3, r3, #2
 8013aba:	58d2      	ldr	r2, [r2, r3]
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	32b0      	adds	r2, #176	@ 0xb0
 8013ac0:	0092      	lsls	r2, r2, #2
 8013ac2:	58d3      	ldr	r3, [r2, r3]
 8013ac4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013acc:	2303      	movs	r3, #3
 8013ace:	e00a      	b.n	8013ae6 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 8013ad0:	697a      	ldr	r2, [r7, #20]
 8013ad2:	2382      	movs	r3, #130	@ 0x82
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	68b9      	ldr	r1, [r7, #8]
 8013ad8:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	2384      	movs	r3, #132	@ 0x84
 8013ade:	009b      	lsls	r3, r3, #2
 8013ae0:	6879      	ldr	r1, [r7, #4]
 8013ae2:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8013ae4:	2300      	movs	r3, #0
}
 8013ae6:	0018      	movs	r0, r3
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	b006      	add	sp, #24
 8013aec:	bd80      	pop	{r7, pc}

08013aee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013aee:	b580      	push	{r7, lr}
 8013af0:	b084      	sub	sp, #16
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	6078      	str	r0, [r7, #4]
 8013af6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	23b5      	movs	r3, #181	@ 0xb5
 8013afc:	009b      	lsls	r3, r3, #2
 8013afe:	58d2      	ldr	r2, [r2, r3]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	32b0      	adds	r2, #176	@ 0xb0
 8013b04:	0092      	lsls	r2, r2, #2
 8013b06:	58d3      	ldr	r3, [r2, r3]
 8013b08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d101      	bne.n	8013b14 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013b10:	2303      	movs	r3, #3
 8013b12:	e005      	b.n	8013b20 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 8013b14:	68fa      	ldr	r2, [r7, #12]
 8013b16:	2381      	movs	r3, #129	@ 0x81
 8013b18:	009b      	lsls	r3, r3, #2
 8013b1a:	6839      	ldr	r1, [r7, #0]
 8013b1c:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8013b1e:	2300      	movs	r3, #0
}
 8013b20:	0018      	movs	r0, r3
 8013b22:	46bd      	mov	sp, r7
 8013b24:	b004      	add	sp, #16
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013b28:	b590      	push	{r4, r7, lr}
 8013b2a:	b085      	sub	sp, #20
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	23b5      	movs	r3, #181	@ 0xb5
 8013b34:	009b      	lsls	r3, r3, #2
 8013b36:	58d2      	ldr	r2, [r2, r3]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	32b0      	adds	r2, #176	@ 0xb0
 8013b3c:	0092      	lsls	r2, r2, #2
 8013b3e:	58d3      	ldr	r3, [r2, r3]
 8013b40:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013b42:	230f      	movs	r3, #15
 8013b44:	18fb      	adds	r3, r7, r3
 8013b46:	2201      	movs	r2, #1
 8013b48:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d101      	bne.n	8013b54 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013b50:	2303      	movs	r3, #3
 8013b52:	e030      	b.n	8013bb6 <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 8013b54:	68ba      	ldr	r2, [r7, #8]
 8013b56:	2385      	movs	r3, #133	@ 0x85
 8013b58:	009b      	lsls	r3, r3, #2
 8013b5a:	58d3      	ldr	r3, [r2, r3]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d127      	bne.n	8013bb0 <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013b60:	68ba      	ldr	r2, [r7, #8]
 8013b62:	2385      	movs	r3, #133	@ 0x85
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	2101      	movs	r1, #1
 8013b68:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013b6a:	4b15      	ldr	r3, [pc, #84]	@ (8013bc0 <USBD_CDC_TransmitPacket+0x98>)
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	001a      	movs	r2, r3
 8013b70:	230f      	movs	r3, #15
 8013b72:	401a      	ands	r2, r3
 8013b74:	68b9      	ldr	r1, [r7, #8]
 8013b76:	2384      	movs	r3, #132	@ 0x84
 8013b78:	009b      	lsls	r3, r3, #2
 8013b7a:	58c9      	ldr	r1, [r1, r3]
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	0013      	movs	r3, r2
 8013b80:	009b      	lsls	r3, r3, #2
 8013b82:	189b      	adds	r3, r3, r2
 8013b84:	009b      	lsls	r3, r3, #2
 8013b86:	18c3      	adds	r3, r0, r3
 8013b88:	3318      	adds	r3, #24
 8013b8a:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8013bc0 <USBD_CDC_TransmitPacket+0x98>)
 8013b8e:	7819      	ldrb	r1, [r3, #0]
 8013b90:	68ba      	ldr	r2, [r7, #8]
 8013b92:	2382      	movs	r3, #130	@ 0x82
 8013b94:	009b      	lsls	r3, r3, #2
 8013b96:	58d4      	ldr	r4, [r2, r3]
 8013b98:	68ba      	ldr	r2, [r7, #8]
 8013b9a:	2384      	movs	r3, #132	@ 0x84
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	58d3      	ldr	r3, [r2, r3]
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	0022      	movs	r2, r4
 8013ba4:	f002 fd8c 	bl	80166c0 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013ba8:	230f      	movs	r3, #15
 8013baa:	18fb      	adds	r3, r7, r3
 8013bac:	2200      	movs	r2, #0
 8013bae:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 8013bb0:	230f      	movs	r3, #15
 8013bb2:	18fb      	adds	r3, r7, r3
 8013bb4:	781b      	ldrb	r3, [r3, #0]
}
 8013bb6:	0018      	movs	r0, r3
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	b005      	add	sp, #20
 8013bbc:	bd90      	pop	{r4, r7, pc}
 8013bbe:	46c0      	nop			@ (mov r8, r8)
 8013bc0:	20000097 	.word	0x20000097

08013bc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	23b5      	movs	r3, #181	@ 0xb5
 8013bd0:	009b      	lsls	r3, r3, #2
 8013bd2:	58d2      	ldr	r2, [r2, r3]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	32b0      	adds	r2, #176	@ 0xb0
 8013bd8:	0092      	lsls	r2, r2, #2
 8013bda:	58d3      	ldr	r3, [r2, r3]
 8013bdc:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013bde:	687a      	ldr	r2, [r7, #4]
 8013be0:	23b5      	movs	r3, #181	@ 0xb5
 8013be2:	009b      	lsls	r3, r3, #2
 8013be4:	58d2      	ldr	r2, [r2, r3]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	32b0      	adds	r2, #176	@ 0xb0
 8013bea:	0092      	lsls	r2, r2, #2
 8013bec:	58d3      	ldr	r3, [r2, r3]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d101      	bne.n	8013bf6 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013bf2:	2303      	movs	r3, #3
 8013bf4:	e01a      	b.n	8013c2c <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	7c1b      	ldrb	r3, [r3, #16]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d10b      	bne.n	8013c16 <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8013c34 <USBD_CDC_ReceivePacket+0x70>)
 8013c00:	7819      	ldrb	r1, [r3, #0]
 8013c02:	68fa      	ldr	r2, [r7, #12]
 8013c04:	2381      	movs	r3, #129	@ 0x81
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	58d2      	ldr	r2, [r2, r3]
 8013c0a:	2380      	movs	r3, #128	@ 0x80
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f002 fd86 	bl	8016720 <USBD_LL_PrepareReceive>
 8013c14:	e009      	b.n	8013c2a <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013c16:	4b07      	ldr	r3, [pc, #28]	@ (8013c34 <USBD_CDC_ReceivePacket+0x70>)
 8013c18:	7819      	ldrb	r1, [r3, #0]
 8013c1a:	68fa      	ldr	r2, [r7, #12]
 8013c1c:	2381      	movs	r3, #129	@ 0x81
 8013c1e:	009b      	lsls	r3, r3, #2
 8013c20:	58d2      	ldr	r2, [r2, r3]
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	2340      	movs	r3, #64	@ 0x40
 8013c26:	f002 fd7b 	bl	8016720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013c2a:	2300      	movs	r3, #0
}
 8013c2c:	0018      	movs	r0, r3
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	b004      	add	sp, #16
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	20000098 	.word	0x20000098

08013c38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013c38:	b5b0      	push	{r4, r5, r7, lr}
 8013c3a:	b086      	sub	sp, #24
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	1dfb      	adds	r3, r7, #7
 8013c44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d101      	bne.n	8013c50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013c4c:	2303      	movs	r3, #3
 8013c4e:	e029      	b.n	8013ca4 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	23ae      	movs	r3, #174	@ 0xae
 8013c54:	009b      	lsls	r3, r3, #2
 8013c56:	2100      	movs	r1, #0
 8013c58:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	23b1      	movs	r3, #177	@ 0xb1
 8013c5e:	009b      	lsls	r3, r3, #2
 8013c60:	2100      	movs	r1, #0
 8013c62:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013c64:	68fa      	ldr	r2, [r7, #12]
 8013c66:	23b4      	movs	r3, #180	@ 0xb4
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	2100      	movs	r1, #0
 8013c6c:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d004      	beq.n	8013c7e <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	23ad      	movs	r3, #173	@ 0xad
 8013c78:	009b      	lsls	r3, r3, #2
 8013c7a:	68b9      	ldr	r1, [r7, #8]
 8013c7c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c7e:	68fa      	ldr	r2, [r7, #12]
 8013c80:	23a7      	movs	r3, #167	@ 0xa7
 8013c82:	009b      	lsls	r3, r3, #2
 8013c84:	2101      	movs	r1, #1
 8013c86:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	1dfa      	adds	r2, r7, #7
 8013c8c:	7812      	ldrb	r2, [r2, #0]
 8013c8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013c90:	2517      	movs	r5, #23
 8013c92:	197c      	adds	r4, r7, r5
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	0018      	movs	r0, r3
 8013c98:	f002 fb68 	bl	801636c <USBD_LL_Init>
 8013c9c:	0003      	movs	r3, r0
 8013c9e:	7023      	strb	r3, [r4, #0]

  return ret;
 8013ca0:	197b      	adds	r3, r7, r5
 8013ca2:	781b      	ldrb	r3, [r3, #0]
}
 8013ca4:	0018      	movs	r0, r3
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	b006      	add	sp, #24
 8013caa:	bdb0      	pop	{r4, r5, r7, pc}

08013cac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b084      	sub	sp, #16
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013cb6:	230e      	movs	r3, #14
 8013cb8:	18fb      	adds	r3, r7, r3
 8013cba:	2200      	movs	r2, #0
 8013cbc:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013cc4:	2303      	movs	r3, #3
 8013cc6:	e02b      	b.n	8013d20 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	23ae      	movs	r3, #174	@ 0xae
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	6839      	ldr	r1, [r7, #0]
 8013cd0:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	23b5      	movs	r3, #181	@ 0xb5
 8013cd6:	009b      	lsls	r3, r3, #2
 8013cd8:	58d2      	ldr	r2, [r2, r3]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	32ae      	adds	r2, #174	@ 0xae
 8013cde:	0092      	lsls	r2, r2, #2
 8013ce0:	58d3      	ldr	r3, [r2, r3]
 8013ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d011      	beq.n	8013d0c <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013ce8:	687a      	ldr	r2, [r7, #4]
 8013cea:	23b5      	movs	r3, #181	@ 0xb5
 8013cec:	009b      	lsls	r3, r3, #2
 8013cee:	58d2      	ldr	r2, [r2, r3]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	32ae      	adds	r2, #174	@ 0xae
 8013cf4:	0092      	lsls	r2, r2, #2
 8013cf6:	58d3      	ldr	r3, [r2, r3]
 8013cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cfa:	220e      	movs	r2, #14
 8013cfc:	18ba      	adds	r2, r7, r2
 8013cfe:	0010      	movs	r0, r2
 8013d00:	4798      	blx	r3
 8013d02:	0001      	movs	r1, r0
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	23b4      	movs	r3, #180	@ 0xb4
 8013d08:	009b      	lsls	r3, r3, #2
 8013d0a:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	23b6      	movs	r3, #182	@ 0xb6
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	58d3      	ldr	r3, [r2, r3]
 8013d14:	1c59      	adds	r1, r3, #1
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	23b6      	movs	r3, #182	@ 0xb6
 8013d1a:	009b      	lsls	r3, r3, #2
 8013d1c:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013d1e:	2300      	movs	r3, #0
}
 8013d20:	0018      	movs	r0, r3
 8013d22:	46bd      	mov	sp, r7
 8013d24:	b004      	add	sp, #16
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	0018      	movs	r0, r3
 8013d34:	f002 fb8c 	bl	8016450 <USBD_LL_Start>
 8013d38:	0003      	movs	r3, r0
}
 8013d3a:	0018      	movs	r0, r3
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	b002      	add	sp, #8
 8013d40:	bd80      	pop	{r7, pc}

08013d42 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013d42:	b580      	push	{r7, lr}
 8013d44:	b082      	sub	sp, #8
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013d4a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013d4c:	0018      	movs	r0, r3
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	b002      	add	sp, #8
 8013d52:	bd80      	pop	{r7, pc}

08013d54 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d54:	b590      	push	{r4, r7, lr}
 8013d56:	b085      	sub	sp, #20
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	000a      	movs	r2, r1
 8013d5e:	1cfb      	adds	r3, r7, #3
 8013d60:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d62:	210f      	movs	r1, #15
 8013d64:	187b      	adds	r3, r7, r1
 8013d66:	2200      	movs	r2, #0
 8013d68:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	23ae      	movs	r3, #174	@ 0xae
 8013d6e:	009b      	lsls	r3, r3, #2
 8013d70:	58d3      	ldr	r3, [r2, r3]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00c      	beq.n	8013d90 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	23ae      	movs	r3, #174	@ 0xae
 8013d7a:	009b      	lsls	r3, r3, #2
 8013d7c:	58d3      	ldr	r3, [r2, r3]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	187c      	adds	r4, r7, r1
 8013d82:	1cfa      	adds	r2, r7, #3
 8013d84:	7811      	ldrb	r1, [r2, #0]
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	0010      	movs	r0, r2
 8013d8a:	4798      	blx	r3
 8013d8c:	0003      	movs	r3, r0
 8013d8e:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013d90:	230f      	movs	r3, #15
 8013d92:	18fb      	adds	r3, r7, r3
 8013d94:	781b      	ldrb	r3, [r3, #0]
}
 8013d96:	0018      	movs	r0, r3
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	b005      	add	sp, #20
 8013d9c:	bd90      	pop	{r4, r7, pc}

08013d9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d9e:	b590      	push	{r4, r7, lr}
 8013da0:	b085      	sub	sp, #20
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	6078      	str	r0, [r7, #4]
 8013da6:	000a      	movs	r2, r1
 8013da8:	1cfb      	adds	r3, r7, #3
 8013daa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013dac:	240f      	movs	r4, #15
 8013dae:	193b      	adds	r3, r7, r4
 8013db0:	2200      	movs	r2, #0
 8013db2:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	23ae      	movs	r3, #174	@ 0xae
 8013db8:	009b      	lsls	r3, r3, #2
 8013dba:	58d3      	ldr	r3, [r2, r3]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	1cfa      	adds	r2, r7, #3
 8013dc0:	7811      	ldrb	r1, [r2, #0]
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	0010      	movs	r0, r2
 8013dc6:	4798      	blx	r3
 8013dc8:	1e03      	subs	r3, r0, #0
 8013dca:	d002      	beq.n	8013dd2 <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 8013dcc:	193b      	adds	r3, r7, r4
 8013dce:	2203      	movs	r2, #3
 8013dd0:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013dd2:	230f      	movs	r3, #15
 8013dd4:	18fb      	adds	r3, r7, r3
 8013dd6:	781b      	ldrb	r3, [r3, #0]
}
 8013dd8:	0018      	movs	r0, r3
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	b005      	add	sp, #20
 8013dde:	bd90      	pop	{r4, r7, pc}

08013de0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013de0:	b590      	push	{r4, r7, lr}
 8013de2:	b085      	sub	sp, #20
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4a30      	ldr	r2, [pc, #192]	@ (8013eb0 <USBD_LL_SetupStage+0xd0>)
 8013dee:	4694      	mov	ip, r2
 8013df0:	4463      	add	r3, ip
 8013df2:	683a      	ldr	r2, [r7, #0]
 8013df4:	0011      	movs	r1, r2
 8013df6:	0018      	movs	r0, r3
 8013df8:	f001 fa5d 	bl	80152b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	23a5      	movs	r3, #165	@ 0xa5
 8013e00:	009b      	lsls	r3, r3, #2
 8013e02:	2101      	movs	r1, #1
 8013e04:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	23ac      	movs	r3, #172	@ 0xac
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	5ad3      	ldrh	r3, [r2, r3]
 8013e0e:	0019      	movs	r1, r3
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	23a6      	movs	r3, #166	@ 0xa6
 8013e14:	009b      	lsls	r3, r3, #2
 8013e16:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	4a25      	ldr	r2, [pc, #148]	@ (8013eb0 <USBD_LL_SetupStage+0xd0>)
 8013e1c:	5c9b      	ldrb	r3, [r3, r2]
 8013e1e:	001a      	movs	r2, r3
 8013e20:	231f      	movs	r3, #31
 8013e22:	4013      	ands	r3, r2
 8013e24:	2b02      	cmp	r3, #2
 8013e26:	d01f      	beq.n	8013e68 <USBD_LL_SetupStage+0x88>
 8013e28:	d82b      	bhi.n	8013e82 <USBD_LL_SetupStage+0xa2>
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d002      	beq.n	8013e34 <USBD_LL_SetupStage+0x54>
 8013e2e:	2b01      	cmp	r3, #1
 8013e30:	d00d      	beq.n	8013e4e <USBD_LL_SetupStage+0x6e>
 8013e32:	e026      	b.n	8013e82 <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4a1e      	ldr	r2, [pc, #120]	@ (8013eb0 <USBD_LL_SetupStage+0xd0>)
 8013e38:	189a      	adds	r2, r3, r2
 8013e3a:	230f      	movs	r3, #15
 8013e3c:	18fc      	adds	r4, r7, r3
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	0011      	movs	r1, r2
 8013e42:	0018      	movs	r0, r3
 8013e44:	f000 fb5c 	bl	8014500 <USBD_StdDevReq>
 8013e48:	0003      	movs	r3, r0
 8013e4a:	7023      	strb	r3, [r4, #0]
      break;
 8013e4c:	e029      	b.n	8013ea2 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	4a17      	ldr	r2, [pc, #92]	@ (8013eb0 <USBD_LL_SetupStage+0xd0>)
 8013e52:	189a      	adds	r2, r3, r2
 8013e54:	230f      	movs	r3, #15
 8013e56:	18fc      	adds	r4, r7, r3
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	0011      	movs	r1, r2
 8013e5c:	0018      	movs	r0, r3
 8013e5e:	f000 fbcd 	bl	80145fc <USBD_StdItfReq>
 8013e62:	0003      	movs	r3, r0
 8013e64:	7023      	strb	r3, [r4, #0]
      break;
 8013e66:	e01c      	b.n	8013ea2 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	4a11      	ldr	r2, [pc, #68]	@ (8013eb0 <USBD_LL_SetupStage+0xd0>)
 8013e6c:	189a      	adds	r2, r3, r2
 8013e6e:	230f      	movs	r3, #15
 8013e70:	18fc      	adds	r4, r7, r3
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	0011      	movs	r1, r2
 8013e76:	0018      	movs	r0, r3
 8013e78:	f000 fc4d 	bl	8014716 <USBD_StdEPReq>
 8013e7c:	0003      	movs	r3, r0
 8013e7e:	7023      	strb	r3, [r4, #0]
      break;
 8013e80:	e00f      	b.n	8013ea2 <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	4a0a      	ldr	r2, [pc, #40]	@ (8013eb0 <USBD_LL_SetupStage+0xd0>)
 8013e86:	5c9b      	ldrb	r3, [r3, r2]
 8013e88:	227f      	movs	r2, #127	@ 0x7f
 8013e8a:	4393      	bics	r3, r2
 8013e8c:	b2da      	uxtb	r2, r3
 8013e8e:	230f      	movs	r3, #15
 8013e90:	18fc      	adds	r4, r7, r3
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	0011      	movs	r1, r2
 8013e96:	0018      	movs	r0, r3
 8013e98:	f002 fb61 	bl	801655e <USBD_LL_StallEP>
 8013e9c:	0003      	movs	r3, r0
 8013e9e:	7023      	strb	r3, [r4, #0]
      break;
 8013ea0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8013ea2:	230f      	movs	r3, #15
 8013ea4:	18fb      	adds	r3, r7, r3
 8013ea6:	781b      	ldrb	r3, [r3, #0]
}
 8013ea8:	0018      	movs	r0, r3
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	b005      	add	sp, #20
 8013eae:	bd90      	pop	{r4, r7, pc}
 8013eb0:	000002aa 	.word	0x000002aa

08013eb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eb6:	b087      	sub	sp, #28
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60f8      	str	r0, [r7, #12]
 8013ebc:	607a      	str	r2, [r7, #4]
 8013ebe:	200b      	movs	r0, #11
 8013ec0:	183b      	adds	r3, r7, r0
 8013ec2:	1c0a      	adds	r2, r1, #0
 8013ec4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013ec6:	2317      	movs	r3, #23
 8013ec8:	18fb      	adds	r3, r7, r3
 8013eca:	2200      	movs	r2, #0
 8013ecc:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 8013ece:	183b      	adds	r3, r7, r0
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d000      	beq.n	8013ed8 <USBD_LL_DataOutStage+0x24>
 8013ed6:	e084      	b.n	8013fe2 <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	3355      	adds	r3, #85	@ 0x55
 8013edc:	33ff      	adds	r3, #255	@ 0xff
 8013ede:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013ee0:	68fa      	ldr	r2, [r7, #12]
 8013ee2:	23a5      	movs	r3, #165	@ 0xa5
 8013ee4:	009b      	lsls	r3, r3, #2
 8013ee6:	58d3      	ldr	r3, [r2, r3]
 8013ee8:	2b03      	cmp	r3, #3
 8013eea:	d000      	beq.n	8013eee <USBD_LL_DataOutStage+0x3a>
 8013eec:	e0c0      	b.n	8014070 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	689a      	ldr	r2, [r3, #8]
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d914      	bls.n	8013f24 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	689a      	ldr	r2, [r3, #8]
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	68db      	ldr	r3, [r3, #12]
 8013f02:	1ad2      	subs	r2, r2, r3
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	68d9      	ldr	r1, [r3, #12]
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	689a      	ldr	r2, [r3, #8]
 8013f10:	000b      	movs	r3, r1
 8013f12:	4293      	cmp	r3, r2
 8013f14:	d900      	bls.n	8013f18 <USBD_LL_DataOutStage+0x64>
 8013f16:	0013      	movs	r3, r2
 8013f18:	6879      	ldr	r1, [r7, #4]
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	001a      	movs	r2, r3
 8013f1e:	f001 fadc 	bl	80154da <USBD_CtlContinueRx>
 8013f22:	e0a5      	b.n	8014070 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	4a55      	ldr	r2, [pc, #340]	@ (801407c <USBD_LL_DataOutStage+0x1c8>)
 8013f28:	5c9b      	ldrb	r3, [r3, r2]
 8013f2a:	001a      	movs	r2, r3
 8013f2c:	231f      	movs	r3, #31
 8013f2e:	4013      	ands	r3, r2
 8013f30:	2b02      	cmp	r3, #2
 8013f32:	d018      	beq.n	8013f66 <USBD_LL_DataOutStage+0xb2>
 8013f34:	d825      	bhi.n	8013f82 <USBD_LL_DataOutStage+0xce>
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d002      	beq.n	8013f40 <USBD_LL_DataOutStage+0x8c>
 8013f3a:	2b01      	cmp	r3, #1
 8013f3c:	d005      	beq.n	8013f4a <USBD_LL_DataOutStage+0x96>
 8013f3e:	e020      	b.n	8013f82 <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013f40:	2316      	movs	r3, #22
 8013f42:	18fb      	adds	r3, r7, r3
 8013f44:	2200      	movs	r2, #0
 8013f46:	701a      	strb	r2, [r3, #0]
            break;
 8013f48:	e020      	b.n	8013f8c <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8014080 <USBD_LL_DataOutStage+0x1cc>)
 8013f4e:	5a9b      	ldrh	r3, [r3, r2]
 8013f50:	b2da      	uxtb	r2, r3
 8013f52:	2316      	movs	r3, #22
 8013f54:	18fc      	adds	r4, r7, r3
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	0011      	movs	r1, r2
 8013f5a:	0018      	movs	r0, r3
 8013f5c:	f000 fa31 	bl	80143c2 <USBD_CoreFindIF>
 8013f60:	0003      	movs	r3, r0
 8013f62:	7023      	strb	r3, [r4, #0]
            break;
 8013f64:	e012      	b.n	8013f8c <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	4a45      	ldr	r2, [pc, #276]	@ (8014080 <USBD_LL_DataOutStage+0x1cc>)
 8013f6a:	5a9b      	ldrh	r3, [r3, r2]
 8013f6c:	b2da      	uxtb	r2, r3
 8013f6e:	2316      	movs	r3, #22
 8013f70:	18fc      	adds	r4, r7, r3
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	0011      	movs	r1, r2
 8013f76:	0018      	movs	r0, r3
 8013f78:	f000 fa2f 	bl	80143da <USBD_CoreFindEP>
 8013f7c:	0003      	movs	r3, r0
 8013f7e:	7023      	strb	r3, [r4, #0]
            break;
 8013f80:	e004      	b.n	8013f8c <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013f82:	2316      	movs	r3, #22
 8013f84:	18fb      	adds	r3, r7, r3
 8013f86:	2200      	movs	r2, #0
 8013f88:	701a      	strb	r2, [r3, #0]
            break;
 8013f8a:	46c0      	nop			@ (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013f8c:	2116      	movs	r1, #22
 8013f8e:	187b      	adds	r3, r7, r1
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d120      	bne.n	8013fd8 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f96:	68fa      	ldr	r2, [r7, #12]
 8013f98:	23a7      	movs	r3, #167	@ 0xa7
 8013f9a:	009b      	lsls	r3, r3, #2
 8013f9c:	5cd3      	ldrb	r3, [r2, r3]
 8013f9e:	b2db      	uxtb	r3, r3
 8013fa0:	2b03      	cmp	r3, #3
 8013fa2:	d119      	bne.n	8013fd8 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013fa4:	187b      	adds	r3, r7, r1
 8013fa6:	781a      	ldrb	r2, [r3, #0]
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	32ae      	adds	r2, #174	@ 0xae
 8013fac:	0092      	lsls	r2, r2, #2
 8013fae:	58d3      	ldr	r3, [r2, r3]
 8013fb0:	691b      	ldr	r3, [r3, #16]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d010      	beq.n	8013fd8 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 8013fb6:	0008      	movs	r0, r1
 8013fb8:	187b      	adds	r3, r7, r1
 8013fba:	7819      	ldrb	r1, [r3, #0]
 8013fbc:	68fa      	ldr	r2, [r7, #12]
 8013fbe:	23b5      	movs	r3, #181	@ 0xb5
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013fc4:	183b      	adds	r3, r7, r0
 8013fc6:	781a      	ldrb	r2, [r3, #0]
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	32ae      	adds	r2, #174	@ 0xae
 8013fcc:	0092      	lsls	r2, r2, #2
 8013fce:	58d3      	ldr	r3, [r2, r3]
 8013fd0:	691b      	ldr	r3, [r3, #16]
 8013fd2:	68fa      	ldr	r2, [r7, #12]
 8013fd4:	0010      	movs	r0, r2
 8013fd6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	0018      	movs	r0, r3
 8013fdc:	f001 fa8e 	bl	80154fc <USBD_CtlSendStatus>
 8013fe0:	e046      	b.n	8014070 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013fe2:	260b      	movs	r6, #11
 8013fe4:	19bb      	adds	r3, r7, r6
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	227f      	movs	r2, #127	@ 0x7f
 8013fea:	4013      	ands	r3, r2
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	2516      	movs	r5, #22
 8013ff0:	197c      	adds	r4, r7, r5
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	0011      	movs	r1, r2
 8013ff6:	0018      	movs	r0, r3
 8013ff8:	f000 f9ef 	bl	80143da <USBD_CoreFindEP>
 8013ffc:	0003      	movs	r3, r0
 8013ffe:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014000:	0029      	movs	r1, r5
 8014002:	187b      	adds	r3, r7, r1
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	2bff      	cmp	r3, #255	@ 0xff
 8014008:	d032      	beq.n	8014070 <USBD_LL_DataOutStage+0x1bc>
 801400a:	187b      	adds	r3, r7, r1
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d12e      	bne.n	8014070 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014012:	68fa      	ldr	r2, [r7, #12]
 8014014:	23a7      	movs	r3, #167	@ 0xa7
 8014016:	009b      	lsls	r3, r3, #2
 8014018:	5cd3      	ldrb	r3, [r2, r3]
 801401a:	b2db      	uxtb	r3, r3
 801401c:	2b03      	cmp	r3, #3
 801401e:	d11f      	bne.n	8014060 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014020:	187b      	adds	r3, r7, r1
 8014022:	781a      	ldrb	r2, [r3, #0]
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	32ae      	adds	r2, #174	@ 0xae
 8014028:	0092      	lsls	r2, r2, #2
 801402a:	58d3      	ldr	r3, [r2, r3]
 801402c:	699b      	ldr	r3, [r3, #24]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d016      	beq.n	8014060 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 8014032:	0008      	movs	r0, r1
 8014034:	187b      	adds	r3, r7, r1
 8014036:	7819      	ldrb	r1, [r3, #0]
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	23b5      	movs	r3, #181	@ 0xb5
 801403c:	009b      	lsls	r3, r3, #2
 801403e:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014040:	183b      	adds	r3, r7, r0
 8014042:	781a      	ldrb	r2, [r3, #0]
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	32ae      	adds	r2, #174	@ 0xae
 8014048:	0092      	lsls	r2, r2, #2
 801404a:	58d3      	ldr	r3, [r2, r3]
 801404c:	699b      	ldr	r3, [r3, #24]
 801404e:	2217      	movs	r2, #23
 8014050:	18bc      	adds	r4, r7, r2
 8014052:	19ba      	adds	r2, r7, r6
 8014054:	7811      	ldrb	r1, [r2, #0]
 8014056:	68fa      	ldr	r2, [r7, #12]
 8014058:	0010      	movs	r0, r2
 801405a:	4798      	blx	r3
 801405c:	0003      	movs	r3, r0
 801405e:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8014060:	2217      	movs	r2, #23
 8014062:	18bb      	adds	r3, r7, r2
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d002      	beq.n	8014070 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 801406a:	18bb      	adds	r3, r7, r2
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	e000      	b.n	8014072 <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8014070:	2300      	movs	r3, #0
}
 8014072:	0018      	movs	r0, r3
 8014074:	46bd      	mov	sp, r7
 8014076:	b007      	add	sp, #28
 8014078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801407a:	46c0      	nop			@ (mov r8, r8)
 801407c:	000002aa 	.word	0x000002aa
 8014080:	000002ae 	.word	0x000002ae

08014084 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014086:	b087      	sub	sp, #28
 8014088:	af00      	add	r7, sp, #0
 801408a:	60f8      	str	r0, [r7, #12]
 801408c:	607a      	str	r2, [r7, #4]
 801408e:	200b      	movs	r0, #11
 8014090:	183b      	adds	r3, r7, r0
 8014092:	1c0a      	adds	r2, r1, #0
 8014094:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014096:	183b      	adds	r3, r7, r0
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d000      	beq.n	80140a0 <USBD_LL_DataInStage+0x1c>
 801409e:	e07d      	b.n	801419c <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	3314      	adds	r3, #20
 80140a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80140a6:	68fa      	ldr	r2, [r7, #12]
 80140a8:	23a5      	movs	r3, #165	@ 0xa5
 80140aa:	009b      	lsls	r3, r3, #2
 80140ac:	58d3      	ldr	r3, [r2, r3]
 80140ae:	2b02      	cmp	r3, #2
 80140b0:	d164      	bne.n	801417c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	689a      	ldr	r2, [r3, #8]
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d914      	bls.n	80140e8 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	689a      	ldr	r2, [r3, #8]
 80140c2:	693b      	ldr	r3, [r7, #16]
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	1ad2      	subs	r2, r2, r3
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	689a      	ldr	r2, [r3, #8]
 80140d0:	6879      	ldr	r1, [r7, #4]
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	0018      	movs	r0, r3
 80140d6:	f001 f9cf 	bl	8015478 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	2300      	movs	r3, #0
 80140de:	2200      	movs	r2, #0
 80140e0:	2100      	movs	r1, #0
 80140e2:	f002 fb1d 	bl	8016720 <USBD_LL_PrepareReceive>
 80140e6:	e049      	b.n	801417c <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	68da      	ldr	r2, [r3, #12]
 80140ec:	693b      	ldr	r3, [r7, #16]
 80140ee:	689b      	ldr	r3, [r3, #8]
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d11f      	bne.n	8014134 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	685a      	ldr	r2, [r3, #4]
 80140f8:	693b      	ldr	r3, [r7, #16]
 80140fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d319      	bcc.n	8014134 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	685a      	ldr	r2, [r3, #4]
 8014104:	68f9      	ldr	r1, [r7, #12]
 8014106:	23a6      	movs	r3, #166	@ 0xa6
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801410c:	429a      	cmp	r2, r3
 801410e:	d211      	bcs.n	8014134 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	2200      	movs	r2, #0
 8014114:	2100      	movs	r1, #0
 8014116:	0018      	movs	r0, r3
 8014118:	f001 f9ae 	bl	8015478 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801411c:	68fa      	ldr	r2, [r7, #12]
 801411e:	23a6      	movs	r3, #166	@ 0xa6
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	2100      	movs	r1, #0
 8014124:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014126:	68f8      	ldr	r0, [r7, #12]
 8014128:	2300      	movs	r3, #0
 801412a:	2200      	movs	r2, #0
 801412c:	2100      	movs	r1, #0
 801412e:	f002 faf7 	bl	8016720 <USBD_LL_PrepareReceive>
 8014132:	e023      	b.n	801417c <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014134:	68fa      	ldr	r2, [r7, #12]
 8014136:	23a7      	movs	r3, #167	@ 0xa7
 8014138:	009b      	lsls	r3, r3, #2
 801413a:	5cd3      	ldrb	r3, [r2, r3]
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b03      	cmp	r3, #3
 8014140:	d113      	bne.n	801416a <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014142:	68fa      	ldr	r2, [r7, #12]
 8014144:	23ae      	movs	r3, #174	@ 0xae
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	58d3      	ldr	r3, [r2, r3]
 801414a:	68db      	ldr	r3, [r3, #12]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d00c      	beq.n	801416a <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8014150:	68fa      	ldr	r2, [r7, #12]
 8014152:	23b5      	movs	r3, #181	@ 0xb5
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	2100      	movs	r1, #0
 8014158:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	23ae      	movs	r3, #174	@ 0xae
 801415e:	009b      	lsls	r3, r3, #2
 8014160:	58d3      	ldr	r3, [r2, r3]
 8014162:	68db      	ldr	r3, [r3, #12]
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	0010      	movs	r0, r2
 8014168:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	2180      	movs	r1, #128	@ 0x80
 801416e:	0018      	movs	r0, r3
 8014170:	f002 f9f5 	bl	801655e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	0018      	movs	r0, r3
 8014178:	f001 f9d4 	bl	8015524 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801417c:	68fa      	ldr	r2, [r7, #12]
 801417e:	23a8      	movs	r3, #168	@ 0xa8
 8014180:	009b      	lsls	r3, r3, #2
 8014182:	5cd3      	ldrb	r3, [r2, r3]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d050      	beq.n	801422a <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	0018      	movs	r0, r3
 801418c:	f7ff fdd9 	bl	8013d42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014190:	68fa      	ldr	r2, [r7, #12]
 8014192:	23a8      	movs	r3, #168	@ 0xa8
 8014194:	009b      	lsls	r3, r3, #2
 8014196:	2100      	movs	r1, #0
 8014198:	54d1      	strb	r1, [r2, r3]
 801419a:	e046      	b.n	801422a <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801419c:	260b      	movs	r6, #11
 801419e:	19bb      	adds	r3, r7, r6
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	2280      	movs	r2, #128	@ 0x80
 80141a4:	4252      	negs	r2, r2
 80141a6:	4313      	orrs	r3, r2
 80141a8:	b2da      	uxtb	r2, r3
 80141aa:	2517      	movs	r5, #23
 80141ac:	197c      	adds	r4, r7, r5
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	0011      	movs	r1, r2
 80141b2:	0018      	movs	r0, r3
 80141b4:	f000 f911 	bl	80143da <USBD_CoreFindEP>
 80141b8:	0003      	movs	r3, r0
 80141ba:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80141bc:	0029      	movs	r1, r5
 80141be:	187b      	adds	r3, r7, r1
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	2bff      	cmp	r3, #255	@ 0xff
 80141c4:	d031      	beq.n	801422a <USBD_LL_DataInStage+0x1a6>
 80141c6:	187b      	adds	r3, r7, r1
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d12d      	bne.n	801422a <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141ce:	68fa      	ldr	r2, [r7, #12]
 80141d0:	23a7      	movs	r3, #167	@ 0xa7
 80141d2:	009b      	lsls	r3, r3, #2
 80141d4:	5cd3      	ldrb	r3, [r2, r3]
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	2b03      	cmp	r3, #3
 80141da:	d126      	bne.n	801422a <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80141dc:	187b      	adds	r3, r7, r1
 80141de:	781a      	ldrb	r2, [r3, #0]
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	32ae      	adds	r2, #174	@ 0xae
 80141e4:	0092      	lsls	r2, r2, #2
 80141e6:	58d3      	ldr	r3, [r2, r3]
 80141e8:	695b      	ldr	r3, [r3, #20]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d01d      	beq.n	801422a <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 80141ee:	0008      	movs	r0, r1
 80141f0:	187b      	adds	r3, r7, r1
 80141f2:	7819      	ldrb	r1, [r3, #0]
 80141f4:	68fa      	ldr	r2, [r7, #12]
 80141f6:	23b5      	movs	r3, #181	@ 0xb5
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80141fc:	183b      	adds	r3, r7, r0
 80141fe:	781a      	ldrb	r2, [r3, #0]
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	32ae      	adds	r2, #174	@ 0xae
 8014204:	0092      	lsls	r2, r2, #2
 8014206:	58d3      	ldr	r3, [r2, r3]
 8014208:	695b      	ldr	r3, [r3, #20]
 801420a:	2516      	movs	r5, #22
 801420c:	197c      	adds	r4, r7, r5
 801420e:	19ba      	adds	r2, r7, r6
 8014210:	7811      	ldrb	r1, [r2, #0]
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	0010      	movs	r0, r2
 8014216:	4798      	blx	r3
 8014218:	0003      	movs	r3, r0
 801421a:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 801421c:	197b      	adds	r3, r7, r5
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d002      	beq.n	801422a <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 8014224:	197b      	adds	r3, r7, r5
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	e000      	b.n	801422c <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 801422a:	2300      	movs	r3, #0
}
 801422c:	0018      	movs	r0, r3
 801422e:	46bd      	mov	sp, r7
 8014230:	b007      	add	sp, #28
 8014232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014234 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014234:	b590      	push	{r4, r7, lr}
 8014236:	b085      	sub	sp, #20
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801423c:	240f      	movs	r4, #15
 801423e:	193b      	adds	r3, r7, r4
 8014240:	2200      	movs	r2, #0
 8014242:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014244:	687a      	ldr	r2, [r7, #4]
 8014246:	23a7      	movs	r3, #167	@ 0xa7
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	2101      	movs	r1, #1
 801424c:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801424e:	687a      	ldr	r2, [r7, #4]
 8014250:	23a5      	movs	r3, #165	@ 0xa5
 8014252:	009b      	lsls	r3, r3, #2
 8014254:	2100      	movs	r1, #0
 8014256:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2200      	movs	r2, #0
 801425c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	23a9      	movs	r3, #169	@ 0xa9
 8014262:	009b      	lsls	r3, r3, #2
 8014264:	2100      	movs	r1, #0
 8014266:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8014268:	687a      	ldr	r2, [r7, #4]
 801426a:	23a8      	movs	r3, #168	@ 0xa8
 801426c:	009b      	lsls	r3, r3, #2
 801426e:	2100      	movs	r1, #0
 8014270:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	23ae      	movs	r3, #174	@ 0xae
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	58d3      	ldr	r3, [r2, r3]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d016      	beq.n	80142ac <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	23ae      	movs	r3, #174	@ 0xae
 8014282:	009b      	lsls	r3, r3, #2
 8014284:	58d3      	ldr	r3, [r2, r3]
 8014286:	685b      	ldr	r3, [r3, #4]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d00f      	beq.n	80142ac <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801428c:	687a      	ldr	r2, [r7, #4]
 801428e:	23ae      	movs	r3, #174	@ 0xae
 8014290:	009b      	lsls	r3, r3, #2
 8014292:	58d3      	ldr	r3, [r2, r3]
 8014294:	685a      	ldr	r2, [r3, #4]
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	b2d9      	uxtb	r1, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	0018      	movs	r0, r3
 80142a0:	4790      	blx	r2
 80142a2:	1e03      	subs	r3, r0, #0
 80142a4:	d002      	beq.n	80142ac <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 80142a6:	193b      	adds	r3, r7, r4
 80142a8:	2203      	movs	r2, #3
 80142aa:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	2340      	movs	r3, #64	@ 0x40
 80142b0:	2200      	movs	r2, #0
 80142b2:	2100      	movs	r1, #0
 80142b4:	f002 f8f1 	bl	801649a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	23b2      	movs	r3, #178	@ 0xb2
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	2101      	movs	r1, #1
 80142c0:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	23b0      	movs	r3, #176	@ 0xb0
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	2140      	movs	r1, #64	@ 0x40
 80142ca:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	2340      	movs	r3, #64	@ 0x40
 80142d0:	2200      	movs	r2, #0
 80142d2:	2180      	movs	r1, #128	@ 0x80
 80142d4:	f002 f8e1 	bl	801649a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2201      	movs	r2, #1
 80142dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2240      	movs	r2, #64	@ 0x40
 80142e2:	621a      	str	r2, [r3, #32]

  return ret;
 80142e4:	230f      	movs	r3, #15
 80142e6:	18fb      	adds	r3, r7, r3
 80142e8:	781b      	ldrb	r3, [r3, #0]
}
 80142ea:	0018      	movs	r0, r3
 80142ec:	46bd      	mov	sp, r7
 80142ee:	b005      	add	sp, #20
 80142f0:	bd90      	pop	{r4, r7, pc}

080142f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80142f2:	b580      	push	{r7, lr}
 80142f4:	b082      	sub	sp, #8
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	6078      	str	r0, [r7, #4]
 80142fa:	000a      	movs	r2, r1
 80142fc:	1cfb      	adds	r3, r7, #3
 80142fe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	1cfa      	adds	r2, r7, #3
 8014304:	7812      	ldrb	r2, [r2, #0]
 8014306:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014308:	2300      	movs	r3, #0
}
 801430a:	0018      	movs	r0, r3
 801430c:	46bd      	mov	sp, r7
 801430e:	b002      	add	sp, #8
 8014310:	bd80      	pop	{r7, pc}
	...

08014314 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	23a7      	movs	r3, #167	@ 0xa7
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	5cd3      	ldrb	r3, [r2, r3]
 8014324:	b2d9      	uxtb	r1, r3
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	4a05      	ldr	r2, [pc, #20]	@ (8014340 <USBD_LL_Suspend+0x2c>)
 801432a:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801432c:	687a      	ldr	r2, [r7, #4]
 801432e:	23a7      	movs	r3, #167	@ 0xa7
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	2104      	movs	r1, #4
 8014334:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8014336:	2300      	movs	r3, #0
}
 8014338:	0018      	movs	r0, r3
 801433a:	46bd      	mov	sp, r7
 801433c:	b002      	add	sp, #8
 801433e:	bd80      	pop	{r7, pc}
 8014340:	0000029d 	.word	0x0000029d

08014344 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b082      	sub	sp, #8
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801434c:	687a      	ldr	r2, [r7, #4]
 801434e:	23a7      	movs	r3, #167	@ 0xa7
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	5cd3      	ldrb	r3, [r2, r3]
 8014354:	b2db      	uxtb	r3, r3
 8014356:	2b04      	cmp	r3, #4
 8014358:	d107      	bne.n	801436a <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	4a05      	ldr	r2, [pc, #20]	@ (8014374 <USBD_LL_Resume+0x30>)
 801435e:	5c9b      	ldrb	r3, [r3, r2]
 8014360:	b2d9      	uxtb	r1, r3
 8014362:	687a      	ldr	r2, [r7, #4]
 8014364:	23a7      	movs	r3, #167	@ 0xa7
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801436a:	2300      	movs	r3, #0
}
 801436c:	0018      	movs	r0, r3
 801436e:	46bd      	mov	sp, r7
 8014370:	b002      	add	sp, #8
 8014372:	bd80      	pop	{r7, pc}
 8014374:	0000029d 	.word	0x0000029d

08014378 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	23a7      	movs	r3, #167	@ 0xa7
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	5cd3      	ldrb	r3, [r2, r3]
 8014388:	b2db      	uxtb	r3, r3
 801438a:	2b03      	cmp	r3, #3
 801438c:	d114      	bne.n	80143b8 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	23ae      	movs	r3, #174	@ 0xae
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	58d3      	ldr	r3, [r2, r3]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d00e      	beq.n	80143b8 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801439a:	687a      	ldr	r2, [r7, #4]
 801439c:	23ae      	movs	r3, #174	@ 0xae
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	58d3      	ldr	r3, [r2, r3]
 80143a2:	69db      	ldr	r3, [r3, #28]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d007      	beq.n	80143b8 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80143a8:	687a      	ldr	r2, [r7, #4]
 80143aa:	23ae      	movs	r3, #174	@ 0xae
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	58d3      	ldr	r3, [r2, r3]
 80143b0:	69db      	ldr	r3, [r3, #28]
 80143b2:	687a      	ldr	r2, [r7, #4]
 80143b4:	0010      	movs	r0, r2
 80143b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80143b8:	2300      	movs	r3, #0
}
 80143ba:	0018      	movs	r0, r3
 80143bc:	46bd      	mov	sp, r7
 80143be:	b002      	add	sp, #8
 80143c0:	bd80      	pop	{r7, pc}

080143c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80143c2:	b580      	push	{r7, lr}
 80143c4:	b082      	sub	sp, #8
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	6078      	str	r0, [r7, #4]
 80143ca:	000a      	movs	r2, r1
 80143cc:	1cfb      	adds	r3, r7, #3
 80143ce:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80143d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80143d2:	0018      	movs	r0, r3
 80143d4:	46bd      	mov	sp, r7
 80143d6:	b002      	add	sp, #8
 80143d8:	bd80      	pop	{r7, pc}

080143da <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80143da:	b580      	push	{r7, lr}
 80143dc:	b082      	sub	sp, #8
 80143de:	af00      	add	r7, sp, #0
 80143e0:	6078      	str	r0, [r7, #4]
 80143e2:	000a      	movs	r2, r1
 80143e4:	1cfb      	adds	r3, r7, #3
 80143e6:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80143e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80143ea:	0018      	movs	r0, r3
 80143ec:	46bd      	mov	sp, r7
 80143ee:	b002      	add	sp, #8
 80143f0:	bd80      	pop	{r7, pc}

080143f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80143f2:	b580      	push	{r7, lr}
 80143f4:	b086      	sub	sp, #24
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
 80143fa:	000a      	movs	r2, r1
 80143fc:	1cfb      	adds	r3, r7, #3
 80143fe:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014408:	2300      	movs	r3, #0
 801440a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	789a      	ldrb	r2, [r3, #2]
 8014410:	78db      	ldrb	r3, [r3, #3]
 8014412:	021b      	lsls	r3, r3, #8
 8014414:	4313      	orrs	r3, r2
 8014416:	b29b      	uxth	r3, r3
 8014418:	68fa      	ldr	r2, [r7, #12]
 801441a:	7812      	ldrb	r2, [r2, #0]
 801441c:	4293      	cmp	r3, r2
 801441e:	d92a      	bls.n	8014476 <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	001a      	movs	r2, r3
 8014426:	230a      	movs	r3, #10
 8014428:	18fb      	adds	r3, r7, r3
 801442a:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 801442c:	e016      	b.n	801445c <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801442e:	230a      	movs	r3, #10
 8014430:	18fa      	adds	r2, r7, r3
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	0011      	movs	r1, r2
 8014436:	0018      	movs	r0, r3
 8014438:	f000 f822 	bl	8014480 <USBD_GetNextDesc>
 801443c:	0003      	movs	r3, r0
 801443e:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	785b      	ldrb	r3, [r3, #1]
 8014444:	2b05      	cmp	r3, #5
 8014446:	d109      	bne.n	801445c <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	789b      	ldrb	r3, [r3, #2]
 8014450:	1cfa      	adds	r2, r7, #3
 8014452:	7812      	ldrb	r2, [r2, #0]
 8014454:	429a      	cmp	r2, r3
 8014456:	d00d      	beq.n	8014474 <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014458:	2300      	movs	r3, #0
 801445a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	789a      	ldrb	r2, [r3, #2]
 8014460:	78db      	ldrb	r3, [r3, #3]
 8014462:	021b      	lsls	r3, r3, #8
 8014464:	4313      	orrs	r3, r2
 8014466:	b29a      	uxth	r2, r3
 8014468:	230a      	movs	r3, #10
 801446a:	18fb      	adds	r3, r7, r3
 801446c:	881b      	ldrh	r3, [r3, #0]
 801446e:	429a      	cmp	r2, r3
 8014470:	d8dd      	bhi.n	801442e <USBD_GetEpDesc+0x3c>
 8014472:	e000      	b.n	8014476 <USBD_GetEpDesc+0x84>
          break;
 8014474:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014476:	693b      	ldr	r3, [r7, #16]
}
 8014478:	0018      	movs	r0, r3
 801447a:	46bd      	mov	sp, r7
 801447c:	b006      	add	sp, #24
 801447e:	bd80      	pop	{r7, pc}

08014480 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b084      	sub	sp, #16
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
 8014488:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	881b      	ldrh	r3, [r3, #0]
 8014492:	68fa      	ldr	r2, [r7, #12]
 8014494:	7812      	ldrb	r2, [r2, #0]
 8014496:	189b      	adds	r3, r3, r2
 8014498:	b29a      	uxth	r2, r3
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	001a      	movs	r2, r3
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	189b      	adds	r3, r3, r2
 80144a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80144aa:	68fb      	ldr	r3, [r7, #12]
}
 80144ac:	0018      	movs	r0, r3
 80144ae:	46bd      	mov	sp, r7
 80144b0:	b004      	add	sp, #16
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b086      	sub	sp, #24
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	781a      	ldrb	r2, [r3, #0]
 80144c4:	2112      	movs	r1, #18
 80144c6:	187b      	adds	r3, r7, r1
 80144c8:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	3301      	adds	r3, #1
 80144ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	781a      	ldrb	r2, [r3, #0]
 80144d4:	2010      	movs	r0, #16
 80144d6:	183b      	adds	r3, r7, r0
 80144d8:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80144da:	183b      	adds	r3, r7, r0
 80144dc:	2200      	movs	r2, #0
 80144de:	5e9b      	ldrsh	r3, [r3, r2]
 80144e0:	021b      	lsls	r3, r3, #8
 80144e2:	b21a      	sxth	r2, r3
 80144e4:	187b      	adds	r3, r7, r1
 80144e6:	2100      	movs	r1, #0
 80144e8:	5e5b      	ldrsh	r3, [r3, r1]
 80144ea:	4313      	orrs	r3, r2
 80144ec:	b21a      	sxth	r2, r3
 80144ee:	210e      	movs	r1, #14
 80144f0:	187b      	adds	r3, r7, r1
 80144f2:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 80144f4:	187b      	adds	r3, r7, r1
 80144f6:	881b      	ldrh	r3, [r3, #0]
}
 80144f8:	0018      	movs	r0, r3
 80144fa:	46bd      	mov	sp, r7
 80144fc:	b006      	add	sp, #24
 80144fe:	bd80      	pop	{r7, pc}

08014500 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014500:	b590      	push	{r4, r7, lr}
 8014502:	b085      	sub	sp, #20
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801450a:	230f      	movs	r3, #15
 801450c:	18fb      	adds	r3, r7, r3
 801450e:	2200      	movs	r2, #0
 8014510:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	001a      	movs	r2, r3
 8014518:	2360      	movs	r3, #96	@ 0x60
 801451a:	4013      	ands	r3, r2
 801451c:	2b40      	cmp	r3, #64	@ 0x40
 801451e:	d004      	beq.n	801452a <USBD_StdDevReq+0x2a>
 8014520:	d85b      	bhi.n	80145da <USBD_StdDevReq+0xda>
 8014522:	2b00      	cmp	r3, #0
 8014524:	d013      	beq.n	801454e <USBD_StdDevReq+0x4e>
 8014526:	2b20      	cmp	r3, #32
 8014528:	d157      	bne.n	80145da <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	23b5      	movs	r3, #181	@ 0xb5
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	58d2      	ldr	r2, [r2, r3]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	32ae      	adds	r2, #174	@ 0xae
 8014536:	0092      	lsls	r2, r2, #2
 8014538:	58d3      	ldr	r3, [r2, r3]
 801453a:	689b      	ldr	r3, [r3, #8]
 801453c:	220f      	movs	r2, #15
 801453e:	18bc      	adds	r4, r7, r2
 8014540:	6839      	ldr	r1, [r7, #0]
 8014542:	687a      	ldr	r2, [r7, #4]
 8014544:	0010      	movs	r0, r2
 8014546:	4798      	blx	r3
 8014548:	0003      	movs	r3, r0
 801454a:	7023      	strb	r3, [r4, #0]
      break;
 801454c:	e04c      	b.n	80145e8 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	785b      	ldrb	r3, [r3, #1]
 8014552:	2b09      	cmp	r3, #9
 8014554:	d839      	bhi.n	80145ca <USBD_StdDevReq+0xca>
 8014556:	009a      	lsls	r2, r3, #2
 8014558:	4b27      	ldr	r3, [pc, #156]	@ (80145f8 <USBD_StdDevReq+0xf8>)
 801455a:	18d3      	adds	r3, r2, r3
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014560:	683a      	ldr	r2, [r7, #0]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	0011      	movs	r1, r2
 8014566:	0018      	movs	r0, r3
 8014568:	f000 fada 	bl	8014b20 <USBD_GetDescriptor>
          break;
 801456c:	e034      	b.n	80145d8 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801456e:	683a      	ldr	r2, [r7, #0]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	0011      	movs	r1, r2
 8014574:	0018      	movs	r0, r3
 8014576:	f000 fcad 	bl	8014ed4 <USBD_SetAddress>
          break;
 801457a:	e02d      	b.n	80145d8 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801457c:	230f      	movs	r3, #15
 801457e:	18fc      	adds	r4, r7, r3
 8014580:	683a      	ldr	r2, [r7, #0]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	0011      	movs	r1, r2
 8014586:	0018      	movs	r0, r3
 8014588:	f000 fcfa 	bl	8014f80 <USBD_SetConfig>
 801458c:	0003      	movs	r3, r0
 801458e:	7023      	strb	r3, [r4, #0]
          break;
 8014590:	e022      	b.n	80145d8 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014592:	683a      	ldr	r2, [r7, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	0011      	movs	r1, r2
 8014598:	0018      	movs	r0, r3
 801459a:	f000 fdbf 	bl	801511c <USBD_GetConfig>
          break;
 801459e:	e01b      	b.n	80145d8 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80145a0:	683a      	ldr	r2, [r7, #0]
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	0011      	movs	r1, r2
 80145a6:	0018      	movs	r0, r3
 80145a8:	f000 fdf4 	bl	8015194 <USBD_GetStatus>
          break;
 80145ac:	e014      	b.n	80145d8 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80145ae:	683a      	ldr	r2, [r7, #0]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	0011      	movs	r1, r2
 80145b4:	0018      	movs	r0, r3
 80145b6:	f000 fe28 	bl	801520a <USBD_SetFeature>
          break;
 80145ba:	e00d      	b.n	80145d8 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80145bc:	683a      	ldr	r2, [r7, #0]
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	0011      	movs	r1, r2
 80145c2:	0018      	movs	r0, r3
 80145c4:	f000 fe50 	bl	8015268 <USBD_ClrFeature>
          break;
 80145c8:	e006      	b.n	80145d8 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 80145ca:	683a      	ldr	r2, [r7, #0]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	0011      	movs	r1, r2
 80145d0:	0018      	movs	r0, r3
 80145d2:	f000 fead 	bl	8015330 <USBD_CtlError>
          break;
 80145d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80145d8:	e006      	b.n	80145e8 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 80145da:	683a      	ldr	r2, [r7, #0]
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	0011      	movs	r1, r2
 80145e0:	0018      	movs	r0, r3
 80145e2:	f000 fea5 	bl	8015330 <USBD_CtlError>
      break;
 80145e6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80145e8:	230f      	movs	r3, #15
 80145ea:	18fb      	adds	r3, r7, r3
 80145ec:	781b      	ldrb	r3, [r3, #0]
}
 80145ee:	0018      	movs	r0, r3
 80145f0:	46bd      	mov	sp, r7
 80145f2:	b005      	add	sp, #20
 80145f4:	bd90      	pop	{r4, r7, pc}
 80145f6:	46c0      	nop			@ (mov r8, r8)
 80145f8:	08017424 	.word	0x08017424

080145fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145fc:	b5b0      	push	{r4, r5, r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014606:	230f      	movs	r3, #15
 8014608:	18fb      	adds	r3, r7, r3
 801460a:	2200      	movs	r2, #0
 801460c:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	001a      	movs	r2, r3
 8014614:	2360      	movs	r3, #96	@ 0x60
 8014616:	4013      	ands	r3, r2
 8014618:	2b40      	cmp	r3, #64	@ 0x40
 801461a:	d005      	beq.n	8014628 <USBD_StdItfReq+0x2c>
 801461c:	d900      	bls.n	8014620 <USBD_StdItfReq+0x24>
 801461e:	e06c      	b.n	80146fa <USBD_StdItfReq+0xfe>
 8014620:	2b00      	cmp	r3, #0
 8014622:	d001      	beq.n	8014628 <USBD_StdItfReq+0x2c>
 8014624:	2b20      	cmp	r3, #32
 8014626:	d168      	bne.n	80146fa <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	23a7      	movs	r3, #167	@ 0xa7
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	5cd3      	ldrb	r3, [r2, r3]
 8014630:	b2db      	uxtb	r3, r3
 8014632:	3b01      	subs	r3, #1
 8014634:	2b02      	cmp	r3, #2
 8014636:	d857      	bhi.n	80146e8 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	889b      	ldrh	r3, [r3, #4]
 801463c:	b2db      	uxtb	r3, r3
 801463e:	2b01      	cmp	r3, #1
 8014640:	d84b      	bhi.n	80146da <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	889b      	ldrh	r3, [r3, #4]
 8014646:	b2da      	uxtb	r2, r3
 8014648:	250e      	movs	r5, #14
 801464a:	197c      	adds	r4, r7, r5
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	0011      	movs	r1, r2
 8014650:	0018      	movs	r0, r3
 8014652:	f7ff feb6 	bl	80143c2 <USBD_CoreFindIF>
 8014656:	0003      	movs	r3, r0
 8014658:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801465a:	0029      	movs	r1, r5
 801465c:	187b      	adds	r3, r7, r1
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	2bff      	cmp	r3, #255	@ 0xff
 8014662:	d028      	beq.n	80146b6 <USBD_StdItfReq+0xba>
 8014664:	187b      	adds	r3, r7, r1
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d124      	bne.n	80146b6 <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801466c:	187b      	adds	r3, r7, r1
 801466e:	781a      	ldrb	r2, [r3, #0]
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	32ae      	adds	r2, #174	@ 0xae
 8014674:	0092      	lsls	r2, r2, #2
 8014676:	58d3      	ldr	r3, [r2, r3]
 8014678:	689b      	ldr	r3, [r3, #8]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d016      	beq.n	80146ac <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 801467e:	0008      	movs	r0, r1
 8014680:	187b      	adds	r3, r7, r1
 8014682:	7819      	ldrb	r1, [r3, #0]
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	23b5      	movs	r3, #181	@ 0xb5
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801468c:	183b      	adds	r3, r7, r0
 801468e:	781a      	ldrb	r2, [r3, #0]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	32ae      	adds	r2, #174	@ 0xae
 8014694:	0092      	lsls	r2, r2, #2
 8014696:	58d3      	ldr	r3, [r2, r3]
 8014698:	689b      	ldr	r3, [r3, #8]
 801469a:	220f      	movs	r2, #15
 801469c:	18bc      	adds	r4, r7, r2
 801469e:	6839      	ldr	r1, [r7, #0]
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	0010      	movs	r0, r2
 80146a4:	4798      	blx	r3
 80146a6:	0003      	movs	r3, r0
 80146a8:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 80146aa:	e008      	b.n	80146be <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80146ac:	230f      	movs	r3, #15
 80146ae:	18fb      	adds	r3, r7, r3
 80146b0:	2203      	movs	r2, #3
 80146b2:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 80146b4:	e003      	b.n	80146be <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80146b6:	230f      	movs	r3, #15
 80146b8:	18fb      	adds	r3, r7, r3
 80146ba:	2203      	movs	r2, #3
 80146bc:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	88db      	ldrh	r3, [r3, #6]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d117      	bne.n	80146f6 <USBD_StdItfReq+0xfa>
 80146c6:	230f      	movs	r3, #15
 80146c8:	18fb      	adds	r3, r7, r3
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d112      	bne.n	80146f6 <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	0018      	movs	r0, r3
 80146d4:	f000 ff12 	bl	80154fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80146d8:	e00d      	b.n	80146f6 <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 80146da:	683a      	ldr	r2, [r7, #0]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	0011      	movs	r1, r2
 80146e0:	0018      	movs	r0, r3
 80146e2:	f000 fe25 	bl	8015330 <USBD_CtlError>
          break;
 80146e6:	e006      	b.n	80146f6 <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 80146e8:	683a      	ldr	r2, [r7, #0]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	0011      	movs	r1, r2
 80146ee:	0018      	movs	r0, r3
 80146f0:	f000 fe1e 	bl	8015330 <USBD_CtlError>
          break;
 80146f4:	e000      	b.n	80146f8 <USBD_StdItfReq+0xfc>
          break;
 80146f6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80146f8:	e006      	b.n	8014708 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 80146fa:	683a      	ldr	r2, [r7, #0]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	0011      	movs	r1, r2
 8014700:	0018      	movs	r0, r3
 8014702:	f000 fe15 	bl	8015330 <USBD_CtlError>
      break;
 8014706:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014708:	230f      	movs	r3, #15
 801470a:	18fb      	adds	r3, r7, r3
 801470c:	781b      	ldrb	r3, [r3, #0]
}
 801470e:	0018      	movs	r0, r3
 8014710:	46bd      	mov	sp, r7
 8014712:	b004      	add	sp, #16
 8014714:	bdb0      	pop	{r4, r5, r7, pc}

08014716 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014716:	b5b0      	push	{r4, r5, r7, lr}
 8014718:	b084      	sub	sp, #16
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
 801471e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014720:	230f      	movs	r3, #15
 8014722:	18fb      	adds	r3, r7, r3
 8014724:	2200      	movs	r2, #0
 8014726:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	889a      	ldrh	r2, [r3, #4]
 801472c:	230e      	movs	r3, #14
 801472e:	18fb      	adds	r3, r7, r3
 8014730:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	001a      	movs	r2, r3
 8014738:	2360      	movs	r3, #96	@ 0x60
 801473a:	4013      	ands	r3, r2
 801473c:	2b40      	cmp	r3, #64	@ 0x40
 801473e:	d006      	beq.n	801474e <USBD_StdEPReq+0x38>
 8014740:	d900      	bls.n	8014744 <USBD_StdEPReq+0x2e>
 8014742:	e1de      	b.n	8014b02 <USBD_StdEPReq+0x3ec>
 8014744:	2b00      	cmp	r3, #0
 8014746:	d039      	beq.n	80147bc <USBD_StdEPReq+0xa6>
 8014748:	2b20      	cmp	r3, #32
 801474a:	d000      	beq.n	801474e <USBD_StdEPReq+0x38>
 801474c:	e1d9      	b.n	8014b02 <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801474e:	250d      	movs	r5, #13
 8014750:	197c      	adds	r4, r7, r5
 8014752:	230e      	movs	r3, #14
 8014754:	18fb      	adds	r3, r7, r3
 8014756:	781a      	ldrb	r2, [r3, #0]
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	0011      	movs	r1, r2
 801475c:	0018      	movs	r0, r3
 801475e:	f7ff fe3c 	bl	80143da <USBD_CoreFindEP>
 8014762:	0003      	movs	r3, r0
 8014764:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014766:	197b      	adds	r3, r7, r5
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	2bff      	cmp	r3, #255	@ 0xff
 801476c:	d100      	bne.n	8014770 <USBD_StdEPReq+0x5a>
 801476e:	e1cf      	b.n	8014b10 <USBD_StdEPReq+0x3fa>
 8014770:	197b      	adds	r3, r7, r5
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d000      	beq.n	801477a <USBD_StdEPReq+0x64>
 8014778:	e1ca      	b.n	8014b10 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 801477a:	197b      	adds	r3, r7, r5
 801477c:	7819      	ldrb	r1, [r3, #0]
 801477e:	687a      	ldr	r2, [r7, #4]
 8014780:	23b5      	movs	r3, #181	@ 0xb5
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014786:	0029      	movs	r1, r5
 8014788:	187b      	adds	r3, r7, r1
 801478a:	781a      	ldrb	r2, [r3, #0]
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	32ae      	adds	r2, #174	@ 0xae
 8014790:	0092      	lsls	r2, r2, #2
 8014792:	58d3      	ldr	r3, [r2, r3]
 8014794:	689b      	ldr	r3, [r3, #8]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d100      	bne.n	801479c <USBD_StdEPReq+0x86>
 801479a:	e1b9      	b.n	8014b10 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801479c:	187b      	adds	r3, r7, r1
 801479e:	781a      	ldrb	r2, [r3, #0]
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	32ae      	adds	r2, #174	@ 0xae
 80147a4:	0092      	lsls	r2, r2, #2
 80147a6:	58d3      	ldr	r3, [r2, r3]
 80147a8:	689b      	ldr	r3, [r3, #8]
 80147aa:	220f      	movs	r2, #15
 80147ac:	18bc      	adds	r4, r7, r2
 80147ae:	6839      	ldr	r1, [r7, #0]
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	0010      	movs	r0, r2
 80147b4:	4798      	blx	r3
 80147b6:	0003      	movs	r3, r0
 80147b8:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 80147ba:	e1a9      	b.n	8014b10 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	785b      	ldrb	r3, [r3, #1]
 80147c0:	2b03      	cmp	r3, #3
 80147c2:	d007      	beq.n	80147d4 <USBD_StdEPReq+0xbe>
 80147c4:	dd00      	ble.n	80147c8 <USBD_StdEPReq+0xb2>
 80147c6:	e194      	b.n	8014af2 <USBD_StdEPReq+0x3dc>
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d100      	bne.n	80147ce <USBD_StdEPReq+0xb8>
 80147cc:	e0c9      	b.n	8014962 <USBD_StdEPReq+0x24c>
 80147ce:	2b01      	cmp	r3, #1
 80147d0:	d04d      	beq.n	801486e <USBD_StdEPReq+0x158>
 80147d2:	e18e      	b.n	8014af2 <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	23a7      	movs	r3, #167	@ 0xa7
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	5cd3      	ldrb	r3, [r2, r3]
 80147dc:	b2db      	uxtb	r3, r3
 80147de:	2b02      	cmp	r3, #2
 80147e0:	d002      	beq.n	80147e8 <USBD_StdEPReq+0xd2>
 80147e2:	2b03      	cmp	r3, #3
 80147e4:	d01e      	beq.n	8014824 <USBD_StdEPReq+0x10e>
 80147e6:	e03a      	b.n	801485e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147e8:	220e      	movs	r2, #14
 80147ea:	18bb      	adds	r3, r7, r2
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d011      	beq.n	8014816 <USBD_StdEPReq+0x100>
 80147f2:	18bb      	adds	r3, r7, r2
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	2b80      	cmp	r3, #128	@ 0x80
 80147f8:	d00d      	beq.n	8014816 <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80147fa:	18bb      	adds	r3, r7, r2
 80147fc:	781a      	ldrb	r2, [r3, #0]
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	0011      	movs	r1, r2
 8014802:	0018      	movs	r0, r3
 8014804:	f001 feab 	bl	801655e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2180      	movs	r1, #128	@ 0x80
 801480c:	0018      	movs	r0, r3
 801480e:	f001 fea6 	bl	801655e <USBD_LL_StallEP>
 8014812:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014814:	e02a      	b.n	801486c <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 8014816:	683a      	ldr	r2, [r7, #0]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	0011      	movs	r1, r2
 801481c:	0018      	movs	r0, r3
 801481e:	f000 fd87 	bl	8015330 <USBD_CtlError>
              break;
 8014822:	e023      	b.n	801486c <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	885b      	ldrh	r3, [r3, #2]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d113      	bne.n	8014854 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801482c:	220e      	movs	r2, #14
 801482e:	18bb      	adds	r3, r7, r2
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d00e      	beq.n	8014854 <USBD_StdEPReq+0x13e>
 8014836:	18bb      	adds	r3, r7, r2
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	2b80      	cmp	r3, #128	@ 0x80
 801483c:	d00a      	beq.n	8014854 <USBD_StdEPReq+0x13e>
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	88db      	ldrh	r3, [r3, #6]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d106      	bne.n	8014854 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014846:	18bb      	adds	r3, r7, r2
 8014848:	781a      	ldrb	r2, [r3, #0]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	0011      	movs	r1, r2
 801484e:	0018      	movs	r0, r3
 8014850:	f001 fe85 	bl	801655e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	0018      	movs	r0, r3
 8014858:	f000 fe50 	bl	80154fc <USBD_CtlSendStatus>

              break;
 801485c:	e006      	b.n	801486c <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 801485e:	683a      	ldr	r2, [r7, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	0011      	movs	r1, r2
 8014864:	0018      	movs	r0, r3
 8014866:	f000 fd63 	bl	8015330 <USBD_CtlError>
              break;
 801486a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801486c:	e148      	b.n	8014b00 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	23a7      	movs	r3, #167	@ 0xa7
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	5cd3      	ldrb	r3, [r2, r3]
 8014876:	b2db      	uxtb	r3, r3
 8014878:	2b02      	cmp	r3, #2
 801487a:	d002      	beq.n	8014882 <USBD_StdEPReq+0x16c>
 801487c:	2b03      	cmp	r3, #3
 801487e:	d01e      	beq.n	80148be <USBD_StdEPReq+0x1a8>
 8014880:	e066      	b.n	8014950 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014882:	220e      	movs	r2, #14
 8014884:	18bb      	adds	r3, r7, r2
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d011      	beq.n	80148b0 <USBD_StdEPReq+0x19a>
 801488c:	18bb      	adds	r3, r7, r2
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	2b80      	cmp	r3, #128	@ 0x80
 8014892:	d00d      	beq.n	80148b0 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014894:	18bb      	adds	r3, r7, r2
 8014896:	781a      	ldrb	r2, [r3, #0]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	0011      	movs	r1, r2
 801489c:	0018      	movs	r0, r3
 801489e:	f001 fe5e 	bl	801655e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2180      	movs	r1, #128	@ 0x80
 80148a6:	0018      	movs	r0, r3
 80148a8:	f001 fe59 	bl	801655e <USBD_LL_StallEP>
 80148ac:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80148ae:	e057      	b.n	8014960 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 80148b0:	683a      	ldr	r2, [r7, #0]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	0011      	movs	r1, r2
 80148b6:	0018      	movs	r0, r3
 80148b8:	f000 fd3a 	bl	8015330 <USBD_CtlError>
              break;
 80148bc:	e050      	b.n	8014960 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	885b      	ldrh	r3, [r3, #2]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d14b      	bne.n	801495e <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80148c6:	210e      	movs	r1, #14
 80148c8:	187b      	adds	r3, r7, r1
 80148ca:	781b      	ldrb	r3, [r3, #0]
 80148cc:	227f      	movs	r2, #127	@ 0x7f
 80148ce:	4013      	ands	r3, r2
 80148d0:	d006      	beq.n	80148e0 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80148d2:	187b      	adds	r3, r7, r1
 80148d4:	781a      	ldrb	r2, [r3, #0]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	0011      	movs	r1, r2
 80148da:	0018      	movs	r0, r3
 80148dc:	f001 fe6a 	bl	80165b4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	0018      	movs	r0, r3
 80148e4:	f000 fe0a 	bl	80154fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80148e8:	250d      	movs	r5, #13
 80148ea:	197c      	adds	r4, r7, r5
 80148ec:	230e      	movs	r3, #14
 80148ee:	18fb      	adds	r3, r7, r3
 80148f0:	781a      	ldrb	r2, [r3, #0]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	0011      	movs	r1, r2
 80148f6:	0018      	movs	r0, r3
 80148f8:	f7ff fd6f 	bl	80143da <USBD_CoreFindEP>
 80148fc:	0003      	movs	r3, r0
 80148fe:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014900:	197b      	adds	r3, r7, r5
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	2bff      	cmp	r3, #255	@ 0xff
 8014906:	d02a      	beq.n	801495e <USBD_StdEPReq+0x248>
 8014908:	197b      	adds	r3, r7, r5
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d126      	bne.n	801495e <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 8014910:	197b      	adds	r3, r7, r5
 8014912:	7819      	ldrb	r1, [r3, #0]
 8014914:	687a      	ldr	r2, [r7, #4]
 8014916:	23b5      	movs	r3, #181	@ 0xb5
 8014918:	009b      	lsls	r3, r3, #2
 801491a:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801491c:	0029      	movs	r1, r5
 801491e:	187b      	adds	r3, r7, r1
 8014920:	781a      	ldrb	r2, [r3, #0]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	32ae      	adds	r2, #174	@ 0xae
 8014926:	0092      	lsls	r2, r2, #2
 8014928:	58d3      	ldr	r3, [r2, r3]
 801492a:	689b      	ldr	r3, [r3, #8]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d016      	beq.n	801495e <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014930:	187b      	adds	r3, r7, r1
 8014932:	781a      	ldrb	r2, [r3, #0]
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	32ae      	adds	r2, #174	@ 0xae
 8014938:	0092      	lsls	r2, r2, #2
 801493a:	58d3      	ldr	r3, [r2, r3]
 801493c:	689b      	ldr	r3, [r3, #8]
 801493e:	220f      	movs	r2, #15
 8014940:	18bc      	adds	r4, r7, r2
 8014942:	6839      	ldr	r1, [r7, #0]
 8014944:	687a      	ldr	r2, [r7, #4]
 8014946:	0010      	movs	r0, r2
 8014948:	4798      	blx	r3
 801494a:	0003      	movs	r3, r0
 801494c:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 801494e:	e006      	b.n	801495e <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 8014950:	683a      	ldr	r2, [r7, #0]
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	0011      	movs	r1, r2
 8014956:	0018      	movs	r0, r3
 8014958:	f000 fcea 	bl	8015330 <USBD_CtlError>
              break;
 801495c:	e000      	b.n	8014960 <USBD_StdEPReq+0x24a>
              break;
 801495e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014960:	e0ce      	b.n	8014b00 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014962:	687a      	ldr	r2, [r7, #4]
 8014964:	23a7      	movs	r3, #167	@ 0xa7
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	5cd3      	ldrb	r3, [r2, r3]
 801496a:	b2db      	uxtb	r3, r3
 801496c:	2b02      	cmp	r3, #2
 801496e:	d002      	beq.n	8014976 <USBD_StdEPReq+0x260>
 8014970:	2b03      	cmp	r3, #3
 8014972:	d03c      	beq.n	80149ee <USBD_StdEPReq+0x2d8>
 8014974:	e0b5      	b.n	8014ae2 <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014976:	220e      	movs	r2, #14
 8014978:	18bb      	adds	r3, r7, r2
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00a      	beq.n	8014996 <USBD_StdEPReq+0x280>
 8014980:	18bb      	adds	r3, r7, r2
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	2b80      	cmp	r3, #128	@ 0x80
 8014986:	d006      	beq.n	8014996 <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 8014988:	683a      	ldr	r2, [r7, #0]
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	0011      	movs	r1, r2
 801498e:	0018      	movs	r0, r3
 8014990:	f000 fcce 	bl	8015330 <USBD_CtlError>
                break;
 8014994:	e0ac      	b.n	8014af0 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014996:	220e      	movs	r2, #14
 8014998:	18bb      	adds	r3, r7, r2
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	b25b      	sxtb	r3, r3
 801499e:	2b00      	cmp	r3, #0
 80149a0:	da0c      	bge.n	80149bc <USBD_StdEPReq+0x2a6>
 80149a2:	18bb      	adds	r3, r7, r2
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	227f      	movs	r2, #127	@ 0x7f
 80149a8:	401a      	ands	r2, r3
 80149aa:	0013      	movs	r3, r2
 80149ac:	009b      	lsls	r3, r3, #2
 80149ae:	189b      	adds	r3, r3, r2
 80149b0:	009b      	lsls	r3, r3, #2
 80149b2:	3310      	adds	r3, #16
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	18d3      	adds	r3, r2, r3
 80149b8:	3304      	adds	r3, #4
 80149ba:	e00d      	b.n	80149d8 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149bc:	230e      	movs	r3, #14
 80149be:	18fb      	adds	r3, r7, r3
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	227f      	movs	r2, #127	@ 0x7f
 80149c4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149c6:	0013      	movs	r3, r2
 80149c8:	009b      	lsls	r3, r3, #2
 80149ca:	189b      	adds	r3, r3, r2
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	3351      	adds	r3, #81	@ 0x51
 80149d0:	33ff      	adds	r3, #255	@ 0xff
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	18d3      	adds	r3, r2, r3
 80149d6:	3304      	adds	r3, #4
 80149d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	2200      	movs	r2, #0
 80149de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80149e0:	68b9      	ldr	r1, [r7, #8]
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2202      	movs	r2, #2
 80149e6:	0018      	movs	r0, r3
 80149e8:	f000 fd2a 	bl	8015440 <USBD_CtlSendData>
              break;
 80149ec:	e080      	b.n	8014af0 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80149ee:	220e      	movs	r2, #14
 80149f0:	18bb      	adds	r3, r7, r2
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	b25b      	sxtb	r3, r3
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	da14      	bge.n	8014a24 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80149fa:	18bb      	adds	r3, r7, r2
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	220f      	movs	r2, #15
 8014a00:	401a      	ands	r2, r3
 8014a02:	6879      	ldr	r1, [r7, #4]
 8014a04:	0013      	movs	r3, r2
 8014a06:	009b      	lsls	r3, r3, #2
 8014a08:	189b      	adds	r3, r3, r2
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	18cb      	adds	r3, r1, r3
 8014a0e:	3324      	adds	r3, #36	@ 0x24
 8014a10:	881b      	ldrh	r3, [r3, #0]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d11e      	bne.n	8014a54 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 8014a16:	683a      	ldr	r2, [r7, #0]
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	0011      	movs	r1, r2
 8014a1c:	0018      	movs	r0, r3
 8014a1e:	f000 fc87 	bl	8015330 <USBD_CtlError>
                  break;
 8014a22:	e065      	b.n	8014af0 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014a24:	230e      	movs	r3, #14
 8014a26:	18fb      	adds	r3, r7, r3
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	220f      	movs	r2, #15
 8014a2c:	401a      	ands	r2, r3
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	23b2      	movs	r3, #178	@ 0xb2
 8014a32:	0059      	lsls	r1, r3, #1
 8014a34:	0013      	movs	r3, r2
 8014a36:	009b      	lsls	r3, r3, #2
 8014a38:	189b      	adds	r3, r3, r2
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	18c3      	adds	r3, r0, r3
 8014a3e:	185b      	adds	r3, r3, r1
 8014a40:	881b      	ldrh	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d106      	bne.n	8014a54 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 8014a46:	683a      	ldr	r2, [r7, #0]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	0011      	movs	r1, r2
 8014a4c:	0018      	movs	r0, r3
 8014a4e:	f000 fc6f 	bl	8015330 <USBD_CtlError>
                  break;
 8014a52:	e04d      	b.n	8014af0 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a54:	220e      	movs	r2, #14
 8014a56:	18bb      	adds	r3, r7, r2
 8014a58:	781b      	ldrb	r3, [r3, #0]
 8014a5a:	b25b      	sxtb	r3, r3
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	da0c      	bge.n	8014a7a <USBD_StdEPReq+0x364>
 8014a60:	18bb      	adds	r3, r7, r2
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	227f      	movs	r2, #127	@ 0x7f
 8014a66:	401a      	ands	r2, r3
 8014a68:	0013      	movs	r3, r2
 8014a6a:	009b      	lsls	r3, r3, #2
 8014a6c:	189b      	adds	r3, r3, r2
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	3310      	adds	r3, #16
 8014a72:	687a      	ldr	r2, [r7, #4]
 8014a74:	18d3      	adds	r3, r2, r3
 8014a76:	3304      	adds	r3, #4
 8014a78:	e00d      	b.n	8014a96 <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014a7a:	230e      	movs	r3, #14
 8014a7c:	18fb      	adds	r3, r7, r3
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	227f      	movs	r2, #127	@ 0x7f
 8014a82:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a84:	0013      	movs	r3, r2
 8014a86:	009b      	lsls	r3, r3, #2
 8014a88:	189b      	adds	r3, r3, r2
 8014a8a:	009b      	lsls	r3, r3, #2
 8014a8c:	3351      	adds	r3, #81	@ 0x51
 8014a8e:	33ff      	adds	r3, #255	@ 0xff
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	18d3      	adds	r3, r2, r3
 8014a94:	3304      	adds	r3, #4
 8014a96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014a98:	220e      	movs	r2, #14
 8014a9a:	18bb      	adds	r3, r7, r2
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d003      	beq.n	8014aaa <USBD_StdEPReq+0x394>
 8014aa2:	18bb      	adds	r3, r7, r2
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	2b80      	cmp	r3, #128	@ 0x80
 8014aa8:	d103      	bne.n	8014ab2 <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	2200      	movs	r2, #0
 8014aae:	601a      	str	r2, [r3, #0]
 8014ab0:	e010      	b.n	8014ad4 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014ab2:	230e      	movs	r3, #14
 8014ab4:	18fb      	adds	r3, r7, r3
 8014ab6:	781a      	ldrb	r2, [r3, #0]
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	0011      	movs	r1, r2
 8014abc:	0018      	movs	r0, r3
 8014abe:	f001 fda4 	bl	801660a <USBD_LL_IsStallEP>
 8014ac2:	1e03      	subs	r3, r0, #0
 8014ac4:	d003      	beq.n	8014ace <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	2201      	movs	r2, #1
 8014aca:	601a      	str	r2, [r3, #0]
 8014acc:	e002      	b.n	8014ad4 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014ad4:	68b9      	ldr	r1, [r7, #8]
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	2202      	movs	r2, #2
 8014ada:	0018      	movs	r0, r3
 8014adc:	f000 fcb0 	bl	8015440 <USBD_CtlSendData>
              break;
 8014ae0:	e006      	b.n	8014af0 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 8014ae2:	683a      	ldr	r2, [r7, #0]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	0011      	movs	r1, r2
 8014ae8:	0018      	movs	r0, r3
 8014aea:	f000 fc21 	bl	8015330 <USBD_CtlError>
              break;
 8014aee:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014af0:	e006      	b.n	8014b00 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 8014af2:	683a      	ldr	r2, [r7, #0]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	0011      	movs	r1, r2
 8014af8:	0018      	movs	r0, r3
 8014afa:	f000 fc19 	bl	8015330 <USBD_CtlError>
          break;
 8014afe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014b00:	e007      	b.n	8014b12 <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 8014b02:	683a      	ldr	r2, [r7, #0]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	0011      	movs	r1, r2
 8014b08:	0018      	movs	r0, r3
 8014b0a:	f000 fc11 	bl	8015330 <USBD_CtlError>
      break;
 8014b0e:	e000      	b.n	8014b12 <USBD_StdEPReq+0x3fc>
      break;
 8014b10:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014b12:	230f      	movs	r3, #15
 8014b14:	18fb      	adds	r3, r7, r3
 8014b16:	781b      	ldrb	r3, [r3, #0]
}
 8014b18:	0018      	movs	r0, r3
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	b004      	add	sp, #16
 8014b1e:	bdb0      	pop	{r4, r5, r7, pc}

08014b20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b084      	sub	sp, #16
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014b2a:	2308      	movs	r3, #8
 8014b2c:	18fb      	adds	r3, r7, r3
 8014b2e:	2200      	movs	r2, #0
 8014b30:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8014b32:	2300      	movs	r3, #0
 8014b34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014b36:	230b      	movs	r3, #11
 8014b38:	18fb      	adds	r3, r7, r3
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	885b      	ldrh	r3, [r3, #2]
 8014b42:	0a1b      	lsrs	r3, r3, #8
 8014b44:	b29b      	uxth	r3, r3
 8014b46:	2b0f      	cmp	r3, #15
 8014b48:	d900      	bls.n	8014b4c <USBD_GetDescriptor+0x2c>
 8014b4a:	e17b      	b.n	8014e44 <USBD_GetDescriptor+0x324>
 8014b4c:	009a      	lsls	r2, r3, #2
 8014b4e:	4bdd      	ldr	r3, [pc, #884]	@ (8014ec4 <USBD_GetDescriptor+0x3a4>)
 8014b50:	18d3      	adds	r3, r2, r3
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014b56:	687a      	ldr	r2, [r7, #4]
 8014b58:	23ad      	movs	r3, #173	@ 0xad
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	58d3      	ldr	r3, [r2, r3]
 8014b5e:	69db      	ldr	r3, [r3, #28]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d00d      	beq.n	8014b80 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	23ad      	movs	r3, #173	@ 0xad
 8014b68:	009b      	lsls	r3, r3, #2
 8014b6a:	58d3      	ldr	r3, [r2, r3]
 8014b6c:	69db      	ldr	r3, [r3, #28]
 8014b6e:	687a      	ldr	r2, [r7, #4]
 8014b70:	7c12      	ldrb	r2, [r2, #16]
 8014b72:	2108      	movs	r1, #8
 8014b74:	1879      	adds	r1, r7, r1
 8014b76:	0010      	movs	r0, r2
 8014b78:	4798      	blx	r3
 8014b7a:	0003      	movs	r3, r0
 8014b7c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b7e:	e16e      	b.n	8014e5e <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8014b80:	683a      	ldr	r2, [r7, #0]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	0011      	movs	r1, r2
 8014b86:	0018      	movs	r0, r3
 8014b88:	f000 fbd2 	bl	8015330 <USBD_CtlError>
        err++;
 8014b8c:	210b      	movs	r1, #11
 8014b8e:	187b      	adds	r3, r7, r1
 8014b90:	781a      	ldrb	r2, [r3, #0]
 8014b92:	187b      	adds	r3, r7, r1
 8014b94:	3201      	adds	r2, #1
 8014b96:	701a      	strb	r2, [r3, #0]
      break;
 8014b98:	e161      	b.n	8014e5e <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014b9a:	687a      	ldr	r2, [r7, #4]
 8014b9c:	23ad      	movs	r3, #173	@ 0xad
 8014b9e:	009b      	lsls	r3, r3, #2
 8014ba0:	58d3      	ldr	r3, [r2, r3]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	7c12      	ldrb	r2, [r2, #16]
 8014ba8:	2108      	movs	r1, #8
 8014baa:	1879      	adds	r1, r7, r1
 8014bac:	0010      	movs	r0, r2
 8014bae:	4798      	blx	r3
 8014bb0:	0003      	movs	r3, r0
 8014bb2:	60fb      	str	r3, [r7, #12]
      break;
 8014bb4:	e153      	b.n	8014e5e <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	7c1b      	ldrb	r3, [r3, #16]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d10f      	bne.n	8014bde <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	23ae      	movs	r3, #174	@ 0xae
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	58d3      	ldr	r3, [r2, r3]
 8014bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bc8:	2208      	movs	r2, #8
 8014bca:	18ba      	adds	r2, r7, r2
 8014bcc:	0010      	movs	r0, r2
 8014bce:	4798      	blx	r3
 8014bd0:	0003      	movs	r3, r0
 8014bd2:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	2202      	movs	r2, #2
 8014bda:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014bdc:	e13f      	b.n	8014e5e <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014bde:	687a      	ldr	r2, [r7, #4]
 8014be0:	23ae      	movs	r3, #174	@ 0xae
 8014be2:	009b      	lsls	r3, r3, #2
 8014be4:	58d3      	ldr	r3, [r2, r3]
 8014be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014be8:	2208      	movs	r2, #8
 8014bea:	18ba      	adds	r2, r7, r2
 8014bec:	0010      	movs	r0, r2
 8014bee:	4798      	blx	r3
 8014bf0:	0003      	movs	r3, r0
 8014bf2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	2202      	movs	r2, #2
 8014bfa:	701a      	strb	r2, [r3, #0]
      break;
 8014bfc:	e12f      	b.n	8014e5e <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	885b      	ldrh	r3, [r3, #2]
 8014c02:	b2db      	uxtb	r3, r3
 8014c04:	2b05      	cmp	r3, #5
 8014c06:	d900      	bls.n	8014c0a <USBD_GetDescriptor+0xea>
 8014c08:	e0d0      	b.n	8014dac <USBD_GetDescriptor+0x28c>
 8014c0a:	009a      	lsls	r2, r3, #2
 8014c0c:	4bae      	ldr	r3, [pc, #696]	@ (8014ec8 <USBD_GetDescriptor+0x3a8>)
 8014c0e:	18d3      	adds	r3, r2, r3
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	23ad      	movs	r3, #173	@ 0xad
 8014c18:	009b      	lsls	r3, r3, #2
 8014c1a:	58d3      	ldr	r3, [r2, r3]
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d00d      	beq.n	8014c3e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	23ad      	movs	r3, #173	@ 0xad
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	58d3      	ldr	r3, [r2, r3]
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	7c12      	ldrb	r2, [r2, #16]
 8014c30:	2108      	movs	r1, #8
 8014c32:	1879      	adds	r1, r7, r1
 8014c34:	0010      	movs	r0, r2
 8014c36:	4798      	blx	r3
 8014c38:	0003      	movs	r3, r0
 8014c3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c3c:	e0c3      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014c3e:	683a      	ldr	r2, [r7, #0]
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	0011      	movs	r1, r2
 8014c44:	0018      	movs	r0, r3
 8014c46:	f000 fb73 	bl	8015330 <USBD_CtlError>
            err++;
 8014c4a:	210b      	movs	r1, #11
 8014c4c:	187b      	adds	r3, r7, r1
 8014c4e:	781a      	ldrb	r2, [r3, #0]
 8014c50:	187b      	adds	r3, r7, r1
 8014c52:	3201      	adds	r2, #1
 8014c54:	701a      	strb	r2, [r3, #0]
          break;
 8014c56:	e0b6      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	23ad      	movs	r3, #173	@ 0xad
 8014c5c:	009b      	lsls	r3, r3, #2
 8014c5e:	58d3      	ldr	r3, [r2, r3]
 8014c60:	689b      	ldr	r3, [r3, #8]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d00d      	beq.n	8014c82 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014c66:	687a      	ldr	r2, [r7, #4]
 8014c68:	23ad      	movs	r3, #173	@ 0xad
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	58d3      	ldr	r3, [r2, r3]
 8014c6e:	689b      	ldr	r3, [r3, #8]
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	7c12      	ldrb	r2, [r2, #16]
 8014c74:	2108      	movs	r1, #8
 8014c76:	1879      	adds	r1, r7, r1
 8014c78:	0010      	movs	r0, r2
 8014c7a:	4798      	blx	r3
 8014c7c:	0003      	movs	r3, r0
 8014c7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c80:	e0a1      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014c82:	683a      	ldr	r2, [r7, #0]
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	0011      	movs	r1, r2
 8014c88:	0018      	movs	r0, r3
 8014c8a:	f000 fb51 	bl	8015330 <USBD_CtlError>
            err++;
 8014c8e:	210b      	movs	r1, #11
 8014c90:	187b      	adds	r3, r7, r1
 8014c92:	781a      	ldrb	r2, [r3, #0]
 8014c94:	187b      	adds	r3, r7, r1
 8014c96:	3201      	adds	r2, #1
 8014c98:	701a      	strb	r2, [r3, #0]
          break;
 8014c9a:	e094      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014c9c:	687a      	ldr	r2, [r7, #4]
 8014c9e:	23ad      	movs	r3, #173	@ 0xad
 8014ca0:	009b      	lsls	r3, r3, #2
 8014ca2:	58d3      	ldr	r3, [r2, r3]
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d00d      	beq.n	8014cc6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	23ad      	movs	r3, #173	@ 0xad
 8014cae:	009b      	lsls	r3, r3, #2
 8014cb0:	58d3      	ldr	r3, [r2, r3]
 8014cb2:	68db      	ldr	r3, [r3, #12]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	7c12      	ldrb	r2, [r2, #16]
 8014cb8:	2108      	movs	r1, #8
 8014cba:	1879      	adds	r1, r7, r1
 8014cbc:	0010      	movs	r0, r2
 8014cbe:	4798      	blx	r3
 8014cc0:	0003      	movs	r3, r0
 8014cc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cc4:	e07f      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014cc6:	683a      	ldr	r2, [r7, #0]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	0011      	movs	r1, r2
 8014ccc:	0018      	movs	r0, r3
 8014cce:	f000 fb2f 	bl	8015330 <USBD_CtlError>
            err++;
 8014cd2:	210b      	movs	r1, #11
 8014cd4:	187b      	adds	r3, r7, r1
 8014cd6:	781a      	ldrb	r2, [r3, #0]
 8014cd8:	187b      	adds	r3, r7, r1
 8014cda:	3201      	adds	r2, #1
 8014cdc:	701a      	strb	r2, [r3, #0]
          break;
 8014cde:	e072      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	23ad      	movs	r3, #173	@ 0xad
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	58d3      	ldr	r3, [r2, r3]
 8014ce8:	691b      	ldr	r3, [r3, #16]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d00d      	beq.n	8014d0a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	23ad      	movs	r3, #173	@ 0xad
 8014cf2:	009b      	lsls	r3, r3, #2
 8014cf4:	58d3      	ldr	r3, [r2, r3]
 8014cf6:	691b      	ldr	r3, [r3, #16]
 8014cf8:	687a      	ldr	r2, [r7, #4]
 8014cfa:	7c12      	ldrb	r2, [r2, #16]
 8014cfc:	2108      	movs	r1, #8
 8014cfe:	1879      	adds	r1, r7, r1
 8014d00:	0010      	movs	r0, r2
 8014d02:	4798      	blx	r3
 8014d04:	0003      	movs	r3, r0
 8014d06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d08:	e05d      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014d0a:	683a      	ldr	r2, [r7, #0]
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	0011      	movs	r1, r2
 8014d10:	0018      	movs	r0, r3
 8014d12:	f000 fb0d 	bl	8015330 <USBD_CtlError>
            err++;
 8014d16:	210b      	movs	r1, #11
 8014d18:	187b      	adds	r3, r7, r1
 8014d1a:	781a      	ldrb	r2, [r3, #0]
 8014d1c:	187b      	adds	r3, r7, r1
 8014d1e:	3201      	adds	r2, #1
 8014d20:	701a      	strb	r2, [r3, #0]
          break;
 8014d22:	e050      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	23ad      	movs	r3, #173	@ 0xad
 8014d28:	009b      	lsls	r3, r3, #2
 8014d2a:	58d3      	ldr	r3, [r2, r3]
 8014d2c:	695b      	ldr	r3, [r3, #20]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d00d      	beq.n	8014d4e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	23ad      	movs	r3, #173	@ 0xad
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	58d3      	ldr	r3, [r2, r3]
 8014d3a:	695b      	ldr	r3, [r3, #20]
 8014d3c:	687a      	ldr	r2, [r7, #4]
 8014d3e:	7c12      	ldrb	r2, [r2, #16]
 8014d40:	2108      	movs	r1, #8
 8014d42:	1879      	adds	r1, r7, r1
 8014d44:	0010      	movs	r0, r2
 8014d46:	4798      	blx	r3
 8014d48:	0003      	movs	r3, r0
 8014d4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d4c:	e03b      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	0011      	movs	r1, r2
 8014d54:	0018      	movs	r0, r3
 8014d56:	f000 faeb 	bl	8015330 <USBD_CtlError>
            err++;
 8014d5a:	210b      	movs	r1, #11
 8014d5c:	187b      	adds	r3, r7, r1
 8014d5e:	781a      	ldrb	r2, [r3, #0]
 8014d60:	187b      	adds	r3, r7, r1
 8014d62:	3201      	adds	r2, #1
 8014d64:	701a      	strb	r2, [r3, #0]
          break;
 8014d66:	e02e      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014d68:	687a      	ldr	r2, [r7, #4]
 8014d6a:	23ad      	movs	r3, #173	@ 0xad
 8014d6c:	009b      	lsls	r3, r3, #2
 8014d6e:	58d3      	ldr	r3, [r2, r3]
 8014d70:	699b      	ldr	r3, [r3, #24]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d00d      	beq.n	8014d92 <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	23ad      	movs	r3, #173	@ 0xad
 8014d7a:	009b      	lsls	r3, r3, #2
 8014d7c:	58d3      	ldr	r3, [r2, r3]
 8014d7e:	699b      	ldr	r3, [r3, #24]
 8014d80:	687a      	ldr	r2, [r7, #4]
 8014d82:	7c12      	ldrb	r2, [r2, #16]
 8014d84:	2108      	movs	r1, #8
 8014d86:	1879      	adds	r1, r7, r1
 8014d88:	0010      	movs	r0, r2
 8014d8a:	4798      	blx	r3
 8014d8c:	0003      	movs	r3, r0
 8014d8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d90:	e019      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8014d92:	683a      	ldr	r2, [r7, #0]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	0011      	movs	r1, r2
 8014d98:	0018      	movs	r0, r3
 8014d9a:	f000 fac9 	bl	8015330 <USBD_CtlError>
            err++;
 8014d9e:	210b      	movs	r1, #11
 8014da0:	187b      	adds	r3, r7, r1
 8014da2:	781a      	ldrb	r2, [r3, #0]
 8014da4:	187b      	adds	r3, r7, r1
 8014da6:	3201      	adds	r2, #1
 8014da8:	701a      	strb	r2, [r3, #0]
          break;
 8014daa:	e00c      	b.n	8014dc6 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014dac:	683a      	ldr	r2, [r7, #0]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	0011      	movs	r1, r2
 8014db2:	0018      	movs	r0, r3
 8014db4:	f000 fabc 	bl	8015330 <USBD_CtlError>
          err++;
 8014db8:	210b      	movs	r1, #11
 8014dba:	187b      	adds	r3, r7, r1
 8014dbc:	781a      	ldrb	r2, [r3, #0]
 8014dbe:	187b      	adds	r3, r7, r1
 8014dc0:	3201      	adds	r2, #1
 8014dc2:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014dc4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014dc6:	e04a      	b.n	8014e5e <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	7c1b      	ldrb	r3, [r3, #16]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d10b      	bne.n	8014de8 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014dd0:	687a      	ldr	r2, [r7, #4]
 8014dd2:	23ae      	movs	r3, #174	@ 0xae
 8014dd4:	009b      	lsls	r3, r3, #2
 8014dd6:	58d3      	ldr	r3, [r2, r3]
 8014dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014dda:	2208      	movs	r2, #8
 8014ddc:	18ba      	adds	r2, r7, r2
 8014dde:	0010      	movs	r0, r2
 8014de0:	4798      	blx	r3
 8014de2:	0003      	movs	r3, r0
 8014de4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014de6:	e03a      	b.n	8014e5e <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8014de8:	683a      	ldr	r2, [r7, #0]
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	0011      	movs	r1, r2
 8014dee:	0018      	movs	r0, r3
 8014df0:	f000 fa9e 	bl	8015330 <USBD_CtlError>
        err++;
 8014df4:	210b      	movs	r1, #11
 8014df6:	187b      	adds	r3, r7, r1
 8014df8:	781a      	ldrb	r2, [r3, #0]
 8014dfa:	187b      	adds	r3, r7, r1
 8014dfc:	3201      	adds	r2, #1
 8014dfe:	701a      	strb	r2, [r3, #0]
      break;
 8014e00:	e02d      	b.n	8014e5e <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	7c1b      	ldrb	r3, [r3, #16]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d10f      	bne.n	8014e2a <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	23ae      	movs	r3, #174	@ 0xae
 8014e0e:	009b      	lsls	r3, r3, #2
 8014e10:	58d3      	ldr	r3, [r2, r3]
 8014e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e14:	2208      	movs	r2, #8
 8014e16:	18ba      	adds	r2, r7, r2
 8014e18:	0010      	movs	r0, r2
 8014e1a:	4798      	blx	r3
 8014e1c:	0003      	movs	r3, r0
 8014e1e:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	3301      	adds	r3, #1
 8014e24:	2207      	movs	r2, #7
 8014e26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e28:	e019      	b.n	8014e5e <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	0011      	movs	r1, r2
 8014e30:	0018      	movs	r0, r3
 8014e32:	f000 fa7d 	bl	8015330 <USBD_CtlError>
        err++;
 8014e36:	210b      	movs	r1, #11
 8014e38:	187b      	adds	r3, r7, r1
 8014e3a:	781a      	ldrb	r2, [r3, #0]
 8014e3c:	187b      	adds	r3, r7, r1
 8014e3e:	3201      	adds	r2, #1
 8014e40:	701a      	strb	r2, [r3, #0]
      break;
 8014e42:	e00c      	b.n	8014e5e <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 8014e44:	683a      	ldr	r2, [r7, #0]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	0011      	movs	r1, r2
 8014e4a:	0018      	movs	r0, r3
 8014e4c:	f000 fa70 	bl	8015330 <USBD_CtlError>
      err++;
 8014e50:	210b      	movs	r1, #11
 8014e52:	187b      	adds	r3, r7, r1
 8014e54:	781a      	ldrb	r2, [r3, #0]
 8014e56:	187b      	adds	r3, r7, r1
 8014e58:	3201      	adds	r2, #1
 8014e5a:	701a      	strb	r2, [r3, #0]
      break;
 8014e5c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8014e5e:	230b      	movs	r3, #11
 8014e60:	18fb      	adds	r3, r7, r3
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d131      	bne.n	8014ecc <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	88db      	ldrh	r3, [r3, #6]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d023      	beq.n	8014eb8 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 8014e70:	2108      	movs	r1, #8
 8014e72:	187b      	adds	r3, r7, r1
 8014e74:	881b      	ldrh	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d017      	beq.n	8014eaa <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	88da      	ldrh	r2, [r3, #6]
 8014e7e:	187b      	adds	r3, r7, r1
 8014e80:	881b      	ldrh	r3, [r3, #0]
 8014e82:	1c18      	adds	r0, r3, #0
 8014e84:	1c11      	adds	r1, r2, #0
 8014e86:	b28a      	uxth	r2, r1
 8014e88:	b283      	uxth	r3, r0
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d900      	bls.n	8014e90 <USBD_GetDescriptor+0x370>
 8014e8e:	1c01      	adds	r1, r0, #0
 8014e90:	b28a      	uxth	r2, r1
 8014e92:	2108      	movs	r1, #8
 8014e94:	187b      	adds	r3, r7, r1
 8014e96:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014e98:	187b      	adds	r3, r7, r1
 8014e9a:	881b      	ldrh	r3, [r3, #0]
 8014e9c:	001a      	movs	r2, r3
 8014e9e:	68f9      	ldr	r1, [r7, #12]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	0018      	movs	r0, r3
 8014ea4:	f000 facc 	bl	8015440 <USBD_CtlSendData>
 8014ea8:	e011      	b.n	8014ece <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014eaa:	683a      	ldr	r2, [r7, #0]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	0011      	movs	r1, r2
 8014eb0:	0018      	movs	r0, r3
 8014eb2:	f000 fa3d 	bl	8015330 <USBD_CtlError>
 8014eb6:	e00a      	b.n	8014ece <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	0018      	movs	r0, r3
 8014ebc:	f000 fb1e 	bl	80154fc <USBD_CtlSendStatus>
 8014ec0:	e005      	b.n	8014ece <USBD_GetDescriptor+0x3ae>
 8014ec2:	46c0      	nop			@ (mov r8, r8)
 8014ec4:	0801744c 	.word	0x0801744c
 8014ec8:	0801748c 	.word	0x0801748c
    return;
 8014ecc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	b004      	add	sp, #16
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ed4:	b590      	push	{r4, r7, lr}
 8014ed6:	b085      	sub	sp, #20
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	889b      	ldrh	r3, [r3, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d13e      	bne.n	8014f64 <USBD_SetAddress+0x90>
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	88db      	ldrh	r3, [r3, #6]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d13a      	bne.n	8014f64 <USBD_SetAddress+0x90>
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	885b      	ldrh	r3, [r3, #2]
 8014ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8014ef4:	d836      	bhi.n	8014f64 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	885b      	ldrh	r3, [r3, #2]
 8014efa:	b2da      	uxtb	r2, r3
 8014efc:	230f      	movs	r3, #15
 8014efe:	18fb      	adds	r3, r7, r3
 8014f00:	217f      	movs	r1, #127	@ 0x7f
 8014f02:	400a      	ands	r2, r1
 8014f04:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	23a7      	movs	r3, #167	@ 0xa7
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	5cd3      	ldrb	r3, [r2, r3]
 8014f0e:	b2db      	uxtb	r3, r3
 8014f10:	2b03      	cmp	r3, #3
 8014f12:	d106      	bne.n	8014f22 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 8014f14:	683a      	ldr	r2, [r7, #0]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	0011      	movs	r1, r2
 8014f1a:	0018      	movs	r0, r3
 8014f1c:	f000 fa08 	bl	8015330 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f20:	e027      	b.n	8014f72 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	240f      	movs	r4, #15
 8014f26:	193a      	adds	r2, r7, r4
 8014f28:	4914      	ldr	r1, [pc, #80]	@ (8014f7c <USBD_SetAddress+0xa8>)
 8014f2a:	7812      	ldrb	r2, [r2, #0]
 8014f2c:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014f2e:	193b      	adds	r3, r7, r4
 8014f30:	781a      	ldrb	r2, [r3, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	0011      	movs	r1, r2
 8014f36:	0018      	movs	r0, r3
 8014f38:	f001 fb97 	bl	801666a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	0018      	movs	r0, r3
 8014f40:	f000 fadc 	bl	80154fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014f44:	193b      	adds	r3, r7, r4
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d005      	beq.n	8014f58 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f4c:	687a      	ldr	r2, [r7, #4]
 8014f4e:	23a7      	movs	r3, #167	@ 0xa7
 8014f50:	009b      	lsls	r3, r3, #2
 8014f52:	2102      	movs	r1, #2
 8014f54:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f56:	e00c      	b.n	8014f72 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014f58:	687a      	ldr	r2, [r7, #4]
 8014f5a:	23a7      	movs	r3, #167	@ 0xa7
 8014f5c:	009b      	lsls	r3, r3, #2
 8014f5e:	2101      	movs	r1, #1
 8014f60:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f62:	e006      	b.n	8014f72 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014f64:	683a      	ldr	r2, [r7, #0]
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	0011      	movs	r1, r2
 8014f6a:	0018      	movs	r0, r3
 8014f6c:	f000 f9e0 	bl	8015330 <USBD_CtlError>
  }
}
 8014f70:	46c0      	nop			@ (mov r8, r8)
 8014f72:	46c0      	nop			@ (mov r8, r8)
 8014f74:	46bd      	mov	sp, r7
 8014f76:	b005      	add	sp, #20
 8014f78:	bd90      	pop	{r4, r7, pc}
 8014f7a:	46c0      	nop			@ (mov r8, r8)
 8014f7c:	0000029e 	.word	0x0000029e

08014f80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f80:	b5b0      	push	{r4, r5, r7, lr}
 8014f82:	b084      	sub	sp, #16
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f8a:	230f      	movs	r3, #15
 8014f8c:	18fb      	adds	r3, r7, r3
 8014f8e:	2200      	movs	r2, #0
 8014f90:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	885b      	ldrh	r3, [r3, #2]
 8014f96:	b2da      	uxtb	r2, r3
 8014f98:	4b5f      	ldr	r3, [pc, #380]	@ (8015118 <USBD_SetConfig+0x198>)
 8014f9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f9c:	4b5e      	ldr	r3, [pc, #376]	@ (8015118 <USBD_SetConfig+0x198>)
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d907      	bls.n	8014fb4 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 8014fa4:	683a      	ldr	r2, [r7, #0]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	0011      	movs	r1, r2
 8014faa:	0018      	movs	r0, r3
 8014fac:	f000 f9c0 	bl	8015330 <USBD_CtlError>
    return USBD_FAIL;
 8014fb0:	2303      	movs	r3, #3
 8014fb2:	e0ac      	b.n	801510e <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 8014fb4:	687a      	ldr	r2, [r7, #4]
 8014fb6:	23a7      	movs	r3, #167	@ 0xa7
 8014fb8:	009b      	lsls	r3, r3, #2
 8014fba:	5cd3      	ldrb	r3, [r2, r3]
 8014fbc:	b2db      	uxtb	r3, r3
 8014fbe:	2b02      	cmp	r3, #2
 8014fc0:	d002      	beq.n	8014fc8 <USBD_SetConfig+0x48>
 8014fc2:	2b03      	cmp	r3, #3
 8014fc4:	d033      	beq.n	801502e <USBD_SetConfig+0xae>
 8014fc6:	e08d      	b.n	80150e4 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014fc8:	4b53      	ldr	r3, [pc, #332]	@ (8015118 <USBD_SetConfig+0x198>)
 8014fca:	781b      	ldrb	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d029      	beq.n	8015024 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 8014fd0:	4b51      	ldr	r3, [pc, #324]	@ (8015118 <USBD_SetConfig+0x198>)
 8014fd2:	781b      	ldrb	r3, [r3, #0]
 8014fd4:	001a      	movs	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014fda:	4b4f      	ldr	r3, [pc, #316]	@ (8015118 <USBD_SetConfig+0x198>)
 8014fdc:	781a      	ldrb	r2, [r3, #0]
 8014fde:	250f      	movs	r5, #15
 8014fe0:	197c      	adds	r4, r7, r5
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	0011      	movs	r1, r2
 8014fe6:	0018      	movs	r0, r3
 8014fe8:	f7fe feb4 	bl	8013d54 <USBD_SetClassConfig>
 8014fec:	0003      	movs	r3, r0
 8014fee:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8014ff0:	197b      	adds	r3, r7, r5
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d00b      	beq.n	8015010 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 8014ff8:	683a      	ldr	r2, [r7, #0]
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	0011      	movs	r1, r2
 8014ffe:	0018      	movs	r0, r3
 8015000:	f000 f996 	bl	8015330 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	23a7      	movs	r3, #167	@ 0xa7
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	2102      	movs	r1, #2
 801500c:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801500e:	e07b      	b.n	8015108 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	0018      	movs	r0, r3
 8015014:	f000 fa72 	bl	80154fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015018:	687a      	ldr	r2, [r7, #4]
 801501a:	23a7      	movs	r3, #167	@ 0xa7
 801501c:	009b      	lsls	r3, r3, #2
 801501e:	2103      	movs	r1, #3
 8015020:	54d1      	strb	r1, [r2, r3]
      break;
 8015022:	e071      	b.n	8015108 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	0018      	movs	r0, r3
 8015028:	f000 fa68 	bl	80154fc <USBD_CtlSendStatus>
      break;
 801502c:	e06c      	b.n	8015108 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801502e:	4b3a      	ldr	r3, [pc, #232]	@ (8015118 <USBD_SetConfig+0x198>)
 8015030:	781b      	ldrb	r3, [r3, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d115      	bne.n	8015062 <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015036:	687a      	ldr	r2, [r7, #4]
 8015038:	23a7      	movs	r3, #167	@ 0xa7
 801503a:	009b      	lsls	r3, r3, #2
 801503c:	2102      	movs	r1, #2
 801503e:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8015040:	4b35      	ldr	r3, [pc, #212]	@ (8015118 <USBD_SetConfig+0x198>)
 8015042:	781b      	ldrb	r3, [r3, #0]
 8015044:	001a      	movs	r2, r3
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801504a:	4b33      	ldr	r3, [pc, #204]	@ (8015118 <USBD_SetConfig+0x198>)
 801504c:	781a      	ldrb	r2, [r3, #0]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	0011      	movs	r1, r2
 8015052:	0018      	movs	r0, r3
 8015054:	f7fe fea3 	bl	8013d9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	0018      	movs	r0, r3
 801505c:	f000 fa4e 	bl	80154fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015060:	e052      	b.n	8015108 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 8015062:	4b2d      	ldr	r3, [pc, #180]	@ (8015118 <USBD_SetConfig+0x198>)
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	001a      	movs	r2, r3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	685b      	ldr	r3, [r3, #4]
 801506c:	429a      	cmp	r2, r3
 801506e:	d034      	beq.n	80150da <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	b2da      	uxtb	r2, r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	0011      	movs	r1, r2
 801507a:	0018      	movs	r0, r3
 801507c:	f7fe fe8f 	bl	8013d9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015080:	4b25      	ldr	r3, [pc, #148]	@ (8015118 <USBD_SetConfig+0x198>)
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	001a      	movs	r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801508a:	4b23      	ldr	r3, [pc, #140]	@ (8015118 <USBD_SetConfig+0x198>)
 801508c:	781a      	ldrb	r2, [r3, #0]
 801508e:	250f      	movs	r5, #15
 8015090:	197c      	adds	r4, r7, r5
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	0011      	movs	r1, r2
 8015096:	0018      	movs	r0, r3
 8015098:	f7fe fe5c 	bl	8013d54 <USBD_SetClassConfig>
 801509c:	0003      	movs	r3, r0
 801509e:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 80150a0:	197b      	adds	r3, r7, r5
 80150a2:	781b      	ldrb	r3, [r3, #0]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d013      	beq.n	80150d0 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 80150a8:	683a      	ldr	r2, [r7, #0]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	0011      	movs	r1, r2
 80150ae:	0018      	movs	r0, r3
 80150b0:	f000 f93e 	bl	8015330 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	b2da      	uxtb	r2, r3
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	0011      	movs	r1, r2
 80150be:	0018      	movs	r0, r3
 80150c0:	f7fe fe6d 	bl	8013d9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	23a7      	movs	r3, #167	@ 0xa7
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	2102      	movs	r1, #2
 80150cc:	54d1      	strb	r1, [r2, r3]
      break;
 80150ce:	e01b      	b.n	8015108 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	0018      	movs	r0, r3
 80150d4:	f000 fa12 	bl	80154fc <USBD_CtlSendStatus>
      break;
 80150d8:	e016      	b.n	8015108 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	0018      	movs	r0, r3
 80150de:	f000 fa0d 	bl	80154fc <USBD_CtlSendStatus>
      break;
 80150e2:	e011      	b.n	8015108 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 80150e4:	683a      	ldr	r2, [r7, #0]
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	0011      	movs	r1, r2
 80150ea:	0018      	movs	r0, r3
 80150ec:	f000 f920 	bl	8015330 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80150f0:	4b09      	ldr	r3, [pc, #36]	@ (8015118 <USBD_SetConfig+0x198>)
 80150f2:	781a      	ldrb	r2, [r3, #0]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	0011      	movs	r1, r2
 80150f8:	0018      	movs	r0, r3
 80150fa:	f7fe fe50 	bl	8013d9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80150fe:	230f      	movs	r3, #15
 8015100:	18fb      	adds	r3, r7, r3
 8015102:	2203      	movs	r2, #3
 8015104:	701a      	strb	r2, [r3, #0]
      break;
 8015106:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015108:	230f      	movs	r3, #15
 801510a:	18fb      	adds	r3, r7, r3
 801510c:	781b      	ldrb	r3, [r3, #0]
}
 801510e:	0018      	movs	r0, r3
 8015110:	46bd      	mov	sp, r7
 8015112:	b004      	add	sp, #16
 8015114:	bdb0      	pop	{r4, r5, r7, pc}
 8015116:	46c0      	nop			@ (mov r8, r8)
 8015118:	20000631 	.word	0x20000631

0801511c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b082      	sub	sp, #8
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
 8015124:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	88db      	ldrh	r3, [r3, #6]
 801512a:	2b01      	cmp	r3, #1
 801512c:	d006      	beq.n	801513c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801512e:	683a      	ldr	r2, [r7, #0]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	0011      	movs	r1, r2
 8015134:	0018      	movs	r0, r3
 8015136:	f000 f8fb 	bl	8015330 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801513a:	e027      	b.n	801518c <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	23a7      	movs	r3, #167	@ 0xa7
 8015140:	009b      	lsls	r3, r3, #2
 8015142:	5cd3      	ldrb	r3, [r2, r3]
 8015144:	b2db      	uxtb	r3, r3
 8015146:	2b02      	cmp	r3, #2
 8015148:	dc02      	bgt.n	8015150 <USBD_GetConfig+0x34>
 801514a:	2b00      	cmp	r3, #0
 801514c:	dc03      	bgt.n	8015156 <USBD_GetConfig+0x3a>
 801514e:	e016      	b.n	801517e <USBD_GetConfig+0x62>
 8015150:	2b03      	cmp	r3, #3
 8015152:	d00c      	beq.n	801516e <USBD_GetConfig+0x52>
 8015154:	e013      	b.n	801517e <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2200      	movs	r2, #0
 801515a:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	3308      	adds	r3, #8
 8015160:	0019      	movs	r1, r3
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2201      	movs	r2, #1
 8015166:	0018      	movs	r0, r3
 8015168:	f000 f96a 	bl	8015440 <USBD_CtlSendData>
        break;
 801516c:	e00e      	b.n	801518c <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	1d19      	adds	r1, r3, #4
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2201      	movs	r2, #1
 8015176:	0018      	movs	r0, r3
 8015178:	f000 f962 	bl	8015440 <USBD_CtlSendData>
        break;
 801517c:	e006      	b.n	801518c <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	0011      	movs	r1, r2
 8015184:	0018      	movs	r0, r3
 8015186:	f000 f8d3 	bl	8015330 <USBD_CtlError>
        break;
 801518a:	46c0      	nop			@ (mov r8, r8)
}
 801518c:	46c0      	nop			@ (mov r8, r8)
 801518e:	46bd      	mov	sp, r7
 8015190:	b002      	add	sp, #8
 8015192:	bd80      	pop	{r7, pc}

08015194 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	23a7      	movs	r3, #167	@ 0xa7
 80151a2:	009b      	lsls	r3, r3, #2
 80151a4:	5cd3      	ldrb	r3, [r2, r3]
 80151a6:	b2db      	uxtb	r3, r3
 80151a8:	3b01      	subs	r3, #1
 80151aa:	2b02      	cmp	r3, #2
 80151ac:	d822      	bhi.n	80151f4 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	88db      	ldrh	r3, [r3, #6]
 80151b2:	2b02      	cmp	r3, #2
 80151b4:	d006      	beq.n	80151c4 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 80151b6:	683a      	ldr	r2, [r7, #0]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	0011      	movs	r1, r2
 80151bc:	0018      	movs	r0, r3
 80151be:	f000 f8b7 	bl	8015330 <USBD_CtlError>
        break;
 80151c2:	e01e      	b.n	8015202 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2201      	movs	r2, #1
 80151c8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80151ca:	687a      	ldr	r2, [r7, #4]
 80151cc:	23a9      	movs	r3, #169	@ 0xa9
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	58d3      	ldr	r3, [r2, r3]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d005      	beq.n	80151e2 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	68db      	ldr	r3, [r3, #12]
 80151da:	2202      	movs	r2, #2
 80151dc:	431a      	orrs	r2, r3
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	330c      	adds	r3, #12
 80151e6:	0019      	movs	r1, r3
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2202      	movs	r2, #2
 80151ec:	0018      	movs	r0, r3
 80151ee:	f000 f927 	bl	8015440 <USBD_CtlSendData>
      break;
 80151f2:	e006      	b.n	8015202 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 80151f4:	683a      	ldr	r2, [r7, #0]
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	0011      	movs	r1, r2
 80151fa:	0018      	movs	r0, r3
 80151fc:	f000 f898 	bl	8015330 <USBD_CtlError>
      break;
 8015200:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015202:	46c0      	nop			@ (mov r8, r8)
 8015204:	46bd      	mov	sp, r7
 8015206:	b002      	add	sp, #8
 8015208:	bd80      	pop	{r7, pc}

0801520a <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801520a:	b580      	push	{r7, lr}
 801520c:	b082      	sub	sp, #8
 801520e:	af00      	add	r7, sp, #0
 8015210:	6078      	str	r0, [r7, #4]
 8015212:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	885b      	ldrh	r3, [r3, #2]
 8015218:	2b01      	cmp	r3, #1
 801521a:	d109      	bne.n	8015230 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 801521c:	687a      	ldr	r2, [r7, #4]
 801521e:	23a9      	movs	r3, #169	@ 0xa9
 8015220:	009b      	lsls	r3, r3, #2
 8015222:	2101      	movs	r1, #1
 8015224:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	0018      	movs	r0, r3
 801522a:	f000 f967 	bl	80154fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801522e:	e017      	b.n	8015260 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	885b      	ldrh	r3, [r3, #2]
 8015234:	2b02      	cmp	r3, #2
 8015236:	d10d      	bne.n	8015254 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	889b      	ldrh	r3, [r3, #4]
 801523c:	0a1b      	lsrs	r3, r3, #8
 801523e:	b29b      	uxth	r3, r3
 8015240:	b2d9      	uxtb	r1, r3
 8015242:	687a      	ldr	r2, [r7, #4]
 8015244:	23a8      	movs	r3, #168	@ 0xa8
 8015246:	009b      	lsls	r3, r3, #2
 8015248:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	0018      	movs	r0, r3
 801524e:	f000 f955 	bl	80154fc <USBD_CtlSendStatus>
}
 8015252:	e005      	b.n	8015260 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 8015254:	683a      	ldr	r2, [r7, #0]
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	0011      	movs	r1, r2
 801525a:	0018      	movs	r0, r3
 801525c:	f000 f868 	bl	8015330 <USBD_CtlError>
}
 8015260:	46c0      	nop			@ (mov r8, r8)
 8015262:	46bd      	mov	sp, r7
 8015264:	b002      	add	sp, #8
 8015266:	bd80      	pop	{r7, pc}

08015268 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015272:	687a      	ldr	r2, [r7, #4]
 8015274:	23a7      	movs	r3, #167	@ 0xa7
 8015276:	009b      	lsls	r3, r3, #2
 8015278:	5cd3      	ldrb	r3, [r2, r3]
 801527a:	b2db      	uxtb	r3, r3
 801527c:	3b01      	subs	r3, #1
 801527e:	2b02      	cmp	r3, #2
 8015280:	d80d      	bhi.n	801529e <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	885b      	ldrh	r3, [r3, #2]
 8015286:	2b01      	cmp	r3, #1
 8015288:	d110      	bne.n	80152ac <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 801528a:	687a      	ldr	r2, [r7, #4]
 801528c:	23a9      	movs	r3, #169	@ 0xa9
 801528e:	009b      	lsls	r3, r3, #2
 8015290:	2100      	movs	r1, #0
 8015292:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	0018      	movs	r0, r3
 8015298:	f000 f930 	bl	80154fc <USBD_CtlSendStatus>
      }
      break;
 801529c:	e006      	b.n	80152ac <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 801529e:	683a      	ldr	r2, [r7, #0]
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	0011      	movs	r1, r2
 80152a4:	0018      	movs	r0, r3
 80152a6:	f000 f843 	bl	8015330 <USBD_CtlError>
      break;
 80152aa:	e000      	b.n	80152ae <USBD_ClrFeature+0x46>
      break;
 80152ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 80152ae:	46c0      	nop			@ (mov r8, r8)
 80152b0:	46bd      	mov	sp, r7
 80152b2:	b002      	add	sp, #8
 80152b4:	bd80      	pop	{r7, pc}

080152b6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80152b6:	b580      	push	{r7, lr}
 80152b8:	b084      	sub	sp, #16
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	6078      	str	r0, [r7, #4]
 80152be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	781a      	ldrb	r2, [r3, #0]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	3301      	adds	r3, #1
 80152d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	781a      	ldrb	r2, [r3, #0]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	3301      	adds	r3, #1
 80152de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	0018      	movs	r0, r3
 80152e4:	f7ff f8e6 	bl	80144b4 <SWAPBYTE>
 80152e8:	0003      	movs	r3, r0
 80152ea:	001a      	movs	r2, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	3301      	adds	r3, #1
 80152f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	3301      	adds	r3, #1
 80152fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	0018      	movs	r0, r3
 8015300:	f7ff f8d8 	bl	80144b4 <SWAPBYTE>
 8015304:	0003      	movs	r3, r0
 8015306:	001a      	movs	r2, r3
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	3301      	adds	r3, #1
 8015310:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	3301      	adds	r3, #1
 8015316:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	0018      	movs	r0, r3
 801531c:	f7ff f8ca 	bl	80144b4 <SWAPBYTE>
 8015320:	0003      	movs	r3, r0
 8015322:	001a      	movs	r2, r3
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	80da      	strh	r2, [r3, #6]
}
 8015328:	46c0      	nop			@ (mov r8, r8)
 801532a:	46bd      	mov	sp, r7
 801532c:	b004      	add	sp, #16
 801532e:	bd80      	pop	{r7, pc}

08015330 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
 8015338:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	2180      	movs	r1, #128	@ 0x80
 801533e:	0018      	movs	r0, r3
 8015340:	f001 f90d 	bl	801655e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2100      	movs	r1, #0
 8015348:	0018      	movs	r0, r3
 801534a:	f001 f908 	bl	801655e <USBD_LL_StallEP>
}
 801534e:	46c0      	nop			@ (mov r8, r8)
 8015350:	46bd      	mov	sp, r7
 8015352:	b002      	add	sp, #8
 8015354:	bd80      	pop	{r7, pc}

08015356 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015356:	b590      	push	{r4, r7, lr}
 8015358:	b087      	sub	sp, #28
 801535a:	af00      	add	r7, sp, #0
 801535c:	60f8      	str	r0, [r7, #12]
 801535e:	60b9      	str	r1, [r7, #8]
 8015360:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015362:	2417      	movs	r4, #23
 8015364:	193b      	adds	r3, r7, r4
 8015366:	2200      	movs	r2, #0
 8015368:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d044      	beq.n	80153fa <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015374:	693b      	ldr	r3, [r7, #16]
 8015376:	0018      	movs	r0, r3
 8015378:	f000 f843 	bl	8015402 <USBD_GetLen>
 801537c:	0003      	movs	r3, r0
 801537e:	3301      	adds	r3, #1
 8015380:	b29b      	uxth	r3, r3
 8015382:	18db      	adds	r3, r3, r3
 8015384:	b29a      	uxth	r2, r3
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801538a:	193b      	adds	r3, r7, r4
 801538c:	781b      	ldrb	r3, [r3, #0]
 801538e:	68ba      	ldr	r2, [r7, #8]
 8015390:	18d3      	adds	r3, r2, r3
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	7812      	ldrb	r2, [r2, #0]
 8015396:	701a      	strb	r2, [r3, #0]
  idx++;
 8015398:	193b      	adds	r3, r7, r4
 801539a:	781a      	ldrb	r2, [r3, #0]
 801539c:	193b      	adds	r3, r7, r4
 801539e:	3201      	adds	r2, #1
 80153a0:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80153a2:	193b      	adds	r3, r7, r4
 80153a4:	781b      	ldrb	r3, [r3, #0]
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	18d3      	adds	r3, r2, r3
 80153aa:	2203      	movs	r2, #3
 80153ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80153ae:	193b      	adds	r3, r7, r4
 80153b0:	781a      	ldrb	r2, [r3, #0]
 80153b2:	193b      	adds	r3, r7, r4
 80153b4:	3201      	adds	r2, #1
 80153b6:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 80153b8:	e01a      	b.n	80153f0 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 80153ba:	2117      	movs	r1, #23
 80153bc:	187b      	adds	r3, r7, r1
 80153be:	781b      	ldrb	r3, [r3, #0]
 80153c0:	68ba      	ldr	r2, [r7, #8]
 80153c2:	18d3      	adds	r3, r2, r3
 80153c4:	693a      	ldr	r2, [r7, #16]
 80153c6:	7812      	ldrb	r2, [r2, #0]
 80153c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	3301      	adds	r3, #1
 80153ce:	613b      	str	r3, [r7, #16]
    idx++;
 80153d0:	187b      	adds	r3, r7, r1
 80153d2:	781a      	ldrb	r2, [r3, #0]
 80153d4:	187b      	adds	r3, r7, r1
 80153d6:	3201      	adds	r2, #1
 80153d8:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 80153da:	187b      	adds	r3, r7, r1
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	68ba      	ldr	r2, [r7, #8]
 80153e0:	18d3      	adds	r3, r2, r3
 80153e2:	2200      	movs	r2, #0
 80153e4:	701a      	strb	r2, [r3, #0]
    idx++;
 80153e6:	187b      	adds	r3, r7, r1
 80153e8:	781a      	ldrb	r2, [r3, #0]
 80153ea:	187b      	adds	r3, r7, r1
 80153ec:	3201      	adds	r2, #1
 80153ee:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d1e0      	bne.n	80153ba <USBD_GetString+0x64>
 80153f8:	e000      	b.n	80153fc <USBD_GetString+0xa6>
    return;
 80153fa:	46c0      	nop			@ (mov r8, r8)
  }
}
 80153fc:	46bd      	mov	sp, r7
 80153fe:	b007      	add	sp, #28
 8015400:	bd90      	pop	{r4, r7, pc}

08015402 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015402:	b580      	push	{r7, lr}
 8015404:	b084      	sub	sp, #16
 8015406:	af00      	add	r7, sp, #0
 8015408:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801540a:	230f      	movs	r3, #15
 801540c:	18fb      	adds	r3, r7, r3
 801540e:	2200      	movs	r2, #0
 8015410:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015416:	e008      	b.n	801542a <USBD_GetLen+0x28>
  {
    len++;
 8015418:	210f      	movs	r1, #15
 801541a:	187b      	adds	r3, r7, r1
 801541c:	781a      	ldrb	r2, [r3, #0]
 801541e:	187b      	adds	r3, r7, r1
 8015420:	3201      	adds	r2, #1
 8015422:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	3301      	adds	r3, #1
 8015428:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	781b      	ldrb	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d1f2      	bne.n	8015418 <USBD_GetLen+0x16>
  }

  return len;
 8015432:	230f      	movs	r3, #15
 8015434:	18fb      	adds	r3, r7, r3
 8015436:	781b      	ldrb	r3, [r3, #0]
}
 8015438:	0018      	movs	r0, r3
 801543a:	46bd      	mov	sp, r7
 801543c:	b004      	add	sp, #16
 801543e:	bd80      	pop	{r7, pc}

08015440 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	23a5      	movs	r3, #165	@ 0xa5
 8015450:	009b      	lsls	r3, r3, #2
 8015452:	2102      	movs	r1, #2
 8015454:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	687a      	ldr	r2, [r7, #4]
 801545a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	687a      	ldr	r2, [r7, #4]
 8015460:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	68ba      	ldr	r2, [r7, #8]
 8015466:	68f8      	ldr	r0, [r7, #12]
 8015468:	2100      	movs	r1, #0
 801546a:	f001 f929 	bl	80166c0 <USBD_LL_Transmit>

  return USBD_OK;
 801546e:	2300      	movs	r3, #0
}
 8015470:	0018      	movs	r0, r3
 8015472:	46bd      	mov	sp, r7
 8015474:	b004      	add	sp, #16
 8015476:	bd80      	pop	{r7, pc}

08015478 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	60b9      	str	r1, [r7, #8]
 8015482:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	68ba      	ldr	r2, [r7, #8]
 8015488:	68f8      	ldr	r0, [r7, #12]
 801548a:	2100      	movs	r1, #0
 801548c:	f001 f918 	bl	80166c0 <USBD_LL_Transmit>

  return USBD_OK;
 8015490:	2300      	movs	r3, #0
}
 8015492:	0018      	movs	r0, r3
 8015494:	46bd      	mov	sp, r7
 8015496:	b004      	add	sp, #16
 8015498:	bd80      	pop	{r7, pc}

0801549a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801549a:	b580      	push	{r7, lr}
 801549c:	b084      	sub	sp, #16
 801549e:	af00      	add	r7, sp, #0
 80154a0:	60f8      	str	r0, [r7, #12]
 80154a2:	60b9      	str	r1, [r7, #8]
 80154a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80154a6:	68fa      	ldr	r2, [r7, #12]
 80154a8:	23a5      	movs	r3, #165	@ 0xa5
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	2103      	movs	r1, #3
 80154ae:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80154b0:	68fa      	ldr	r2, [r7, #12]
 80154b2:	23ac      	movs	r3, #172	@ 0xac
 80154b4:	005b      	lsls	r3, r3, #1
 80154b6:	6879      	ldr	r1, [r7, #4]
 80154b8:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80154ba:	68fa      	ldr	r2, [r7, #12]
 80154bc:	23ae      	movs	r3, #174	@ 0xae
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	6879      	ldr	r1, [r7, #4]
 80154c2:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	68ba      	ldr	r2, [r7, #8]
 80154c8:	68f8      	ldr	r0, [r7, #12]
 80154ca:	2100      	movs	r1, #0
 80154cc:	f001 f928 	bl	8016720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80154d0:	2300      	movs	r3, #0
}
 80154d2:	0018      	movs	r0, r3
 80154d4:	46bd      	mov	sp, r7
 80154d6:	b004      	add	sp, #16
 80154d8:	bd80      	pop	{r7, pc}

080154da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80154da:	b580      	push	{r7, lr}
 80154dc:	b084      	sub	sp, #16
 80154de:	af00      	add	r7, sp, #0
 80154e0:	60f8      	str	r0, [r7, #12]
 80154e2:	60b9      	str	r1, [r7, #8]
 80154e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	68ba      	ldr	r2, [r7, #8]
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	2100      	movs	r1, #0
 80154ee:	f001 f917 	bl	8016720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80154f2:	2300      	movs	r3, #0
}
 80154f4:	0018      	movs	r0, r3
 80154f6:	46bd      	mov	sp, r7
 80154f8:	b004      	add	sp, #16
 80154fa:	bd80      	pop	{r7, pc}

080154fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	23a5      	movs	r3, #165	@ 0xa5
 8015508:	009b      	lsls	r3, r3, #2
 801550a:	2104      	movs	r1, #4
 801550c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	2300      	movs	r3, #0
 8015512:	2200      	movs	r2, #0
 8015514:	2100      	movs	r1, #0
 8015516:	f001 f8d3 	bl	80166c0 <USBD_LL_Transmit>

  return USBD_OK;
 801551a:	2300      	movs	r3, #0
}
 801551c:	0018      	movs	r0, r3
 801551e:	46bd      	mov	sp, r7
 8015520:	b002      	add	sp, #8
 8015522:	bd80      	pop	{r7, pc}

08015524 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b082      	sub	sp, #8
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801552c:	687a      	ldr	r2, [r7, #4]
 801552e:	23a5      	movs	r3, #165	@ 0xa5
 8015530:	009b      	lsls	r3, r3, #2
 8015532:	2105      	movs	r1, #5
 8015534:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015536:	6878      	ldr	r0, [r7, #4]
 8015538:	2300      	movs	r3, #0
 801553a:	2200      	movs	r2, #0
 801553c:	2100      	movs	r1, #0
 801553e:	f001 f8ef 	bl	8016720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015542:	2300      	movs	r3, #0
}
 8015544:	0018      	movs	r0, r3
 8015546:	46bd      	mov	sp, r7
 8015548:	b002      	add	sp, #8
 801554a:	bd80      	pop	{r7, pc}

0801554c <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8015550:	f7fc fc62 	bl	8011e18 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8015554:	f000 f816 	bl	8015584 <USBPD_DPM_InitCore>
 8015558:	1e03      	subs	r3, r0, #0
 801555a:	d001      	beq.n	8015560 <MX_USBPD_Init+0x14>
  {
    while(1);
 801555c:	46c0      	nop			@ (mov r8, r8)
 801555e:	e7fd      	b.n	801555c <MX_USBPD_Init+0x10>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8015560:	f000 fa88 	bl	8015a74 <USBPD_DPM_UserInit>
 8015564:	1e03      	subs	r3, r0, #0
 8015566:	d001      	beq.n	801556c <MX_USBPD_Init+0x20>
  {
    while(1);
 8015568:	46c0      	nop			@ (mov r8, r8)
 801556a:	e7fd      	b.n	8015568 <MX_USBPD_Init+0x1c>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801556c:	f000 f8e0 	bl	8015730 <USBPD_DPM_InitOS>
 8015570:	1e03      	subs	r3, r0, #0
 8015572:	d001      	beq.n	8015578 <MX_USBPD_Init+0x2c>
  {
    while(1);
 8015574:	46c0      	nop			@ (mov r8, r8)
 8015576:	e7fd      	b.n	8015574 <MX_USBPD_Init+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 8015578:	b662      	cpsie	i
}
 801557a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801557c:	46c0      	nop			@ (mov r8, r8)
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}
	...

08015584 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8015584:	b5b0      	push	{r4, r5, r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801558a:	1dfb      	adds	r3, r7, #7
 801558c:	2200      	movs	r2, #0
 801558e:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8015590:	4b62      	ldr	r3, [pc, #392]	@ (801571c <USBPD_DPM_InitCore+0x198>)
 8015592:	0018      	movs	r0, r3
 8015594:	f7eb ffa2 	bl	80014dc <USBPD_PE_CheckLIB>
 8015598:	0003      	movs	r3, r0
 801559a:	2b01      	cmp	r3, #1
 801559c:	d003      	beq.n	80155a6 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 801559e:	1dfb      	adds	r3, r7, #7
 80155a0:	2202      	movs	r2, #2
 80155a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80155a4:	e0b4      	b.n	8015710 <USBPD_DPM_InitCore+0x18c>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 80155a6:	f7eb ffa7 	bl	80014f8 <USBPD_PE_GetMemoryConsumption>
 80155aa:	0003      	movs	r3, r0
 80155ac:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 80155ae:	1dbb      	adds	r3, r7, #6
 80155b0:	2200      	movs	r2, #0
 80155b2:	701a      	strb	r2, [r3, #0]
 80155b4:	e0a6      	b.n	8015704 <USBPD_DPM_InitCore+0x180>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 80155b6:	1dbb      	adds	r3, r7, #6
 80155b8:	781b      	ldrb	r3, [r3, #0]
 80155ba:	4a59      	ldr	r2, [pc, #356]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 80155bc:	009b      	lsls	r3, r3, #2
 80155be:	18d3      	adds	r3, r2, r3
 80155c0:	785a      	ldrb	r2, [r3, #1]
 80155c2:	2108      	movs	r1, #8
 80155c4:	438a      	bics	r2, r1
 80155c6:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 80155c8:	1dbb      	adds	r3, r7, #6
 80155ca:	781a      	ldrb	r2, [r3, #0]
 80155cc:	1dbb      	adds	r3, r7, #6
 80155ce:	7818      	ldrb	r0, [r3, #0]
 80155d0:	4954      	ldr	r1, [pc, #336]	@ (8015724 <USBPD_DPM_InitCore+0x1a0>)
 80155d2:	0013      	movs	r3, r2
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	189b      	adds	r3, r3, r2
 80155d8:	009b      	lsls	r3, r3, #2
 80155da:	18cb      	adds	r3, r1, r3
 80155dc:	791b      	ldrb	r3, [r3, #4]
 80155de:	079b      	lsls	r3, r3, #30
 80155e0:	0f9b      	lsrs	r3, r3, #30
 80155e2:	b2d9      	uxtb	r1, r3
 80155e4:	4b4e      	ldr	r3, [pc, #312]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 80155e6:	0082      	lsls	r2, r0, #2
 80155e8:	2003      	movs	r0, #3
 80155ea:	4001      	ands	r1, r0
 80155ec:	000c      	movs	r4, r1
 80155ee:	5cd1      	ldrb	r1, [r2, r3]
 80155f0:	2003      	movs	r0, #3
 80155f2:	4381      	bics	r1, r0
 80155f4:	1c08      	adds	r0, r1, #0
 80155f6:	1c21      	adds	r1, r4, #0
 80155f8:	4301      	orrs	r1, r0
 80155fa:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 80155fc:	1dbb      	adds	r3, r7, #6
 80155fe:	781a      	ldrb	r2, [r3, #0]
 8015600:	1dbb      	adds	r3, r7, #6
 8015602:	7818      	ldrb	r0, [r3, #0]
 8015604:	4947      	ldr	r1, [pc, #284]	@ (8015724 <USBPD_DPM_InitCore+0x1a0>)
 8015606:	0013      	movs	r3, r2
 8015608:	005b      	lsls	r3, r3, #1
 801560a:	189b      	adds	r3, r3, r2
 801560c:	009b      	lsls	r3, r3, #2
 801560e:	18cb      	adds	r3, r1, r3
 8015610:	791b      	ldrb	r3, [r3, #4]
 8015612:	075b      	lsls	r3, r3, #29
 8015614:	0fdb      	lsrs	r3, r3, #31
 8015616:	b2d9      	uxtb	r1, r3
 8015618:	4b41      	ldr	r3, [pc, #260]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 801561a:	0082      	lsls	r2, r0, #2
 801561c:	2001      	movs	r0, #1
 801561e:	4001      	ands	r1, r0
 8015620:	008c      	lsls	r4, r1, #2
 8015622:	5cd1      	ldrb	r1, [r2, r3]
 8015624:	2004      	movs	r0, #4
 8015626:	4381      	bics	r1, r0
 8015628:	1c08      	adds	r0, r1, #0
 801562a:	1c21      	adds	r1, r4, #0
 801562c:	4301      	orrs	r1, r0
 801562e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8015630:	1dbb      	adds	r3, r7, #6
 8015632:	781a      	ldrb	r2, [r3, #0]
 8015634:	4b3a      	ldr	r3, [pc, #232]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 8015636:	0092      	lsls	r2, r2, #2
 8015638:	5cd1      	ldrb	r1, [r2, r3]
 801563a:	2010      	movs	r0, #16
 801563c:	4381      	bics	r1, r0
 801563e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8015640:	1dbb      	adds	r3, r7, #6
 8015642:	781a      	ldrb	r2, [r3, #0]
 8015644:	4b36      	ldr	r3, [pc, #216]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 8015646:	0092      	lsls	r2, r2, #2
 8015648:	5cd1      	ldrb	r1, [r2, r3]
 801564a:	203f      	movs	r0, #63	@ 0x3f
 801564c:	4001      	ands	r1, r0
 801564e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8015650:	1dbb      	adds	r3, r7, #6
 8015652:	781b      	ldrb	r3, [r3, #0]
 8015654:	4a32      	ldr	r2, [pc, #200]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 8015656:	009b      	lsls	r3, r3, #2
 8015658:	18d3      	adds	r3, r2, r3
 801565a:	785a      	ldrb	r2, [r3, #1]
 801565c:	2160      	movs	r1, #96	@ 0x60
 801565e:	438a      	bics	r2, r1
 8015660:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8015662:	1dbb      	adds	r3, r7, #6
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	4a2e      	ldr	r2, [pc, #184]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 8015668:	009b      	lsls	r3, r3, #2
 801566a:	18d3      	adds	r3, r2, r3
 801566c:	785a      	ldrb	r2, [r3, #1]
 801566e:	217f      	movs	r1, #127	@ 0x7f
 8015670:	400a      	ands	r2, r1
 8015672:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 8015674:	1dbb      	adds	r3, r7, #6
 8015676:	781a      	ldrb	r2, [r3, #0]
 8015678:	0013      	movs	r3, r2
 801567a:	005b      	lsls	r3, r3, #1
 801567c:	189b      	adds	r3, r3, r2
 801567e:	009b      	lsls	r3, r3, #2
 8015680:	4a28      	ldr	r2, [pc, #160]	@ (8015724 <USBPD_DPM_InitCore+0x1a0>)
 8015682:	189c      	adds	r4, r3, r2
 8015684:	1dbb      	adds	r3, r7, #6
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	009a      	lsls	r2, r3, #2
 801568a:	4b25      	ldr	r3, [pc, #148]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 801568c:	18d2      	adds	r2, r2, r3
 801568e:	4926      	ldr	r1, [pc, #152]	@ (8015728 <USBPD_DPM_InitCore+0x1a4>)
 8015690:	1dbb      	adds	r3, r7, #6
 8015692:	7818      	ldrb	r0, [r3, #0]
 8015694:	0013      	movs	r3, r2
 8015696:	0022      	movs	r2, r4
 8015698:	f7ea fd36 	bl	8000108 <USBPD_CAD_Init>
 801569c:	1e03      	subs	r3, r0, #0
 801569e:	d003      	beq.n	80156a8 <USBPD_DPM_InitCore+0x124>
 80156a0:	1dfb      	adds	r3, r7, #7
 80156a2:	2202      	movs	r2, #2
 80156a4:	701a      	strb	r2, [r3, #0]
 80156a6:	e033      	b.n	8015710 <USBPD_DPM_InitCore+0x18c>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 80156a8:	1dbb      	adds	r3, r7, #6
 80156aa:	781a      	ldrb	r2, [r3, #0]
 80156ac:	0013      	movs	r3, r2
 80156ae:	005b      	lsls	r3, r3, #1
 80156b0:	189b      	adds	r3, r3, r2
 80156b2:	009b      	lsls	r3, r3, #2
 80156b4:	4a1b      	ldr	r2, [pc, #108]	@ (8015724 <USBPD_DPM_InitCore+0x1a0>)
 80156b6:	1899      	adds	r1, r3, r2
 80156b8:	1dbb      	adds	r3, r7, #6
 80156ba:	781b      	ldrb	r3, [r3, #0]
 80156bc:	009a      	lsls	r2, r3, #2
 80156be:	4b18      	ldr	r3, [pc, #96]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 80156c0:	18d2      	adds	r2, r2, r3
 80156c2:	1dfc      	adds	r4, r7, #7
 80156c4:	4d19      	ldr	r5, [pc, #100]	@ (801572c <USBPD_DPM_InitCore+0x1a8>)
 80156c6:	1dbb      	adds	r3, r7, #6
 80156c8:	7818      	ldrb	r0, [r3, #0]
 80156ca:	002b      	movs	r3, r5
 80156cc:	f7ea fdfa 	bl	80002c4 <USBPD_PE_Init>
 80156d0:	0003      	movs	r3, r0
 80156d2:	7023      	strb	r3, [r4, #0]
 80156d4:	1dfb      	adds	r3, r7, #7
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d119      	bne.n	8015710 <USBPD_DPM_InitCore+0x18c>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 80156dc:	1dbb      	adds	r3, r7, #6
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	4a0f      	ldr	r2, [pc, #60]	@ (8015720 <USBPD_DPM_InitCore+0x19c>)
 80156e2:	009b      	lsls	r3, r3, #2
 80156e4:	18d3      	adds	r3, r2, r3
 80156e6:	785a      	ldrb	r2, [r3, #1]
 80156e8:	2108      	movs	r1, #8
 80156ea:	430a      	orrs	r2, r1
 80156ec:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 80156ee:	1dbb      	adds	r3, r7, #6
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	2101      	movs	r1, #1
 80156f4:	0018      	movs	r0, r3
 80156f6:	f7ea fd34 	bl	8000162 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 80156fa:	1dbb      	adds	r3, r7, #6
 80156fc:	1dba      	adds	r2, r7, #6
 80156fe:	7812      	ldrb	r2, [r2, #0]
 8015700:	3201      	adds	r2, #1
 8015702:	701a      	strb	r2, [r3, #0]
 8015704:	1dbb      	adds	r3, r7, #6
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	2b01      	cmp	r3, #1
 801570a:	d800      	bhi.n	801570e <USBPD_DPM_InitCore+0x18a>
 801570c:	e753      	b.n	80155b6 <USBPD_DPM_InitCore+0x32>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 801570e:	46c0      	nop			@ (mov r8, r8)
  return _retr;
 8015710:	1dfb      	adds	r3, r7, #7
 8015712:	781b      	ldrb	r3, [r3, #0]
}
 8015714:	0018      	movs	r0, r3
 8015716:	46bd      	mov	sp, r7
 8015718:	b002      	add	sp, #8
 801571a:	bdb0      	pop	{r4, r5, r7, pc}
 801571c:	30410000 	.word	0x30410000
 8015720:	2000064c 	.word	0x2000064c
 8015724:	2000009c 	.word	0x2000009c
 8015728:	080174a4 	.word	0x080174a4
 801572c:	080174ac 	.word	0x080174ac

08015730 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8015736:	1dfb      	adds	r3, r7, #7
 8015738:	2200      	movs	r2, #0
 801573a:	701a      	strb	r2, [r3, #0]

  return _retr;
 801573c:	1dfb      	adds	r3, r7, #7
 801573e:	781b      	ldrb	r3, [r3, #0]
}
 8015740:	0018      	movs	r0, r3
 8015742:	46bd      	mov	sp, r7
 8015744:	b002      	add	sp, #8
 8015746:	bd80      	pop	{r7, pc}

08015748 <USBPD_DPM_Run>:
  USBPD_DPM_UserExecute(NULL);
}
#endif /* USE_STM32_UTILITY_OS */

void USBPD_DPM_Run(void)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b082      	sub	sp, #8
 801574c:	af00      	add	r7, sp, #0
    UTIL_SEQ_Run(~0);
  } while (1u == 1u);
#else /* !USE_STM32_UTILITY_OS */
  do
  {
    if ((HAL_GetTick() - DPM_Sleep_start[USBPD_PORT_COUNT]) >= DPM_Sleep_time[USBPD_PORT_COUNT])
 801574e:	f7f2 fddd 	bl	800830c <HAL_GetTick>
 8015752:	0002      	movs	r2, r0
 8015754:	4b1f      	ldr	r3, [pc, #124]	@ (80157d4 <USBPD_DPM_Run+0x8c>)
 8015756:	689b      	ldr	r3, [r3, #8]
 8015758:	1ad2      	subs	r2, r2, r3
 801575a:	4b1f      	ldr	r3, [pc, #124]	@ (80157d8 <USBPD_DPM_Run+0x90>)
 801575c:	689b      	ldr	r3, [r3, #8]
 801575e:	429a      	cmp	r2, r3
 8015760:	d309      	bcc.n	8015776 <USBPD_DPM_Run+0x2e>
    {
      DPM_Sleep_time[USBPD_PORT_COUNT] = USBPD_CAD_Process();
 8015762:	f7ea fd05 	bl	8000170 <USBPD_CAD_Process>
 8015766:	0002      	movs	r2, r0
 8015768:	4b1b      	ldr	r3, [pc, #108]	@ (80157d8 <USBPD_DPM_Run+0x90>)
 801576a:	609a      	str	r2, [r3, #8]
      DPM_Sleep_start[USBPD_PORT_COUNT] = HAL_GetTick();
 801576c:	f7f2 fdce 	bl	800830c <HAL_GetTick>
 8015770:	0002      	movs	r2, r0
 8015772:	4b18      	ldr	r3, [pc, #96]	@ (80157d4 <USBPD_DPM_Run+0x8c>)
 8015774:	609a      	str	r2, [r3, #8]
    }

    uint32_t port = 0;
 8015776:	2300      	movs	r3, #0
 8015778:	607b      	str	r3, [r7, #4]

    for (port = 0; port < USBPD_PORT_COUNT; port++)
 801577a:	2300      	movs	r3, #0
 801577c:	607b      	str	r3, [r7, #4]
 801577e:	e021      	b.n	80157c4 <USBPD_DPM_Run+0x7c>
    {
      if ((HAL_GetTick() - DPM_Sleep_start[port]) >= DPM_Sleep_time[port])
 8015780:	f7f2 fdc4 	bl	800830c <HAL_GetTick>
 8015784:	0001      	movs	r1, r0
 8015786:	4b13      	ldr	r3, [pc, #76]	@ (80157d4 <USBPD_DPM_Run+0x8c>)
 8015788:	687a      	ldr	r2, [r7, #4]
 801578a:	0092      	lsls	r2, r2, #2
 801578c:	58d3      	ldr	r3, [r2, r3]
 801578e:	1aca      	subs	r2, r1, r3
 8015790:	4b11      	ldr	r3, [pc, #68]	@ (80157d8 <USBPD_DPM_Run+0x90>)
 8015792:	6879      	ldr	r1, [r7, #4]
 8015794:	0089      	lsls	r1, r1, #2
 8015796:	58cb      	ldr	r3, [r1, r3]
 8015798:	429a      	cmp	r2, r3
 801579a:	d310      	bcc.n	80157be <USBPD_DPM_Run+0x76>
      {
        DPM_Sleep_time[port] =
          USBPD_PE_StateMachine_SNK(port);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	b2db      	uxtb	r3, r3
 80157a0:	0018      	movs	r0, r3
 80157a2:	f7ec fb41 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 80157a6:	0001      	movs	r1, r0
        DPM_Sleep_time[port] =
 80157a8:	4b0b      	ldr	r3, [pc, #44]	@ (80157d8 <USBPD_DPM_Run+0x90>)
 80157aa:	687a      	ldr	r2, [r7, #4]
 80157ac:	0092      	lsls	r2, r2, #2
 80157ae:	50d1      	str	r1, [r2, r3]
        DPM_Sleep_start[port] = HAL_GetTick();
 80157b0:	f7f2 fdac 	bl	800830c <HAL_GetTick>
 80157b4:	0001      	movs	r1, r0
 80157b6:	4b07      	ldr	r3, [pc, #28]	@ (80157d4 <USBPD_DPM_Run+0x8c>)
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	0092      	lsls	r2, r2, #2
 80157bc:	50d1      	str	r1, [r2, r3]
    for (port = 0; port < USBPD_PORT_COUNT; port++)
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	3301      	adds	r3, #1
 80157c2:	607b      	str	r3, [r7, #4]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2b01      	cmp	r3, #1
 80157c8:	d9da      	bls.n	8015780 <USBPD_DPM_Run+0x38>
      }
    }

    USBPD_DPM_UserExecute(NULL);
 80157ca:	2000      	movs	r0, #0
 80157cc:	f000 f958 	bl	8015a80 <USBPD_DPM_UserExecute>
  {
 80157d0:	e7bd      	b.n	801574e <USBPD_DPM_Run+0x6>
 80157d2:	46c0      	nop			@ (mov r8, r8)
 80157d4:	20000640 	.word	0x20000640
 80157d8:	20000634 	.word	0x20000634

080157dc <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 80157e0:	4b11      	ldr	r3, [pc, #68]	@ (8015828 <USBPD_DPM_TimerCounter+0x4c>)
 80157e2:	785b      	ldrb	r3, [r3, #1]
 80157e4:	2208      	movs	r2, #8
 80157e6:	4013      	ands	r3, r2
 80157e8:	b2db      	uxtb	r3, r3
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d008      	beq.n	8015800 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 80157ee:	2000      	movs	r0, #0
 80157f0:	f000 f95b 	bl	8015aaa <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 80157f4:	2000      	movs	r0, #0
 80157f6:	f7ea fdc2 	bl	800037e <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 80157fa:	2000      	movs	r0, #0
 80157fc:	f7ef ff14 	bl	8005628 <USBPD_PRL_TimerCounter>
  }
#if USBPD_PORT_COUNT==2
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_1].DPM_Initialized)
 8015800:	4b09      	ldr	r3, [pc, #36]	@ (8015828 <USBPD_DPM_TimerCounter+0x4c>)
 8015802:	795b      	ldrb	r3, [r3, #5]
 8015804:	2208      	movs	r2, #8
 8015806:	4013      	ands	r3, r2
 8015808:	b2db      	uxtb	r3, r3
 801580a:	2b00      	cmp	r3, #0
 801580c:	d008      	beq.n	8015820 <USBPD_DPM_TimerCounter+0x44>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_1);
 801580e:	2001      	movs	r0, #1
 8015810:	f000 f94b 	bl	8015aaa <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
 8015814:	2001      	movs	r0, #1
 8015816:	f7ea fdb2 	bl	800037e <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
 801581a:	2001      	movs	r0, #1
 801581c:	f7ef ff04 	bl	8005628 <USBPD_PRL_TimerCounter>
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 8015820:	46c0      	nop			@ (mov r8, r8)
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
 8015826:	46c0      	nop			@ (mov r8, r8)
 8015828:	2000064c 	.word	0x2000064c

0801582c <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b082      	sub	sp, #8
 8015830:	af00      	add	r7, sp, #0
 8015832:	0002      	movs	r2, r0
 8015834:	1dfb      	adds	r3, r7, #7
 8015836:	701a      	strb	r2, [r3, #0]
#if defined(USE_STM32_UTILITY_OS)
  UTIL_SEQ_SetTask(PortNum == 0 ? TASK_PE_0 : TASK_PE_1, 0);
#else
  DPM_Sleep_time[PortNum] = 0;
 8015838:	1dfb      	adds	r3, r7, #7
 801583a:	781a      	ldrb	r2, [r3, #0]
 801583c:	4b03      	ldr	r3, [pc, #12]	@ (801584c <USBPD_PE_TaskWakeUp+0x20>)
 801583e:	0092      	lsls	r2, r2, #2
 8015840:	2100      	movs	r1, #0
 8015842:	50d1      	str	r1, [r2, r3]
#endif /* USE_STM32_UTILITY_OS */
}
 8015844:	46c0      	nop			@ (mov r8, r8)
 8015846:	46bd      	mov	sp, r7
 8015848:	b002      	add	sp, #8
 801584a:	bd80      	pop	{r7, pc}
 801584c:	20000634 	.word	0x20000634

08015850 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	af00      	add	r7, sp, #0
#if defined(USE_STM32_UTILITY_OS)
  UTIL_SEQ_SetTask(TASK_CAD, 0);
#else
  DPM_Sleep_time[USBPD_PORT_COUNT] = 0;
 8015854:	4b02      	ldr	r3, [pc, #8]	@ (8015860 <USBPD_DPM_CADTaskWakeUp+0x10>)
 8015856:	2200      	movs	r2, #0
 8015858:	609a      	str	r2, [r3, #8]
#endif /* USE_STM32_UTILITY_OS */
}
 801585a:	46c0      	nop			@ (mov r8, r8)
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	20000634 	.word	0x20000634

08015864 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b082      	sub	sp, #8
 8015868:	af00      	add	r7, sp, #0
 801586a:	603a      	str	r2, [r7, #0]
 801586c:	1dfb      	adds	r3, r7, #7
 801586e:	1c02      	adds	r2, r0, #0
 8015870:	701a      	strb	r2, [r3, #0]
 8015872:	1dbb      	adds	r3, r7, #6
 8015874:	1c0a      	adds	r2, r1, #0
 8015876:	701a      	strb	r2, [r3, #0]
 /* _TRACE */
  (void)(Cc);
  switch (State)
 8015878:	1dbb      	adds	r3, r7, #6
 801587a:	781b      	ldrb	r3, [r3, #0]
 801587c:	2b04      	cmp	r3, #4
 801587e:	d008      	beq.n	8015892 <USBPD_DPM_CADCallback+0x2e>
 8015880:	dc46      	bgt.n	8015910 <USBPD_DPM_CADCallback+0xac>
 8015882:	2b03      	cmp	r3, #3
 8015884:	d01d      	beq.n	80158c2 <USBPD_DPM_CADCallback+0x5e>
 8015886:	dc43      	bgt.n	8015910 <USBPD_DPM_CADCallback+0xac>
 8015888:	2b01      	cmp	r3, #1
 801588a:	d01a      	beq.n	80158c2 <USBPD_DPM_CADCallback+0x5e>
 801588c:	2b02      	cmp	r3, #2
 801588e:	d00c      	beq.n	80158aa <USBPD_DPM_CADCallback+0x46>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 8015890:	e03e      	b.n	8015910 <USBPD_DPM_CADCallback+0xac>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 8015892:	1dfb      	adds	r3, r7, #7
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	2104      	movs	r1, #4
 8015898:	0018      	movs	r0, r3
 801589a:	f000 f8f9 	bl	8015a90 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801589e:	1dfb      	adds	r3, r7, #7
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	0018      	movs	r0, r3
 80158a4:	f000 f83e 	bl	8015924 <DPM_StartPETask>
      break;
 80158a8:	e033      	b.n	8015912 <USBPD_DPM_CADCallback+0xae>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 80158aa:	1dfb      	adds	r3, r7, #7
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	2102      	movs	r1, #2
 80158b0:	0018      	movs	r0, r3
 80158b2:	f000 f8ed 	bl	8015a90 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 80158b6:	1dfb      	adds	r3, r7, #7
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	0018      	movs	r0, r3
 80158bc:	f000 f832 	bl	8015924 <DPM_StartPETask>
      break;
 80158c0:	e027      	b.n	8015912 <USBPD_DPM_CADCallback+0xae>
      DPM_Sleep_time[PortNum] = 0xFFFFFFFFU;
 80158c2:	1dfb      	adds	r3, r7, #7
 80158c4:	781a      	ldrb	r2, [r3, #0]
 80158c6:	4b15      	ldr	r3, [pc, #84]	@ (801591c <USBPD_DPM_CADCallback+0xb8>)
 80158c8:	0092      	lsls	r2, r2, #2
 80158ca:	2101      	movs	r1, #1
 80158cc:	4249      	negs	r1, r1
 80158ce:	50d1      	str	r1, [r2, r3]
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 80158d0:	1dfb      	adds	r3, r7, #7
 80158d2:	781a      	ldrb	r2, [r3, #0]
 80158d4:	4b12      	ldr	r3, [pc, #72]	@ (8015920 <USBPD_DPM_CADCallback+0xbc>)
 80158d6:	0092      	lsls	r2, r2, #2
 80158d8:	5cd1      	ldrb	r1, [r2, r3]
 80158da:	2010      	movs	r0, #16
 80158dc:	4381      	bics	r1, r0
 80158de:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 80158e0:	1dfb      	adds	r3, r7, #7
 80158e2:	781b      	ldrb	r3, [r3, #0]
 80158e4:	4a0e      	ldr	r2, [pc, #56]	@ (8015920 <USBPD_DPM_CADCallback+0xbc>)
 80158e6:	009b      	lsls	r3, r3, #2
 80158e8:	18d3      	adds	r3, r2, r3
 80158ea:	785a      	ldrb	r2, [r3, #1]
 80158ec:	2107      	movs	r1, #7
 80158ee:	438a      	bics	r2, r1
 80158f0:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 80158f2:	1dbb      	adds	r3, r7, #6
 80158f4:	781a      	ldrb	r2, [r3, #0]
 80158f6:	1dfb      	adds	r3, r7, #7
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	0011      	movs	r1, r2
 80158fc:	0018      	movs	r0, r3
 80158fe:	f000 f8c7 	bl	8015a90 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 8015902:	1dfb      	adds	r3, r7, #7
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	2169      	movs	r1, #105	@ 0x69
 8015908:	0018      	movs	r0, r3
 801590a:	f000 f8d8 	bl	8015abe <USBPD_DPM_Notification>
      break;
 801590e:	e000      	b.n	8015912 <USBPD_DPM_CADCallback+0xae>
      break;
 8015910:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015912:	46c0      	nop			@ (mov r8, r8)
 8015914:	46bd      	mov	sp, r7
 8015916:	b002      	add	sp, #8
 8015918:	bd80      	pop	{r7, pc}
 801591a:	46c0      	nop			@ (mov r8, r8)
 801591c:	20000634 	.word	0x20000634
 8015920:	2000064c 	.word	0x2000064c

08015924 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	0002      	movs	r2, r0
 801592c:	1dfb      	adds	r3, r7, #7
 801592e:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 8015930:	1dfb      	adds	r3, r7, #7
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	0018      	movs	r0, r3
 8015936:	f7ea fd8a 	bl	800044e <USBPD_PE_StateMachine_Reset>
  /* Resume the task */
  UTIL_SEQ_ResumeTask(PortNum == 0 ? TASK_PE_0 : TASK_PE_1);
  /* Enable task execution */
  UTIL_SEQ_SetTask(PortNum == 0 ? TASK_PE_0 : TASK_PE_1, 0);
#else
  DPM_Sleep_time[PortNum] = 0U;
 801593a:	1dfb      	adds	r3, r7, #7
 801593c:	781a      	ldrb	r2, [r3, #0]
 801593e:	4b07      	ldr	r3, [pc, #28]	@ (801595c <DPM_StartPETask+0x38>)
 8015940:	0092      	lsls	r2, r2, #2
 8015942:	2100      	movs	r1, #0
 8015944:	50d1      	str	r1, [r2, r3]
#endif /* USE_STM32_UTILITY_OS */
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 8015946:	1dfb      	adds	r3, r7, #7
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	2168      	movs	r1, #104	@ 0x68
 801594c:	0018      	movs	r0, r3
 801594e:	f000 f8b6 	bl	8015abe <USBPD_DPM_Notification>
}
 8015952:	46c0      	nop			@ (mov r8, r8)
 8015954:	46bd      	mov	sp, r7
 8015956:	b002      	add	sp, #8
 8015958:	bd80      	pop	{r7, pc}
 801595a:	46c0      	nop			@ (mov r8, r8)
 801595c:	20000634 	.word	0x20000634

08015960 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	0002      	movs	r2, r0
 8015968:	1dfb      	adds	r3, r7, #7
 801596a:	701a      	strb	r2, [r3, #0]
 801596c:	1dbb      	adds	r3, r7, #6
 801596e:	1c0a      	adds	r2, r1, #0
 8015970:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8015972:	230f      	movs	r3, #15
 8015974:	18fb      	adds	r3, r7, r3
 8015976:	2202      	movs	r2, #2
 8015978:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801597a:	1dfb      	adds	r3, r7, #7
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	2b01      	cmp	r3, #1
 8015980:	d901      	bls.n	8015986 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 8015982:	2302      	movs	r3, #2
 8015984:	e024      	b.n	80159d0 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8015986:	1dfb      	adds	r3, r7, #7
 8015988:	781b      	ldrb	r3, [r3, #0]
 801598a:	2208      	movs	r2, #8
 801598c:	18ba      	adds	r2, r7, r2
 801598e:	0011      	movs	r1, r2
 8015990:	0018      	movs	r0, r3
 8015992:	f000 f9bc 	bl	8015d0e <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8015996:	1dbb      	adds	r3, r7, #6
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d10a      	bne.n	80159b4 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	4a0d      	ldr	r2, [pc, #52]	@ (80159d8 <USBPD_PWR_IF_SupplyReady+0x78>)
 80159a2:	4293      	cmp	r3, r2
 80159a4:	d801      	bhi.n	80159aa <USBPD_PWR_IF_SupplyReady+0x4a>
 80159a6:	2200      	movs	r2, #0
 80159a8:	e000      	b.n	80159ac <USBPD_PWR_IF_SupplyReady+0x4c>
 80159aa:	2202      	movs	r2, #2
 80159ac:	230f      	movs	r3, #15
 80159ae:	18fb      	adds	r3, r7, r3
 80159b0:	701a      	strb	r2, [r3, #0]
 80159b2:	e00a      	b.n	80159ca <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 80159b4:	68ba      	ldr	r2, [r7, #8]
 80159b6:	23af      	movs	r3, #175	@ 0xaf
 80159b8:	011b      	lsls	r3, r3, #4
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d901      	bls.n	80159c2 <USBPD_PWR_IF_SupplyReady+0x62>
 80159be:	2200      	movs	r2, #0
 80159c0:	e000      	b.n	80159c4 <USBPD_PWR_IF_SupplyReady+0x64>
 80159c2:	2202      	movs	r2, #2
 80159c4:	230f      	movs	r3, #15
 80159c6:	18fb      	adds	r3, r7, r3
 80159c8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80159ca:	230f      	movs	r3, #15
 80159cc:	18fb      	adds	r3, r7, r3
 80159ce:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 80159d0:	0018      	movs	r0, r3
 80159d2:	46bd      	mov	sp, r7
 80159d4:	b004      	add	sp, #16
 80159d6:	bd80      	pop	{r7, pc}
 80159d8:	000002ed 	.word	0x000002ed

080159dc <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	0002      	movs	r2, r0
 80159e4:	1dfb      	adds	r3, r7, #7
 80159e6:	701a      	strb	r2, [r3, #0]
 80159e8:	1dbb      	adds	r3, r7, #6
 80159ea:	1c0a      	adds	r2, r1, #0
 80159ec:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 80159ee:	230f      	movs	r3, #15
 80159f0:	18fb      	adds	r3, r7, r3
 80159f2:	2200      	movs	r2, #0
 80159f4:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 80159f6:	1dfb      	adds	r3, r7, #7
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	0018      	movs	r0, r3
 80159fc:	f7fd f86a 	bl	8012ad4 <HW_IF_PWR_GetVoltage>
 8015a00:	0003      	movs	r3, r0
 8015a02:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8015a04:	1dbb      	adds	r3, r7, #6
 8015a06:	781b      	ldrb	r3, [r3, #0]
 8015a08:	2b02      	cmp	r3, #2
 8015a0a:	d018      	beq.n	8015a3e <USBPD_PWR_IF_GetVBUSStatus+0x62>
 8015a0c:	dc21      	bgt.n	8015a52 <USBPD_PWR_IF_GetVBUSStatus+0x76>
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d002      	beq.n	8015a18 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 8015a12:	2b01      	cmp	r3, #1
 8015a14:	d009      	beq.n	8015a2a <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8015a16:	e01c      	b.n	8015a52 <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	4a15      	ldr	r2, [pc, #84]	@ (8015a70 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	d81a      	bhi.n	8015a56 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 8015a20:	230f      	movs	r3, #15
 8015a22:	18fb      	adds	r3, r7, r3
 8015a24:	2201      	movs	r2, #1
 8015a26:	701a      	strb	r2, [r3, #0]
    break;
 8015a28:	e015      	b.n	8015a56 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015a2a:	68ba      	ldr	r2, [r7, #8]
 8015a2c:	23af      	movs	r3, #175	@ 0xaf
 8015a2e:	011b      	lsls	r3, r3, #4
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d312      	bcc.n	8015a5a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 8015a34:	230f      	movs	r3, #15
 8015a36:	18fb      	adds	r3, r7, r3
 8015a38:	2201      	movs	r2, #1
 8015a3a:	701a      	strb	r2, [r3, #0]
    break;
 8015a3c:	e00d      	b.n	8015a5a <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015a3e:	68ba      	ldr	r2, [r7, #8]
 8015a40:	23af      	movs	r3, #175	@ 0xaf
 8015a42:	011b      	lsls	r3, r3, #4
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d20a      	bcs.n	8015a5e <USBPD_PWR_IF_GetVBUSStatus+0x82>
 8015a48:	230f      	movs	r3, #15
 8015a4a:	18fb      	adds	r3, r7, r3
 8015a4c:	2201      	movs	r2, #1
 8015a4e:	701a      	strb	r2, [r3, #0]
    break;
 8015a50:	e005      	b.n	8015a5e <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 8015a52:	46c0      	nop			@ (mov r8, r8)
 8015a54:	e004      	b.n	8015a60 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8015a56:	46c0      	nop			@ (mov r8, r8)
 8015a58:	e002      	b.n	8015a60 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8015a5a:	46c0      	nop			@ (mov r8, r8)
 8015a5c:	e000      	b.n	8015a60 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 8015a5e:	46c0      	nop			@ (mov r8, r8)
  }
  return _status;
 8015a60:	230f      	movs	r3, #15
 8015a62:	18fb      	adds	r3, r7, r3
 8015a64:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8015a66:	0018      	movs	r0, r3
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	b004      	add	sp, #16
 8015a6c:	bd80      	pop	{r7, pc}
 8015a6e:	46c0      	nop			@ (mov r8, r8)
 8015a70:	000002ed 	.word	0x000002ed

08015a74 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 8015a78:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 8015a7a:	0018      	movs	r0, r3
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <USBPD_DPM_UserExecute>:
  * @brief  User processing time, it is recommended to avoid blocking task for long time
  * @param  argument  DPM User event
  * @retval None
  */
void USBPD_DPM_UserExecute(void const *argument)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_UserExecute */

/* USER CODE END USBPD_DPM_UserExecute */
}
 8015a88:	46c0      	nop			@ (mov r8, r8)
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	b002      	add	sp, #8
 8015a8e:	bd80      	pop	{r7, pc}

08015a90 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b082      	sub	sp, #8
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	0002      	movs	r2, r0
 8015a98:	1dfb      	adds	r3, r7, #7
 8015a9a:	701a      	strb	r2, [r3, #0]
 8015a9c:	1dbb      	adds	r3, r7, #6
 8015a9e:	1c0a      	adds	r2, r1, #0
 8015aa0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8015aa2:	46c0      	nop			@ (mov r8, r8)
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	b002      	add	sp, #8
 8015aa8:	bd80      	pop	{r7, pc}

08015aaa <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 8015aaa:	b580      	push	{r7, lr}
 8015aac:	b082      	sub	sp, #8
 8015aae:	af00      	add	r7, sp, #0
 8015ab0:	0002      	movs	r2, r0
 8015ab2:	1dfb      	adds	r3, r7, #7
 8015ab4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 8015ab6:	46c0      	nop			@ (mov r8, r8)
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	b002      	add	sp, #8
 8015abc:	bd80      	pop	{r7, pc}

08015abe <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b082      	sub	sp, #8
 8015ac2:	af00      	add	r7, sp, #0
 8015ac4:	0002      	movs	r2, r0
 8015ac6:	1dfb      	adds	r3, r7, #7
 8015ac8:	701a      	strb	r2, [r3, #0]
 8015aca:	1dbb      	adds	r3, r7, #6
 8015acc:	1c0a      	adds	r2, r1, #0
 8015ace:	701a      	strb	r2, [r3, #0]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 8015ad0:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 8015ad2:	46c0      	nop			@ (mov r8, r8)
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	b002      	add	sp, #8
 8015ad8:	bd80      	pop	{r7, pc}

08015ada <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8015ada:	b580      	push	{r7, lr}
 8015adc:	b082      	sub	sp, #8
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6039      	str	r1, [r7, #0]
 8015ae2:	0011      	movs	r1, r2
 8015ae4:	1dfb      	adds	r3, r7, #7
 8015ae6:	1c02      	adds	r2, r0, #0
 8015ae8:	701a      	strb	r2, [r3, #0]
 8015aea:	1dbb      	adds	r3, r7, #6
 8015aec:	1c0a      	adds	r2, r1, #0
 8015aee:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 8015af0:	46c0      	nop			@ (mov r8, r8)
 8015af2:	46bd      	mov	sp, r7
 8015af4:	b002      	add	sp, #8
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b084      	sub	sp, #16
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60ba      	str	r2, [r7, #8]
 8015b00:	607b      	str	r3, [r7, #4]
 8015b02:	230f      	movs	r3, #15
 8015b04:	18fb      	adds	r3, r7, r3
 8015b06:	1c02      	adds	r2, r0, #0
 8015b08:	701a      	strb	r2, [r3, #0]
 8015b0a:	230e      	movs	r3, #14
 8015b0c:	18fb      	adds	r3, r7, r3
 8015b0e:	1c0a      	adds	r2, r1, #0
 8015b10:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 8015b12:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8015b14:	46c0      	nop			@ (mov r8, r8)
 8015b16:	46bd      	mov	sp, r7
 8015b18:	b004      	add	sp, #16
 8015b1a:	bd80      	pop	{r7, pc}

08015b1c <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b084      	sub	sp, #16
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	60ba      	str	r2, [r7, #8]
 8015b24:	607b      	str	r3, [r7, #4]
 8015b26:	230f      	movs	r3, #15
 8015b28:	18fb      	adds	r3, r7, r3
 8015b2a:	1c02      	adds	r2, r0, #0
 8015b2c:	701a      	strb	r2, [r3, #0]
 8015b2e:	230e      	movs	r3, #14
 8015b30:	18fb      	adds	r3, r7, r3
 8015b32:	1c0a      	adds	r2, r1, #0
 8015b34:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 8015b36:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 8015b38:	46c0      	nop			@ (mov r8, r8)
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	b004      	add	sp, #16
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b084      	sub	sp, #16
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	60b9      	str	r1, [r7, #8]
 8015b48:	607a      	str	r2, [r7, #4]
 8015b4a:	230f      	movs	r3, #15
 8015b4c:	18fb      	adds	r3, r7, r3
 8015b4e:	1c02      	adds	r2, r0, #0
 8015b50:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8015b52:	46c0      	nop			@ (mov r8, r8)
 8015b54:	46bd      	mov	sp, r7
 8015b56:	b004      	add	sp, #16
 8015b58:	bd80      	pop	{r7, pc}

08015b5a <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8015b5a:	b590      	push	{r4, r7, lr}
 8015b5c:	b083      	sub	sp, #12
 8015b5e:	af00      	add	r7, sp, #0
 8015b60:	0004      	movs	r4, r0
 8015b62:	0008      	movs	r0, r1
 8015b64:	603a      	str	r2, [r7, #0]
 8015b66:	0019      	movs	r1, r3
 8015b68:	1dfb      	adds	r3, r7, #7
 8015b6a:	1c22      	adds	r2, r4, #0
 8015b6c:	701a      	strb	r2, [r3, #0]
 8015b6e:	1dbb      	adds	r3, r7, #6
 8015b70:	1c02      	adds	r2, r0, #0
 8015b72:	701a      	strb	r2, [r3, #0]
 8015b74:	1d3b      	adds	r3, r7, #4
 8015b76:	1c0a      	adds	r2, r1, #0
 8015b78:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8015b7a:	46c0      	nop			@ (mov r8, r8)
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	b003      	add	sp, #12
 8015b80:	bd90      	pop	{r4, r7, pc}

08015b82 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8015b82:	b580      	push	{r7, lr}
 8015b84:	b082      	sub	sp, #8
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	0002      	movs	r2, r0
 8015b8a:	1dfb      	adds	r3, r7, #7
 8015b8c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 8015b8e:	1dfb      	adds	r3, r7, #7
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	0018      	movs	r0, r3
 8015b94:	f7ea fb82 	bl	800029c <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8015b98:	46c0      	nop			@ (mov r8, r8)
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	b002      	add	sp, #8
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	0002      	movs	r2, r0
 8015ba8:	1dfb      	adds	r3, r7, #7
 8015baa:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 8015bac:	230f      	movs	r3, #15
 8015bae:	18fb      	adds	r3, r7, r3
 8015bb0:	220c      	movs	r2, #12
 8015bb2:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 8015bb4:	1dfb      	adds	r3, r7, #7
 8015bb6:	781a      	ldrb	r2, [r3, #0]
 8015bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8015c6c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8015bba:	2154      	movs	r1, #84	@ 0x54
 8015bbc:	434a      	muls	r2, r1
 8015bbe:	5cd3      	ldrb	r3, [r2, r3]
 8015bc0:	07db      	lsls	r3, r3, #31
 8015bc2:	0fdb      	lsrs	r3, r3, #31
 8015bc4:	b2db      	uxtb	r3, r3
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d015      	beq.n	8015bf6 <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 8015bca:	1dfb      	adds	r3, r7, #7
 8015bcc:	781a      	ldrb	r2, [r3, #0]
 8015bce:	4b27      	ldr	r3, [pc, #156]	@ (8015c6c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8015bd0:	2154      	movs	r1, #84	@ 0x54
 8015bd2:	434a      	muls	r2, r1
 8015bd4:	5cd3      	ldrb	r3, [r2, r3]
 8015bd6:	075b      	lsls	r3, r3, #29
 8015bd8:	0fdb      	lsrs	r3, r3, #31
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d10f      	bne.n	8015c00 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 8015be0:	1dfb      	adds	r3, r7, #7
 8015be2:	781a      	ldrb	r2, [r3, #0]
 8015be4:	4b21      	ldr	r3, [pc, #132]	@ (8015c6c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8015be6:	2154      	movs	r1, #84	@ 0x54
 8015be8:	434a      	muls	r2, r1
 8015bea:	5cd3      	ldrb	r3, [r2, r3]
 8015bec:	071b      	lsls	r3, r3, #28
 8015bee:	0fdb      	lsrs	r3, r3, #31
 8015bf0:	b2db      	uxtb	r3, r3
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d104      	bne.n	8015c00 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 8015bf6:	230f      	movs	r3, #15
 8015bf8:	18fb      	adds	r3, r7, r3
 8015bfa:	2201      	movs	r2, #1
 8015bfc:	701a      	strb	r2, [r3, #0]
 8015bfe:	e02d      	b.n	8015c5c <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8015c00:	1dfb      	adds	r3, r7, #7
 8015c02:	781a      	ldrb	r2, [r3, #0]
 8015c04:	4b19      	ldr	r3, [pc, #100]	@ (8015c6c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8015c06:	2154      	movs	r1, #84	@ 0x54
 8015c08:	434a      	muls	r2, r1
 8015c0a:	5cd3      	ldrb	r3, [r2, r3]
 8015c0c:	075b      	lsls	r3, r3, #29
 8015c0e:	0fdb      	lsrs	r3, r3, #31
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d109      	bne.n	8015c2a <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 8015c16:	1dfb      	adds	r3, r7, #7
 8015c18:	781a      	ldrb	r2, [r3, #0]
 8015c1a:	4b15      	ldr	r3, [pc, #84]	@ (8015c70 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 8015c1c:	0092      	lsls	r2, r2, #2
 8015c1e:	5cd3      	ldrb	r3, [r2, r3]
 8015c20:	071b      	lsls	r3, r3, #28
 8015c22:	0fdb      	lsrs	r3, r3, #31
 8015c24:	b2db      	uxtb	r3, r3
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d014      	beq.n	8015c54 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8015c2a:	1dfb      	adds	r3, r7, #7
 8015c2c:	781a      	ldrb	r2, [r3, #0]
 8015c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8015c6c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8015c30:	2154      	movs	r1, #84	@ 0x54
 8015c32:	434a      	muls	r2, r1
 8015c34:	5cd3      	ldrb	r3, [r2, r3]
 8015c36:	071b      	lsls	r3, r3, #28
 8015c38:	0fdb      	lsrs	r3, r3, #31
 8015c3a:	b2db      	uxtb	r3, r3
 8015c3c:	2b01      	cmp	r3, #1
 8015c3e:	d10d      	bne.n	8015c5c <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 8015c40:	1dfb      	adds	r3, r7, #7
 8015c42:	781a      	ldrb	r2, [r3, #0]
 8015c44:	4b0a      	ldr	r3, [pc, #40]	@ (8015c70 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 8015c46:	0092      	lsls	r2, r2, #2
 8015c48:	5cd3      	ldrb	r3, [r2, r3]
 8015c4a:	071b      	lsls	r3, r3, #28
 8015c4c:	0fdb      	lsrs	r3, r3, #31
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	d103      	bne.n	8015c5c <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 8015c54:	230f      	movs	r3, #15
 8015c56:	18fb      	adds	r3, r7, r3
 8015c58:	220a      	movs	r2, #10
 8015c5a:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 8015c5c:	230f      	movs	r3, #15
 8015c5e:	18fb      	adds	r3, r7, r3
 8015c60:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8015c62:	0018      	movs	r0, r3
 8015c64:	46bd      	mov	sp, r7
 8015c66:	b004      	add	sp, #16
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	46c0      	nop			@ (mov r8, r8)
 8015c6c:	200000b4 	.word	0x200000b4
 8015c70:	2000064c 	.word	0x2000064c

08015c74 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	0002      	movs	r2, r0
 8015c7c:	1dfb      	adds	r3, r7, #7
 8015c7e:	701a      	strb	r2, [r3, #0]
 8015c80:	1dbb      	adds	r3, r7, #6
 8015c82:	1c0a      	adds	r2, r1, #0
 8015c84:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8015c86:	1dbb      	adds	r3, r7, #6
 8015c88:	781a      	ldrb	r2, [r3, #0]
 8015c8a:	1dfb      	adds	r3, r7, #7
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	0011      	movs	r1, r2
 8015c90:	0018      	movs	r0, r3
 8015c92:	f7ff fe65 	bl	8015960 <USBPD_PWR_IF_SupplyReady>
 8015c96:	0003      	movs	r3, r0
 8015c98:	425a      	negs	r2, r3
 8015c9a:	4153      	adcs	r3, r2
 8015c9c:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 8015c9e:	0018      	movs	r0, r3
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	b002      	add	sp, #8
 8015ca4:	bd80      	pop	{r7, pc}

08015ca6 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8015ca6:	b580      	push	{r7, lr}
 8015ca8:	b084      	sub	sp, #16
 8015caa:	af00      	add	r7, sp, #0
 8015cac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2b01      	cmp	r3, #1
 8015cb6:	d902      	bls.n	8015cbe <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015cb8:	2302      	movs	r3, #2
 8015cba:	425b      	negs	r3, r3
 8015cbc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8015cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 8015cc0:	0018      	movs	r0, r3
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	b004      	add	sp, #16
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b084      	sub	sp, #16
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	2b01      	cmp	r3, #1
 8015cd8:	d902      	bls.n	8015ce0 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015cda:	2302      	movs	r3, #2
 8015cdc:	425b      	negs	r3, r3
 8015cde:	60fb      	str	r3, [r7, #12]
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 8015ce2:	0018      	movs	r0, r3
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	b004      	add	sp, #16
 8015ce8:	bd80      	pop	{r7, pc}

08015cea <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 8015cea:	b580      	push	{r7, lr}
 8015cec:	b084      	sub	sp, #16
 8015cee:	af00      	add	r7, sp, #0
 8015cf0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8015cf2:	230b      	movs	r3, #11
 8015cf4:	425b      	negs	r3, r3
 8015cf6:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2b01      	cmp	r3, #1
 8015cfc:	d902      	bls.n	8015d04 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015cfe:	2302      	movs	r3, #2
 8015d00:	425b      	negs	r3, r3
 8015d02:	60fb      	str	r3, [r7, #12]
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
  return ret;
 8015d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8015d06:	0018      	movs	r0, r3
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	b004      	add	sp, #16
 8015d0c:	bd80      	pop	{r7, pc}

08015d0e <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b084      	sub	sp, #16
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
 8015d16:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	60fb      	str	r3, [r7, #12]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b01      	cmp	r3, #1
 8015d20:	d802      	bhi.n	8015d28 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d102      	bne.n	8015d2e <BSP_USBPD_PWR_VBUSGetVoltage+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015d28:	2302      	movs	r3, #2
 8015d2a:	425b      	negs	r3, r3
 8015d2c:	60fb      	str	r3, [r7, #12]
  }
  *pVoltage = 0u;
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	2200      	movs	r2, #0
 8015d32:	601a      	str	r2, [r3, #0]
  /* !!!
      BSP_PWR_VBUSGetVoltage is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  return ret;
 8015d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8015d36:	0018      	movs	r0, r3
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	b004      	add	sp, #16
 8015d3c:	bd80      	pop	{r7, pc}
	...

08015d40 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8015d44:	4914      	ldr	r1, [pc, #80]	@ (8015d98 <MX_USB_Device_Init+0x58>)
 8015d46:	4b15      	ldr	r3, [pc, #84]	@ (8015d9c <MX_USB_Device_Init+0x5c>)
 8015d48:	2200      	movs	r2, #0
 8015d4a:	0018      	movs	r0, r3
 8015d4c:	f7fd ff74 	bl	8013c38 <USBD_Init>
 8015d50:	1e03      	subs	r3, r0, #0
 8015d52:	d001      	beq.n	8015d58 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8015d54:	f7f1 fb2c 	bl	80073b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015d58:	4a11      	ldr	r2, [pc, #68]	@ (8015da0 <MX_USB_Device_Init+0x60>)
 8015d5a:	4b10      	ldr	r3, [pc, #64]	@ (8015d9c <MX_USB_Device_Init+0x5c>)
 8015d5c:	0011      	movs	r1, r2
 8015d5e:	0018      	movs	r0, r3
 8015d60:	f7fd ffa4 	bl	8013cac <USBD_RegisterClass>
 8015d64:	1e03      	subs	r3, r0, #0
 8015d66:	d001      	beq.n	8015d6c <MX_USB_Device_Init+0x2c>
    Error_Handler();
 8015d68:	f7f1 fb22 	bl	80073b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8015d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8015da4 <MX_USB_Device_Init+0x64>)
 8015d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8015d9c <MX_USB_Device_Init+0x5c>)
 8015d70:	0011      	movs	r1, r2
 8015d72:	0018      	movs	r0, r3
 8015d74:	f7fd fe7e 	bl	8013a74 <USBD_CDC_RegisterInterface>
 8015d78:	1e03      	subs	r3, r0, #0
 8015d7a:	d001      	beq.n	8015d80 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8015d7c:	f7f1 fb18 	bl	80073b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8015d80:	4b06      	ldr	r3, [pc, #24]	@ (8015d9c <MX_USB_Device_Init+0x5c>)
 8015d82:	0018      	movs	r0, r3
 8015d84:	f7fd ffd0 	bl	8013d28 <USBD_Start>
 8015d88:	1e03      	subs	r3, r0, #0
 8015d8a:	d001      	beq.n	8015d90 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8015d8c:	f7f1 fb10 	bl	80073b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015d90:	46c0      	nop			@ (mov r8, r8)
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	46c0      	nop			@ (mov r8, r8)
 8015d98:	20000170 	.word	0x20000170
 8015d9c:	20000654 	.word	0x20000654
 8015da0:	2000001c 	.word	0x2000001c
 8015da4:	2000015c 	.word	0x2000015c

08015da8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015dac:	4907      	ldr	r1, [pc, #28]	@ (8015dcc <CDC_Init_FS+0x24>)
 8015dae:	4b08      	ldr	r3, [pc, #32]	@ (8015dd0 <CDC_Init_FS+0x28>)
 8015db0:	2200      	movs	r2, #0
 8015db2:	0018      	movs	r0, r3
 8015db4:	f7fd fe78 	bl	8013aa8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015db8:	4a06      	ldr	r2, [pc, #24]	@ (8015dd4 <CDC_Init_FS+0x2c>)
 8015dba:	4b05      	ldr	r3, [pc, #20]	@ (8015dd0 <CDC_Init_FS+0x28>)
 8015dbc:	0011      	movs	r1, r2
 8015dbe:	0018      	movs	r0, r3
 8015dc0:	f7fd fe95 	bl	8013aee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015dc4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015dc6:	0018      	movs	r0, r3
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	20001130 	.word	0x20001130
 8015dd0:	20000654 	.word	0x20000654
 8015dd4:	20000930 	.word	0x20000930

08015dd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015ddc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015dde:	0018      	movs	r0, r3
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b082      	sub	sp, #8
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6039      	str	r1, [r7, #0]
 8015dec:	0011      	movs	r1, r2
 8015dee:	1dfb      	adds	r3, r7, #7
 8015df0:	1c02      	adds	r2, r0, #0
 8015df2:	701a      	strb	r2, [r3, #0]
 8015df4:	1d3b      	adds	r3, r7, #4
 8015df6:	1c0a      	adds	r2, r1, #0
 8015df8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015dfa:	1dfb      	adds	r3, r7, #7
 8015dfc:	781b      	ldrb	r3, [r3, #0]
 8015dfe:	2b23      	cmp	r3, #35	@ 0x23
 8015e00:	d804      	bhi.n	8015e0c <CDC_Control_FS+0x28>
 8015e02:	009a      	lsls	r2, r3, #2
 8015e04:	4b04      	ldr	r3, [pc, #16]	@ (8015e18 <CDC_Control_FS+0x34>)
 8015e06:	18d3      	adds	r3, r2, r3
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015e0c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8015e0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015e10:	0018      	movs	r0, r3
 8015e12:	46bd      	mov	sp, r7
 8015e14:	b002      	add	sp, #8
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	080174ec 	.word	0x080174ec

08015e1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
 8015e24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015e26:	687a      	ldr	r2, [r7, #4]
 8015e28:	4b06      	ldr	r3, [pc, #24]	@ (8015e44 <CDC_Receive_FS+0x28>)
 8015e2a:	0011      	movs	r1, r2
 8015e2c:	0018      	movs	r0, r3
 8015e2e:	f7fd fe5e 	bl	8013aee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015e32:	4b04      	ldr	r3, [pc, #16]	@ (8015e44 <CDC_Receive_FS+0x28>)
 8015e34:	0018      	movs	r0, r3
 8015e36:	f7fd fec5 	bl	8013bc4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015e3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015e3c:	0018      	movs	r0, r3
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	b002      	add	sp, #8
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	20000654 	.word	0x20000654

08015e48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015e48:	b5b0      	push	{r4, r5, r7, lr}
 8015e4a:	b084      	sub	sp, #16
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
 8015e50:	000a      	movs	r2, r1
 8015e52:	1cbb      	adds	r3, r7, #2
 8015e54:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8015e56:	230f      	movs	r3, #15
 8015e58:	18fb      	adds	r3, r7, r3
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015e5e:	4a11      	ldr	r2, [pc, #68]	@ (8015ea4 <CDC_Transmit_FS+0x5c>)
 8015e60:	23af      	movs	r3, #175	@ 0xaf
 8015e62:	009b      	lsls	r3, r3, #2
 8015e64:	58d3      	ldr	r3, [r2, r3]
 8015e66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015e68:	68ba      	ldr	r2, [r7, #8]
 8015e6a:	2385      	movs	r3, #133	@ 0x85
 8015e6c:	009b      	lsls	r3, r3, #2
 8015e6e:	58d3      	ldr	r3, [r2, r3]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d001      	beq.n	8015e78 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8015e74:	2301      	movs	r3, #1
 8015e76:	e010      	b.n	8015e9a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015e78:	1cbb      	adds	r3, r7, #2
 8015e7a:	881a      	ldrh	r2, [r3, #0]
 8015e7c:	6879      	ldr	r1, [r7, #4]
 8015e7e:	4b09      	ldr	r3, [pc, #36]	@ (8015ea4 <CDC_Transmit_FS+0x5c>)
 8015e80:	0018      	movs	r0, r3
 8015e82:	f7fd fe11 	bl	8013aa8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015e86:	250f      	movs	r5, #15
 8015e88:	197c      	adds	r4, r7, r5
 8015e8a:	4b06      	ldr	r3, [pc, #24]	@ (8015ea4 <CDC_Transmit_FS+0x5c>)
 8015e8c:	0018      	movs	r0, r3
 8015e8e:	f7fd fe4b 	bl	8013b28 <USBD_CDC_TransmitPacket>
 8015e92:	0003      	movs	r3, r0
 8015e94:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8015e96:	197b      	adds	r3, r7, r5
 8015e98:	781b      	ldrb	r3, [r3, #0]
}
 8015e9a:	0018      	movs	r0, r3
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	b004      	add	sp, #16
 8015ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ea2:	46c0      	nop			@ (mov r8, r8)
 8015ea4:	20000654 	.word	0x20000654

08015ea8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b086      	sub	sp, #24
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	60f8      	str	r0, [r7, #12]
 8015eb0:	60b9      	str	r1, [r7, #8]
 8015eb2:	1dfb      	adds	r3, r7, #7
 8015eb4:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8015eb6:	2117      	movs	r1, #23
 8015eb8:	187b      	adds	r3, r7, r1
 8015eba:	2200      	movs	r2, #0
 8015ebc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015ebe:	187b      	adds	r3, r7, r1
 8015ec0:	781b      	ldrb	r3, [r3, #0]
 8015ec2:	b25b      	sxtb	r3, r3
}
 8015ec4:	0018      	movs	r0, r3
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	b006      	add	sp, #24
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b082      	sub	sp, #8
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	0002      	movs	r2, r0
 8015ed4:	6039      	str	r1, [r7, #0]
 8015ed6:	1dfb      	adds	r3, r7, #7
 8015ed8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	2212      	movs	r2, #18
 8015ede:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8015ee0:	4b02      	ldr	r3, [pc, #8]	@ (8015eec <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015ee2:	0018      	movs	r0, r3
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	b002      	add	sp, #8
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	46c0      	nop			@ (mov r8, r8)
 8015eec:	20000190 	.word	0x20000190

08015ef0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b082      	sub	sp, #8
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	0002      	movs	r2, r0
 8015ef8:	6039      	str	r1, [r7, #0]
 8015efa:	1dfb      	adds	r3, r7, #7
 8015efc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	2204      	movs	r2, #4
 8015f02:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015f04:	4b02      	ldr	r3, [pc, #8]	@ (8015f10 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015f06:	0018      	movs	r0, r3
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	b002      	add	sp, #8
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	46c0      	nop			@ (mov r8, r8)
 8015f10:	200001a4 	.word	0x200001a4

08015f14 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b082      	sub	sp, #8
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	0002      	movs	r2, r0
 8015f1c:	6039      	str	r1, [r7, #0]
 8015f1e:	1dfb      	adds	r3, r7, #7
 8015f20:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015f22:	1dfb      	adds	r3, r7, #7
 8015f24:	781b      	ldrb	r3, [r3, #0]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d106      	bne.n	8015f38 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015f2a:	683a      	ldr	r2, [r7, #0]
 8015f2c:	4908      	ldr	r1, [pc, #32]	@ (8015f50 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8015f2e:	4b09      	ldr	r3, [pc, #36]	@ (8015f54 <USBD_CDC_ProductStrDescriptor+0x40>)
 8015f30:	0018      	movs	r0, r3
 8015f32:	f7ff fa10 	bl	8015356 <USBD_GetString>
 8015f36:	e005      	b.n	8015f44 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015f38:	683a      	ldr	r2, [r7, #0]
 8015f3a:	4905      	ldr	r1, [pc, #20]	@ (8015f50 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8015f3c:	4b05      	ldr	r3, [pc, #20]	@ (8015f54 <USBD_CDC_ProductStrDescriptor+0x40>)
 8015f3e:	0018      	movs	r0, r3
 8015f40:	f7ff fa09 	bl	8015356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015f44:	4b02      	ldr	r3, [pc, #8]	@ (8015f50 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 8015f46:	0018      	movs	r0, r3
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	b002      	add	sp, #8
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	46c0      	nop			@ (mov r8, r8)
 8015f50:	20001930 	.word	0x20001930
 8015f54:	0801725c 	.word	0x0801725c

08015f58 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	0002      	movs	r2, r0
 8015f60:	6039      	str	r1, [r7, #0]
 8015f62:	1dfb      	adds	r3, r7, #7
 8015f64:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015f66:	683a      	ldr	r2, [r7, #0]
 8015f68:	4904      	ldr	r1, [pc, #16]	@ (8015f7c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8015f6a:	4b05      	ldr	r3, [pc, #20]	@ (8015f80 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 8015f6c:	0018      	movs	r0, r3
 8015f6e:	f7ff f9f2 	bl	8015356 <USBD_GetString>
  return USBD_StrDesc;
 8015f72:	4b02      	ldr	r3, [pc, #8]	@ (8015f7c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 8015f74:	0018      	movs	r0, r3
 8015f76:	46bd      	mov	sp, r7
 8015f78:	b002      	add	sp, #8
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	20001930 	.word	0x20001930
 8015f80:	08017274 	.word	0x08017274

08015f84 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	0002      	movs	r2, r0
 8015f8c:	6039      	str	r1, [r7, #0]
 8015f8e:	1dfb      	adds	r3, r7, #7
 8015f90:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015f92:	683b      	ldr	r3, [r7, #0]
 8015f94:	221a      	movs	r2, #26
 8015f96:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015f98:	f000 f84c 	bl	8016034 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015f9c:	4b02      	ldr	r3, [pc, #8]	@ (8015fa8 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 8015f9e:	0018      	movs	r0, r3
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	b002      	add	sp, #8
 8015fa4:	bd80      	pop	{r7, pc}
 8015fa6:	46c0      	nop			@ (mov r8, r8)
 8015fa8:	200001a8 	.word	0x200001a8

08015fac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	0002      	movs	r2, r0
 8015fb4:	6039      	str	r1, [r7, #0]
 8015fb6:	1dfb      	adds	r3, r7, #7
 8015fb8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8015fba:	1dfb      	adds	r3, r7, #7
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d106      	bne.n	8015fd0 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015fc2:	683a      	ldr	r2, [r7, #0]
 8015fc4:	4908      	ldr	r1, [pc, #32]	@ (8015fe8 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8015fc6:	4b09      	ldr	r3, [pc, #36]	@ (8015fec <USBD_CDC_ConfigStrDescriptor+0x40>)
 8015fc8:	0018      	movs	r0, r3
 8015fca:	f7ff f9c4 	bl	8015356 <USBD_GetString>
 8015fce:	e005      	b.n	8015fdc <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8015fd0:	683a      	ldr	r2, [r7, #0]
 8015fd2:	4905      	ldr	r1, [pc, #20]	@ (8015fe8 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8015fd4:	4b05      	ldr	r3, [pc, #20]	@ (8015fec <USBD_CDC_ConfigStrDescriptor+0x40>)
 8015fd6:	0018      	movs	r0, r3
 8015fd8:	f7ff f9bd 	bl	8015356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015fdc:	4b02      	ldr	r3, [pc, #8]	@ (8015fe8 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 8015fde:	0018      	movs	r0, r3
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	b002      	add	sp, #8
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	46c0      	nop			@ (mov r8, r8)
 8015fe8:	20001930 	.word	0x20001930
 8015fec:	08017288 	.word	0x08017288

08015ff0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	0002      	movs	r2, r0
 8015ff8:	6039      	str	r1, [r7, #0]
 8015ffa:	1dfb      	adds	r3, r7, #7
 8015ffc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015ffe:	1dfb      	adds	r3, r7, #7
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d106      	bne.n	8016014 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8016006:	683a      	ldr	r2, [r7, #0]
 8016008:	4908      	ldr	r1, [pc, #32]	@ (801602c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 801600a:	4b09      	ldr	r3, [pc, #36]	@ (8016030 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 801600c:	0018      	movs	r0, r3
 801600e:	f7ff f9a2 	bl	8015356 <USBD_GetString>
 8016012:	e005      	b.n	8016020 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8016014:	683a      	ldr	r2, [r7, #0]
 8016016:	4905      	ldr	r1, [pc, #20]	@ (801602c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8016018:	4b05      	ldr	r3, [pc, #20]	@ (8016030 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 801601a:	0018      	movs	r0, r3
 801601c:	f7ff f99b 	bl	8015356 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016020:	4b02      	ldr	r3, [pc, #8]	@ (801602c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 8016022:	0018      	movs	r0, r3
 8016024:	46bd      	mov	sp, r7
 8016026:	b002      	add	sp, #8
 8016028:	bd80      	pop	{r7, pc}
 801602a:	46c0      	nop			@ (mov r8, r8)
 801602c:	20001930 	.word	0x20001930
 8016030:	08017294 	.word	0x08017294

08016034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801603a:	4b10      	ldr	r3, [pc, #64]	@ (801607c <Get_SerialNum+0x48>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016040:	4b0f      	ldr	r3, [pc, #60]	@ (8016080 <Get_SerialNum+0x4c>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016046:	4b0f      	ldr	r3, [pc, #60]	@ (8016084 <Get_SerialNum+0x50>)
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801604c:	68fa      	ldr	r2, [r7, #12]
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	18d3      	adds	r3, r2, r3
 8016052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d00b      	beq.n	8016072 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801605a:	490b      	ldr	r1, [pc, #44]	@ (8016088 <Get_SerialNum+0x54>)
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2208      	movs	r2, #8
 8016060:	0018      	movs	r0, r3
 8016062:	f000 f815 	bl	8016090 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016066:	4909      	ldr	r1, [pc, #36]	@ (801608c <Get_SerialNum+0x58>)
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	2204      	movs	r2, #4
 801606c:	0018      	movs	r0, r3
 801606e:	f000 f80f 	bl	8016090 <IntToUnicode>
  }
}
 8016072:	46c0      	nop			@ (mov r8, r8)
 8016074:	46bd      	mov	sp, r7
 8016076:	b004      	add	sp, #16
 8016078:	bd80      	pop	{r7, pc}
 801607a:	46c0      	nop			@ (mov r8, r8)
 801607c:	1fff7590 	.word	0x1fff7590
 8016080:	1fff7594 	.word	0x1fff7594
 8016084:	1fff7598 	.word	0x1fff7598
 8016088:	200001aa 	.word	0x200001aa
 801608c:	200001ba 	.word	0x200001ba

08016090 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b086      	sub	sp, #24
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	1dfb      	adds	r3, r7, #7
 801609c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801609e:	2117      	movs	r1, #23
 80160a0:	187b      	adds	r3, r7, r1
 80160a2:	2200      	movs	r2, #0
 80160a4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80160a6:	187b      	adds	r3, r7, r1
 80160a8:	2200      	movs	r2, #0
 80160aa:	701a      	strb	r2, [r3, #0]
 80160ac:	e02f      	b.n	801610e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	0f1b      	lsrs	r3, r3, #28
 80160b2:	2b09      	cmp	r3, #9
 80160b4:	d80d      	bhi.n	80160d2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	0f1b      	lsrs	r3, r3, #28
 80160ba:	b2da      	uxtb	r2, r3
 80160bc:	2317      	movs	r3, #23
 80160be:	18fb      	adds	r3, r7, r3
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	005b      	lsls	r3, r3, #1
 80160c4:	0019      	movs	r1, r3
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	185b      	adds	r3, r3, r1
 80160ca:	3230      	adds	r2, #48	@ 0x30
 80160cc:	b2d2      	uxtb	r2, r2
 80160ce:	701a      	strb	r2, [r3, #0]
 80160d0:	e00c      	b.n	80160ec <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	0f1b      	lsrs	r3, r3, #28
 80160d6:	b2da      	uxtb	r2, r3
 80160d8:	2317      	movs	r3, #23
 80160da:	18fb      	adds	r3, r7, r3
 80160dc:	781b      	ldrb	r3, [r3, #0]
 80160de:	005b      	lsls	r3, r3, #1
 80160e0:	0019      	movs	r1, r3
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	185b      	adds	r3, r3, r1
 80160e6:	3237      	adds	r2, #55	@ 0x37
 80160e8:	b2d2      	uxtb	r2, r2
 80160ea:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	011b      	lsls	r3, r3, #4
 80160f0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80160f2:	2117      	movs	r1, #23
 80160f4:	187b      	adds	r3, r7, r1
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	005b      	lsls	r3, r3, #1
 80160fa:	3301      	adds	r3, #1
 80160fc:	68ba      	ldr	r2, [r7, #8]
 80160fe:	18d3      	adds	r3, r2, r3
 8016100:	2200      	movs	r2, #0
 8016102:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016104:	187b      	adds	r3, r7, r1
 8016106:	781a      	ldrb	r2, [r3, #0]
 8016108:	187b      	adds	r3, r7, r1
 801610a:	3201      	adds	r2, #1
 801610c:	701a      	strb	r2, [r3, #0]
 801610e:	2317      	movs	r3, #23
 8016110:	18fa      	adds	r2, r7, r3
 8016112:	1dfb      	adds	r3, r7, #7
 8016114:	7812      	ldrb	r2, [r2, #0]
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	429a      	cmp	r2, r3
 801611a:	d3c8      	bcc.n	80160ae <IntToUnicode+0x1e>
  }
}
 801611c:	46c0      	nop			@ (mov r8, r8)
 801611e:	46c0      	nop			@ (mov r8, r8)
 8016120:	46bd      	mov	sp, r7
 8016122:	b006      	add	sp, #24
 8016124:	bd80      	pop	{r7, pc}
	...

08016128 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016128:	b590      	push	{r4, r7, lr}
 801612a:	b099      	sub	sp, #100	@ 0x64
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8016130:	2410      	movs	r4, #16
 8016132:	193b      	adds	r3, r7, r4
 8016134:	0018      	movs	r0, r3
 8016136:	2350      	movs	r3, #80	@ 0x50
 8016138:	001a      	movs	r2, r3
 801613a:	2100      	movs	r1, #0
 801613c:	f000 fca0 	bl	8016a80 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	4a25      	ldr	r2, [pc, #148]	@ (80161dc <HAL_PCD_MspInit+0xb4>)
 8016146:	4293      	cmp	r3, r2
 8016148:	d143      	bne.n	80161d2 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801614a:	193b      	adds	r3, r7, r4
 801614c:	2280      	movs	r2, #128	@ 0x80
 801614e:	0452      	lsls	r2, r2, #17
 8016150:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016152:	193b      	adds	r3, r7, r4
 8016154:	2200      	movs	r2, #0
 8016156:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8016158:	193b      	adds	r3, r7, r4
 801615a:	0018      	movs	r0, r3
 801615c:	f7f5 fdca 	bl	800bcf4 <HAL_RCCEx_PeriphCLKConfig>
 8016160:	1e03      	subs	r3, r0, #0
 8016162:	d001      	beq.n	8016168 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8016164:	f7f1 f924 	bl	80073b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016168:	4b1d      	ldr	r3, [pc, #116]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 801616a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801616c:	4b1c      	ldr	r3, [pc, #112]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 801616e:	2180      	movs	r1, #128	@ 0x80
 8016170:	0189      	lsls	r1, r1, #6
 8016172:	430a      	orrs	r2, r1
 8016174:	63da      	str	r2, [r3, #60]	@ 0x3c
 8016176:	4b1a      	ldr	r3, [pc, #104]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 8016178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801617a:	2380      	movs	r3, #128	@ 0x80
 801617c:	019b      	lsls	r3, r3, #6
 801617e:	4013      	ands	r3, r2
 8016180:	60fb      	str	r3, [r7, #12]
 8016182:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016184:	4b16      	ldr	r3, [pc, #88]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 8016186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016188:	2380      	movs	r3, #128	@ 0x80
 801618a:	055b      	lsls	r3, r3, #21
 801618c:	4013      	ands	r3, r2
 801618e:	d116      	bne.n	80161be <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016190:	4b13      	ldr	r3, [pc, #76]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 8016192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016194:	4b12      	ldr	r3, [pc, #72]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 8016196:	2180      	movs	r1, #128	@ 0x80
 8016198:	0549      	lsls	r1, r1, #21
 801619a:	430a      	orrs	r2, r1
 801619c:	63da      	str	r2, [r3, #60]	@ 0x3c
 801619e:	4b10      	ldr	r3, [pc, #64]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 80161a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80161a2:	2380      	movs	r3, #128	@ 0x80
 80161a4:	055b      	lsls	r3, r3, #21
 80161a6:	4013      	ands	r3, r2
 80161a8:	60bb      	str	r3, [r7, #8]
 80161aa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80161ac:	f7f5 f83e 	bl	800b22c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80161b0:	4b0b      	ldr	r3, [pc, #44]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 80161b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80161b4:	4b0a      	ldr	r3, [pc, #40]	@ (80161e0 <HAL_PCD_MspInit+0xb8>)
 80161b6:	490b      	ldr	r1, [pc, #44]	@ (80161e4 <HAL_PCD_MspInit+0xbc>)
 80161b8:	400a      	ands	r2, r1
 80161ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80161bc:	e001      	b.n	80161c2 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80161be:	f7f5 f835 	bl	800b22c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 80161c2:	2200      	movs	r2, #0
 80161c4:	2100      	movs	r1, #0
 80161c6:	2008      	movs	r0, #8
 80161c8:	f7f2 fdf8 	bl	8008dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80161cc:	2008      	movs	r0, #8
 80161ce:	f7f2 fe0a 	bl	8008de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 80161d2:	46c0      	nop			@ (mov r8, r8)
 80161d4:	46bd      	mov	sp, r7
 80161d6:	b019      	add	sp, #100	@ 0x64
 80161d8:	bd90      	pop	{r4, r7, pc}
 80161da:	46c0      	nop			@ (mov r8, r8)
 80161dc:	40005c00 	.word	0x40005c00
 80161e0:	40021000 	.word	0x40021000
 80161e4:	efffffff 	.word	0xefffffff

080161e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80161f0:	687a      	ldr	r2, [r7, #4]
 80161f2:	23b7      	movs	r3, #183	@ 0xb7
 80161f4:	009b      	lsls	r3, r3, #2
 80161f6:	58d2      	ldr	r2, [r2, r3]
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	21a7      	movs	r1, #167	@ 0xa7
 80161fc:	0089      	lsls	r1, r1, #2
 80161fe:	468c      	mov	ip, r1
 8016200:	4463      	add	r3, ip
 8016202:	0019      	movs	r1, r3
 8016204:	0010      	movs	r0, r2
 8016206:	f7fd fdeb 	bl	8013de0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801620a:	46c0      	nop			@ (mov r8, r8)
 801620c:	46bd      	mov	sp, r7
 801620e:	b002      	add	sp, #8
 8016210:	bd80      	pop	{r7, pc}

08016212 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016212:	b590      	push	{r4, r7, lr}
 8016214:	b083      	sub	sp, #12
 8016216:	af00      	add	r7, sp, #0
 8016218:	6078      	str	r0, [r7, #4]
 801621a:	000a      	movs	r2, r1
 801621c:	1cfb      	adds	r3, r7, #3
 801621e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016220:	687a      	ldr	r2, [r7, #4]
 8016222:	23b7      	movs	r3, #183	@ 0xb7
 8016224:	009b      	lsls	r3, r3, #2
 8016226:	58d4      	ldr	r4, [r2, r3]
 8016228:	1cfb      	adds	r3, r7, #3
 801622a:	781a      	ldrb	r2, [r3, #0]
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	23b4      	movs	r3, #180	@ 0xb4
 8016230:	0059      	lsls	r1, r3, #1
 8016232:	0013      	movs	r3, r2
 8016234:	009b      	lsls	r3, r3, #2
 8016236:	189b      	adds	r3, r3, r2
 8016238:	00db      	lsls	r3, r3, #3
 801623a:	18c3      	adds	r3, r0, r3
 801623c:	185b      	adds	r3, r3, r1
 801623e:	681a      	ldr	r2, [r3, #0]
 8016240:	1cfb      	adds	r3, r7, #3
 8016242:	781b      	ldrb	r3, [r3, #0]
 8016244:	0019      	movs	r1, r3
 8016246:	0020      	movs	r0, r4
 8016248:	f7fd fe34 	bl	8013eb4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801624c:	46c0      	nop			@ (mov r8, r8)
 801624e:	46bd      	mov	sp, r7
 8016250:	b003      	add	sp, #12
 8016252:	bd90      	pop	{r4, r7, pc}

08016254 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b082      	sub	sp, #8
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
 801625c:	000a      	movs	r2, r1
 801625e:	1cfb      	adds	r3, r7, #3
 8016260:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	23b7      	movs	r3, #183	@ 0xb7
 8016266:	009b      	lsls	r3, r3, #2
 8016268:	58d0      	ldr	r0, [r2, r3]
 801626a:	1cfb      	adds	r3, r7, #3
 801626c:	781a      	ldrb	r2, [r3, #0]
 801626e:	6879      	ldr	r1, [r7, #4]
 8016270:	0013      	movs	r3, r2
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	189b      	adds	r3, r3, r2
 8016276:	00db      	lsls	r3, r3, #3
 8016278:	18cb      	adds	r3, r1, r3
 801627a:	3328      	adds	r3, #40	@ 0x28
 801627c:	681a      	ldr	r2, [r3, #0]
 801627e:	1cfb      	adds	r3, r7, #3
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	0019      	movs	r1, r3
 8016284:	f7fd fefe 	bl	8014084 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8016288:	46c0      	nop			@ (mov r8, r8)
 801628a:	46bd      	mov	sp, r7
 801628c:	b002      	add	sp, #8
 801628e:	bd80      	pop	{r7, pc}

08016290 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	23b7      	movs	r3, #183	@ 0xb7
 801629c:	009b      	lsls	r3, r3, #2
 801629e:	58d3      	ldr	r3, [r2, r3]
 80162a0:	0018      	movs	r0, r3
 80162a2:	f7fe f869 	bl	8014378 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80162a6:	46c0      	nop			@ (mov r8, r8)
 80162a8:	46bd      	mov	sp, r7
 80162aa:	b002      	add	sp, #8
 80162ac:	bd80      	pop	{r7, pc}

080162ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162ae:	b580      	push	{r7, lr}
 80162b0:	b084      	sub	sp, #16
 80162b2:	af00      	add	r7, sp, #0
 80162b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80162b6:	230f      	movs	r3, #15
 80162b8:	18fb      	adds	r3, r7, r3
 80162ba:	2201      	movs	r2, #1
 80162bc:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	79db      	ldrb	r3, [r3, #7]
 80162c2:	2b02      	cmp	r3, #2
 80162c4:	d001      	beq.n	80162ca <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80162c6:	f7f1 f873 	bl	80073b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80162ca:	687a      	ldr	r2, [r7, #4]
 80162cc:	23b7      	movs	r3, #183	@ 0xb7
 80162ce:	009b      	lsls	r3, r3, #2
 80162d0:	58d2      	ldr	r2, [r2, r3]
 80162d2:	230f      	movs	r3, #15
 80162d4:	18fb      	adds	r3, r7, r3
 80162d6:	781b      	ldrb	r3, [r3, #0]
 80162d8:	0019      	movs	r1, r3
 80162da:	0010      	movs	r0, r2
 80162dc:	f7fe f809 	bl	80142f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80162e0:	687a      	ldr	r2, [r7, #4]
 80162e2:	23b7      	movs	r3, #183	@ 0xb7
 80162e4:	009b      	lsls	r3, r3, #2
 80162e6:	58d3      	ldr	r3, [r2, r3]
 80162e8:	0018      	movs	r0, r3
 80162ea:	f7fd ffa3 	bl	8014234 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80162ee:	46c0      	nop			@ (mov r8, r8)
 80162f0:	46bd      	mov	sp, r7
 80162f2:	b004      	add	sp, #16
 80162f4:	bd80      	pop	{r7, pc}
	...

080162f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b082      	sub	sp, #8
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016300:	687a      	ldr	r2, [r7, #4]
 8016302:	23b7      	movs	r3, #183	@ 0xb7
 8016304:	009b      	lsls	r3, r3, #2
 8016306:	58d3      	ldr	r3, [r2, r3]
 8016308:	0018      	movs	r0, r3
 801630a:	f7fe f803 	bl	8014314 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	7adb      	ldrb	r3, [r3, #11]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d005      	beq.n	8016322 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016316:	4b05      	ldr	r3, [pc, #20]	@ (801632c <HAL_PCD_SuspendCallback+0x34>)
 8016318:	691a      	ldr	r2, [r3, #16]
 801631a:	4b04      	ldr	r3, [pc, #16]	@ (801632c <HAL_PCD_SuspendCallback+0x34>)
 801631c:	2106      	movs	r1, #6
 801631e:	430a      	orrs	r2, r1
 8016320:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8016322:	46c0      	nop			@ (mov r8, r8)
 8016324:	46bd      	mov	sp, r7
 8016326:	b002      	add	sp, #8
 8016328:	bd80      	pop	{r7, pc}
 801632a:	46c0      	nop			@ (mov r8, r8)
 801632c:	e000ed00 	.word	0xe000ed00

08016330 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	7adb      	ldrb	r3, [r3, #11]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d007      	beq.n	8016350 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016340:	4b09      	ldr	r3, [pc, #36]	@ (8016368 <HAL_PCD_ResumeCallback+0x38>)
 8016342:	691a      	ldr	r2, [r3, #16]
 8016344:	4b08      	ldr	r3, [pc, #32]	@ (8016368 <HAL_PCD_ResumeCallback+0x38>)
 8016346:	2106      	movs	r1, #6
 8016348:	438a      	bics	r2, r1
 801634a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801634c:	f000 fa7c 	bl	8016848 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	23b7      	movs	r3, #183	@ 0xb7
 8016354:	009b      	lsls	r3, r3, #2
 8016356:	58d3      	ldr	r3, [r2, r3]
 8016358:	0018      	movs	r0, r3
 801635a:	f7fd fff3 	bl	8014344 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801635e:	46c0      	nop			@ (mov r8, r8)
 8016360:	46bd      	mov	sp, r7
 8016362:	b002      	add	sp, #8
 8016364:	bd80      	pop	{r7, pc}
 8016366:	46c0      	nop			@ (mov r8, r8)
 8016368:	e000ed00 	.word	0xe000ed00

0801636c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 8016374:	4a34      	ldr	r2, [pc, #208]	@ (8016448 <USBD_LL_Init+0xdc>)
 8016376:	23b7      	movs	r3, #183	@ 0xb7
 8016378:	009b      	lsls	r3, r3, #2
 801637a:	6879      	ldr	r1, [r7, #4]
 801637c:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	23b2      	movs	r3, #178	@ 0xb2
 8016382:	009b      	lsls	r3, r3, #2
 8016384:	4930      	ldr	r1, [pc, #192]	@ (8016448 <USBD_LL_Init+0xdc>)
 8016386:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8016388:	4b2f      	ldr	r3, [pc, #188]	@ (8016448 <USBD_LL_Init+0xdc>)
 801638a:	4a30      	ldr	r2, [pc, #192]	@ (801644c <USBD_LL_Init+0xe0>)
 801638c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 801638e:	4b2e      	ldr	r3, [pc, #184]	@ (8016448 <USBD_LL_Init+0xdc>)
 8016390:	2208      	movs	r2, #8
 8016392:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8016394:	4b2c      	ldr	r3, [pc, #176]	@ (8016448 <USBD_LL_Init+0xdc>)
 8016396:	2208      	movs	r2, #8
 8016398:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 801639a:	4b2b      	ldr	r3, [pc, #172]	@ (8016448 <USBD_LL_Init+0xdc>)
 801639c:	2202      	movs	r2, #2
 801639e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80163a0:	4b29      	ldr	r3, [pc, #164]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163a2:	2202      	movs	r2, #2
 80163a4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80163a6:	4b28      	ldr	r3, [pc, #160]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163a8:	2200      	movs	r2, #0
 80163aa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80163ac:	4b26      	ldr	r3, [pc, #152]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163ae:	2200      	movs	r2, #0
 80163b0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80163b2:	4b25      	ldr	r3, [pc, #148]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163b4:	2200      	movs	r2, #0
 80163b6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80163b8:	4b23      	ldr	r3, [pc, #140]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163ba:	2200      	movs	r2, #0
 80163bc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80163be:	4b22      	ldr	r3, [pc, #136]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163c0:	2200      	movs	r2, #0
 80163c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80163c4:	4b20      	ldr	r3, [pc, #128]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163c6:	2200      	movs	r2, #0
 80163c8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80163ca:	4b1f      	ldr	r3, [pc, #124]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163cc:	2200      	movs	r2, #0
 80163ce:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80163d0:	4b1d      	ldr	r3, [pc, #116]	@ (8016448 <USBD_LL_Init+0xdc>)
 80163d2:	0018      	movs	r0, r3
 80163d4:	f7f3 fa24 	bl	8009820 <HAL_PCD_Init>
 80163d8:	1e03      	subs	r3, r0, #0
 80163da:	d001      	beq.n	80163e0 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80163dc:	f7f0 ffe8 	bl	80073b0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	23b2      	movs	r3, #178	@ 0xb2
 80163e4:	009b      	lsls	r3, r3, #2
 80163e6:	58d0      	ldr	r0, [r2, r3]
 80163e8:	2318      	movs	r3, #24
 80163ea:	2200      	movs	r2, #0
 80163ec:	2100      	movs	r1, #0
 80163ee:	f7f4 feab 	bl	800b148 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80163f2:	687a      	ldr	r2, [r7, #4]
 80163f4:	23b2      	movs	r3, #178	@ 0xb2
 80163f6:	009b      	lsls	r3, r3, #2
 80163f8:	58d0      	ldr	r0, [r2, r3]
 80163fa:	2358      	movs	r3, #88	@ 0x58
 80163fc:	2200      	movs	r2, #0
 80163fe:	2180      	movs	r1, #128	@ 0x80
 8016400:	f7f4 fea2 	bl	800b148 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016404:	687a      	ldr	r2, [r7, #4]
 8016406:	23b2      	movs	r3, #178	@ 0xb2
 8016408:	009b      	lsls	r3, r3, #2
 801640a:	58d0      	ldr	r0, [r2, r3]
 801640c:	23c0      	movs	r3, #192	@ 0xc0
 801640e:	2200      	movs	r2, #0
 8016410:	2181      	movs	r1, #129	@ 0x81
 8016412:	f7f4 fe99 	bl	800b148 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016416:	687a      	ldr	r2, [r7, #4]
 8016418:	23b2      	movs	r3, #178	@ 0xb2
 801641a:	009b      	lsls	r3, r3, #2
 801641c:	58d0      	ldr	r0, [r2, r3]
 801641e:	2388      	movs	r3, #136	@ 0x88
 8016420:	005b      	lsls	r3, r3, #1
 8016422:	2200      	movs	r2, #0
 8016424:	2101      	movs	r1, #1
 8016426:	f7f4 fe8f 	bl	800b148 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801642a:	687a      	ldr	r2, [r7, #4]
 801642c:	23b2      	movs	r3, #178	@ 0xb2
 801642e:	009b      	lsls	r3, r3, #2
 8016430:	58d0      	ldr	r0, [r2, r3]
 8016432:	2380      	movs	r3, #128	@ 0x80
 8016434:	005b      	lsls	r3, r3, #1
 8016436:	2200      	movs	r2, #0
 8016438:	2182      	movs	r1, #130	@ 0x82
 801643a:	f7f4 fe85 	bl	800b148 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 801643e:	2300      	movs	r3, #0
}
 8016440:	0018      	movs	r0, r3
 8016442:	46bd      	mov	sp, r7
 8016444:	b002      	add	sp, #8
 8016446:	bd80      	pop	{r7, pc}
 8016448:	20001b30 	.word	0x20001b30
 801644c:	40005c00 	.word	0x40005c00

08016450 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016452:	b085      	sub	sp, #20
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016458:	210f      	movs	r1, #15
 801645a:	187b      	adds	r3, r7, r1
 801645c:	2200      	movs	r2, #0
 801645e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016460:	260e      	movs	r6, #14
 8016462:	19bb      	adds	r3, r7, r6
 8016464:	2200      	movs	r2, #0
 8016466:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016468:	687a      	ldr	r2, [r7, #4]
 801646a:	23b2      	movs	r3, #178	@ 0xb2
 801646c:	009b      	lsls	r3, r3, #2
 801646e:	58d3      	ldr	r3, [r2, r3]
 8016470:	000d      	movs	r5, r1
 8016472:	187c      	adds	r4, r7, r1
 8016474:	0018      	movs	r0, r3
 8016476:	f7f3 facd 	bl	8009a14 <HAL_PCD_Start>
 801647a:	0003      	movs	r3, r0
 801647c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801647e:	19bc      	adds	r4, r7, r6
 8016480:	197b      	adds	r3, r7, r5
 8016482:	781b      	ldrb	r3, [r3, #0]
 8016484:	0018      	movs	r0, r3
 8016486:	f000 f9e6 	bl	8016856 <USBD_Get_USB_Status>
 801648a:	0003      	movs	r3, r0
 801648c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801648e:	19bb      	adds	r3, r7, r6
 8016490:	781b      	ldrb	r3, [r3, #0]
}
 8016492:	0018      	movs	r0, r3
 8016494:	46bd      	mov	sp, r7
 8016496:	b005      	add	sp, #20
 8016498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801649a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801649a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801649c:	b085      	sub	sp, #20
 801649e:	af00      	add	r7, sp, #0
 80164a0:	6078      	str	r0, [r7, #4]
 80164a2:	000c      	movs	r4, r1
 80164a4:	0010      	movs	r0, r2
 80164a6:	0019      	movs	r1, r3
 80164a8:	1cfb      	adds	r3, r7, #3
 80164aa:	1c22      	adds	r2, r4, #0
 80164ac:	701a      	strb	r2, [r3, #0]
 80164ae:	1cbb      	adds	r3, r7, #2
 80164b0:	1c02      	adds	r2, r0, #0
 80164b2:	701a      	strb	r2, [r3, #0]
 80164b4:	003b      	movs	r3, r7
 80164b6:	1c0a      	adds	r2, r1, #0
 80164b8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164ba:	260f      	movs	r6, #15
 80164bc:	19bb      	adds	r3, r7, r6
 80164be:	2200      	movs	r2, #0
 80164c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164c2:	250e      	movs	r5, #14
 80164c4:	197b      	adds	r3, r7, r5
 80164c6:	2200      	movs	r2, #0
 80164c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80164ca:	687a      	ldr	r2, [r7, #4]
 80164cc:	23b2      	movs	r3, #178	@ 0xb2
 80164ce:	009b      	lsls	r3, r3, #2
 80164d0:	58d0      	ldr	r0, [r2, r3]
 80164d2:	19bc      	adds	r4, r7, r6
 80164d4:	1cbb      	adds	r3, r7, #2
 80164d6:	781d      	ldrb	r5, [r3, #0]
 80164d8:	003b      	movs	r3, r7
 80164da:	881a      	ldrh	r2, [r3, #0]
 80164dc:	1cfb      	adds	r3, r7, #3
 80164de:	7819      	ldrb	r1, [r3, #0]
 80164e0:	002b      	movs	r3, r5
 80164e2:	f7f3 fbfd 	bl	8009ce0 <HAL_PCD_EP_Open>
 80164e6:	0003      	movs	r3, r0
 80164e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80164ea:	250e      	movs	r5, #14
 80164ec:	197c      	adds	r4, r7, r5
 80164ee:	19bb      	adds	r3, r7, r6
 80164f0:	781b      	ldrb	r3, [r3, #0]
 80164f2:	0018      	movs	r0, r3
 80164f4:	f000 f9af 	bl	8016856 <USBD_Get_USB_Status>
 80164f8:	0003      	movs	r3, r0
 80164fa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80164fc:	197b      	adds	r3, r7, r5
 80164fe:	781b      	ldrb	r3, [r3, #0]
}
 8016500:	0018      	movs	r0, r3
 8016502:	46bd      	mov	sp, r7
 8016504:	b005      	add	sp, #20
 8016506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016508 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801650a:	b085      	sub	sp, #20
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	000a      	movs	r2, r1
 8016512:	1cfb      	adds	r3, r7, #3
 8016514:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016516:	210f      	movs	r1, #15
 8016518:	187b      	adds	r3, r7, r1
 801651a:	2200      	movs	r2, #0
 801651c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801651e:	260e      	movs	r6, #14
 8016520:	19bb      	adds	r3, r7, r6
 8016522:	2200      	movs	r2, #0
 8016524:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016526:	687a      	ldr	r2, [r7, #4]
 8016528:	23b2      	movs	r3, #178	@ 0xb2
 801652a:	009b      	lsls	r3, r3, #2
 801652c:	58d2      	ldr	r2, [r2, r3]
 801652e:	000d      	movs	r5, r1
 8016530:	187c      	adds	r4, r7, r1
 8016532:	1cfb      	adds	r3, r7, #3
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	0019      	movs	r1, r3
 8016538:	0010      	movs	r0, r2
 801653a:	f7f3 fc42 	bl	8009dc2 <HAL_PCD_EP_Close>
 801653e:	0003      	movs	r3, r0
 8016540:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016542:	19bc      	adds	r4, r7, r6
 8016544:	197b      	adds	r3, r7, r5
 8016546:	781b      	ldrb	r3, [r3, #0]
 8016548:	0018      	movs	r0, r3
 801654a:	f000 f984 	bl	8016856 <USBD_Get_USB_Status>
 801654e:	0003      	movs	r3, r0
 8016550:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016552:	19bb      	adds	r3, r7, r6
 8016554:	781b      	ldrb	r3, [r3, #0]
}
 8016556:	0018      	movs	r0, r3
 8016558:	46bd      	mov	sp, r7
 801655a:	b005      	add	sp, #20
 801655c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801655e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801655e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016560:	b085      	sub	sp, #20
 8016562:	af00      	add	r7, sp, #0
 8016564:	6078      	str	r0, [r7, #4]
 8016566:	000a      	movs	r2, r1
 8016568:	1cfb      	adds	r3, r7, #3
 801656a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801656c:	210f      	movs	r1, #15
 801656e:	187b      	adds	r3, r7, r1
 8016570:	2200      	movs	r2, #0
 8016572:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016574:	260e      	movs	r6, #14
 8016576:	19bb      	adds	r3, r7, r6
 8016578:	2200      	movs	r2, #0
 801657a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801657c:	687a      	ldr	r2, [r7, #4]
 801657e:	23b2      	movs	r3, #178	@ 0xb2
 8016580:	009b      	lsls	r3, r3, #2
 8016582:	58d2      	ldr	r2, [r2, r3]
 8016584:	000d      	movs	r5, r1
 8016586:	187c      	adds	r4, r7, r1
 8016588:	1cfb      	adds	r3, r7, #3
 801658a:	781b      	ldrb	r3, [r3, #0]
 801658c:	0019      	movs	r1, r3
 801658e:	0010      	movs	r0, r2
 8016590:	f7f3 fcf8 	bl	8009f84 <HAL_PCD_EP_SetStall>
 8016594:	0003      	movs	r3, r0
 8016596:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016598:	19bc      	adds	r4, r7, r6
 801659a:	197b      	adds	r3, r7, r5
 801659c:	781b      	ldrb	r3, [r3, #0]
 801659e:	0018      	movs	r0, r3
 80165a0:	f000 f959 	bl	8016856 <USBD_Get_USB_Status>
 80165a4:	0003      	movs	r3, r0
 80165a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80165a8:	19bb      	adds	r3, r7, r6
 80165aa:	781b      	ldrb	r3, [r3, #0]
}
 80165ac:	0018      	movs	r0, r3
 80165ae:	46bd      	mov	sp, r7
 80165b0:	b005      	add	sp, #20
 80165b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165b4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80165b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165b6:	b085      	sub	sp, #20
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
 80165bc:	000a      	movs	r2, r1
 80165be:	1cfb      	adds	r3, r7, #3
 80165c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165c2:	210f      	movs	r1, #15
 80165c4:	187b      	adds	r3, r7, r1
 80165c6:	2200      	movs	r2, #0
 80165c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165ca:	260e      	movs	r6, #14
 80165cc:	19bb      	adds	r3, r7, r6
 80165ce:	2200      	movs	r2, #0
 80165d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80165d2:	687a      	ldr	r2, [r7, #4]
 80165d4:	23b2      	movs	r3, #178	@ 0xb2
 80165d6:	009b      	lsls	r3, r3, #2
 80165d8:	58d2      	ldr	r2, [r2, r3]
 80165da:	000d      	movs	r5, r1
 80165dc:	187c      	adds	r4, r7, r1
 80165de:	1cfb      	adds	r3, r7, #3
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	0019      	movs	r1, r3
 80165e4:	0010      	movs	r0, r2
 80165e6:	f7f3 fd2b 	bl	800a040 <HAL_PCD_EP_ClrStall>
 80165ea:	0003      	movs	r3, r0
 80165ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165ee:	19bc      	adds	r4, r7, r6
 80165f0:	197b      	adds	r3, r7, r5
 80165f2:	781b      	ldrb	r3, [r3, #0]
 80165f4:	0018      	movs	r0, r3
 80165f6:	f000 f92e 	bl	8016856 <USBD_Get_USB_Status>
 80165fa:	0003      	movs	r3, r0
 80165fc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80165fe:	19bb      	adds	r3, r7, r6
 8016600:	781b      	ldrb	r3, [r3, #0]
}
 8016602:	0018      	movs	r0, r3
 8016604:	46bd      	mov	sp, r7
 8016606:	b005      	add	sp, #20
 8016608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801660a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801660a:	b580      	push	{r7, lr}
 801660c:	b084      	sub	sp, #16
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
 8016612:	000a      	movs	r2, r1
 8016614:	1cfb      	adds	r3, r7, #3
 8016616:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016618:	687a      	ldr	r2, [r7, #4]
 801661a:	23b2      	movs	r3, #178	@ 0xb2
 801661c:	009b      	lsls	r3, r3, #2
 801661e:	58d3      	ldr	r3, [r2, r3]
 8016620:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016622:	1cfb      	adds	r3, r7, #3
 8016624:	781b      	ldrb	r3, [r3, #0]
 8016626:	b25b      	sxtb	r3, r3
 8016628:	2b00      	cmp	r3, #0
 801662a:	da0c      	bge.n	8016646 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801662c:	1cfb      	adds	r3, r7, #3
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	227f      	movs	r2, #127	@ 0x7f
 8016632:	401a      	ands	r2, r3
 8016634:	68f9      	ldr	r1, [r7, #12]
 8016636:	0013      	movs	r3, r2
 8016638:	009b      	lsls	r3, r3, #2
 801663a:	189b      	adds	r3, r3, r2
 801663c:	00db      	lsls	r3, r3, #3
 801663e:	18cb      	adds	r3, r1, r3
 8016640:	3316      	adds	r3, #22
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	e00d      	b.n	8016662 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016646:	1cfb      	adds	r3, r7, #3
 8016648:	781b      	ldrb	r3, [r3, #0]
 801664a:	227f      	movs	r2, #127	@ 0x7f
 801664c:	401a      	ands	r2, r3
 801664e:	68f8      	ldr	r0, [r7, #12]
 8016650:	23ab      	movs	r3, #171	@ 0xab
 8016652:	0059      	lsls	r1, r3, #1
 8016654:	0013      	movs	r3, r2
 8016656:	009b      	lsls	r3, r3, #2
 8016658:	189b      	adds	r3, r3, r2
 801665a:	00db      	lsls	r3, r3, #3
 801665c:	18c3      	adds	r3, r0, r3
 801665e:	185b      	adds	r3, r3, r1
 8016660:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016662:	0018      	movs	r0, r3
 8016664:	46bd      	mov	sp, r7
 8016666:	b004      	add	sp, #16
 8016668:	bd80      	pop	{r7, pc}

0801666a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801666a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801666c:	b085      	sub	sp, #20
 801666e:	af00      	add	r7, sp, #0
 8016670:	6078      	str	r0, [r7, #4]
 8016672:	000a      	movs	r2, r1
 8016674:	1cfb      	adds	r3, r7, #3
 8016676:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016678:	210f      	movs	r1, #15
 801667a:	187b      	adds	r3, r7, r1
 801667c:	2200      	movs	r2, #0
 801667e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016680:	260e      	movs	r6, #14
 8016682:	19bb      	adds	r3, r7, r6
 8016684:	2200      	movs	r2, #0
 8016686:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016688:	687a      	ldr	r2, [r7, #4]
 801668a:	23b2      	movs	r3, #178	@ 0xb2
 801668c:	009b      	lsls	r3, r3, #2
 801668e:	58d2      	ldr	r2, [r2, r3]
 8016690:	000d      	movs	r5, r1
 8016692:	187c      	adds	r4, r7, r1
 8016694:	1cfb      	adds	r3, r7, #3
 8016696:	781b      	ldrb	r3, [r3, #0]
 8016698:	0019      	movs	r1, r3
 801669a:	0010      	movs	r0, r2
 801669c:	f7f3 faf6 	bl	8009c8c <HAL_PCD_SetAddress>
 80166a0:	0003      	movs	r3, r0
 80166a2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166a4:	19bc      	adds	r4, r7, r6
 80166a6:	197b      	adds	r3, r7, r5
 80166a8:	781b      	ldrb	r3, [r3, #0]
 80166aa:	0018      	movs	r0, r3
 80166ac:	f000 f8d3 	bl	8016856 <USBD_Get_USB_Status>
 80166b0:	0003      	movs	r3, r0
 80166b2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80166b4:	19bb      	adds	r3, r7, r6
 80166b6:	781b      	ldrb	r3, [r3, #0]
}
 80166b8:	0018      	movs	r0, r3
 80166ba:	46bd      	mov	sp, r7
 80166bc:	b005      	add	sp, #20
 80166be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080166c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80166c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166c2:	b087      	sub	sp, #28
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	607a      	str	r2, [r7, #4]
 80166ca:	603b      	str	r3, [r7, #0]
 80166cc:	230b      	movs	r3, #11
 80166ce:	18fb      	adds	r3, r7, r3
 80166d0:	1c0a      	adds	r2, r1, #0
 80166d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166d4:	2617      	movs	r6, #23
 80166d6:	19bb      	adds	r3, r7, r6
 80166d8:	2200      	movs	r2, #0
 80166da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166dc:	2516      	movs	r5, #22
 80166de:	197b      	adds	r3, r7, r5
 80166e0:	2200      	movs	r2, #0
 80166e2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80166e4:	68fa      	ldr	r2, [r7, #12]
 80166e6:	23b2      	movs	r3, #178	@ 0xb2
 80166e8:	009b      	lsls	r3, r3, #2
 80166ea:	58d0      	ldr	r0, [r2, r3]
 80166ec:	19bc      	adds	r4, r7, r6
 80166ee:	683d      	ldr	r5, [r7, #0]
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	230b      	movs	r3, #11
 80166f4:	18fb      	adds	r3, r7, r3
 80166f6:	7819      	ldrb	r1, [r3, #0]
 80166f8:	002b      	movs	r3, r5
 80166fa:	f7f3 fc06 	bl	8009f0a <HAL_PCD_EP_Transmit>
 80166fe:	0003      	movs	r3, r0
 8016700:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016702:	2516      	movs	r5, #22
 8016704:	197c      	adds	r4, r7, r5
 8016706:	19bb      	adds	r3, r7, r6
 8016708:	781b      	ldrb	r3, [r3, #0]
 801670a:	0018      	movs	r0, r3
 801670c:	f000 f8a3 	bl	8016856 <USBD_Get_USB_Status>
 8016710:	0003      	movs	r3, r0
 8016712:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016714:	197b      	adds	r3, r7, r5
 8016716:	781b      	ldrb	r3, [r3, #0]
}
 8016718:	0018      	movs	r0, r3
 801671a:	46bd      	mov	sp, r7
 801671c:	b007      	add	sp, #28
 801671e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016722:	b087      	sub	sp, #28
 8016724:	af00      	add	r7, sp, #0
 8016726:	60f8      	str	r0, [r7, #12]
 8016728:	607a      	str	r2, [r7, #4]
 801672a:	603b      	str	r3, [r7, #0]
 801672c:	230b      	movs	r3, #11
 801672e:	18fb      	adds	r3, r7, r3
 8016730:	1c0a      	adds	r2, r1, #0
 8016732:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016734:	2617      	movs	r6, #23
 8016736:	19bb      	adds	r3, r7, r6
 8016738:	2200      	movs	r2, #0
 801673a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801673c:	2516      	movs	r5, #22
 801673e:	197b      	adds	r3, r7, r5
 8016740:	2200      	movs	r2, #0
 8016742:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016744:	68fa      	ldr	r2, [r7, #12]
 8016746:	23b2      	movs	r3, #178	@ 0xb2
 8016748:	009b      	lsls	r3, r3, #2
 801674a:	58d0      	ldr	r0, [r2, r3]
 801674c:	19bc      	adds	r4, r7, r6
 801674e:	683d      	ldr	r5, [r7, #0]
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	230b      	movs	r3, #11
 8016754:	18fb      	adds	r3, r7, r3
 8016756:	7819      	ldrb	r1, [r3, #0]
 8016758:	002b      	movs	r3, r5
 801675a:	f7f3 fb85 	bl	8009e68 <HAL_PCD_EP_Receive>
 801675e:	0003      	movs	r3, r0
 8016760:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016762:	2516      	movs	r5, #22
 8016764:	197c      	adds	r4, r7, r5
 8016766:	19bb      	adds	r3, r7, r6
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	0018      	movs	r0, r3
 801676c:	f000 f873 	bl	8016856 <USBD_Get_USB_Status>
 8016770:	0003      	movs	r3, r0
 8016772:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016774:	197b      	adds	r3, r7, r5
 8016776:	781b      	ldrb	r3, [r3, #0]
}
 8016778:	0018      	movs	r0, r3
 801677a:	46bd      	mov	sp, r7
 801677c:	b007      	add	sp, #28
 801677e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016780 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	000a      	movs	r2, r1
 801678a:	1cfb      	adds	r3, r7, #3
 801678c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801678e:	687a      	ldr	r2, [r7, #4]
 8016790:	23b2      	movs	r3, #178	@ 0xb2
 8016792:	009b      	lsls	r3, r3, #2
 8016794:	58d2      	ldr	r2, [r2, r3]
 8016796:	1cfb      	adds	r3, r7, #3
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	0019      	movs	r1, r3
 801679c:	0010      	movs	r0, r2
 801679e:	f7f3 fb9b 	bl	8009ed8 <HAL_PCD_EP_GetRxCount>
 80167a2:	0003      	movs	r3, r0
}
 80167a4:	0018      	movs	r0, r3
 80167a6:	46bd      	mov	sp, r7
 80167a8:	b002      	add	sp, #8
 80167aa:	bd80      	pop	{r7, pc}

080167ac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	000a      	movs	r2, r1
 80167b6:	1cfb      	adds	r3, r7, #3
 80167b8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80167ba:	1cfb      	adds	r3, r7, #3
 80167bc:	781b      	ldrb	r3, [r3, #0]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d002      	beq.n	80167c8 <HAL_PCDEx_LPM_Callback+0x1c>
 80167c2:	2b01      	cmp	r3, #1
 80167c4:	d014      	beq.n	80167f0 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80167c6:	e025      	b.n	8016814 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	7adb      	ldrb	r3, [r3, #11]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d007      	beq.n	80167e0 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 80167d0:	f000 f83a 	bl	8016848 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80167d4:	4b11      	ldr	r3, [pc, #68]	@ (801681c <HAL_PCDEx_LPM_Callback+0x70>)
 80167d6:	691a      	ldr	r2, [r3, #16]
 80167d8:	4b10      	ldr	r3, [pc, #64]	@ (801681c <HAL_PCDEx_LPM_Callback+0x70>)
 80167da:	2106      	movs	r1, #6
 80167dc:	438a      	bics	r2, r1
 80167de:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 80167e0:	687a      	ldr	r2, [r7, #4]
 80167e2:	23b7      	movs	r3, #183	@ 0xb7
 80167e4:	009b      	lsls	r3, r3, #2
 80167e6:	58d3      	ldr	r3, [r2, r3]
 80167e8:	0018      	movs	r0, r3
 80167ea:	f7fd fdab 	bl	8014344 <USBD_LL_Resume>
    break;
 80167ee:	e011      	b.n	8016814 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	23b7      	movs	r3, #183	@ 0xb7
 80167f4:	009b      	lsls	r3, r3, #2
 80167f6:	58d3      	ldr	r3, [r2, r3]
 80167f8:	0018      	movs	r0, r3
 80167fa:	f7fd fd8b 	bl	8014314 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	7adb      	ldrb	r3, [r3, #11]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d005      	beq.n	8016812 <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016806:	4b05      	ldr	r3, [pc, #20]	@ (801681c <HAL_PCDEx_LPM_Callback+0x70>)
 8016808:	691a      	ldr	r2, [r3, #16]
 801680a:	4b04      	ldr	r3, [pc, #16]	@ (801681c <HAL_PCDEx_LPM_Callback+0x70>)
 801680c:	2106      	movs	r1, #6
 801680e:	430a      	orrs	r2, r1
 8016810:	611a      	str	r2, [r3, #16]
    break;
 8016812:	46c0      	nop			@ (mov r8, r8)
}
 8016814:	46c0      	nop			@ (mov r8, r8)
 8016816:	46bd      	mov	sp, r7
 8016818:	b002      	add	sp, #8
 801681a:	bd80      	pop	{r7, pc}
 801681c:	e000ed00 	.word	0xe000ed00

08016820 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016828:	4b02      	ldr	r3, [pc, #8]	@ (8016834 <USBD_static_malloc+0x14>)
}
 801682a:	0018      	movs	r0, r3
 801682c:	46bd      	mov	sp, r7
 801682e:	b002      	add	sp, #8
 8016830:	bd80      	pop	{r7, pc}
 8016832:	46c0      	nop			@ (mov r8, r8)
 8016834:	20001e10 	.word	0x20001e10

08016838 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]

}
 8016840:	46c0      	nop			@ (mov r8, r8)
 8016842:	46bd      	mov	sp, r7
 8016844:	b002      	add	sp, #8
 8016846:	bd80      	pop	{r7, pc}

08016848 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801684c:	f7f0 fd4e 	bl	80072ec <SystemClock_Config>
}
 8016850:	46c0      	nop			@ (mov r8, r8)
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}

08016856 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016856:	b580      	push	{r7, lr}
 8016858:	b084      	sub	sp, #16
 801685a:	af00      	add	r7, sp, #0
 801685c:	0002      	movs	r2, r0
 801685e:	1dfb      	adds	r3, r7, #7
 8016860:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016862:	230f      	movs	r3, #15
 8016864:	18fb      	adds	r3, r7, r3
 8016866:	2200      	movs	r2, #0
 8016868:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801686a:	1dfb      	adds	r3, r7, #7
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	2b03      	cmp	r3, #3
 8016870:	d017      	beq.n	80168a2 <USBD_Get_USB_Status+0x4c>
 8016872:	dc1b      	bgt.n	80168ac <USBD_Get_USB_Status+0x56>
 8016874:	2b02      	cmp	r3, #2
 8016876:	d00f      	beq.n	8016898 <USBD_Get_USB_Status+0x42>
 8016878:	dc18      	bgt.n	80168ac <USBD_Get_USB_Status+0x56>
 801687a:	2b00      	cmp	r3, #0
 801687c:	d002      	beq.n	8016884 <USBD_Get_USB_Status+0x2e>
 801687e:	2b01      	cmp	r3, #1
 8016880:	d005      	beq.n	801688e <USBD_Get_USB_Status+0x38>
 8016882:	e013      	b.n	80168ac <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016884:	230f      	movs	r3, #15
 8016886:	18fb      	adds	r3, r7, r3
 8016888:	2200      	movs	r2, #0
 801688a:	701a      	strb	r2, [r3, #0]
    break;
 801688c:	e013      	b.n	80168b6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801688e:	230f      	movs	r3, #15
 8016890:	18fb      	adds	r3, r7, r3
 8016892:	2203      	movs	r2, #3
 8016894:	701a      	strb	r2, [r3, #0]
    break;
 8016896:	e00e      	b.n	80168b6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016898:	230f      	movs	r3, #15
 801689a:	18fb      	adds	r3, r7, r3
 801689c:	2201      	movs	r2, #1
 801689e:	701a      	strb	r2, [r3, #0]
    break;
 80168a0:	e009      	b.n	80168b6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80168a2:	230f      	movs	r3, #15
 80168a4:	18fb      	adds	r3, r7, r3
 80168a6:	2203      	movs	r2, #3
 80168a8:	701a      	strb	r2, [r3, #0]
    break;
 80168aa:	e004      	b.n	80168b6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80168ac:	230f      	movs	r3, #15
 80168ae:	18fb      	adds	r3, r7, r3
 80168b0:	2203      	movs	r2, #3
 80168b2:	701a      	strb	r2, [r3, #0]
    break;
 80168b4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80168b6:	230f      	movs	r3, #15
 80168b8:	18fb      	adds	r3, r7, r3
 80168ba:	781b      	ldrb	r3, [r3, #0]
}
 80168bc:	0018      	movs	r0, r3
 80168be:	46bd      	mov	sp, r7
 80168c0:	b004      	add	sp, #16
 80168c2:	bd80      	pop	{r7, pc}

080168c4 <malloc>:
 80168c4:	b510      	push	{r4, lr}
 80168c6:	4b03      	ldr	r3, [pc, #12]	@ (80168d4 <malloc+0x10>)
 80168c8:	0001      	movs	r1, r0
 80168ca:	6818      	ldr	r0, [r3, #0]
 80168cc:	f000 f826 	bl	801691c <_malloc_r>
 80168d0:	bd10      	pop	{r4, pc}
 80168d2:	46c0      	nop			@ (mov r8, r8)
 80168d4:	200001c4 	.word	0x200001c4

080168d8 <sbrk_aligned>:
 80168d8:	b570      	push	{r4, r5, r6, lr}
 80168da:	4e0f      	ldr	r6, [pc, #60]	@ (8016918 <sbrk_aligned+0x40>)
 80168dc:	000d      	movs	r5, r1
 80168de:	6831      	ldr	r1, [r6, #0]
 80168e0:	0004      	movs	r4, r0
 80168e2:	2900      	cmp	r1, #0
 80168e4:	d102      	bne.n	80168ec <sbrk_aligned+0x14>
 80168e6:	f000 f8d3 	bl	8016a90 <_sbrk_r>
 80168ea:	6030      	str	r0, [r6, #0]
 80168ec:	0029      	movs	r1, r5
 80168ee:	0020      	movs	r0, r4
 80168f0:	f000 f8ce 	bl	8016a90 <_sbrk_r>
 80168f4:	1c43      	adds	r3, r0, #1
 80168f6:	d103      	bne.n	8016900 <sbrk_aligned+0x28>
 80168f8:	2501      	movs	r5, #1
 80168fa:	426d      	negs	r5, r5
 80168fc:	0028      	movs	r0, r5
 80168fe:	bd70      	pop	{r4, r5, r6, pc}
 8016900:	2303      	movs	r3, #3
 8016902:	1cc5      	adds	r5, r0, #3
 8016904:	439d      	bics	r5, r3
 8016906:	42a8      	cmp	r0, r5
 8016908:	d0f8      	beq.n	80168fc <sbrk_aligned+0x24>
 801690a:	1a29      	subs	r1, r5, r0
 801690c:	0020      	movs	r0, r4
 801690e:	f000 f8bf 	bl	8016a90 <_sbrk_r>
 8016912:	3001      	adds	r0, #1
 8016914:	d1f2      	bne.n	80168fc <sbrk_aligned+0x24>
 8016916:	e7ef      	b.n	80168f8 <sbrk_aligned+0x20>
 8016918:	20002030 	.word	0x20002030

0801691c <_malloc_r>:
 801691c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801691e:	2203      	movs	r2, #3
 8016920:	1ccb      	adds	r3, r1, #3
 8016922:	4393      	bics	r3, r2
 8016924:	3308      	adds	r3, #8
 8016926:	0005      	movs	r5, r0
 8016928:	001f      	movs	r7, r3
 801692a:	2b0c      	cmp	r3, #12
 801692c:	d234      	bcs.n	8016998 <_malloc_r+0x7c>
 801692e:	270c      	movs	r7, #12
 8016930:	42b9      	cmp	r1, r7
 8016932:	d833      	bhi.n	801699c <_malloc_r+0x80>
 8016934:	0028      	movs	r0, r5
 8016936:	f000 f871 	bl	8016a1c <__malloc_lock>
 801693a:	4e37      	ldr	r6, [pc, #220]	@ (8016a18 <_malloc_r+0xfc>)
 801693c:	6833      	ldr	r3, [r6, #0]
 801693e:	001c      	movs	r4, r3
 8016940:	2c00      	cmp	r4, #0
 8016942:	d12f      	bne.n	80169a4 <_malloc_r+0x88>
 8016944:	0039      	movs	r1, r7
 8016946:	0028      	movs	r0, r5
 8016948:	f7ff ffc6 	bl	80168d8 <sbrk_aligned>
 801694c:	0004      	movs	r4, r0
 801694e:	1c43      	adds	r3, r0, #1
 8016950:	d15f      	bne.n	8016a12 <_malloc_r+0xf6>
 8016952:	6834      	ldr	r4, [r6, #0]
 8016954:	9400      	str	r4, [sp, #0]
 8016956:	9b00      	ldr	r3, [sp, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d14a      	bne.n	80169f2 <_malloc_r+0xd6>
 801695c:	2c00      	cmp	r4, #0
 801695e:	d052      	beq.n	8016a06 <_malloc_r+0xea>
 8016960:	6823      	ldr	r3, [r4, #0]
 8016962:	0028      	movs	r0, r5
 8016964:	18e3      	adds	r3, r4, r3
 8016966:	9900      	ldr	r1, [sp, #0]
 8016968:	9301      	str	r3, [sp, #4]
 801696a:	f000 f891 	bl	8016a90 <_sbrk_r>
 801696e:	9b01      	ldr	r3, [sp, #4]
 8016970:	4283      	cmp	r3, r0
 8016972:	d148      	bne.n	8016a06 <_malloc_r+0xea>
 8016974:	6823      	ldr	r3, [r4, #0]
 8016976:	0028      	movs	r0, r5
 8016978:	1aff      	subs	r7, r7, r3
 801697a:	0039      	movs	r1, r7
 801697c:	f7ff ffac 	bl	80168d8 <sbrk_aligned>
 8016980:	3001      	adds	r0, #1
 8016982:	d040      	beq.n	8016a06 <_malloc_r+0xea>
 8016984:	6823      	ldr	r3, [r4, #0]
 8016986:	19db      	adds	r3, r3, r7
 8016988:	6023      	str	r3, [r4, #0]
 801698a:	6833      	ldr	r3, [r6, #0]
 801698c:	685a      	ldr	r2, [r3, #4]
 801698e:	2a00      	cmp	r2, #0
 8016990:	d133      	bne.n	80169fa <_malloc_r+0xde>
 8016992:	9b00      	ldr	r3, [sp, #0]
 8016994:	6033      	str	r3, [r6, #0]
 8016996:	e019      	b.n	80169cc <_malloc_r+0xb0>
 8016998:	2b00      	cmp	r3, #0
 801699a:	dac9      	bge.n	8016930 <_malloc_r+0x14>
 801699c:	230c      	movs	r3, #12
 801699e:	602b      	str	r3, [r5, #0]
 80169a0:	2000      	movs	r0, #0
 80169a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80169a4:	6821      	ldr	r1, [r4, #0]
 80169a6:	1bc9      	subs	r1, r1, r7
 80169a8:	d420      	bmi.n	80169ec <_malloc_r+0xd0>
 80169aa:	290b      	cmp	r1, #11
 80169ac:	d90a      	bls.n	80169c4 <_malloc_r+0xa8>
 80169ae:	19e2      	adds	r2, r4, r7
 80169b0:	6027      	str	r7, [r4, #0]
 80169b2:	42a3      	cmp	r3, r4
 80169b4:	d104      	bne.n	80169c0 <_malloc_r+0xa4>
 80169b6:	6032      	str	r2, [r6, #0]
 80169b8:	6863      	ldr	r3, [r4, #4]
 80169ba:	6011      	str	r1, [r2, #0]
 80169bc:	6053      	str	r3, [r2, #4]
 80169be:	e005      	b.n	80169cc <_malloc_r+0xb0>
 80169c0:	605a      	str	r2, [r3, #4]
 80169c2:	e7f9      	b.n	80169b8 <_malloc_r+0x9c>
 80169c4:	6862      	ldr	r2, [r4, #4]
 80169c6:	42a3      	cmp	r3, r4
 80169c8:	d10e      	bne.n	80169e8 <_malloc_r+0xcc>
 80169ca:	6032      	str	r2, [r6, #0]
 80169cc:	0028      	movs	r0, r5
 80169ce:	f000 f82d 	bl	8016a2c <__malloc_unlock>
 80169d2:	0020      	movs	r0, r4
 80169d4:	2207      	movs	r2, #7
 80169d6:	300b      	adds	r0, #11
 80169d8:	1d23      	adds	r3, r4, #4
 80169da:	4390      	bics	r0, r2
 80169dc:	1ac2      	subs	r2, r0, r3
 80169de:	4298      	cmp	r0, r3
 80169e0:	d0df      	beq.n	80169a2 <_malloc_r+0x86>
 80169e2:	1a1b      	subs	r3, r3, r0
 80169e4:	50a3      	str	r3, [r4, r2]
 80169e6:	e7dc      	b.n	80169a2 <_malloc_r+0x86>
 80169e8:	605a      	str	r2, [r3, #4]
 80169ea:	e7ef      	b.n	80169cc <_malloc_r+0xb0>
 80169ec:	0023      	movs	r3, r4
 80169ee:	6864      	ldr	r4, [r4, #4]
 80169f0:	e7a6      	b.n	8016940 <_malloc_r+0x24>
 80169f2:	9c00      	ldr	r4, [sp, #0]
 80169f4:	6863      	ldr	r3, [r4, #4]
 80169f6:	9300      	str	r3, [sp, #0]
 80169f8:	e7ad      	b.n	8016956 <_malloc_r+0x3a>
 80169fa:	001a      	movs	r2, r3
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	42a3      	cmp	r3, r4
 8016a00:	d1fb      	bne.n	80169fa <_malloc_r+0xde>
 8016a02:	2300      	movs	r3, #0
 8016a04:	e7da      	b.n	80169bc <_malloc_r+0xa0>
 8016a06:	230c      	movs	r3, #12
 8016a08:	0028      	movs	r0, r5
 8016a0a:	602b      	str	r3, [r5, #0]
 8016a0c:	f000 f80e 	bl	8016a2c <__malloc_unlock>
 8016a10:	e7c6      	b.n	80169a0 <_malloc_r+0x84>
 8016a12:	6007      	str	r7, [r0, #0]
 8016a14:	e7da      	b.n	80169cc <_malloc_r+0xb0>
 8016a16:	46c0      	nop			@ (mov r8, r8)
 8016a18:	20002034 	.word	0x20002034

08016a1c <__malloc_lock>:
 8016a1c:	b510      	push	{r4, lr}
 8016a1e:	4802      	ldr	r0, [pc, #8]	@ (8016a28 <__malloc_lock+0xc>)
 8016a20:	f000 f872 	bl	8016b08 <__retarget_lock_acquire_recursive>
 8016a24:	bd10      	pop	{r4, pc}
 8016a26:	46c0      	nop			@ (mov r8, r8)
 8016a28:	20002174 	.word	0x20002174

08016a2c <__malloc_unlock>:
 8016a2c:	b510      	push	{r4, lr}
 8016a2e:	4802      	ldr	r0, [pc, #8]	@ (8016a38 <__malloc_unlock+0xc>)
 8016a30:	f000 f86b 	bl	8016b0a <__retarget_lock_release_recursive>
 8016a34:	bd10      	pop	{r4, pc}
 8016a36:	46c0      	nop			@ (mov r8, r8)
 8016a38:	20002174 	.word	0x20002174

08016a3c <siprintf>:
 8016a3c:	b40e      	push	{r1, r2, r3}
 8016a3e:	b510      	push	{r4, lr}
 8016a40:	2400      	movs	r4, #0
 8016a42:	490c      	ldr	r1, [pc, #48]	@ (8016a74 <siprintf+0x38>)
 8016a44:	b09d      	sub	sp, #116	@ 0x74
 8016a46:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016a48:	9002      	str	r0, [sp, #8]
 8016a4a:	9006      	str	r0, [sp, #24]
 8016a4c:	9107      	str	r1, [sp, #28]
 8016a4e:	9104      	str	r1, [sp, #16]
 8016a50:	4809      	ldr	r0, [pc, #36]	@ (8016a78 <siprintf+0x3c>)
 8016a52:	490a      	ldr	r1, [pc, #40]	@ (8016a7c <siprintf+0x40>)
 8016a54:	cb04      	ldmia	r3!, {r2}
 8016a56:	9105      	str	r1, [sp, #20]
 8016a58:	6800      	ldr	r0, [r0, #0]
 8016a5a:	a902      	add	r1, sp, #8
 8016a5c:	9301      	str	r3, [sp, #4]
 8016a5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016a60:	f000 f918 	bl	8016c94 <_svfiprintf_r>
 8016a64:	9b02      	ldr	r3, [sp, #8]
 8016a66:	701c      	strb	r4, [r3, #0]
 8016a68:	b01d      	add	sp, #116	@ 0x74
 8016a6a:	bc10      	pop	{r4}
 8016a6c:	bc08      	pop	{r3}
 8016a6e:	b003      	add	sp, #12
 8016a70:	4718      	bx	r3
 8016a72:	46c0      	nop			@ (mov r8, r8)
 8016a74:	7fffffff 	.word	0x7fffffff
 8016a78:	200001c4 	.word	0x200001c4
 8016a7c:	ffff0208 	.word	0xffff0208

08016a80 <memset>:
 8016a80:	0003      	movs	r3, r0
 8016a82:	1882      	adds	r2, r0, r2
 8016a84:	4293      	cmp	r3, r2
 8016a86:	d100      	bne.n	8016a8a <memset+0xa>
 8016a88:	4770      	bx	lr
 8016a8a:	7019      	strb	r1, [r3, #0]
 8016a8c:	3301      	adds	r3, #1
 8016a8e:	e7f9      	b.n	8016a84 <memset+0x4>

08016a90 <_sbrk_r>:
 8016a90:	2300      	movs	r3, #0
 8016a92:	b570      	push	{r4, r5, r6, lr}
 8016a94:	4d06      	ldr	r5, [pc, #24]	@ (8016ab0 <_sbrk_r+0x20>)
 8016a96:	0004      	movs	r4, r0
 8016a98:	0008      	movs	r0, r1
 8016a9a:	602b      	str	r3, [r5, #0]
 8016a9c:	f7f0 fcee 	bl	800747c <_sbrk>
 8016aa0:	1c43      	adds	r3, r0, #1
 8016aa2:	d103      	bne.n	8016aac <_sbrk_r+0x1c>
 8016aa4:	682b      	ldr	r3, [r5, #0]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d000      	beq.n	8016aac <_sbrk_r+0x1c>
 8016aaa:	6023      	str	r3, [r4, #0]
 8016aac:	bd70      	pop	{r4, r5, r6, pc}
 8016aae:	46c0      	nop			@ (mov r8, r8)
 8016ab0:	20002170 	.word	0x20002170

08016ab4 <__errno>:
 8016ab4:	4b01      	ldr	r3, [pc, #4]	@ (8016abc <__errno+0x8>)
 8016ab6:	6818      	ldr	r0, [r3, #0]
 8016ab8:	4770      	bx	lr
 8016aba:	46c0      	nop			@ (mov r8, r8)
 8016abc:	200001c4 	.word	0x200001c4

08016ac0 <__libc_init_array>:
 8016ac0:	b570      	push	{r4, r5, r6, lr}
 8016ac2:	2600      	movs	r6, #0
 8016ac4:	4c0c      	ldr	r4, [pc, #48]	@ (8016af8 <__libc_init_array+0x38>)
 8016ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8016afc <__libc_init_array+0x3c>)
 8016ac8:	1b64      	subs	r4, r4, r5
 8016aca:	10a4      	asrs	r4, r4, #2
 8016acc:	42a6      	cmp	r6, r4
 8016ace:	d109      	bne.n	8016ae4 <__libc_init_array+0x24>
 8016ad0:	2600      	movs	r6, #0
 8016ad2:	f000 fbaf 	bl	8017234 <_init>
 8016ad6:	4c0a      	ldr	r4, [pc, #40]	@ (8016b00 <__libc_init_array+0x40>)
 8016ad8:	4d0a      	ldr	r5, [pc, #40]	@ (8016b04 <__libc_init_array+0x44>)
 8016ada:	1b64      	subs	r4, r4, r5
 8016adc:	10a4      	asrs	r4, r4, #2
 8016ade:	42a6      	cmp	r6, r4
 8016ae0:	d105      	bne.n	8016aee <__libc_init_array+0x2e>
 8016ae2:	bd70      	pop	{r4, r5, r6, pc}
 8016ae4:	00b3      	lsls	r3, r6, #2
 8016ae6:	58eb      	ldr	r3, [r5, r3]
 8016ae8:	4798      	blx	r3
 8016aea:	3601      	adds	r6, #1
 8016aec:	e7ee      	b.n	8016acc <__libc_init_array+0xc>
 8016aee:	00b3      	lsls	r3, r6, #2
 8016af0:	58eb      	ldr	r3, [r5, r3]
 8016af2:	4798      	blx	r3
 8016af4:	3601      	adds	r6, #1
 8016af6:	e7f2      	b.n	8016ade <__libc_init_array+0x1e>
 8016af8:	080175b8 	.word	0x080175b8
 8016afc:	080175b8 	.word	0x080175b8
 8016b00:	080175bc 	.word	0x080175bc
 8016b04:	080175b8 	.word	0x080175b8

08016b08 <__retarget_lock_acquire_recursive>:
 8016b08:	4770      	bx	lr

08016b0a <__retarget_lock_release_recursive>:
 8016b0a:	4770      	bx	lr

08016b0c <__aeabi_memcpy>:
 8016b0c:	b510      	push	{r4, lr}
 8016b0e:	f000 f80d 	bl	8016b2c <memcpy>
 8016b12:	bd10      	pop	{r4, pc}

08016b14 <__aeabi_memset>:
 8016b14:	000b      	movs	r3, r1
 8016b16:	b510      	push	{r4, lr}
 8016b18:	0011      	movs	r1, r2
 8016b1a:	001a      	movs	r2, r3
 8016b1c:	f7ff ffb0 	bl	8016a80 <memset>
 8016b20:	bd10      	pop	{r4, pc}

08016b22 <__aeabi_memclr>:
 8016b22:	b510      	push	{r4, lr}
 8016b24:	2200      	movs	r2, #0
 8016b26:	f7ff fff5 	bl	8016b14 <__aeabi_memset>
 8016b2a:	bd10      	pop	{r4, pc}

08016b2c <memcpy>:
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	b510      	push	{r4, lr}
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d100      	bne.n	8016b36 <memcpy+0xa>
 8016b34:	bd10      	pop	{r4, pc}
 8016b36:	5ccc      	ldrb	r4, [r1, r3]
 8016b38:	54c4      	strb	r4, [r0, r3]
 8016b3a:	3301      	adds	r3, #1
 8016b3c:	e7f8      	b.n	8016b30 <memcpy+0x4>
	...

08016b40 <_free_r>:
 8016b40:	b570      	push	{r4, r5, r6, lr}
 8016b42:	0005      	movs	r5, r0
 8016b44:	1e0c      	subs	r4, r1, #0
 8016b46:	d010      	beq.n	8016b6a <_free_r+0x2a>
 8016b48:	3c04      	subs	r4, #4
 8016b4a:	6823      	ldr	r3, [r4, #0]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	da00      	bge.n	8016b52 <_free_r+0x12>
 8016b50:	18e4      	adds	r4, r4, r3
 8016b52:	0028      	movs	r0, r5
 8016b54:	f7ff ff62 	bl	8016a1c <__malloc_lock>
 8016b58:	4a1d      	ldr	r2, [pc, #116]	@ (8016bd0 <_free_r+0x90>)
 8016b5a:	6813      	ldr	r3, [r2, #0]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d105      	bne.n	8016b6c <_free_r+0x2c>
 8016b60:	6063      	str	r3, [r4, #4]
 8016b62:	6014      	str	r4, [r2, #0]
 8016b64:	0028      	movs	r0, r5
 8016b66:	f7ff ff61 	bl	8016a2c <__malloc_unlock>
 8016b6a:	bd70      	pop	{r4, r5, r6, pc}
 8016b6c:	42a3      	cmp	r3, r4
 8016b6e:	d908      	bls.n	8016b82 <_free_r+0x42>
 8016b70:	6820      	ldr	r0, [r4, #0]
 8016b72:	1821      	adds	r1, r4, r0
 8016b74:	428b      	cmp	r3, r1
 8016b76:	d1f3      	bne.n	8016b60 <_free_r+0x20>
 8016b78:	6819      	ldr	r1, [r3, #0]
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	1809      	adds	r1, r1, r0
 8016b7e:	6021      	str	r1, [r4, #0]
 8016b80:	e7ee      	b.n	8016b60 <_free_r+0x20>
 8016b82:	001a      	movs	r2, r3
 8016b84:	685b      	ldr	r3, [r3, #4]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d001      	beq.n	8016b8e <_free_r+0x4e>
 8016b8a:	42a3      	cmp	r3, r4
 8016b8c:	d9f9      	bls.n	8016b82 <_free_r+0x42>
 8016b8e:	6811      	ldr	r1, [r2, #0]
 8016b90:	1850      	adds	r0, r2, r1
 8016b92:	42a0      	cmp	r0, r4
 8016b94:	d10b      	bne.n	8016bae <_free_r+0x6e>
 8016b96:	6820      	ldr	r0, [r4, #0]
 8016b98:	1809      	adds	r1, r1, r0
 8016b9a:	1850      	adds	r0, r2, r1
 8016b9c:	6011      	str	r1, [r2, #0]
 8016b9e:	4283      	cmp	r3, r0
 8016ba0:	d1e0      	bne.n	8016b64 <_free_r+0x24>
 8016ba2:	6818      	ldr	r0, [r3, #0]
 8016ba4:	685b      	ldr	r3, [r3, #4]
 8016ba6:	1841      	adds	r1, r0, r1
 8016ba8:	6011      	str	r1, [r2, #0]
 8016baa:	6053      	str	r3, [r2, #4]
 8016bac:	e7da      	b.n	8016b64 <_free_r+0x24>
 8016bae:	42a0      	cmp	r0, r4
 8016bb0:	d902      	bls.n	8016bb8 <_free_r+0x78>
 8016bb2:	230c      	movs	r3, #12
 8016bb4:	602b      	str	r3, [r5, #0]
 8016bb6:	e7d5      	b.n	8016b64 <_free_r+0x24>
 8016bb8:	6820      	ldr	r0, [r4, #0]
 8016bba:	1821      	adds	r1, r4, r0
 8016bbc:	428b      	cmp	r3, r1
 8016bbe:	d103      	bne.n	8016bc8 <_free_r+0x88>
 8016bc0:	6819      	ldr	r1, [r3, #0]
 8016bc2:	685b      	ldr	r3, [r3, #4]
 8016bc4:	1809      	adds	r1, r1, r0
 8016bc6:	6021      	str	r1, [r4, #0]
 8016bc8:	6063      	str	r3, [r4, #4]
 8016bca:	6054      	str	r4, [r2, #4]
 8016bcc:	e7ca      	b.n	8016b64 <_free_r+0x24>
 8016bce:	46c0      	nop			@ (mov r8, r8)
 8016bd0:	20002034 	.word	0x20002034

08016bd4 <__ssputs_r>:
 8016bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bd6:	688e      	ldr	r6, [r1, #8]
 8016bd8:	b085      	sub	sp, #20
 8016bda:	001f      	movs	r7, r3
 8016bdc:	000c      	movs	r4, r1
 8016bde:	680b      	ldr	r3, [r1, #0]
 8016be0:	9002      	str	r0, [sp, #8]
 8016be2:	9203      	str	r2, [sp, #12]
 8016be4:	42be      	cmp	r6, r7
 8016be6:	d830      	bhi.n	8016c4a <__ssputs_r+0x76>
 8016be8:	210c      	movs	r1, #12
 8016bea:	5e62      	ldrsh	r2, [r4, r1]
 8016bec:	2190      	movs	r1, #144	@ 0x90
 8016bee:	00c9      	lsls	r1, r1, #3
 8016bf0:	420a      	tst	r2, r1
 8016bf2:	d028      	beq.n	8016c46 <__ssputs_r+0x72>
 8016bf4:	2003      	movs	r0, #3
 8016bf6:	6921      	ldr	r1, [r4, #16]
 8016bf8:	1a5b      	subs	r3, r3, r1
 8016bfa:	9301      	str	r3, [sp, #4]
 8016bfc:	6963      	ldr	r3, [r4, #20]
 8016bfe:	4343      	muls	r3, r0
 8016c00:	9801      	ldr	r0, [sp, #4]
 8016c02:	0fdd      	lsrs	r5, r3, #31
 8016c04:	18ed      	adds	r5, r5, r3
 8016c06:	1c7b      	adds	r3, r7, #1
 8016c08:	181b      	adds	r3, r3, r0
 8016c0a:	106d      	asrs	r5, r5, #1
 8016c0c:	42ab      	cmp	r3, r5
 8016c0e:	d900      	bls.n	8016c12 <__ssputs_r+0x3e>
 8016c10:	001d      	movs	r5, r3
 8016c12:	0552      	lsls	r2, r2, #21
 8016c14:	d528      	bpl.n	8016c68 <__ssputs_r+0x94>
 8016c16:	0029      	movs	r1, r5
 8016c18:	9802      	ldr	r0, [sp, #8]
 8016c1a:	f7ff fe7f 	bl	801691c <_malloc_r>
 8016c1e:	1e06      	subs	r6, r0, #0
 8016c20:	d02c      	beq.n	8016c7c <__ssputs_r+0xa8>
 8016c22:	9a01      	ldr	r2, [sp, #4]
 8016c24:	6921      	ldr	r1, [r4, #16]
 8016c26:	f7ff ff81 	bl	8016b2c <memcpy>
 8016c2a:	89a2      	ldrh	r2, [r4, #12]
 8016c2c:	4b18      	ldr	r3, [pc, #96]	@ (8016c90 <__ssputs_r+0xbc>)
 8016c2e:	401a      	ands	r2, r3
 8016c30:	2380      	movs	r3, #128	@ 0x80
 8016c32:	4313      	orrs	r3, r2
 8016c34:	81a3      	strh	r3, [r4, #12]
 8016c36:	9b01      	ldr	r3, [sp, #4]
 8016c38:	6126      	str	r6, [r4, #16]
 8016c3a:	18f6      	adds	r6, r6, r3
 8016c3c:	6026      	str	r6, [r4, #0]
 8016c3e:	003e      	movs	r6, r7
 8016c40:	6165      	str	r5, [r4, #20]
 8016c42:	1aed      	subs	r5, r5, r3
 8016c44:	60a5      	str	r5, [r4, #8]
 8016c46:	42be      	cmp	r6, r7
 8016c48:	d900      	bls.n	8016c4c <__ssputs_r+0x78>
 8016c4a:	003e      	movs	r6, r7
 8016c4c:	0032      	movs	r2, r6
 8016c4e:	9903      	ldr	r1, [sp, #12]
 8016c50:	6820      	ldr	r0, [r4, #0]
 8016c52:	f000 fa99 	bl	8017188 <memmove>
 8016c56:	2000      	movs	r0, #0
 8016c58:	68a3      	ldr	r3, [r4, #8]
 8016c5a:	1b9b      	subs	r3, r3, r6
 8016c5c:	60a3      	str	r3, [r4, #8]
 8016c5e:	6823      	ldr	r3, [r4, #0]
 8016c60:	199b      	adds	r3, r3, r6
 8016c62:	6023      	str	r3, [r4, #0]
 8016c64:	b005      	add	sp, #20
 8016c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c68:	002a      	movs	r2, r5
 8016c6a:	9802      	ldr	r0, [sp, #8]
 8016c6c:	f000 faa9 	bl	80171c2 <_realloc_r>
 8016c70:	1e06      	subs	r6, r0, #0
 8016c72:	d1e0      	bne.n	8016c36 <__ssputs_r+0x62>
 8016c74:	6921      	ldr	r1, [r4, #16]
 8016c76:	9802      	ldr	r0, [sp, #8]
 8016c78:	f7ff ff62 	bl	8016b40 <_free_r>
 8016c7c:	230c      	movs	r3, #12
 8016c7e:	2001      	movs	r0, #1
 8016c80:	9a02      	ldr	r2, [sp, #8]
 8016c82:	4240      	negs	r0, r0
 8016c84:	6013      	str	r3, [r2, #0]
 8016c86:	89a2      	ldrh	r2, [r4, #12]
 8016c88:	3334      	adds	r3, #52	@ 0x34
 8016c8a:	4313      	orrs	r3, r2
 8016c8c:	81a3      	strh	r3, [r4, #12]
 8016c8e:	e7e9      	b.n	8016c64 <__ssputs_r+0x90>
 8016c90:	fffffb7f 	.word	0xfffffb7f

08016c94 <_svfiprintf_r>:
 8016c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c96:	b0a1      	sub	sp, #132	@ 0x84
 8016c98:	9003      	str	r0, [sp, #12]
 8016c9a:	001d      	movs	r5, r3
 8016c9c:	898b      	ldrh	r3, [r1, #12]
 8016c9e:	000f      	movs	r7, r1
 8016ca0:	0016      	movs	r6, r2
 8016ca2:	061b      	lsls	r3, r3, #24
 8016ca4:	d511      	bpl.n	8016cca <_svfiprintf_r+0x36>
 8016ca6:	690b      	ldr	r3, [r1, #16]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d10e      	bne.n	8016cca <_svfiprintf_r+0x36>
 8016cac:	2140      	movs	r1, #64	@ 0x40
 8016cae:	f7ff fe35 	bl	801691c <_malloc_r>
 8016cb2:	6038      	str	r0, [r7, #0]
 8016cb4:	6138      	str	r0, [r7, #16]
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	d105      	bne.n	8016cc6 <_svfiprintf_r+0x32>
 8016cba:	230c      	movs	r3, #12
 8016cbc:	9a03      	ldr	r2, [sp, #12]
 8016cbe:	6013      	str	r3, [r2, #0]
 8016cc0:	2001      	movs	r0, #1
 8016cc2:	4240      	negs	r0, r0
 8016cc4:	e0cf      	b.n	8016e66 <_svfiprintf_r+0x1d2>
 8016cc6:	2340      	movs	r3, #64	@ 0x40
 8016cc8:	617b      	str	r3, [r7, #20]
 8016cca:	2300      	movs	r3, #0
 8016ccc:	ac08      	add	r4, sp, #32
 8016cce:	6163      	str	r3, [r4, #20]
 8016cd0:	3320      	adds	r3, #32
 8016cd2:	7663      	strb	r3, [r4, #25]
 8016cd4:	3310      	adds	r3, #16
 8016cd6:	76a3      	strb	r3, [r4, #26]
 8016cd8:	9507      	str	r5, [sp, #28]
 8016cda:	0035      	movs	r5, r6
 8016cdc:	782b      	ldrb	r3, [r5, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d001      	beq.n	8016ce6 <_svfiprintf_r+0x52>
 8016ce2:	2b25      	cmp	r3, #37	@ 0x25
 8016ce4:	d148      	bne.n	8016d78 <_svfiprintf_r+0xe4>
 8016ce6:	1bab      	subs	r3, r5, r6
 8016ce8:	9305      	str	r3, [sp, #20]
 8016cea:	42b5      	cmp	r5, r6
 8016cec:	d00b      	beq.n	8016d06 <_svfiprintf_r+0x72>
 8016cee:	0032      	movs	r2, r6
 8016cf0:	0039      	movs	r1, r7
 8016cf2:	9803      	ldr	r0, [sp, #12]
 8016cf4:	f7ff ff6e 	bl	8016bd4 <__ssputs_r>
 8016cf8:	3001      	adds	r0, #1
 8016cfa:	d100      	bne.n	8016cfe <_svfiprintf_r+0x6a>
 8016cfc:	e0ae      	b.n	8016e5c <_svfiprintf_r+0x1c8>
 8016cfe:	6963      	ldr	r3, [r4, #20]
 8016d00:	9a05      	ldr	r2, [sp, #20]
 8016d02:	189b      	adds	r3, r3, r2
 8016d04:	6163      	str	r3, [r4, #20]
 8016d06:	782b      	ldrb	r3, [r5, #0]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d100      	bne.n	8016d0e <_svfiprintf_r+0x7a>
 8016d0c:	e0a6      	b.n	8016e5c <_svfiprintf_r+0x1c8>
 8016d0e:	2201      	movs	r2, #1
 8016d10:	2300      	movs	r3, #0
 8016d12:	4252      	negs	r2, r2
 8016d14:	6062      	str	r2, [r4, #4]
 8016d16:	a904      	add	r1, sp, #16
 8016d18:	3254      	adds	r2, #84	@ 0x54
 8016d1a:	1852      	adds	r2, r2, r1
 8016d1c:	1c6e      	adds	r6, r5, #1
 8016d1e:	6023      	str	r3, [r4, #0]
 8016d20:	60e3      	str	r3, [r4, #12]
 8016d22:	60a3      	str	r3, [r4, #8]
 8016d24:	7013      	strb	r3, [r2, #0]
 8016d26:	65a3      	str	r3, [r4, #88]	@ 0x58
 8016d28:	4b54      	ldr	r3, [pc, #336]	@ (8016e7c <_svfiprintf_r+0x1e8>)
 8016d2a:	2205      	movs	r2, #5
 8016d2c:	0018      	movs	r0, r3
 8016d2e:	7831      	ldrb	r1, [r6, #0]
 8016d30:	9305      	str	r3, [sp, #20]
 8016d32:	f000 fa3b 	bl	80171ac <memchr>
 8016d36:	1c75      	adds	r5, r6, #1
 8016d38:	2800      	cmp	r0, #0
 8016d3a:	d11f      	bne.n	8016d7c <_svfiprintf_r+0xe8>
 8016d3c:	6822      	ldr	r2, [r4, #0]
 8016d3e:	06d3      	lsls	r3, r2, #27
 8016d40:	d504      	bpl.n	8016d4c <_svfiprintf_r+0xb8>
 8016d42:	2353      	movs	r3, #83	@ 0x53
 8016d44:	a904      	add	r1, sp, #16
 8016d46:	185b      	adds	r3, r3, r1
 8016d48:	2120      	movs	r1, #32
 8016d4a:	7019      	strb	r1, [r3, #0]
 8016d4c:	0713      	lsls	r3, r2, #28
 8016d4e:	d504      	bpl.n	8016d5a <_svfiprintf_r+0xc6>
 8016d50:	2353      	movs	r3, #83	@ 0x53
 8016d52:	a904      	add	r1, sp, #16
 8016d54:	185b      	adds	r3, r3, r1
 8016d56:	212b      	movs	r1, #43	@ 0x2b
 8016d58:	7019      	strb	r1, [r3, #0]
 8016d5a:	7833      	ldrb	r3, [r6, #0]
 8016d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d5e:	d016      	beq.n	8016d8e <_svfiprintf_r+0xfa>
 8016d60:	0035      	movs	r5, r6
 8016d62:	2100      	movs	r1, #0
 8016d64:	200a      	movs	r0, #10
 8016d66:	68e3      	ldr	r3, [r4, #12]
 8016d68:	782a      	ldrb	r2, [r5, #0]
 8016d6a:	1c6e      	adds	r6, r5, #1
 8016d6c:	3a30      	subs	r2, #48	@ 0x30
 8016d6e:	2a09      	cmp	r2, #9
 8016d70:	d950      	bls.n	8016e14 <_svfiprintf_r+0x180>
 8016d72:	2900      	cmp	r1, #0
 8016d74:	d111      	bne.n	8016d9a <_svfiprintf_r+0x106>
 8016d76:	e017      	b.n	8016da8 <_svfiprintf_r+0x114>
 8016d78:	3501      	adds	r5, #1
 8016d7a:	e7af      	b.n	8016cdc <_svfiprintf_r+0x48>
 8016d7c:	9b05      	ldr	r3, [sp, #20]
 8016d7e:	6822      	ldr	r2, [r4, #0]
 8016d80:	1ac0      	subs	r0, r0, r3
 8016d82:	2301      	movs	r3, #1
 8016d84:	4083      	lsls	r3, r0
 8016d86:	4313      	orrs	r3, r2
 8016d88:	002e      	movs	r6, r5
 8016d8a:	6023      	str	r3, [r4, #0]
 8016d8c:	e7cc      	b.n	8016d28 <_svfiprintf_r+0x94>
 8016d8e:	9b07      	ldr	r3, [sp, #28]
 8016d90:	1d19      	adds	r1, r3, #4
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	9107      	str	r1, [sp, #28]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	db01      	blt.n	8016d9e <_svfiprintf_r+0x10a>
 8016d9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d9c:	e004      	b.n	8016da8 <_svfiprintf_r+0x114>
 8016d9e:	425b      	negs	r3, r3
 8016da0:	60e3      	str	r3, [r4, #12]
 8016da2:	2302      	movs	r3, #2
 8016da4:	4313      	orrs	r3, r2
 8016da6:	6023      	str	r3, [r4, #0]
 8016da8:	782b      	ldrb	r3, [r5, #0]
 8016daa:	2b2e      	cmp	r3, #46	@ 0x2e
 8016dac:	d10c      	bne.n	8016dc8 <_svfiprintf_r+0x134>
 8016dae:	786b      	ldrb	r3, [r5, #1]
 8016db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8016db2:	d134      	bne.n	8016e1e <_svfiprintf_r+0x18a>
 8016db4:	9b07      	ldr	r3, [sp, #28]
 8016db6:	3502      	adds	r5, #2
 8016db8:	1d1a      	adds	r2, r3, #4
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	9207      	str	r2, [sp, #28]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	da01      	bge.n	8016dc6 <_svfiprintf_r+0x132>
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	425b      	negs	r3, r3
 8016dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dc8:	4e2d      	ldr	r6, [pc, #180]	@ (8016e80 <_svfiprintf_r+0x1ec>)
 8016dca:	2203      	movs	r2, #3
 8016dcc:	0030      	movs	r0, r6
 8016dce:	7829      	ldrb	r1, [r5, #0]
 8016dd0:	f000 f9ec 	bl	80171ac <memchr>
 8016dd4:	2800      	cmp	r0, #0
 8016dd6:	d006      	beq.n	8016de6 <_svfiprintf_r+0x152>
 8016dd8:	2340      	movs	r3, #64	@ 0x40
 8016dda:	1b80      	subs	r0, r0, r6
 8016ddc:	4083      	lsls	r3, r0
 8016dde:	6822      	ldr	r2, [r4, #0]
 8016de0:	3501      	adds	r5, #1
 8016de2:	4313      	orrs	r3, r2
 8016de4:	6023      	str	r3, [r4, #0]
 8016de6:	7829      	ldrb	r1, [r5, #0]
 8016de8:	2206      	movs	r2, #6
 8016dea:	4826      	ldr	r0, [pc, #152]	@ (8016e84 <_svfiprintf_r+0x1f0>)
 8016dec:	1c6e      	adds	r6, r5, #1
 8016dee:	7621      	strb	r1, [r4, #24]
 8016df0:	f000 f9dc 	bl	80171ac <memchr>
 8016df4:	2800      	cmp	r0, #0
 8016df6:	d038      	beq.n	8016e6a <_svfiprintf_r+0x1d6>
 8016df8:	4b23      	ldr	r3, [pc, #140]	@ (8016e88 <_svfiprintf_r+0x1f4>)
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d122      	bne.n	8016e44 <_svfiprintf_r+0x1b0>
 8016dfe:	2207      	movs	r2, #7
 8016e00:	9b07      	ldr	r3, [sp, #28]
 8016e02:	3307      	adds	r3, #7
 8016e04:	4393      	bics	r3, r2
 8016e06:	3308      	adds	r3, #8
 8016e08:	9307      	str	r3, [sp, #28]
 8016e0a:	6963      	ldr	r3, [r4, #20]
 8016e0c:	9a04      	ldr	r2, [sp, #16]
 8016e0e:	189b      	adds	r3, r3, r2
 8016e10:	6163      	str	r3, [r4, #20]
 8016e12:	e762      	b.n	8016cda <_svfiprintf_r+0x46>
 8016e14:	4343      	muls	r3, r0
 8016e16:	0035      	movs	r5, r6
 8016e18:	2101      	movs	r1, #1
 8016e1a:	189b      	adds	r3, r3, r2
 8016e1c:	e7a4      	b.n	8016d68 <_svfiprintf_r+0xd4>
 8016e1e:	2300      	movs	r3, #0
 8016e20:	200a      	movs	r0, #10
 8016e22:	0019      	movs	r1, r3
 8016e24:	3501      	adds	r5, #1
 8016e26:	6063      	str	r3, [r4, #4]
 8016e28:	782a      	ldrb	r2, [r5, #0]
 8016e2a:	1c6e      	adds	r6, r5, #1
 8016e2c:	3a30      	subs	r2, #48	@ 0x30
 8016e2e:	2a09      	cmp	r2, #9
 8016e30:	d903      	bls.n	8016e3a <_svfiprintf_r+0x1a6>
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d0c8      	beq.n	8016dc8 <_svfiprintf_r+0x134>
 8016e36:	9109      	str	r1, [sp, #36]	@ 0x24
 8016e38:	e7c6      	b.n	8016dc8 <_svfiprintf_r+0x134>
 8016e3a:	4341      	muls	r1, r0
 8016e3c:	0035      	movs	r5, r6
 8016e3e:	2301      	movs	r3, #1
 8016e40:	1889      	adds	r1, r1, r2
 8016e42:	e7f1      	b.n	8016e28 <_svfiprintf_r+0x194>
 8016e44:	aa07      	add	r2, sp, #28
 8016e46:	9200      	str	r2, [sp, #0]
 8016e48:	0021      	movs	r1, r4
 8016e4a:	003a      	movs	r2, r7
 8016e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8016e8c <_svfiprintf_r+0x1f8>)
 8016e4e:	9803      	ldr	r0, [sp, #12]
 8016e50:	e000      	b.n	8016e54 <_svfiprintf_r+0x1c0>
 8016e52:	bf00      	nop
 8016e54:	9004      	str	r0, [sp, #16]
 8016e56:	9b04      	ldr	r3, [sp, #16]
 8016e58:	3301      	adds	r3, #1
 8016e5a:	d1d6      	bne.n	8016e0a <_svfiprintf_r+0x176>
 8016e5c:	89bb      	ldrh	r3, [r7, #12]
 8016e5e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8016e60:	065b      	lsls	r3, r3, #25
 8016e62:	d500      	bpl.n	8016e66 <_svfiprintf_r+0x1d2>
 8016e64:	e72c      	b.n	8016cc0 <_svfiprintf_r+0x2c>
 8016e66:	b021      	add	sp, #132	@ 0x84
 8016e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e6a:	aa07      	add	r2, sp, #28
 8016e6c:	9200      	str	r2, [sp, #0]
 8016e6e:	0021      	movs	r1, r4
 8016e70:	003a      	movs	r2, r7
 8016e72:	4b06      	ldr	r3, [pc, #24]	@ (8016e8c <_svfiprintf_r+0x1f8>)
 8016e74:	9803      	ldr	r0, [sp, #12]
 8016e76:	f000 f87b 	bl	8016f70 <_printf_i>
 8016e7a:	e7eb      	b.n	8016e54 <_svfiprintf_r+0x1c0>
 8016e7c:	0801757c 	.word	0x0801757c
 8016e80:	08017582 	.word	0x08017582
 8016e84:	08017586 	.word	0x08017586
 8016e88:	00000000 	.word	0x00000000
 8016e8c:	08016bd5 	.word	0x08016bd5

08016e90 <_printf_common>:
 8016e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e92:	0016      	movs	r6, r2
 8016e94:	9301      	str	r3, [sp, #4]
 8016e96:	688a      	ldr	r2, [r1, #8]
 8016e98:	690b      	ldr	r3, [r1, #16]
 8016e9a:	000c      	movs	r4, r1
 8016e9c:	9000      	str	r0, [sp, #0]
 8016e9e:	4293      	cmp	r3, r2
 8016ea0:	da00      	bge.n	8016ea4 <_printf_common+0x14>
 8016ea2:	0013      	movs	r3, r2
 8016ea4:	0022      	movs	r2, r4
 8016ea6:	6033      	str	r3, [r6, #0]
 8016ea8:	3243      	adds	r2, #67	@ 0x43
 8016eaa:	7812      	ldrb	r2, [r2, #0]
 8016eac:	2a00      	cmp	r2, #0
 8016eae:	d001      	beq.n	8016eb4 <_printf_common+0x24>
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	6033      	str	r3, [r6, #0]
 8016eb4:	6823      	ldr	r3, [r4, #0]
 8016eb6:	069b      	lsls	r3, r3, #26
 8016eb8:	d502      	bpl.n	8016ec0 <_printf_common+0x30>
 8016eba:	6833      	ldr	r3, [r6, #0]
 8016ebc:	3302      	adds	r3, #2
 8016ebe:	6033      	str	r3, [r6, #0]
 8016ec0:	6822      	ldr	r2, [r4, #0]
 8016ec2:	2306      	movs	r3, #6
 8016ec4:	0015      	movs	r5, r2
 8016ec6:	401d      	ands	r5, r3
 8016ec8:	421a      	tst	r2, r3
 8016eca:	d027      	beq.n	8016f1c <_printf_common+0x8c>
 8016ecc:	0023      	movs	r3, r4
 8016ece:	3343      	adds	r3, #67	@ 0x43
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	1e5a      	subs	r2, r3, #1
 8016ed4:	4193      	sbcs	r3, r2
 8016ed6:	6822      	ldr	r2, [r4, #0]
 8016ed8:	0692      	lsls	r2, r2, #26
 8016eda:	d430      	bmi.n	8016f3e <_printf_common+0xae>
 8016edc:	0022      	movs	r2, r4
 8016ede:	9901      	ldr	r1, [sp, #4]
 8016ee0:	9800      	ldr	r0, [sp, #0]
 8016ee2:	9d08      	ldr	r5, [sp, #32]
 8016ee4:	3243      	adds	r2, #67	@ 0x43
 8016ee6:	47a8      	blx	r5
 8016ee8:	3001      	adds	r0, #1
 8016eea:	d025      	beq.n	8016f38 <_printf_common+0xa8>
 8016eec:	2206      	movs	r2, #6
 8016eee:	6823      	ldr	r3, [r4, #0]
 8016ef0:	2500      	movs	r5, #0
 8016ef2:	4013      	ands	r3, r2
 8016ef4:	2b04      	cmp	r3, #4
 8016ef6:	d105      	bne.n	8016f04 <_printf_common+0x74>
 8016ef8:	6833      	ldr	r3, [r6, #0]
 8016efa:	68e5      	ldr	r5, [r4, #12]
 8016efc:	1aed      	subs	r5, r5, r3
 8016efe:	43eb      	mvns	r3, r5
 8016f00:	17db      	asrs	r3, r3, #31
 8016f02:	401d      	ands	r5, r3
 8016f04:	68a3      	ldr	r3, [r4, #8]
 8016f06:	6922      	ldr	r2, [r4, #16]
 8016f08:	4293      	cmp	r3, r2
 8016f0a:	dd01      	ble.n	8016f10 <_printf_common+0x80>
 8016f0c:	1a9b      	subs	r3, r3, r2
 8016f0e:	18ed      	adds	r5, r5, r3
 8016f10:	2600      	movs	r6, #0
 8016f12:	42b5      	cmp	r5, r6
 8016f14:	d120      	bne.n	8016f58 <_printf_common+0xc8>
 8016f16:	2000      	movs	r0, #0
 8016f18:	e010      	b.n	8016f3c <_printf_common+0xac>
 8016f1a:	3501      	adds	r5, #1
 8016f1c:	68e3      	ldr	r3, [r4, #12]
 8016f1e:	6832      	ldr	r2, [r6, #0]
 8016f20:	1a9b      	subs	r3, r3, r2
 8016f22:	42ab      	cmp	r3, r5
 8016f24:	ddd2      	ble.n	8016ecc <_printf_common+0x3c>
 8016f26:	0022      	movs	r2, r4
 8016f28:	2301      	movs	r3, #1
 8016f2a:	9901      	ldr	r1, [sp, #4]
 8016f2c:	9800      	ldr	r0, [sp, #0]
 8016f2e:	9f08      	ldr	r7, [sp, #32]
 8016f30:	3219      	adds	r2, #25
 8016f32:	47b8      	blx	r7
 8016f34:	3001      	adds	r0, #1
 8016f36:	d1f0      	bne.n	8016f1a <_printf_common+0x8a>
 8016f38:	2001      	movs	r0, #1
 8016f3a:	4240      	negs	r0, r0
 8016f3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016f3e:	2030      	movs	r0, #48	@ 0x30
 8016f40:	18e1      	adds	r1, r4, r3
 8016f42:	3143      	adds	r1, #67	@ 0x43
 8016f44:	7008      	strb	r0, [r1, #0]
 8016f46:	0021      	movs	r1, r4
 8016f48:	1c5a      	adds	r2, r3, #1
 8016f4a:	3145      	adds	r1, #69	@ 0x45
 8016f4c:	7809      	ldrb	r1, [r1, #0]
 8016f4e:	18a2      	adds	r2, r4, r2
 8016f50:	3243      	adds	r2, #67	@ 0x43
 8016f52:	3302      	adds	r3, #2
 8016f54:	7011      	strb	r1, [r2, #0]
 8016f56:	e7c1      	b.n	8016edc <_printf_common+0x4c>
 8016f58:	0022      	movs	r2, r4
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	9901      	ldr	r1, [sp, #4]
 8016f5e:	9800      	ldr	r0, [sp, #0]
 8016f60:	9f08      	ldr	r7, [sp, #32]
 8016f62:	321a      	adds	r2, #26
 8016f64:	47b8      	blx	r7
 8016f66:	3001      	adds	r0, #1
 8016f68:	d0e6      	beq.n	8016f38 <_printf_common+0xa8>
 8016f6a:	3601      	adds	r6, #1
 8016f6c:	e7d1      	b.n	8016f12 <_printf_common+0x82>
	...

08016f70 <_printf_i>:
 8016f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f72:	b08b      	sub	sp, #44	@ 0x2c
 8016f74:	9206      	str	r2, [sp, #24]
 8016f76:	000a      	movs	r2, r1
 8016f78:	3243      	adds	r2, #67	@ 0x43
 8016f7a:	9307      	str	r3, [sp, #28]
 8016f7c:	9005      	str	r0, [sp, #20]
 8016f7e:	9203      	str	r2, [sp, #12]
 8016f80:	7e0a      	ldrb	r2, [r1, #24]
 8016f82:	000c      	movs	r4, r1
 8016f84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f86:	2a78      	cmp	r2, #120	@ 0x78
 8016f88:	d809      	bhi.n	8016f9e <_printf_i+0x2e>
 8016f8a:	2a62      	cmp	r2, #98	@ 0x62
 8016f8c:	d80b      	bhi.n	8016fa6 <_printf_i+0x36>
 8016f8e:	2a00      	cmp	r2, #0
 8016f90:	d100      	bne.n	8016f94 <_printf_i+0x24>
 8016f92:	e0ba      	b.n	801710a <_printf_i+0x19a>
 8016f94:	497a      	ldr	r1, [pc, #488]	@ (8017180 <_printf_i+0x210>)
 8016f96:	9104      	str	r1, [sp, #16]
 8016f98:	2a58      	cmp	r2, #88	@ 0x58
 8016f9a:	d100      	bne.n	8016f9e <_printf_i+0x2e>
 8016f9c:	e08e      	b.n	80170bc <_printf_i+0x14c>
 8016f9e:	0025      	movs	r5, r4
 8016fa0:	3542      	adds	r5, #66	@ 0x42
 8016fa2:	702a      	strb	r2, [r5, #0]
 8016fa4:	e022      	b.n	8016fec <_printf_i+0x7c>
 8016fa6:	0010      	movs	r0, r2
 8016fa8:	3863      	subs	r0, #99	@ 0x63
 8016faa:	2815      	cmp	r0, #21
 8016fac:	d8f7      	bhi.n	8016f9e <_printf_i+0x2e>
 8016fae:	f7ef f915 	bl	80061dc <__gnu_thumb1_case_shi>
 8016fb2:	0016      	.short	0x0016
 8016fb4:	fff6001f 	.word	0xfff6001f
 8016fb8:	fff6fff6 	.word	0xfff6fff6
 8016fbc:	001ffff6 	.word	0x001ffff6
 8016fc0:	fff6fff6 	.word	0xfff6fff6
 8016fc4:	fff6fff6 	.word	0xfff6fff6
 8016fc8:	0036009f 	.word	0x0036009f
 8016fcc:	fff6007e 	.word	0xfff6007e
 8016fd0:	00b0fff6 	.word	0x00b0fff6
 8016fd4:	0036fff6 	.word	0x0036fff6
 8016fd8:	fff6fff6 	.word	0xfff6fff6
 8016fdc:	0082      	.short	0x0082
 8016fde:	0025      	movs	r5, r4
 8016fe0:	681a      	ldr	r2, [r3, #0]
 8016fe2:	3542      	adds	r5, #66	@ 0x42
 8016fe4:	1d11      	adds	r1, r2, #4
 8016fe6:	6019      	str	r1, [r3, #0]
 8016fe8:	6813      	ldr	r3, [r2, #0]
 8016fea:	702b      	strb	r3, [r5, #0]
 8016fec:	2301      	movs	r3, #1
 8016fee:	e09e      	b.n	801712e <_printf_i+0x1be>
 8016ff0:	6818      	ldr	r0, [r3, #0]
 8016ff2:	6809      	ldr	r1, [r1, #0]
 8016ff4:	1d02      	adds	r2, r0, #4
 8016ff6:	060d      	lsls	r5, r1, #24
 8016ff8:	d50b      	bpl.n	8017012 <_printf_i+0xa2>
 8016ffa:	6806      	ldr	r6, [r0, #0]
 8016ffc:	601a      	str	r2, [r3, #0]
 8016ffe:	2e00      	cmp	r6, #0
 8017000:	da03      	bge.n	801700a <_printf_i+0x9a>
 8017002:	232d      	movs	r3, #45	@ 0x2d
 8017004:	9a03      	ldr	r2, [sp, #12]
 8017006:	4276      	negs	r6, r6
 8017008:	7013      	strb	r3, [r2, #0]
 801700a:	4b5d      	ldr	r3, [pc, #372]	@ (8017180 <_printf_i+0x210>)
 801700c:	270a      	movs	r7, #10
 801700e:	9304      	str	r3, [sp, #16]
 8017010:	e018      	b.n	8017044 <_printf_i+0xd4>
 8017012:	6806      	ldr	r6, [r0, #0]
 8017014:	601a      	str	r2, [r3, #0]
 8017016:	0649      	lsls	r1, r1, #25
 8017018:	d5f1      	bpl.n	8016ffe <_printf_i+0x8e>
 801701a:	b236      	sxth	r6, r6
 801701c:	e7ef      	b.n	8016ffe <_printf_i+0x8e>
 801701e:	6808      	ldr	r0, [r1, #0]
 8017020:	6819      	ldr	r1, [r3, #0]
 8017022:	c940      	ldmia	r1!, {r6}
 8017024:	0605      	lsls	r5, r0, #24
 8017026:	d402      	bmi.n	801702e <_printf_i+0xbe>
 8017028:	0640      	lsls	r0, r0, #25
 801702a:	d500      	bpl.n	801702e <_printf_i+0xbe>
 801702c:	b2b6      	uxth	r6, r6
 801702e:	6019      	str	r1, [r3, #0]
 8017030:	4b53      	ldr	r3, [pc, #332]	@ (8017180 <_printf_i+0x210>)
 8017032:	270a      	movs	r7, #10
 8017034:	9304      	str	r3, [sp, #16]
 8017036:	2a6f      	cmp	r2, #111	@ 0x6f
 8017038:	d100      	bne.n	801703c <_printf_i+0xcc>
 801703a:	3f02      	subs	r7, #2
 801703c:	0023      	movs	r3, r4
 801703e:	2200      	movs	r2, #0
 8017040:	3343      	adds	r3, #67	@ 0x43
 8017042:	701a      	strb	r2, [r3, #0]
 8017044:	6863      	ldr	r3, [r4, #4]
 8017046:	60a3      	str	r3, [r4, #8]
 8017048:	2b00      	cmp	r3, #0
 801704a:	db06      	blt.n	801705a <_printf_i+0xea>
 801704c:	2104      	movs	r1, #4
 801704e:	6822      	ldr	r2, [r4, #0]
 8017050:	9d03      	ldr	r5, [sp, #12]
 8017052:	438a      	bics	r2, r1
 8017054:	6022      	str	r2, [r4, #0]
 8017056:	4333      	orrs	r3, r6
 8017058:	d00c      	beq.n	8017074 <_printf_i+0x104>
 801705a:	9d03      	ldr	r5, [sp, #12]
 801705c:	0030      	movs	r0, r6
 801705e:	0039      	movs	r1, r7
 8017060:	f7ef f94c 	bl	80062fc <__aeabi_uidivmod>
 8017064:	9b04      	ldr	r3, [sp, #16]
 8017066:	3d01      	subs	r5, #1
 8017068:	5c5b      	ldrb	r3, [r3, r1]
 801706a:	702b      	strb	r3, [r5, #0]
 801706c:	0033      	movs	r3, r6
 801706e:	0006      	movs	r6, r0
 8017070:	429f      	cmp	r7, r3
 8017072:	d9f3      	bls.n	801705c <_printf_i+0xec>
 8017074:	2f08      	cmp	r7, #8
 8017076:	d109      	bne.n	801708c <_printf_i+0x11c>
 8017078:	6823      	ldr	r3, [r4, #0]
 801707a:	07db      	lsls	r3, r3, #31
 801707c:	d506      	bpl.n	801708c <_printf_i+0x11c>
 801707e:	6862      	ldr	r2, [r4, #4]
 8017080:	6923      	ldr	r3, [r4, #16]
 8017082:	429a      	cmp	r2, r3
 8017084:	dc02      	bgt.n	801708c <_printf_i+0x11c>
 8017086:	2330      	movs	r3, #48	@ 0x30
 8017088:	3d01      	subs	r5, #1
 801708a:	702b      	strb	r3, [r5, #0]
 801708c:	9b03      	ldr	r3, [sp, #12]
 801708e:	1b5b      	subs	r3, r3, r5
 8017090:	6123      	str	r3, [r4, #16]
 8017092:	9b07      	ldr	r3, [sp, #28]
 8017094:	0021      	movs	r1, r4
 8017096:	9300      	str	r3, [sp, #0]
 8017098:	9805      	ldr	r0, [sp, #20]
 801709a:	9b06      	ldr	r3, [sp, #24]
 801709c:	aa09      	add	r2, sp, #36	@ 0x24
 801709e:	f7ff fef7 	bl	8016e90 <_printf_common>
 80170a2:	3001      	adds	r0, #1
 80170a4:	d148      	bne.n	8017138 <_printf_i+0x1c8>
 80170a6:	2001      	movs	r0, #1
 80170a8:	4240      	negs	r0, r0
 80170aa:	b00b      	add	sp, #44	@ 0x2c
 80170ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170ae:	2220      	movs	r2, #32
 80170b0:	6809      	ldr	r1, [r1, #0]
 80170b2:	430a      	orrs	r2, r1
 80170b4:	6022      	str	r2, [r4, #0]
 80170b6:	2278      	movs	r2, #120	@ 0x78
 80170b8:	4932      	ldr	r1, [pc, #200]	@ (8017184 <_printf_i+0x214>)
 80170ba:	9104      	str	r1, [sp, #16]
 80170bc:	0021      	movs	r1, r4
 80170be:	3145      	adds	r1, #69	@ 0x45
 80170c0:	700a      	strb	r2, [r1, #0]
 80170c2:	6819      	ldr	r1, [r3, #0]
 80170c4:	6822      	ldr	r2, [r4, #0]
 80170c6:	c940      	ldmia	r1!, {r6}
 80170c8:	0610      	lsls	r0, r2, #24
 80170ca:	d402      	bmi.n	80170d2 <_printf_i+0x162>
 80170cc:	0650      	lsls	r0, r2, #25
 80170ce:	d500      	bpl.n	80170d2 <_printf_i+0x162>
 80170d0:	b2b6      	uxth	r6, r6
 80170d2:	6019      	str	r1, [r3, #0]
 80170d4:	07d3      	lsls	r3, r2, #31
 80170d6:	d502      	bpl.n	80170de <_printf_i+0x16e>
 80170d8:	2320      	movs	r3, #32
 80170da:	4313      	orrs	r3, r2
 80170dc:	6023      	str	r3, [r4, #0]
 80170de:	2e00      	cmp	r6, #0
 80170e0:	d001      	beq.n	80170e6 <_printf_i+0x176>
 80170e2:	2710      	movs	r7, #16
 80170e4:	e7aa      	b.n	801703c <_printf_i+0xcc>
 80170e6:	2220      	movs	r2, #32
 80170e8:	6823      	ldr	r3, [r4, #0]
 80170ea:	4393      	bics	r3, r2
 80170ec:	6023      	str	r3, [r4, #0]
 80170ee:	e7f8      	b.n	80170e2 <_printf_i+0x172>
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	680d      	ldr	r5, [r1, #0]
 80170f4:	1d10      	adds	r0, r2, #4
 80170f6:	6949      	ldr	r1, [r1, #20]
 80170f8:	6018      	str	r0, [r3, #0]
 80170fa:	6813      	ldr	r3, [r2, #0]
 80170fc:	062e      	lsls	r6, r5, #24
 80170fe:	d501      	bpl.n	8017104 <_printf_i+0x194>
 8017100:	6019      	str	r1, [r3, #0]
 8017102:	e002      	b.n	801710a <_printf_i+0x19a>
 8017104:	066d      	lsls	r5, r5, #25
 8017106:	d5fb      	bpl.n	8017100 <_printf_i+0x190>
 8017108:	8019      	strh	r1, [r3, #0]
 801710a:	2300      	movs	r3, #0
 801710c:	9d03      	ldr	r5, [sp, #12]
 801710e:	6123      	str	r3, [r4, #16]
 8017110:	e7bf      	b.n	8017092 <_printf_i+0x122>
 8017112:	681a      	ldr	r2, [r3, #0]
 8017114:	1d11      	adds	r1, r2, #4
 8017116:	6019      	str	r1, [r3, #0]
 8017118:	6815      	ldr	r5, [r2, #0]
 801711a:	2100      	movs	r1, #0
 801711c:	0028      	movs	r0, r5
 801711e:	6862      	ldr	r2, [r4, #4]
 8017120:	f000 f844 	bl	80171ac <memchr>
 8017124:	2800      	cmp	r0, #0
 8017126:	d001      	beq.n	801712c <_printf_i+0x1bc>
 8017128:	1b40      	subs	r0, r0, r5
 801712a:	6060      	str	r0, [r4, #4]
 801712c:	6863      	ldr	r3, [r4, #4]
 801712e:	6123      	str	r3, [r4, #16]
 8017130:	2300      	movs	r3, #0
 8017132:	9a03      	ldr	r2, [sp, #12]
 8017134:	7013      	strb	r3, [r2, #0]
 8017136:	e7ac      	b.n	8017092 <_printf_i+0x122>
 8017138:	002a      	movs	r2, r5
 801713a:	6923      	ldr	r3, [r4, #16]
 801713c:	9906      	ldr	r1, [sp, #24]
 801713e:	9805      	ldr	r0, [sp, #20]
 8017140:	9d07      	ldr	r5, [sp, #28]
 8017142:	47a8      	blx	r5
 8017144:	3001      	adds	r0, #1
 8017146:	d0ae      	beq.n	80170a6 <_printf_i+0x136>
 8017148:	6823      	ldr	r3, [r4, #0]
 801714a:	079b      	lsls	r3, r3, #30
 801714c:	d415      	bmi.n	801717a <_printf_i+0x20a>
 801714e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017150:	68e0      	ldr	r0, [r4, #12]
 8017152:	4298      	cmp	r0, r3
 8017154:	daa9      	bge.n	80170aa <_printf_i+0x13a>
 8017156:	0018      	movs	r0, r3
 8017158:	e7a7      	b.n	80170aa <_printf_i+0x13a>
 801715a:	0022      	movs	r2, r4
 801715c:	2301      	movs	r3, #1
 801715e:	9906      	ldr	r1, [sp, #24]
 8017160:	9805      	ldr	r0, [sp, #20]
 8017162:	9e07      	ldr	r6, [sp, #28]
 8017164:	3219      	adds	r2, #25
 8017166:	47b0      	blx	r6
 8017168:	3001      	adds	r0, #1
 801716a:	d09c      	beq.n	80170a6 <_printf_i+0x136>
 801716c:	3501      	adds	r5, #1
 801716e:	68e3      	ldr	r3, [r4, #12]
 8017170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017172:	1a9b      	subs	r3, r3, r2
 8017174:	42ab      	cmp	r3, r5
 8017176:	dcf0      	bgt.n	801715a <_printf_i+0x1ea>
 8017178:	e7e9      	b.n	801714e <_printf_i+0x1de>
 801717a:	2500      	movs	r5, #0
 801717c:	e7f7      	b.n	801716e <_printf_i+0x1fe>
 801717e:	46c0      	nop			@ (mov r8, r8)
 8017180:	0801758d 	.word	0x0801758d
 8017184:	0801759e 	.word	0x0801759e

08017188 <memmove>:
 8017188:	b510      	push	{r4, lr}
 801718a:	4288      	cmp	r0, r1
 801718c:	d902      	bls.n	8017194 <memmove+0xc>
 801718e:	188b      	adds	r3, r1, r2
 8017190:	4298      	cmp	r0, r3
 8017192:	d308      	bcc.n	80171a6 <memmove+0x1e>
 8017194:	2300      	movs	r3, #0
 8017196:	429a      	cmp	r2, r3
 8017198:	d007      	beq.n	80171aa <memmove+0x22>
 801719a:	5ccc      	ldrb	r4, [r1, r3]
 801719c:	54c4      	strb	r4, [r0, r3]
 801719e:	3301      	adds	r3, #1
 80171a0:	e7f9      	b.n	8017196 <memmove+0xe>
 80171a2:	5c8b      	ldrb	r3, [r1, r2]
 80171a4:	5483      	strb	r3, [r0, r2]
 80171a6:	3a01      	subs	r2, #1
 80171a8:	d2fb      	bcs.n	80171a2 <memmove+0x1a>
 80171aa:	bd10      	pop	{r4, pc}

080171ac <memchr>:
 80171ac:	b2c9      	uxtb	r1, r1
 80171ae:	1882      	adds	r2, r0, r2
 80171b0:	4290      	cmp	r0, r2
 80171b2:	d101      	bne.n	80171b8 <memchr+0xc>
 80171b4:	2000      	movs	r0, #0
 80171b6:	4770      	bx	lr
 80171b8:	7803      	ldrb	r3, [r0, #0]
 80171ba:	428b      	cmp	r3, r1
 80171bc:	d0fb      	beq.n	80171b6 <memchr+0xa>
 80171be:	3001      	adds	r0, #1
 80171c0:	e7f6      	b.n	80171b0 <memchr+0x4>

080171c2 <_realloc_r>:
 80171c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171c4:	0006      	movs	r6, r0
 80171c6:	000c      	movs	r4, r1
 80171c8:	0015      	movs	r5, r2
 80171ca:	2900      	cmp	r1, #0
 80171cc:	d105      	bne.n	80171da <_realloc_r+0x18>
 80171ce:	0011      	movs	r1, r2
 80171d0:	f7ff fba4 	bl	801691c <_malloc_r>
 80171d4:	0004      	movs	r4, r0
 80171d6:	0020      	movs	r0, r4
 80171d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80171da:	2a00      	cmp	r2, #0
 80171dc:	d103      	bne.n	80171e6 <_realloc_r+0x24>
 80171de:	f7ff fcaf 	bl	8016b40 <_free_r>
 80171e2:	002c      	movs	r4, r5
 80171e4:	e7f7      	b.n	80171d6 <_realloc_r+0x14>
 80171e6:	f000 f81c 	bl	8017222 <_malloc_usable_size_r>
 80171ea:	0007      	movs	r7, r0
 80171ec:	4285      	cmp	r5, r0
 80171ee:	d802      	bhi.n	80171f6 <_realloc_r+0x34>
 80171f0:	0843      	lsrs	r3, r0, #1
 80171f2:	42ab      	cmp	r3, r5
 80171f4:	d3ef      	bcc.n	80171d6 <_realloc_r+0x14>
 80171f6:	0029      	movs	r1, r5
 80171f8:	0030      	movs	r0, r6
 80171fa:	f7ff fb8f 	bl	801691c <_malloc_r>
 80171fe:	9001      	str	r0, [sp, #4]
 8017200:	2800      	cmp	r0, #0
 8017202:	d101      	bne.n	8017208 <_realloc_r+0x46>
 8017204:	9c01      	ldr	r4, [sp, #4]
 8017206:	e7e6      	b.n	80171d6 <_realloc_r+0x14>
 8017208:	002a      	movs	r2, r5
 801720a:	42bd      	cmp	r5, r7
 801720c:	d900      	bls.n	8017210 <_realloc_r+0x4e>
 801720e:	003a      	movs	r2, r7
 8017210:	0021      	movs	r1, r4
 8017212:	9801      	ldr	r0, [sp, #4]
 8017214:	f7ff fc8a 	bl	8016b2c <memcpy>
 8017218:	0021      	movs	r1, r4
 801721a:	0030      	movs	r0, r6
 801721c:	f7ff fc90 	bl	8016b40 <_free_r>
 8017220:	e7f0      	b.n	8017204 <_realloc_r+0x42>

08017222 <_malloc_usable_size_r>:
 8017222:	1f0b      	subs	r3, r1, #4
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	1f18      	subs	r0, r3, #4
 8017228:	2b00      	cmp	r3, #0
 801722a:	da01      	bge.n	8017230 <_malloc_usable_size_r+0xe>
 801722c:	580b      	ldr	r3, [r1, r0]
 801722e:	18c0      	adds	r0, r0, r3
 8017230:	4770      	bx	lr
	...

08017234 <_init>:
 8017234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017236:	46c0      	nop			@ (mov r8, r8)
 8017238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801723a:	bc08      	pop	{r3}
 801723c:	469e      	mov	lr, r3
 801723e:	4770      	bx	lr

08017240 <_fini>:
 8017240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017242:	46c0      	nop			@ (mov r8, r8)
 8017244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017246:	bc08      	pop	{r3}
 8017248:	469e      	mov	lr, r3
 801724a:	4770      	bx	lr
